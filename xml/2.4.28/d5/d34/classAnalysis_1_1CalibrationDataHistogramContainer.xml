<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kind="class" prot="public">
    <compoundname>Analysis::CalibrationDataHistogramContainer</compoundname>
    <basecompoundref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" prot="public" virt="non-virtual">Analysis::CalibrationDataContainer</basecompoundref>
    <derivedcompoundref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" prot="public" virt="non-virtual">Analysis::CalibrationDataMappedHistogramContainer</derivedcompoundref>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="no">CalibrationDataContainer.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" prot="protected" static="no" mutable="yes">
        <type>std::map&lt; unsigned int, std::vector&lt; double &gt; &gt;</type>
        <definition>std::map&lt;unsigned int, std::vector&lt;double&gt; &gt; Analysis::CalibrationDataHistogramContainer::m_binBoundaries</definition>
        <argsstring></argsstring>
        <name>m_binBoundaries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cache for bin boundary information </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="279" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ac2b3c21c30969fada856cf774202eedc" prot="private" static="no" mutable="no">
        <type>THashList</type>
        <definition>THashList Analysis::CalibrationDataHistogramContainer::m_uncorrelatedSyst</definition>
        <argsstring></argsstring>
        <name>m_uncorrelatedSyst</name>
        <briefdescription>
<para>no need to persistify </para>        </briefdescription>
        <detaileddescription>
<para>list here the _systematic_ uncertainties that are not correlated from bin to bin </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="284" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a685d9f52516eb4098edca1fdd21fcd6d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Analysis::CalibrationDataHistogramContainer::m_interpolate</definition>
        <argsstring></argsstring>
        <name>m_interpolate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If true, interpolate between bins rather than doing a straight bin-wise evaluation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="287" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1af6784495fc7fc147aa405fdb42f76f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataHistogramContainer::CalibrationDataHistogramContainer</definition>
        <argsstring>(const char *name=&quot;default&quot;)</argsstring>
        <name>CalibrationDataHistogramContainer</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;default&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="237"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ae8451700122ef7645a689d67d1bf05fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CalibrationDataHistogramContainer::~CalibrationDataHistogramContainer</definition>
        <argsstring>()</argsstring>
        <name>~CalibrationDataHistogramContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataHistogramContainer::getResult</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result, TObject *obj=0, bool extrapolate=false) const </argsstring>
        <name>getResult</name>
        <reimplements refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd">getResult</reimplements>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7">getResult</reimplementedby>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested result (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that extrapolation applies (should only be relevant when using eigenvector variations) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="240" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="507" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataHistogramContainer::getStatUncertainty</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result) const </argsstring>
        <name>getStatUncertainty</name>
        <reimplements refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6">getStatUncertainty</reimplements>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f">getStatUncertainty</reimplementedby>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration statistical uncertainty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested statistical uncertainty </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) Note the changed signature compared to <ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651" kindref="member">getUncertainty()</ref>, <ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75" kindref="member">getResult()</ref> etc.: this is because the statistical uncertainty computation always needs the result object, and only in case of the function interface also the covariance matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="241" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="554" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataHistogramContainer::getUncertainty</definition>
        <argsstring>(const std::string &amp;unc, const CalibrationDataVariables &amp;x, UncertaintyResult &amp;result, TObject *obj=0) const </argsstring>
        <name>getUncertainty</name>
        <reimplements refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2">getUncertainty</reimplements>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996">getUncertainty</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UncertaintyResult &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration uncertainty due to the given source. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unc</parametername>
</parameternamelist>
<parameterdescription>
<para>uncertainty specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested uncertainty (for both positive and negative variation, if available) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested uncertainty information (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="243" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="595" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad3bfbdca48da85a5bc6cb3c14454753d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CalibrationDataHistogramContainer::isBinCorrelated</definition>
        <argsstring>(const std::string &amp;unc) const </argsstring>
        <name>isBinCorrelated</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether the given uncertainty is correlated from bin to bin or not (note that this function is to be used only for _systematic_ uncertainties) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="247" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="693" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a45ecd61fdc3d11b2e53a5ff13fe0ca71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataHistogramContainer::setUncorrelated</definition>
        <argsstring>(const std::string &amp;unc)</argsstring>
        <name>setUncorrelated</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate that the given uncertainty is to be treated uncorrelated from bin to bin (note that the default is for all systematic uncertainties to be treated as correlated) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="251" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="702" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a566c34b79b398930a96e8ab443417783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataHistogramContainer::setInterpolated</definition>
        <argsstring>(bool doInterpolate)</argsstring>
        <name>setInterpolated</name>
        <param>
          <type>bool</type>
          <declname>doInterpolate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether results are to be interpolated between bins or not (this feature is thought to be useful mostly for MC efficiencies) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="255" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="714" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa27c1f4b1ddb92cd704f1b4b7263196e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool CalibrationDataHistogramContainer::isInterpolated</definition>
        <argsstring>() const </argsstring>
        <name>isInterpolated</name>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a7403408165b275b85a8bba0c734b3afa">isInterpolated</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicate whether histogram interpolation is used or not </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="258" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="725" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a6869298988a937ac1f9c2d44ad2db111" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int CalibrationDataHistogramContainer::getTagWeightAxis</definition>
        <argsstring>() const </argsstring>
        <name>getTagWeightAxis</name>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a69dca1710e279b6f78576cd733cf8207">getTagWeightAxis</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether this calibration object is one for &quot;continuous&quot; calibration (this has some subtle consequences for the treatment of bin-to-bin correlations). The return value will be -1 in case this is not a &quot;continuous&quot; calibration object, and the axis number (0 for <ref refid="d3/d24/structX" kindref="compound">X</ref>, 1 for <ref refid="de/d29/structY" kindref="compound">Y</ref>, 2 for <ref refid="de/d0e/structZ" kindref="compound">Z</ref>) otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="264" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="908" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a8d8a72c1c8ce4362afa87837a42dca97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; CalibrationDataHistogramContainer::getBinBoundaries</definition>
        <argsstring>(unsigned int vartype) const </argsstring>
        <name>getBinBoundaries</name>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3751647ec41f3454062fae0523ebe61c">getBinBoundaries</reimplementedby>
        <param>
          <type>unsigned int</type>
          <declname>vartype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the bin boundaries for the specified variable type (which should be a CalibrationParametrization enum). An empty vector will be returned if the specified variable is not actually used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="268" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="925" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a771621aac5a4b31d383caa301fe06441" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int CalibrationDataHistogramContainer::getEigenvectorReduction</definition>
        <argsstring>(unsigned int choice) const </argsstring>
        <name>getEigenvectorReduction</name>
        <param>
          <type>unsigned int</type>
          <declname>choice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the number of eigenvectors to be retained for the purpose of eigenvector variation reduction strategies. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>choice</parametername>
</parameternamelist>
<parameterdescription>
<para>specification of the reduction option (integer corresponding to the CalibrationDataInterfaceROOT::EVReductionStrategy enum) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of eigenvector variations to be retained; -1 if the required information is lacking </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="274" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="959" bodyend="966"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1abc0f65868f94872fdcf51d8cff6709fe" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CalibrationDataHistogramContainer::getInterpolatedResult</definition>
        <argsstring>(TH1 *hist) const </argsstring>
        <name>getInterpolatedResult</name>
        <param>
          <type>TH1 *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve interpolated result (utility function) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="290" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="734" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a0d0a0b094b14f074edbab10f40480587" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CalibrationDataHistogramContainer::getInterpolatedUncertainty</definition>
        <argsstring>(TH1 *hist) const </argsstring>
        <name>getInterpolatedUncertainty</name>
        <param>
          <type>TH1 *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve interpolated result (utility function) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="751" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a80a632089bdb5b729d444a6828f30342" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataHistogramContainer::checkBounds</definition>
        <argsstring>()</argsstring>
        <name>checkBounds</name>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ad8554080b69f001ff8a39059ee5feb48">checkBounds</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check the bounds of validity for this calibration object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="296" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="646" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa56fe5c2dd947d40310f98d5efcac8c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void CalibrationDataHistogramContainer::computeVariableTypes</definition>
        <argsstring>() const </argsstring>
        <name>computeVariableTypes</name>
        <reimplements refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac">computeVariableTypes</reimplements>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5a5bf51ecd07792d2dcaca6b13f35f38">computeVariableTypes</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>utility for determining global bin number, subject to extrapolation constraints. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hist</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to histogram containing actual bin boundary information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>doExtrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies whether or not an extrapolation uncertainty is being requested decode the &apos;uncertainty&apos; objects&apos; names to determine the relevant variable types </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="305" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="461" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a4c37213e3682d7f1f252ef7d6c986594" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataHistogramContainer::ClassDef</definition>
        <argsstring>(CalibrationDataHistogramContainer, 2)</argsstring>
        <name>ClassDef</name>
        <param>
          <type><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">CalibrationDataHistogramContainer</ref></type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the class holding information for histogram-based calibration results. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2920">
        <label>Analysis::CalibrationDataMappedHistogramContainer</label>
        <link refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2919">
        <label>Analysis::CalibrationDataContainer</label>
        <link refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer"/>
      </node>
      <node id="2918">
        <label>Analysis::CalibrationDataHistogramContainer</label>
        <link refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer"/>
        <childnode refid="2919" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2922">
        <label>Analysis::CalibrationDataContainer</label>
        <link refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer"/>
      </node>
      <node id="2921">
        <label>Analysis::CalibrationDataHistogramContainer</label>
        <link refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer"/>
        <childnode refid="2922" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="235" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="235" bodyend="308"/>
    <listofallmembers>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a47d7af6a742617c1506d43af378623ab" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>CalibrationDataContainer</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1af6784495fc7fc147aa405fdb42f76f3a" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>CalibrationDataHistogramContainer</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>CalibrationParametrization</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a80a632089bdb5b729d444a6828f30342" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>checkBounds</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a4c37213e3682d7f1f252ef7d6c986594" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>ClassDef</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>computeVariables</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa56fe5c2dd947d40310f98d5efcac8c0" prot="private" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>computeVariableTypes</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a8d8a72c1c8ce4362afa87837a42dca97" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getBinBoundaries</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a4959b7f8b61f37d7c66cab4d40ea9d0e" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a37ad38f667a6dfe665992c36f9bac3d6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getComment</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a771621aac5a4b31d383caa301fe06441" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getEigenvectorReduction</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getHadronisation</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1abc0f65868f94872fdcf51d8cff6709fe" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getInterpolatedResult</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a0d0a0b094b14f074edbab10f40480587" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getInterpolatedUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getLowerBound</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getResult</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getStatUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getSystUncertainty</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a6869298988a937ac1f9c2d44ad2db111" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getTagWeightAxis</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a21290fdfb4cb6602b864f59edf2e58f5" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getUncertainties</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getUpperBound</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>getVariableTypes</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad3bfbdca48da85a5bc6cb3c14454753d" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>isBinCorrelated</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa27c1f4b1ddb92cd704f1b4b7263196e" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>isInterpolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>isNearlyEqual</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a52f3008b10ef9492a72dfc0561b29cf7" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>isRangeRestricted</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a6692756d72938733763b332d4f2ea1bc" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>kAbsEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a727a6dbf44b189ed73773d3e692020f8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>kEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1aed960f926233b847692fb49a78262ce8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>kPt</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a2014afaa5916df1cff6ff67d152b770c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>kTagWeight</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>listUncertainties</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_binBoundaries</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a685d9f52516eb4098edca1fdd21fcd6d" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_interpolate</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ab50cbcbe1af6430107cfaa5fd4dad440" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_lowerBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a55be48882b6ae5331906159e27f40148" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_lowerBoundsExtrapolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_objResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_objSystematics</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ac2b3c21c30969fada856cf774202eedc" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_uncorrelatedSyst</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ac653ff185b74bc5be5576770bd0a3da0" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_upperBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_upperBoundsExtrapolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_variables</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>m_vars</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a5557c916b13fe0ccec9a3a6fedf7bcfe" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>restrictToRange</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abd0830b7c9111a0987747c395e6938e4" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setComment</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a966fb27de925a6af5df0b17e63e03026" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setHadronisation</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a566c34b79b398930a96e8ab443417783" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setInterpolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02419acd65b92507438f38a8c80ccfc1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setUncertainty</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a45ecd61fdc3d11b2e53a5ff13fe0ca71" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>setUncorrelated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>typeFromString</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af1127c28e97354324bbef28b27ad3f1a" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>~CalibrationDataContainer</name></member>
      <member refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ae8451700122ef7645a689d67d1bf05fd" prot="public" virt="virtual"><scope>Analysis::CalibrationDataHistogramContainer</scope><name>~CalibrationDataHistogramContainer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
