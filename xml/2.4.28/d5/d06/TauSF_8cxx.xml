<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d06/TauSF_8cxx" kind="file">
    <compoundname>TauSF.cxx</compoundname>
    <includes refid="d9/d2b/TauSF_8h" local="yes">TauCorrUncert/TauSF.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">TDirectory.h</includes>
    <includes local="yes">TParameter.h</includes>
    <includes local="yes">TKey.h</includes>
    <incdepgraph>
      <node id="284754">
        <label>assert.h</label>
      </node>
      <node id="284768">
        <label>iterator</label>
      </node>
      <node id="284769">
        <label>stdlib.h</label>
      </node>
      <node id="284762">
        <label>TH1D.h</label>
      </node>
      <node id="284764">
        <label>TLorentzVector.h</label>
      </node>
      <node id="284751">
        <label>string</label>
      </node>
      <node id="284753">
        <label>map</label>
      </node>
      <node id="284771">
        <label>TDirectory.h</label>
      </node>
      <node id="284748">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TauCorrUncert/Root/TauSF.cxx</label>
        <link refid="TauSF.cxx"/>
        <childnode refid="284749" relation="include">
        </childnode>
        <childnode refid="284755" relation="include">
        </childnode>
        <childnode refid="284767" relation="include">
        </childnode>
        <childnode refid="284768" relation="include">
        </childnode>
        <childnode refid="284754" relation="include">
        </childnode>
        <childnode refid="284769" relation="include">
        </childnode>
        <childnode refid="284770" relation="include">
        </childnode>
        <childnode refid="284771" relation="include">
        </childnode>
        <childnode refid="284766" relation="include">
        </childnode>
        <childnode refid="284765" relation="include">
        </childnode>
      </node>
      <node id="284749">
        <label>TauCorrUncert/TauSF.h</label>
        <link refid="d9/d2b/TauSF_8h_source"/>
        <childnode refid="284750" relation="include">
        </childnode>
      </node>
      <node id="284757">
        <label>TROOT.h</label>
      </node>
      <node id="284756">
        <label>typeinfo</label>
      </node>
      <node id="284763">
        <label>TObject.h</label>
      </node>
      <node id="284752">
        <label>vector</label>
      </node>
      <node id="284759">
        <label>TFile.h</label>
      </node>
      <node id="284765">
        <label>TKey.h</label>
      </node>
      <node id="284766">
        <label>TParameter.h</label>
      </node>
      <node id="284750">
        <label>CommonSF.h</label>
        <link refid="df/d2c/CommonSF_8h_source"/>
        <childnode refid="284751" relation="include">
        </childnode>
        <childnode refid="284752" relation="include">
        </childnode>
        <childnode refid="284753" relation="include">
        </childnode>
        <childnode refid="284754" relation="include">
        </childnode>
        <childnode refid="284755" relation="include">
        </childnode>
        <childnode refid="284756" relation="include">
        </childnode>
        <childnode refid="284757" relation="include">
        </childnode>
        <childnode refid="284758" relation="include">
        </childnode>
        <childnode refid="284759" relation="include">
        </childnode>
        <childnode refid="284760" relation="include">
        </childnode>
        <childnode refid="284761" relation="include">
        </childnode>
        <childnode refid="284762" relation="include">
        </childnode>
        <childnode refid="284763" relation="include">
        </childnode>
        <childnode refid="284764" relation="include">
        </childnode>
        <childnode refid="284765" relation="include">
        </childnode>
        <childnode refid="284766" relation="include">
        </childnode>
      </node>
      <node id="284770">
        <label>math.h</label>
      </node>
      <node id="284761">
        <label>TH1F.h</label>
      </node>
      <node id="284755">
        <label>iostream</label>
      </node>
      <node id="284758">
        <label>TClass.h</label>
      </node>
      <node id="284767">
        <label>algorithm</label>
      </node>
      <node id="284760">
        <label>TGraph.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/d06/TauSF_8cxx_1aa71955f96c7ef1b2265be1971a546760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(TauSF) TauSF</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d8/dde/classTauCorrUncert_1_1TauSF" kindref="compound">TauSF</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TauCorrUncert/Root/TauSF.cxx" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TauCorrUncert/Root/TauSF.cxx" bodystart="18" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TAUSF_CXX</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TAUSF_CXX</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;TauCorrUncert/TauSF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TDirectory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TParameter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TKey.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">TauCorrUncert;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">ClassImp(<ref refid="d8/dde/classTauCorrUncert_1_1TauSF" kindref="compound">TauSF</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="d8/dde/classTauCorrUncert_1_1TauSF" kindref="compound">TauSF</ref>::<ref refid="d8/dde/classTauCorrUncert_1_1TauSF" kindref="compound">TauSF</ref>(const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>sharepath,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug)<sp/>:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="d3/d91/classTauCorrUncert_1_1CommonSF" kindref="compound">CommonSF</ref>(sharepath,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;sf&quot;,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>m_bUseHighPtUncert(false),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>m_sIDpt(&quot;_ptinc&quot;),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>m_bUseInclusiveEta(false)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::string<sp/>abspath;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sharepath.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>sharepath.compare(0,1,</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>abspath<sp/>=<sp/>(std::string)(getenv(</highlight><highlight class="stringliteral">&quot;PWD&quot;</highlight><highlight class="normal">))<sp/>+<sp/><sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>sharepath;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>abspath<sp/>=<sp/>sharepath;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>m_mEVeto<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SFMAP();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>TFile*<sp/>fEVeto<sp/>=<sp/>TFile::Open((abspath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/eveto/sf.root&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>this-&gt;ReadInputs(fEVeto,<sp/>m_mEVeto);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>fEVeto-&gt;Close();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fEVeto;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>m_mEVeto_3P<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SFMAP();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>TFile*<sp/>fEVeto_3P<sp/>=<sp/>TFile::Open((abspath<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/eveto/sf.3p.root&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>this-&gt;ReadInputs(fEVeto_3P,<sp/>m_mEVeto_3P);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>fEVeto_3P-&gt;Close();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fEVeto_3P;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetIDSF(ID<sp/>level,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetIDSysUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_SysUnc_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lowptunc<sp/>=<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bUseHighPtUncert<sp/>&amp;&amp;<sp/>pT<sp/>&gt;<sp/>100.){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>highpt_rel<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sf<sp/>=<sp/>this-&gt;GetIDSF(level,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prongness<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>0.000137<sp/>*<sp/>(pT<sp/>-<sp/>100.);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>0.0000783<sp/>*<sp/>(pT<sp/>-<sp/>100.);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>highptunc<sp/>=<sp/>highpt_rel<sp/>*<sp/>sf;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(lowptunc<sp/>*<sp/>lowptunc<sp/>+<sp/>highptunc<sp/>*<sp/>highptunc);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lowptunc;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetIDStatUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_StatUnc_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetExclIDSF(ID<sp/>level,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetIDSF(level,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_excl&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetExclIDSysUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetIDSysUnc(level,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_SysUnc_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_excl&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lowptunc<sp/>=<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pT<sp/>&gt;<sp/>100.){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>highpt_rel<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sf<sp/>=<sp/>this-&gt;GetExclIDSF(level,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prongness<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>0.000137<sp/>*<sp/>(pT<sp/>-<sp/>100.);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>highpt_rel<sp/>=<sp/>std::min(0.00011<sp/>*<sp/>(pT<sp/>/<sp/>1000.<sp/>-<sp/>100.),<sp/>0.027);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>0.0000783<sp/>*<sp/>(pT<sp/>-<sp/>100.);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>highpt_rel<sp/>=<sp/>std::min(0.000076<sp/>*<sp/>(pT<sp/>/<sp/>1000.<sp/>-<sp/>100.),<sp/>0.017);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>highptunc<sp/>=<sp/>highpt_rel<sp/>*<sp/>sf;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(lowptunc<sp/>*<sp/>lowptunc<sp/>+<sp/>highptunc<sp/>*<sp/>highptunc);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lowptunc;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetExclIDStatUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prongness,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pT)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetIDStatUnc(level,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ID_SF_StatUnc_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_excl&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//wrapper<sp/>for<sp/>1-prong<sp/>eveto<sp/>to<sp/>not<sp/>break<sp/>backwards<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetEVetoSF(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trackEta,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetEVetoSF(trackEta,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evLevel,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olr);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetEVetoSFUnc(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trackEta,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;GetEVetoSFUnc(trackEta,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evLevel,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olr,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetEVetoSF(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trackEta,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTrack,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>this-&gt;checkTrackEtaValidity(trackEta);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>SFMAP*<sp/>mtmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nTrack<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto_3P;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nTrack<sp/>==<sp/>3)<sp/>{</highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>!=<sp/>BDTMEDIUM<sp/>||<sp/>evLevel<sp/>!=<sp/>LOOSE<sp/>||<sp/>olr<sp/>!=<sp/>TIGHTPP){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>BDTOTHER;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evLevel<sp/>=<sp/>OTHER;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>olr<sp/>=<sp/>OLROTHER;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertEVetoToString(evLevel)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertOLRToString(olr)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_SF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>TH1F*<sp/>h<sp/>=<sp/>(*mtmp)[workingPoint];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>h-&gt;FindFixBin(fabs(trackEta));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TauSF::GetEVetoSFUnc(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trackEta,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTrack,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>direction)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>this-&gt;checkTrackEtaValidity(trackEta);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>SFMAP*<sp/>mtmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nTrack<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto_3P;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nTrack<sp/>==<sp/>3)<sp/>{</highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(level<sp/>!=<sp/>BDTMEDIUM<sp/>||<sp/>evLevel<sp/>!=<sp/>LOOSE<sp/>||<sp/>olr<sp/>!=<sp/>TIGHTPP){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>BDTOTHER;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evLevel<sp/>=<sp/>OTHER;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>olr<sp/>=<sp/>OLROTHER;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;h_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertEVetoToString(evLevel)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>ConvertOLRToString(olr);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>direction<sp/>==<sp/>1<sp/>?<sp/>workingPoint+=</highlight><highlight class="stringliteral">&quot;_EU&quot;</highlight><highlight class="normal"><sp/>:<sp/>workingPoint<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_ED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>TH1F*<sp/>h<sp/>=<sp/>(*mtmp)[workingPoint];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>h-&gt;FindFixBin(TMath::Abs(trackEta));</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TauSF::checkTrackEtaValidity(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>trackEta)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(trackEta)<sp/>&gt;<sp/>2.47)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Warning(</highlight><highlight class="stringliteral">&quot;TauSF::checkTrackEtaValidity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>eta<sp/>out<sp/>of<sp/>bounds:<sp/>%.2f<sp/>(SFs<sp/>only<sp/>valid<sp/>up<sp/>to<sp/>2.47).<sp/>Will<sp/>use<sp/>2.46&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackEta);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trackEta<sp/>=<sp/>2.46;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">std::string<sp/>TauSF::ConvertEVetoToString(EVETO<sp/>level)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(level)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NONE:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LOOSE:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;EleBDTLoose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEDIUM:</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;EleBDTMedium&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TIGHT:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;EleBDTTight&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OTHER:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;EleBDTOther&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>eveto<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">std::string<sp/>TauSF::ConvertOLRToString(OLR<sp/>level)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(level)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OLRNONE:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LOOSEPP:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;loosePP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEDIUMPP:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;mediumPP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TIGHTPP:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tightPP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OLROTHER:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;other&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>olr<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">std::string<sp/>TauSF::ConvertIDToString(ID<sp/>level)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(level)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IDNONE:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BDTLOOSE:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JetBDTSigLoose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BDTMEDIUM:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JetBDTSigMedium&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BDTTIGHT:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JetBDTSigTight&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BDTOTHER:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JetBDTSigOther&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LLHLOOSE:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tauJLLHLoose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LLHMEDIUM:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tauJLLHMedium&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LLHTIGHT:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tauJLLHTight&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LLHFAIL:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;tauJLLH&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BDTFAIL:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JetBDTSig&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>olr<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>TauSF::GetIDValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sWorkingPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>fPt){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_debug)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Try<sp/>to<sp/>access<sp/>histogram:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sWorkingPoint<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>TH1F*<sp/>tmp<sp/>=<sp/>(*m_mSF)[sWorkingPoint];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iBin<sp/>=<sp/>tmp-&gt;FindBin(fPt);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>overflow:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iBin<sp/>==<sp/>tmp-&gt;GetNbinsX()<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>iBin<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp-&gt;GetBinContent(iBin);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TauSF::SwitchOnPtBinnedIDSF(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSwitch){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bSwitch)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sIDpt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_ptbin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sIDpt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_ptinc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TauSF::SwitchOnEtaBinnedIDSF(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSwitch){</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>m_bUseInclusiveEta<sp/>=<sp/>bSwitch;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TauSF::SwitchOnHighPtUncert(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSwitch){</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>m_bUseHighPtUncert<sp/>=<sp/>bSwitch;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">std::string<sp/>TauSF::ConvertEtaToString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>fEta){</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bUseInclusiveEta)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_etaAll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(fEta)<sp/>&lt;=<sp/>1.5)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_barrel&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(fEta)<sp/>&gt;<sp/>1.5)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_endcap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>eta<sp/>provided.<sp/>Breaking<sp/>up<sp/>...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="375"><highlight class="comment">#ifndef<sp/>TAUSF_CXX</highlight></codeline>
<codeline lineno="376"><highlight class="comment">#define<sp/>TAUSF_CXX</highlight></codeline>
<codeline lineno="377"><highlight class="comment">#include<sp/>&quot;TauCorrUncert/TauSF.h&quot;</highlight></codeline>
<codeline lineno="378"><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="380"><highlight class="comment">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="comment">#include<sp/>&lt;iterator&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="comment">#include<sp/>&lt;assert.h&gt;</highlight></codeline>
<codeline lineno="383"><highlight class="comment">#include<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="comment">#include<sp/>&lt;math.h&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">#include<sp/>&quot;TDirectory.h&quot;</highlight></codeline>
<codeline lineno="387"><highlight class="comment">#include<sp/>&quot;TParameter.h&quot;</highlight></codeline>
<codeline lineno="388"><highlight class="comment">#include<sp/>&quot;TKey.h&quot;</highlight></codeline>
<codeline lineno="389"><highlight class="comment"></highlight></codeline>
<codeline lineno="390"><highlight class="comment">using<sp/>namespace<sp/>TauCorrUncert;</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment">ClassImp(TauSF)</highlight></codeline>
<codeline lineno="393"><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">TauSF::TauSF(const<sp/>std::string&amp;<sp/>sharepath,</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>debug)<sp/>:</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/>m_bUseHighPtUncert(true),</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>m_sIDpt(&quot;_ptinc&quot;),</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/>m_bUseInclusiveEta(false),</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>m_debug(debug)</highlight></codeline>
<codeline lineno="400"><highlight class="comment">{</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>std::string<sp/>abspath;</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>if(sharepath.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>sharepath.compare(0,1,&quot;/&quot;)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/>abspath<sp/>=<sp/>(std::string)(getenv(&quot;PWD&quot;))<sp/>+<sp/><sp/>&quot;/&quot;<sp/>+<sp/>sharepath;</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>else</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/>abspath<sp/>=<sp/>sharepath;</highlight></codeline>
<codeline lineno="406"><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>m_mSF<sp/>=<sp/>new<sp/>SFMAP();</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/>TFile*<sp/>fSF<sp/>=<sp/>TFile::Open((abspath<sp/>+<sp/>&quot;/ID/sf.root&quot;).c_str(),<sp/>&quot;READ&quot;);</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>this-&gt;ReadInputs(fSF,<sp/>m_mSF);</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>fSF-&gt;Close();</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>delete<sp/>fSF;</highlight></codeline>
<codeline lineno="412"><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>m_mEVeto<sp/>=<sp/>new<sp/>SFMAP();</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/>TFile*<sp/>fEVeto<sp/>=<sp/>TFile::Open((abspath<sp/>+<sp/>&quot;/eveto/sf.root&quot;).c_str(),<sp/>&quot;READ&quot;);</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>this-&gt;ReadInputs(fEVeto,<sp/>m_mEVeto);</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/>fEVeto-&gt;Close();</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>delete<sp/>fEVeto;</highlight></codeline>
<codeline lineno="418"><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>m_mEVeto_3P<sp/>=<sp/>new<sp/>SFMAP();</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>TFile*<sp/>fEVeto_3P<sp/>=<sp/>TFile::Open((abspath<sp/>+<sp/>&quot;/eveto/sf.3p.root&quot;).c_str(),<sp/>&quot;READ&quot;);</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>this-&gt;ReadInputs(fEVeto_3P,<sp/>m_mEVeto_3P);</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>fEVeto_3P-&gt;Close();</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>delete<sp/>fEVeto_3P;</highlight></codeline>
<codeline lineno="424"><highlight class="comment">}</highlight></codeline>
<codeline lineno="425"><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">double<sp/>TauSF::GetIDSF(ID<sp/>level,</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT)</highlight></codeline>
<codeline lineno="430"><highlight class="comment">{</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="433"><highlight class="comment">}</highlight></codeline>
<codeline lineno="434"><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">double<sp/>TauSF::GetIDSysUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT){</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_SysUnc_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>float<sp/>lowptunc<sp/>=<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>if(pT<sp/>&gt;<sp/>100.){</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>highpt_rel<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>sf<sp/>=<sp/>this-&gt;GetIDSF(level,</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/>if(prongness<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>std::min(0.00011<sp/>*<sp/>(pT<sp/>-<sp/>100.),<sp/>0.027);</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>std::min(0.000076<sp/>*<sp/>(pT<sp/>-<sp/>100.),<sp/>0.017);</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>highptunc<sp/>=<sp/>highpt_rel<sp/>/<sp/>sf;</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>sqrt(lowptunc<sp/>*<sp/>lowptunc<sp/>+<sp/>highptunc<sp/>*<sp/>highptunc);</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>return<sp/>lowptunc;</highlight></codeline>
<codeline lineno="455"><highlight class="comment">}</highlight></codeline>
<codeline lineno="456"><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment">double<sp/>TauSF::GetIDStatUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT)</highlight></codeline>
<codeline lineno="461"><highlight class="comment">{</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_StatUnc_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="464"><highlight class="comment">}</highlight></codeline>
<codeline lineno="465"><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">double<sp/>TauSF::GetExclIDSF(ID<sp/>level,</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT)</highlight></codeline>
<codeline lineno="470"><highlight class="comment">{</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/>if(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>GetIDSF(level,</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="476"><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>&quot;_excl&quot;<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="479"><highlight class="comment">}</highlight></codeline>
<codeline lineno="480"><highlight class="comment"></highlight></codeline>
<codeline lineno="481"><highlight class="comment">double<sp/>TauSF::GetExclIDSysUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT){</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>if(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>GetIDSysUnc(level,</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_SysUnc_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>&quot;_excl&quot;<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/>float<sp/>lowptunc<sp/>=<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>if(pT<sp/>&gt;<sp/>100.){</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>highpt_rel<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>sf<sp/>=<sp/>this-&gt;GetExclIDSF(level,</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/>if(prongness<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>std::min(0.00011<sp/>*<sp/>(pT<sp/>/<sp/>1000.<sp/>-<sp/>100.),<sp/>0.027);</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>highpt_rel<sp/>=<sp/>std::min(0.000076<sp/>*<sp/>(pT<sp/>/<sp/>1000.<sp/>-<sp/>100.),<sp/>0.017);</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>highptunc<sp/>=<sp/>highpt_rel<sp/>/<sp/>sf;</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>sqrt(lowptunc<sp/>*<sp/>lowptunc<sp/>+<sp/>highptunc<sp/>*<sp/>highptunc);</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>return<sp/>lowptunc;</highlight></codeline>
<codeline lineno="506"><highlight class="comment">}</highlight></codeline>
<codeline lineno="507"><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment">double<sp/>TauSF::GetExclIDStatUnc(ID<sp/>level,</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>eta,</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prongness,</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pT)</highlight></codeline>
<codeline lineno="512"><highlight class="comment">{</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>if(level<sp/>==<sp/>BDTTIGHT<sp/>or<sp/>level<sp/>==<sp/>LLHTIGHT)</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>GetIDStatUnc(level,</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta,</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prongness,</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pT);</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;ID_SF_StatUnc_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>&quot;_excl&quot;<sp/>+<sp/>ConvertProngToString(prongness)<sp/>+<sp/>ConvertEtaToString(eta)<sp/>+<sp/>m_sIDpt;</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetIDValue(workingPoint,<sp/>pT);</highlight></codeline>
<codeline lineno="521"><highlight class="comment">}</highlight></codeline>
<codeline lineno="522"><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment">//wrapper<sp/>for<sp/>1-prong<sp/>eveto<sp/>to<sp/>not<sp/>break<sp/>backwards<sp/>compatibility</highlight></codeline>
<codeline lineno="524"><highlight class="comment">double<sp/>TauSF::GetEVetoSF(float<sp/>trackEta,</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr)</highlight></codeline>
<codeline lineno="528"><highlight class="comment">{</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetEVetoSF(trackEta,</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level,</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evLevel,</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olr);</highlight></codeline>
<codeline lineno="534"><highlight class="comment">}</highlight></codeline>
<codeline lineno="535"><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment">double<sp/>TauSF::GetEVetoSFUnc(float<sp/>trackEta,</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr,</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>direction)</highlight></codeline>
<codeline lineno="541"><highlight class="comment">{</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/>return<sp/>this-&gt;GetEVetoSFUnc(trackEta,</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level,</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evLevel,</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olr,</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>direction);</highlight></codeline>
<codeline lineno="548"><highlight class="comment">}</highlight></codeline>
<codeline lineno="549"><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment">double<sp/>TauSF::GetEVetoSF(float<sp/>trackEta,</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nTrack,</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr)</highlight></codeline>
<codeline lineno="555"><highlight class="comment">{</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>this-&gt;checkTrackEtaValidity(trackEta);</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/>SFMAP*<sp/>mtmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/>if(nTrack<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto;</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/>else</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto_3P;</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>if(nTrack<sp/>==<sp/>3)<sp/>{//<sp/>do<sp/>the<sp/>conversion</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/>if(level<sp/>!=<sp/>BDTMEDIUM<sp/>||<sp/>evLevel<sp/>!=<sp/>LOOSE<sp/>||<sp/>olr<sp/>!=<sp/>TIGHTPP){</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>BDTOTHER;</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>evLevel<sp/>=<sp/>OTHER;</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>olr<sp/>=<sp/>OLROTHER;</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;h_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>ConvertEVetoToString(evLevel)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>ConvertOLRToString(olr)<sp/>+<sp/>&quot;_SF&quot;;</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/>TH1F*<sp/>h<sp/>=<sp/>(*mtmp)[workingPoint];</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/>int<sp/>bin<sp/>=<sp/>h-&gt;FindFixBin(fabs(trackEta));</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/>return<sp/>h-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="573"><highlight class="comment">}</highlight></codeline>
<codeline lineno="574"><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">double<sp/>TauSF::GetEVetoSFUnc(float<sp/>trackEta,</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nTrack,</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>level,</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVETO<sp/>evLevel,</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OLR<sp/>olr,</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>direction)</highlight></codeline>
<codeline lineno="581"><highlight class="comment">{</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/>this-&gt;checkTrackEtaValidity(trackEta);</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/>SFMAP*<sp/>mtmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>if(nTrack<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto;</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/>else</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/>mtmp<sp/>=<sp/>m_mEVeto_3P;</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/>if(nTrack<sp/>==<sp/>3)<sp/>{//<sp/>do<sp/>the<sp/>conversion</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/>if(level<sp/>!=<sp/>BDTMEDIUM<sp/>||<sp/>evLevel<sp/>!=<sp/>LOOSE<sp/>||<sp/>olr<sp/>!=<sp/>TIGHTPP){</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>BDTOTHER;</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>evLevel<sp/>=<sp/>OTHER;</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>olr<sp/>=<sp/>OLROTHER;</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/>std::string<sp/>workingPoint<sp/>=<sp/>&quot;h_&quot;<sp/>+<sp/>ConvertIDToString(level)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>ConvertEVetoToString(evLevel)<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>ConvertOLRToString(olr);</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/>direction<sp/>==<sp/>1<sp/>?<sp/>workingPoint+=&quot;_EU&quot;<sp/>:<sp/>workingPoint<sp/>+=<sp/>&quot;_ED&quot;;</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>TH1F*<sp/>h<sp/>=<sp/>(*mtmp)[workingPoint];</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/>int<sp/>bin<sp/>=<sp/>h-&gt;FindFixBin(TMath::Abs(trackEta));</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/>return<sp/>h-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="600"><highlight class="comment">}</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight></codeline>
<codeline lineno="602"><highlight class="comment">void<sp/>TauSF::checkTrackEtaValidity(float&amp;<sp/>trackEta)</highlight></codeline>
<codeline lineno="603"><highlight class="comment">{</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/>if(fabs(trackEta)<sp/>&gt;<sp/>2.47)</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Warning(&quot;TauSF::checkTrackEtaValidity&quot;,</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Track<sp/>eta<sp/>out<sp/>of<sp/>bounds:<sp/>%.2f<sp/>(SFs<sp/>only<sp/>valid<sp/>up<sp/>to<sp/>2.47).<sp/>Will<sp/>use<sp/>2.46&quot;,</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackEta);</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>trackEta<sp/>=<sp/>2.46;</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="comment">}</highlight></codeline>
<codeline lineno="613"><highlight class="comment"></highlight></codeline>
<codeline lineno="614"><highlight class="comment">std::string<sp/>TauSF::ConvertProngToString(int<sp/>prongness)</highlight></codeline>
<codeline lineno="615"><highlight class="comment">{</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/>std::string<sp/>prong<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/>if(prongness<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>&quot;_inc&quot;;</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/>prongness<sp/>==<sp/>1<sp/>?<sp/>prong<sp/>=<sp/>&quot;_1p&quot;<sp/>:<sp/>prong<sp/>=<sp/>&quot;_3p&quot;;</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/>return<sp/>prong;</highlight></codeline>
<codeline lineno="621"><highlight class="comment">}</highlight></codeline>
<codeline lineno="622"><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">std::string<sp/>TauSF::ConvertEVetoToString(EVETO<sp/>level)</highlight></codeline>
<codeline lineno="624"><highlight class="comment">{</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>switch(level)</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>NONE:</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;None&quot;;</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LOOSE:</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;EleBDTLoose&quot;;</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>MEDIUM:</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;EleBDTMedium&quot;;</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>TIGHT:</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;EleBDTTight&quot;;</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>OTHER:</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;EleBDTOther&quot;;</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;No<sp/>valid<sp/>eveto<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;;</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>assert(false);</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="comment">}</highlight></codeline>
<codeline lineno="648"><highlight class="comment"></highlight></codeline>
<codeline lineno="649"><highlight class="comment">std::string<sp/>TauSF::ConvertOLRToString(OLR<sp/>level)</highlight></codeline>
<codeline lineno="650"><highlight class="comment">{</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/>switch(level)</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>OLRNONE:</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;None&quot;;</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LOOSEPP:</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;loosePP&quot;;</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>MEDIUMPP:</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;mediumPP&quot;;</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>TIGHTPP:</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;tightPP&quot;;</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>OLROTHER:</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;other&quot;;</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;No<sp/>valid<sp/>olr<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;;</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>assert(false);</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="comment">}</highlight></codeline>
<codeline lineno="674"><highlight class="comment"></highlight></codeline>
<codeline lineno="675"><highlight class="comment">std::string<sp/>TauSF::ConvertIDToString(ID<sp/>level)</highlight></codeline>
<codeline lineno="676"><highlight class="comment">{</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/>switch(level)</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>IDNONE:</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;None&quot;;</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>BDTLOOSE:</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;JetBDTSigLoose&quot;;</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>BDTMEDIUM:</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;JetBDTSigMedium&quot;;</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>BDTTIGHT:</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;JetBDTSigTight&quot;;</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>BDTOTHER:</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;JetBDTSigOther&quot;;</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LLHLOOSE:</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;tauJLLHLoose&quot;;</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LLHMEDIUM:</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;tauJLLHMedium&quot;;</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LLHTIGHT:</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;tauJLLHTight&quot;;</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>LLHFAIL:</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;tauJLLH&quot;;</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/>case<sp/>BDTFAIL:</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;JetBDTSig&quot;;</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;No<sp/>valid<sp/>olr<sp/>level<sp/>passed.<sp/>Breaking<sp/>up&quot;;</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>assert(false);</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="comment">}</highlight></codeline>
<codeline lineno="715"><highlight class="comment"></highlight></codeline>
<codeline lineno="716"><highlight class="comment">std::string<sp/>TauSF::ConvertEtaToString(const<sp/>float&amp;<sp/>fEta){</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/>if(m_bUseInclusiveEta)</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>&quot;_etaAll&quot;;</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/>if(fabs(fEta)<sp/>&lt;=<sp/>1.5)</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>&quot;_barrel&quot;;</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/>else<sp/>if(fabs(fEta)<sp/>&gt;<sp/>1.5)</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>&quot;_endcap&quot;;</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/>else</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/>assert(false<sp/>&amp;&amp;<sp/>&quot;Invalid<sp/>eta<sp/>provided.<sp/>Breaking<sp/>up<sp/>...&quot;);</highlight></codeline>
<codeline lineno="725"><highlight class="comment">}</highlight></codeline>
<codeline lineno="726"><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment">float<sp/>TauSF::GetIDValue(const<sp/>std::string&amp;<sp/>sWorkingPoint,<sp/>const<sp/>float&amp;<sp/>fPt){</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>if(m_debug)</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Try<sp/>to<sp/>access<sp/>histogram:<sp/>&quot;<sp/>&lt;&lt;<sp/>sWorkingPoint<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/>TH1F*<sp/>tmp<sp/>=<sp/>(*m_mSF)[sWorkingPoint];</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/>int<sp/>iBin<sp/>=<sp/>tmp-&gt;FindBin(fPt);</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/>//check<sp/>overflow:</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/>if(iBin<sp/>==<sp/>tmp-&gt;GetNbinsX()<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/>iBin<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/>return<sp/>tmp-&gt;GetBinContent(iBin);</highlight></codeline>
<codeline lineno="736"><highlight class="comment">}</highlight></codeline>
<codeline lineno="737"><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment">void<sp/>TauSF::SwitchOnPtBinnedIDSF(bool<sp/>bSwitch){</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/>if(bSwitch)</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/>m_sIDpt<sp/>=<sp/>&quot;_ptbin&quot;;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/>else</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/>m_sIDpt<sp/>=<sp/>&quot;_ptinc&quot;;</highlight></codeline>
<codeline lineno="743"><highlight class="comment">}</highlight></codeline>
<codeline lineno="744"><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment">void<sp/>TauSF::SwitchOnEtaBinnedIDSF(bool<sp/>bSwitch){</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/>m_bUseInclusiveEta<sp/>=<sp/>bSwitch;</highlight></codeline>
<codeline lineno="747"><highlight class="comment">}</highlight></codeline>
<codeline lineno="748"><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment">void<sp/>TauSF::SwitchOnHighPtUncert(bool<sp/>bSwitch){</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/>m_bUseHighPtUncert<sp/>=<sp/>bSwitch;</highlight></codeline>
<codeline lineno="751"><highlight class="comment">}</highlight></codeline>
<codeline lineno="752"><highlight class="comment">#endif</highlight></codeline>
<codeline lineno="753"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TauCorrUncert/Root/TauSF.cxx"/>
  </compounddef>
</doxygen>
