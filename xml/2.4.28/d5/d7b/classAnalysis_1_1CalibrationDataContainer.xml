<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kind="class" prot="public">
    <compoundname>Analysis::CalibrationDataContainer</compoundname>
    <derivedcompoundref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer" prot="public" virt="non-virtual">Analysis::CalibrationDataFunctionContainer</derivedcompoundref>
    <derivedcompoundref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" prot="public" virt="non-virtual">Analysis::CalibrationDataHistogramContainer</derivedcompoundref>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="no">CalibrationDataContainer.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1" prot="public" static="no">
        <name>CalibrationParametrization</name>
        <enumvalue id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1aed960f926233b847692fb49a78262ce8" prot="public">
          <name>kPt</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a727a6dbf44b189ed73773d3e692020f8" prot="public">
          <name>kEta</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a6692756d72938733763b332d4f2ea1bc" prot="public">
          <name>kAbsEta</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a2014afaa5916df1cff6ff67d152b770c" prot="public">
          <name>kTagWeight</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following enums are intended to contain the list of (kinematic or other) variables in terms of which results (and the corresponding uncertainties) are given. They are useful mainly for internal purposes, but the user may access them nevertheless. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="59" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ab50cbcbe1af6430107cfaa5fd4dad440" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Analysis::CalibrationDataContainer::m_lowerBounds</definition>
        <argsstring></argsstring>
        <name>m_lowerBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="198" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ac653ff185b74bc5be5576770bd0a3da0" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Analysis::CalibrationDataContainer::m_upperBounds</definition>
        <argsstring></argsstring>
        <name>m_upperBounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="199" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a55be48882b6ae5331906159e27f40148" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Analysis::CalibrationDataContainer::m_lowerBoundsExtrapolated</definition>
        <argsstring></argsstring>
        <name>m_lowerBoundsExtrapolated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="201" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; Analysis::CalibrationDataContainer::m_upperBoundsExtrapolated</definition>
        <argsstring></argsstring>
        <name>m_upperBoundsExtrapolated</name>
        <briefdescription>
<para>(possibly looser) lower validity bounds for extrapolation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="202" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" prot="protected" static="no" mutable="yes">
        <type>TObject *</type>
        <definition>TObject* Analysis::CalibrationDataContainer::m_objResult</definition>
        <argsstring></argsstring>
        <name>m_objResult</name>
        <briefdescription>
<para>(possibly looser) upper validity bounds for extrapolation </para>        </briefdescription>
        <detaileddescription>
<para>cached variables for code speed-up </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="205" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" prot="protected" static="no" mutable="yes">
        <type>TObject *</type>
        <definition>TObject* Analysis::CalibrationDataContainer::m_objSystematics</definition>
        <argsstring></argsstring>
        <name>m_objSystematics</name>
        <briefdescription>
<para>don&apos;t persistify </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="206" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" prot="protected" static="no" mutable="yes">
        <type>double</type>
        <definition>double Analysis::CalibrationDataContainer::m_vars[MaxCalibrationVars]</definition>
        <argsstring>[MaxCalibrationVars]</argsstring>
        <name>m_vars</name>
        <briefdescription>
<para>don&apos;t persistify </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="208" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; Analysis::CalibrationDataContainer::m_variables</definition>
        <argsstring></argsstring>
        <name>m_variables</name>
        <briefdescription>
<para>don&apos;t persistify </para>        </briefdescription>
        <detaileddescription>
<para>specification of variable type per object (result / uncertainty) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="211" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ad435e11c248b34110eb09197140f74ca" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Analysis::CalibrationDataContainer::m_restrict</definition>
        <argsstring></argsstring>
        <name>m_restrict</name>
        <briefdescription>
<para>persistency not needed for this variable </para>        </briefdescription>
        <detaileddescription>
<para>specifies whether the performance evaluation is to be done strictly within the range of validity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="218" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a47d7af6a742617c1506d43af378623ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataContainer::CalibrationDataContainer</definition>
        <argsstring>(const char *name=&quot;default&quot;)</argsstring>
        <name>CalibrationDataContainer</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;default&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="49"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af1127c28e97354324bbef28b27ad3f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>CalibrationDataContainer::~CalibrationDataContainer</definition>
        <argsstring>()</argsstring>
        <name>~CalibrationDataContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; CalibrationDataContainer::listUncertainties</definition>
        <argsstring>() const </argsstring>
        <name>listUncertainties</name>
        <briefdescription>
<para>retrieve the list of &quot;uncertainties&quot; accessible to this object. <ref refid="d4/dc4/structA" kindref="compound">A</ref> few uncertainty names are predetermined: &quot;result&quot;, &quot;comment&quot;, &quot;statistics&quot;, &quot;systematics&quot;. Individual sources of systematic uncertainty can be added by the user. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="117" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a21290fdfb4cb6602b864f59edf2e58f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus Analysis::CalibrationDataContainer::getUncertainties</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, std::map&lt; std::string, Analysis::UncertaintyResult &gt; &amp;all) const </argsstring>
        <name>getUncertainties</name>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, Analysis::UncertaintyResult &gt; &amp;</type>
          <declname>all</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the list of &quot;uncertainties&quot; accessible to this object. <ref refid="d4/dc4/structA" kindref="compound">A</ref> few uncertainty names are predetermined: &quot;result&quot;, &quot;comment&quot;, &quot;statistics&quot;, &quot;systematics&quot;. Individual sources of systematic uncertainty can be added by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="78"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a37ad38f667a6dfe665992c36f9bac3d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CalibrationDataContainer::getComment</definition>
        <argsstring>() const </argsstring>
        <name>getComment</name>
        <briefdescription>
<para>retrieve the comments entered for this calibration, if any </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="187" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CalibrationDataContainer::getHadronisation</definition>
        <argsstring>() const </argsstring>
        <name>getHadronisation</name>
        <briefdescription>
<para>retrieve the &apos;hadronisation reference&apos; entered for this calibration, if any </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="200" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>CalibrationStatus</type>
        <definition>virtual CalibrationStatus Analysis::CalibrationDataContainer::getResult</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result, TObject *obj=0, bool extrapolate=false) const =0</argsstring>
        <name>getResult</name>
        <reimplementedby refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a6f057dc39206cb028a3c41536c281a36">getResult</reimplementedby>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7">getResult</reimplementedby>
        <reimplementedby refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75">getResult</reimplementedby>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration result. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested result (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>flag that extrapolation applies (should only be relevant when using eigenvector variations) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="96"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>CalibrationStatus</type>
        <definition>virtual CalibrationStatus Analysis::CalibrationDataContainer::getStatUncertainty</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, double &amp;result) const =0</argsstring>
        <name>getStatUncertainty</name>
        <reimplementedby refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a753975bdcb35c055ee9a60e2e0a2b30c">getStatUncertainty</reimplementedby>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f">getStatUncertainty</reimplementedby>
        <reimplementedby refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f">getStatUncertainty</reimplementedby>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration statistical uncertainty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested statistical uncertainty </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) Note the changed signature compared to <ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty()</ref>, <ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult()</ref> etc.: this is because the statistical uncertainty computation always needs the result object, and only in case of the function interface also the covariance matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataContainer::getSystUncertainty</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, UncertaintyResult &amp;result, TObject *obj=0) const </argsstring>
        <name>getSystUncertainty</name>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UncertaintyResult &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration total systematic uncertainty <simplesect kind="see"><para><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="97" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>CalibrationStatus</type>
        <definition>virtual CalibrationStatus Analysis::CalibrationDataContainer::getUncertainty</definition>
        <argsstring>(const std::string &amp;unc, const CalibrationDataVariables &amp;x, UncertaintyResult &amp;result, TObject *obj=0) const =0</argsstring>
        <name>getUncertainty</name>
        <reimplementedby refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a830700dc8e3483dde05c27a75821e895">getUncertainty</reimplementedby>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996">getUncertainty</reimplementedby>
        <reimplementedby refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651">getUncertainty</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UncertaintyResult &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the calibration uncertainty due to the given source. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unc</parametername>
</parameternamelist>
<parameterdescription>
<para>uncertainty specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>requested uncertainty (for both positive and negative variation, if available) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object holding the requested uncertainty information (it will be computed if not provided) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status code (see above) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02419acd65b92507438f38a8c80ccfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataContainer::setResult</definition>
        <argsstring>(TObject *obj)</argsstring>
        <name>setResult</name>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>insert the main object for this calibration </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="227" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abd0830b7c9111a0987747c395e6938e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataContainer::setComment</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>setComment</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>insert the given text as comment for this calibration </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="238" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a966fb27de925a6af5df0b17e63e03026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataContainer::setHadronisation</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>setHadronisation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>insert the given text as the &apos;hadronisation reference&apos; for this calibration </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="137" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="251" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationDataContainer::setUncertainty</definition>
        <argsstring>(const std::string &amp;unc, TObject *obj)</argsstring>
        <name>setUncertainty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unc</declname>
        </param>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>insert the relevant object for the requested source of &apos;uncertainty&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="214" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a5557c916b13fe0ccec9a3a6fedf7bcfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Analysis::CalibrationDataContainer::restrictToRange</definition>
        <argsstring>(bool restrict)</argsstring>
        <name>restrictToRange</name>
        <param>
          <type>bool</type>
          <declname>restrict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If true, this will restrict the variables used to be within the (specified) range of validity. Note that this is a policy decision and as such not intrinsic to the data; but it is cumbersome to carry this information around everywhere. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a52f3008b10ef9492a72dfc0561b29cf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Analysis::CalibrationDataContainer::isRangeRestricted</definition>
        <argsstring>() const </argsstring>
        <name>isRangeRestricted</name>
        <briefdescription>
<para>allow the user to inspect the above information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CalibrationDataContainer::getLowerBound</definition>
        <argsstring>(unsigned int vartype, bool extrapolate=false) const </argsstring>
        <name>getLowerBound</name>
        <param>
          <type>unsigned int</type>
          <declname>vartype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the lower bound of validity for the requested variable type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vartype</parametername>
</parameternamelist>
<parameterdescription>
<para>variable type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>true only if an extrapolation uncertainty is requested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="337" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CalibrationDataContainer::getUpperBound</definition>
        <argsstring>(unsigned int vartype, bool extrapolate=false) const </argsstring>
        <name>getUpperBound</name>
        <param>
          <type>unsigned int</type>
          <declname>vartype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>retrieve the upper bound of validity for the requested variable type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vartype</parametername>
</parameternamelist>
<parameterdescription>
<para>variable type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>true only if an extrapolation uncertainty is requested </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="350" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a4959b7f8b61f37d7c66cab4d40ea9d0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; double, double &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; double, double &gt; &gt; CalibrationDataContainer::getBounds</definition>
        <argsstring>() const </argsstring>
        <name>getBounds</name>
        <briefdescription>
<para>allow the user to inspect the bounds of validity </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="165" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="362" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt; unsigned int &gt; CalibrationDataContainer::getVariableTypes</definition>
        <argsstring>() const </argsstring>
        <name>getVariableTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>utility to retrieve variable types </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="168" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="379" bodyend="388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CalibrationDataContainer::isNearlyEqual</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>isNearlyEqual</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>utility for comparison of doubles </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="171" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1697" bodyend="1706"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CalibrationDataContainer::typeFromString</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>typeFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection between variable names (on histogram axes etc.) and variable &apos;types&apos; as used in actual evaluations. Normal result values are positive (or 0); a negative return value indicates that the string is not known) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="263" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrationStatus</type>
        <definition>CalibrationStatus CalibrationDataContainer::computeVariables</definition>
        <argsstring>(const CalibrationDataVariables &amp;x, bool extrapolate=false) const </argsstring>
        <name>computeVariables</name>
        <param>
          <type>const <ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrapolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the variables to be used for the given &apos;uncertainty&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unc</parametername>
</parameternamelist>
<parameterdescription>
<para>given source of uncertainty (can also be the central value) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the given variables are outside the parametrisation&apos;s validity range Compute the variables to be used. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>user-supplied (kinematic or other) variables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extrapolate</parametername>
</parameternamelist>
<parameterdescription>
<para>set to &quot;true&quot; for the evaluation of extrapolation uncertainties </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>kSuccess, kRange, or kExtrapolatedRange, depending on the kinematic variables </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="278" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Analysis::CalibrationDataContainer::computeVariableTypes</definition>
        <argsstring>() const =0</argsstring>
        <name>computeVariableTypes</name>
        <reimplementedby refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1ab7f3e4925c6d866e7b8d05fbc81f9ba7">computeVariableTypes</reimplementedby>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5a5bf51ecd07792d2dcaca6b13f35f38">computeVariableTypes</reimplementedby>
        <reimplementedby refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa56fe5c2dd947d40310f98d5efcac8c0">computeVariableTypes</reimplementedby>
        <briefdescription>
<para>decode the &apos;uncertainty&apos; objects&apos; names to determine the relevant variable types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a18dfc962fdddabf2f2df983a5f6caeb5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataContainer::ClassDef</definition>
        <argsstring>(CalibrationDataContainer, 1)</argsstring>
        <name>ClassDef</name>
        <reimplementedby refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1ac2431eaa46e45aa3be61fce2ddd6c144">ClassDef</reimplementedby>
        <reimplementedby refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3186187bf019e044edb911cc227e68d2">ClassDef</reimplementedby>
        <param>
          <type><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="220"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is the interface for the objects to be stored in the calibration ROOT file. The base class inherits from a TMap, the idea bing that the map&apos;s keys are TObjString objects while the values are the objects of interest. The keys are meant to provide access in a flexible manner. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2908">
        <label>Analysis::CalibrationDataMappedHistogramContainer</label>
        <link refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer"/>
        <childnode refid="2907" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2905">
        <label>Analysis::CalibrationDataContainer</label>
        <link refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer"/>
      </node>
      <node id="2906">
        <label>Analysis::CalibrationDataFunctionContainer</label>
        <link refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer"/>
        <childnode refid="2905" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2907">
        <label>Analysis::CalibrationDataHistogramContainer</label>
        <link refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer"/>
        <childnode refid="2905" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataContainer.h" bodystart="47" bodyend="222"/>
    <listofallmembers>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a47d7af6a742617c1506d43af378623ab" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>CalibrationDataContainer</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>CalibrationParametrization</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a18dfc962fdddabf2f2df983a5f6caeb5" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>ClassDef</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>computeVariables</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac" prot="protected" virt="pure-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>computeVariableTypes</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a4959b7f8b61f37d7c66cab4d40ea9d0e" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a37ad38f667a6dfe665992c36f9bac3d6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getComment</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getHadronisation</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getLowerBound</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" prot="public" virt="pure-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" prot="public" virt="pure-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getStatUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getSystUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a21290fdfb4cb6602b864f59edf2e58f5" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getUncertainties</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" prot="public" virt="pure-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getUpperBound</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>getVariableTypes</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>isNearlyEqual</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a52f3008b10ef9492a72dfc0561b29cf7" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>isRangeRestricted</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a6692756d72938733763b332d4f2ea1bc" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>kAbsEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a727a6dbf44b189ed73773d3e692020f8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>kEta</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1aed960f926233b847692fb49a78262ce8" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>kPt</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a6f374937df2bd2647b4c0b9f30f566a1a2014afaa5916df1cff6ff67d152b770c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>kTagWeight</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>listUncertainties</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ab50cbcbe1af6430107cfaa5fd4dad440" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_lowerBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a55be48882b6ae5331906159e27f40148" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_lowerBoundsExtrapolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_objResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_objSystematics</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ad435e11c248b34110eb09197140f74ca" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_restrict</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1ac653ff185b74bc5be5576770bd0a3da0" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_upperBounds</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_upperBoundsExtrapolated</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_variables</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>m_vars</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a5557c916b13fe0ccec9a3a6fedf7bcfe" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>restrictToRange</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abd0830b7c9111a0987747c395e6938e4" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>setComment</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a966fb27de925a6af5df0b17e63e03026" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>setHadronisation</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02419acd65b92507438f38a8c80ccfc1" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>setResult</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>setUncertainty</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataContainer</scope><name>typeFromString</name></member>
      <member refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af1127c28e97354324bbef28b27ad3f1a" prot="public" virt="virtual"><scope>Analysis::CalibrationDataContainer</scope><name>~CalibrationDataContainer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
