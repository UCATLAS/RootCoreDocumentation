<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/da4/DVLInfo__test_8cxx" kind="file">
    <compoundname>DVLInfo_test.cxx</compoundname>
    <includes refid="d3/d2e/DVLInfo_8h" local="yes">AthContainers/tools/DVLInfo.h</includes>
    <includes local="yes">SGTools/BaseInfo.h</includes>
    <includes local="yes">SGTools/CLASS_DEF.h</includes>
    <includes local="yes">boost/type_traits/remove_pointer.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">list</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="73924">
        <label>list</label>
      </node>
      <node id="73886">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="73904">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="73854" relation="include">
        </childnode>
        <childnode refid="73856" relation="include">
        </childnode>
        <childnode refid="73863" relation="include">
        </childnode>
        <childnode refid="73864" relation="include">
        </childnode>
      </node>
      <node id="73906">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="73865" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73907" relation="include">
        </childnode>
        <childnode refid="73866" relation="include">
        </childnode>
      </node>
      <node id="73905">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="73862">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="73864">
        <label>functional</label>
      </node>
      <node id="73919">
        <label>boost/version.hpp</label>
      </node>
      <node id="73860">
        <label>limits</label>
      </node>
      <node id="73907">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="73884">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="73857">
        <label>iterator</label>
      </node>
      <node id="73867">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="73861" relation="include">
        </childnode>
        <childnode refid="73868" relation="include">
        </childnode>
      </node>
      <node id="73912">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="73851" relation="include">
        </childnode>
        <childnode refid="73913" relation="include">
        </childnode>
        <childnode refid="73914" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
        <childnode refid="73861" relation="include">
        </childnode>
      </node>
      <node id="73869">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73858" relation="include">
        </childnode>
      </node>
      <node id="73872">
        <label>stdint.h</label>
      </node>
      <node id="73909">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="73892">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
      </node>
      <node id="73875">
        <label>RVersion.h</label>
      </node>
      <node id="73853">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="73854" relation="include">
        </childnode>
        <childnode refid="73863" relation="include">
        </childnode>
        <childnode refid="73864" relation="include">
        </childnode>
      </node>
      <node id="73859">
        <label>cmath</label>
      </node>
      <node id="73916">
        <label>cassert</label>
      </node>
      <node id="73920">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="73914">
        <label>stdexcept</label>
      </node>
      <node id="73887">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="73922">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="73861">
        <label>string</label>
      </node>
      <node id="73850">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="73851" relation="include">
        </childnode>
        <childnode refid="73865" relation="include">
        </childnode>
        <childnode refid="73867" relation="include">
        </childnode>
        <childnode refid="73869" relation="include">
        </childnode>
        <childnode refid="73871" relation="include">
        </childnode>
        <childnode refid="73877" relation="include">
        </childnode>
        <childnode refid="73878" relation="include">
        </childnode>
        <childnode refid="73879" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73856" relation="include">
        </childnode>
        <childnode refid="73858" relation="include">
        </childnode>
        <childnode refid="73880" relation="include">
        </childnode>
        <childnode refid="73881" relation="include">
        </childnode>
        <childnode refid="73882" relation="include">
        </childnode>
        <childnode refid="73888" relation="include">
        </childnode>
      </node>
      <node id="73890">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
      </node>
      <node id="73880">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="73876">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="73901">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="73881">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="73898">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="73911">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="73874">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="73875" relation="include">
        </childnode>
        <childnode refid="73876" relation="include">
        </childnode>
      </node>
      <node id="73878">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="73885">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="73847">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="73848" relation="include">
        </childnode>
      </node>
      <node id="73896">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="73867" relation="include">
        </childnode>
        <childnode refid="73860" relation="include">
        </childnode>
        <childnode refid="73872" relation="include">
        </childnode>
        <childnode refid="73897" relation="include">
        </childnode>
      </node>
      <node id="73851">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73853" relation="include">
        </childnode>
      </node>
      <node id="73854">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="73855" relation="include">
        </childnode>
        <childnode refid="73856" relation="include">
        </childnode>
        <childnode refid="73857" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73858" relation="include">
        </childnode>
        <childnode refid="73859" relation="include">
        </childnode>
        <childnode refid="73860" relation="include">
        </childnode>
        <childnode refid="73861" relation="include">
        </childnode>
        <childnode refid="73862" relation="include">
        </childnode>
      </node>
      <node id="73917">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="73916" relation="include">
        </childnode>
      </node>
      <node id="73891">
        <label>typeinfo</label>
      </node>
      <node id="73915">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="73880" relation="include">
        </childnode>
        <childnode refid="73916" relation="include">
        </childnode>
      </node>
      <node id="73897">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="73877">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="73845">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx</label>
        <link refid="DVLInfo_test.cxx"/>
        <childnode refid="73846" relation="include">
        </childnode>
        <childnode refid="73907" relation="include">
        </childnode>
        <childnode refid="73866" relation="include">
        </childnode>
        <childnode refid="73925" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73924" relation="include">
        </childnode>
        <childnode refid="73916" relation="include">
        </childnode>
      </node>
      <node id="73873">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="73872" relation="include">
        </childnode>
      </node>
      <node id="73868">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="73900">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="73846">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="73847" relation="include">
        </childnode>
        <childnode refid="73849" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73862" relation="include">
        </childnode>
        <childnode refid="73922" relation="include">
        </childnode>
        <childnode refid="73899" relation="include">
        </childnode>
        <childnode refid="73923" relation="include">
        </childnode>
      </node>
      <node id="73866">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="73889">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="73851" relation="include">
        </childnode>
        <childnode refid="73890" relation="include">
        </childnode>
        <childnode refid="73892" relation="include">
        </childnode>
        <childnode refid="73893" relation="include">
        </childnode>
        <childnode refid="73902" relation="include">
        </childnode>
        <childnode refid="73882" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73904" relation="include">
        </childnode>
        <childnode refid="73905" relation="include">
        </childnode>
      </node>
      <node id="73870">
        <label>vector</label>
      </node>
      <node id="73856">
        <label>utility</label>
      </node>
      <node id="73879">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="73921">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="73883">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="73894">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="73882">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="73883" relation="include">
        </childnode>
        <childnode refid="73884" relation="include">
        </childnode>
        <childnode refid="73885" relation="include">
        </childnode>
        <childnode refid="73886" relation="include">
        </childnode>
        <childnode refid="73887" relation="include">
        </childnode>
      </node>
      <node id="73858">
        <label>cstdlib</label>
      </node>
      <node id="73913">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="73865">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="73851" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73866" relation="include">
        </childnode>
      </node>
      <node id="73852">
        <label>cstddef</label>
      </node>
      <node id="73888">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="73889" relation="include">
        </childnode>
        <childnode refid="73906" relation="include">
        </childnode>
        <childnode refid="73865" relation="include">
        </childnode>
        <childnode refid="73880" relation="include">
        </childnode>
        <childnode refid="73881" relation="include">
        </childnode>
      </node>
      <node id="73923">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="73908" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73924" relation="include">
        </childnode>
        <childnode refid="73916" relation="include">
        </childnode>
        <childnode refid="73858" relation="include">
        </childnode>
        <childnode refid="73907" relation="include">
        </childnode>
      </node>
      <node id="73893">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="73890" relation="include">
        </childnode>
        <childnode refid="73894" relation="include">
        </childnode>
        <childnode refid="73869" relation="include">
        </childnode>
        <childnode refid="73895" relation="include">
        </childnode>
        <childnode refid="73879" relation="include">
        </childnode>
        <childnode refid="73891" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73855" relation="include">
        </childnode>
        <childnode refid="73872" relation="include">
        </childnode>
        <childnode refid="73899" relation="include">
        </childnode>
        <childnode refid="73900" relation="include">
        </childnode>
        <childnode refid="73901" relation="include">
        </childnode>
      </node>
      <node id="73899">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="73849">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="73850" relation="include">
        </childnode>
        <childnode refid="73908" relation="include">
        </childnode>
        <childnode refid="73909" relation="include">
        </childnode>
        <childnode refid="73910" relation="include">
        </childnode>
        <childnode refid="73889" relation="include">
        </childnode>
        <childnode refid="73912" relation="include">
        </childnode>
        <childnode refid="73917" relation="include">
        </childnode>
        <childnode refid="73906" relation="include">
        </childnode>
        <childnode refid="73918" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73921" relation="include">
        </childnode>
      </node>
      <node id="73903">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="73895">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="73894" relation="include">
        </childnode>
        <childnode refid="73896" relation="include">
        </childnode>
        <childnode refid="73879" relation="include">
        </childnode>
        <childnode refid="73870" relation="include">
        </childnode>
        <childnode refid="73898" relation="include">
        </childnode>
      </node>
      <node id="73855">
        <label>algorithm</label>
      </node>
      <node id="73925">
        <label>boost/type_traits/remove_pointer.hpp</label>
      </node>
      <node id="73910">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="73911" relation="include">
        </childnode>
        <childnode refid="73865" relation="include">
        </childnode>
        <childnode refid="73906" relation="include">
        </childnode>
        <childnode refid="73871" relation="include">
        </childnode>
        <childnode refid="73889" relation="include">
        </childnode>
        <childnode refid="73850" relation="include">
        </childnode>
        <childnode refid="73869" relation="include">
        </childnode>
        <childnode refid="73912" relation="include">
        </childnode>
        <childnode refid="73880" relation="include">
        </childnode>
        <childnode refid="73852" relation="include">
        </childnode>
        <childnode refid="73915" relation="include">
        </childnode>
      </node>
      <node id="73871">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="73872" relation="include">
        </childnode>
        <childnode refid="73861" relation="include">
        </childnode>
        <childnode refid="73873" relation="include">
        </childnode>
        <childnode refid="73874" relation="include">
        </childnode>
      </node>
      <node id="73908">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="73848">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="73863">
        <label>memory</label>
      </node>
      <node id="73902">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="73892" relation="include">
        </childnode>
        <childnode refid="73893" relation="include">
        </childnode>
        <childnode refid="73903" relation="include">
        </childnode>
      </node>
      <node id="73918">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="73911" relation="include">
        </childnode>
        <childnode refid="73906" relation="include">
        </childnode>
        <childnode refid="73865" relation="include">
        </childnode>
        <childnode refid="73899" relation="include">
        </childnode>
        <childnode refid="73919" relation="include">
        </childnode>
        <childnode refid="73920" relation="include">
        </childnode>
        <childnode refid="73861" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="d8/d5d/classFoo" prot="public">Foo</innerclass>
    <innerclass refid="da/d7e/classDVLInfoTest" prot="public">DVLInfoTest</innerclass>
    <innerclass refid="d3/d4b/classmycont" prot="public">mycont</innerclass>
    <innerclass refid="d1/daa/classmyvec2" prot="public">myvec2</innerclass>
    <innerclass refid="d9/db3/structB" prot="public">B</innerclass>
    <innerclass refid="d7/db3/structD" prot="public">D</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a021a71a8e3b97eee34ed9f9cc29c6bfe" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::vector&lt; int * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::vector&lt;int*&gt; &gt; myvec</definition>
        <argsstring></argsstring>
        <name>myvec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="144" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a3c15dcbce4b495ee649748881ec76b83" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::list&lt; int * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::list&lt;int*&gt; &gt; mylist</definition>
        <argsstring></argsstring>
        <name>mylist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a2a9f7d28c2c15dc6438ec40965094f2b" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::vector&lt; <ref refid="d9/db3/structB" kindref="compound">B</ref> * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::vector&lt;B*&gt; &gt; myvecb</definition>
        <argsstring></argsstring>
        <name>myvecb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="274" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a9a17090a93692705528c0e5afc5f53fa" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::vector&lt; <ref refid="d7/db3/structD" kindref="compound">D</ref> * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::vector&lt;D*&gt; &gt; myvecd</definition>
        <argsstring></argsstring>
        <name>myvecd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="275" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a3d33e19a7a5fa5643853c02668e22a0c" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::list&lt; <ref refid="d9/db3/structB" kindref="compound">B</ref> * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::list&lt;B*&gt; &gt; mylistb</definition>
        <argsstring></argsstring>
        <name>mylistb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="276" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/da4/DVLInfo__test_8cxx_1a503058043217d65b047104e80b13833a" prot="public" static="no">
        <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::list&lt; <ref refid="d7/db3/structD" kindref="compound">D</ref> * &gt; &gt;</type>
        <definition>typedef mycont&lt;std::list&lt;D*&gt; &gt; mylistd</definition>
        <argsstring></argsstring>
        <name>mylistd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="277" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1a941ec19709f0ae80a30588ad8a6d5223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_DVLInfoBase</definition>
        <argsstring>()</argsstring>
        <name>test_DVLInfoBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="88" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1adc6644ed563ac6192d7dadf433b65b73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dvl_makecontainer</definition>
        <argsstring>(size_t nreserve, mycont&lt; std::vector&lt; T &gt; &gt; *&amp;cont)</argsstring>
        <name>dvl_makecontainer</name>
        <param>
          <type>size_t</type>
          <declname>nreserve</declname>
        </param>
        <param>
          <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt; *&amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1ae573f3009ed101afc0f1ee7531c6526c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dvl_makecontainer</definition>
        <argsstring>(size_t, mycont&lt; std::list&lt; T &gt; &gt; *&amp;cont)</argsstring>
        <name>dvl_makecontainer</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt; std::list&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt; *&amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="170" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1ae8877258e2a2d8eec916c57f78bdd4f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>CONT *</type>
        <definition>CONT* test_DVLInfo1</definition>
        <argsstring>()</argsstring>
        <name>test_DVLInfo1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="182" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="181" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1a5bf495e60569ada030cde5f518d03889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_DVLInfo</definition>
        <argsstring>()</argsstring>
        <name>test_DVLInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="242" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="241" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1a87c33b6f7c094f5cd2900be43de5cac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASE</definition>
        <argsstring>(D, SG_VIRTUAL(B))</argsstring>
        <name>SG_BASE</name>
        <param>
          <type><ref refid="d7/db3/structD" kindref="compound">D</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d9/db3/structB" kindref="compound">B</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="271"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1aa234d485b53aa98c69ab203a9b42d283" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTB</type>
          </param>
          <param>
            <type>class CONTD</type>
          </param>
          <param>
            <type>class CONTI</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_dvl_convert1</definition>
        <argsstring>()</argsstring>
        <name>test_dvl_convert1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="287" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="286" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1a8effd69a73653f69e8ff8b7a2d7076a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_dvl_convert</definition>
        <argsstring>()</argsstring>
        <name>test_dvl_convert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="331" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="330" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="d5/da4/DVLInfo__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" line="340" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx" bodystart="339" bodyend="345"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for DVLInfo. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Mar, 2008 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>DVLInfo_test.cxx<sp/>508150<sp/>2012-06-29<sp/>10:25:42Z<sp/>ssnyder<sp/>$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="comment">//<sp/>Disable<sp/>this<sp/>test<sp/>in<sp/>standalone<sp/>mode:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d2e/DVLInfo_8h" kindref="compound" tooltip="Holder to implement conversion copies for DataVector/DataList. ">AthContainers/tools/DVLInfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/BaseInfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/CLASS_DEF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/type_traits/remove_pointer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="d8/d5d/classFoo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/d5d/classFoo" kindref="compound">Foo</ref>{};</highlight></codeline>
<codeline lineno="23"><highlight class="normal">CLASS_DEF(<ref refid="d8/d5d/classFoo" kindref="compound">Foo</ref>,<sp/>1234,<sp/>1)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="da/d7e/classDVLInfoTest" refkind="compound"><highlight class="normal">class<sp/><ref refid="da/d7e/classDVLInfoTest" kindref="compound">DVLInfoTest</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>:<sp/>public<sp/>DataModel_detail::DVLInfoBase</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="da/d7e/classDVLInfoTest" kindref="compound">DVLInfoTest</ref>()<sp/>:<sp/>DVLInfoBase<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/d5d/classFoo" kindref="compound">Foo</ref>),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>make<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nreserve)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>push<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>elt_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>del<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>clone<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase" kindref="compound" tooltip="Helper to iterate over a DV container.">DataModel_detail::DVLIteratorBase</ref>*</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>iterator<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref>*<sp/>base<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*cont_p*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="da/d7e/classDVLInfoTest_1a8771ea574e5b2927621d0154485d55b8" kindref="member" tooltip="Construct a new container.">DVLInfoTest::make</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nreserve)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="44"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>std::vector&lt;int*&gt;*<sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;int*&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>vec-&gt;reserve<sp/>(nreserve);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d7e/classDVLInfoTest_1ad30e3d53037ef084942f894c132a098d" kindref="member" tooltip="Push a new pointer into the container.">DVLInfoTest::push</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>elt_p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="52"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cont_p)<sp/>-&gt;<sp/>push_back<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)elt_p);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="da/d7e/classDVLInfoTest" kindref="compound">DVLInfoTest</ref>::<ref refid="da/d7e/classDVLInfoTest_1a5ad89d82f94cc7cd8e67bd8d4fdf6ae2" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cont_p)<sp/>-&gt;<sp/><ref refid="da/d7e/classDVLInfoTest_1a5ad89d82f94cc7cd8e67bd8d4fdf6ae2" kindref="member" tooltip="Return the size of the container.">size</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d7e/classDVLInfoTest_1aec06023f7c4da5bc7006d580bdc0ad2a" kindref="member" tooltip="Erase the elements in the container.">DVLInfoTest::clear</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cont_p)<sp/>-&gt;<sp/><ref refid="da/d7e/classDVLInfoTest_1aec06023f7c4da5bc7006d580bdc0ad2a" kindref="member" tooltip="Erase the elements in the container.">clear</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d7e/classDVLInfoTest_1ad0311e1b32ce81342c9d298021dff7b7" kindref="member" tooltip="Delete a container.">DVLInfoTest::del</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="70"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cont_p);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="da/d7e/classDVLInfoTest_1a55844f5e71a1e90743ae290a04668be7" kindref="member" tooltip="Copy a container.">DVLInfoTest::clone</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="76"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;int*&gt;<sp/>(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cont_p));</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase" kindref="compound" tooltip="Helper to iterate over a DV container.">DataModel_detail::DVLIteratorBase</ref>*</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="da/d7e/classDVLInfoTest_1af1bc45256059ccb2cd492cf9532e6f50" kindref="member" tooltip="Return a new iterator object.">DVLInfoTest::iterator</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*cont_p*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_DVLInfoBase()</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="da/d7e/classDVLInfoTest" kindref="compound">DVLInfoTest</ref><sp/>info;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>*<sp/>info2<sp/>=</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d8/d5d/classFoo" kindref="compound">Foo</ref>));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>assert<sp/>(info2<sp/>==<sp/>&amp;info);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d8/d5d/classFoo" kindref="compound">Foo</ref>));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a88f1be44e550043095556123f8b4a79a" kindref="member" tooltip="Return the CLID for the container.">clid</ref>()<sp/>==<sp/>1234);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a3b7f07882c9f600409a933e5349612ca" kindref="member" tooltip="Return the type_info for the container&amp;#39;s element. (Pointer and const stripped...">elt_tinfo</ref>()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(double));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>info2<sp/>=<sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(1234);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>assert<sp/>(info2<sp/>==<sp/>&amp;info);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p<sp/>=<sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a4e7615c06e52c6082a28bcf240717052" kindref="member" tooltip="Construct a new container.">make</ref><sp/>(5);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a573257650e94d8d10b515c0585c33f54" kindref="member" tooltip="Push a new pointer into the container.">push</ref><sp/>(cont_p,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a573257650e94d8d10b515c0585c33f54" kindref="member" tooltip="Push a new pointer into the container.">push</ref><sp/>(cont_p,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(2));<sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a05a82682d75d6170ffbf2a02fd11aee1" kindref="member" tooltip="Return a pointer to the container base.">base</ref>(cont_p)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>std::vector&lt;int*&gt;*<sp/>vec<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(cont_p);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>assert<sp/>(vec-&gt;capacity()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>assert<sp/>(vec-&gt;size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>assert<sp/>(*(*vec)[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>assert<sp/>(*(*vec)[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(cont_p)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::vector&lt;int*&gt;*<sp/>vec2<sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::vector&lt;int*&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad13605566580ca802482b94608bbad99" kindref="member" tooltip="Copy a container.">clone</ref><sp/>(cont_p));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>assert<sp/>(vec2<sp/>!=<sp/>vec);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>assert<sp/>(vec2-&gt;size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(*(*vec2)[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>assert<sp/>(*(*vec2)[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(vec2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a2246047fc9a985e4ffff3714e6a06994" kindref="member" tooltip="Erase the elements in the container.">clear</ref><sp/>(vec2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(vec2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert<sp/>(vec2-&gt;size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a5a85ad96eef9b6cecfc41ca28c845c2d" kindref="member" tooltip="Delete a container.">del</ref><sp/>(vec);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(vec2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="131" refid="d3/d4b/classmycont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::remove_pointer&lt;typename<sp/>T::value_type&gt;::type</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>base_value_type;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>pol)<sp/>:<sp/>m_pol<sp/>(pol)<sp/>{}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>stdcont()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_pol;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::vector&lt;int*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">myvec</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::list&lt;int*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">mylist</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="d1/daa/classmyvec2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/daa/classmyvec2" kindref="compound">myvec2</ref><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>myvec,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a0393c7e87efbe788419774c662cba5a2" kindref="member" tooltip="Default constructor.">AuxVectorBase</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="d1/daa/classmyvec2" kindref="compound">myvec2</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>pol<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>)<sp/>:<sp/>myvec<sp/>(pol)<sp/>{}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="d1/daa/classmyvec2" kindref="compound">myvec2</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/daa/classmyvec2" kindref="compound">myvec2</ref>&amp;)<sp/>:<sp/>myvec<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>),<sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a0393c7e87efbe788419774c662cba5a2" kindref="member" tooltip="Default constructor.">SG::AuxVectorBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity_v()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_v()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/ddf/DataList_8icc_1a4d1d3c758cc95dad2d968640b743ce68" kindref="member" tooltip="Construct a new container.">dvl_makecontainer</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nreserve,<sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt;std::vector&lt;T&gt;<sp/>&gt;*&amp;<sp/>cont)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>cont<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::vector&lt;T&gt;</ref><sp/>&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>cont-&gt;reserve<sp/>(nreserve);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/ddf/DataList_8icc_1a4d1d3c758cc95dad2d968640b743ce68" kindref="member" tooltip="Construct a new container.">dvl_makecontainer</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*nreserve*/</highlight><highlight class="normal">,<sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont</ref>&lt;std::list&lt;T&gt;<sp/>&gt;*&amp;<sp/>cont)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>cont<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::list&lt;T&gt;</ref><sp/>&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">CLASS_DEF<sp/>(myvec,<sp/>7428347,<sp/>1)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">CLASS_DEF<sp/>(mylist,<sp/>7428348,<sp/>1)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">template<sp/>&lt;class<sp/>CONT&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">CONT*<sp/>test_DVLInfo1<sp/>()</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;CONT&gt;</ref><sp/>info;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>*<sp/>info2<sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(CONT));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>assert<sp/>(info2<sp/>==<sp/>&amp;info);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>info2<sp/>=<sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a0d0099482dc3f21a238630ea6502fe2f" kindref="member" tooltip="Find the DVLInfo for the container tinfo.">DataModel_detail::DVLInfoBase::find</ref><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;CONT&gt;::ID</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>assert<sp/>(info2<sp/>==<sp/>&amp;info);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(CONT));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a88f1be44e550043095556123f8b4a79a" kindref="member" tooltip="Return the CLID for the container.">clid</ref>()<sp/>==<sp/><ref refid="d0/dbd/structClassID__traits_1a398a92ff5e7f26e81cc8bbe772edbd36" kindref="member" tooltip="Function returning a unique integer identifier for the selected type.">ClassID_traits&lt;CONT&gt;::ID</ref>());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a3b7f07882c9f600409a933e5349612ca" kindref="member" tooltip="Return the type_info for the container&amp;#39;s element. (Pointer and const stripped...">elt_tinfo</ref>()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(int));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cont_p<sp/>=<sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a4e7615c06e52c6082a28bcf240717052" kindref="member" tooltip="Construct a new container.">make</ref><sp/>(5);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a573257650e94d8d10b515c0585c33f54" kindref="member" tooltip="Push a new pointer into the container.">push</ref><sp/>(cont_p,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a573257650e94d8d10b515c0585c33f54" kindref="member" tooltip="Push a new pointer into the container.">push</ref><sp/>(cont_p,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(2));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>CONT*<sp/>cont<sp/>=<sp/>(CONT*)cont_p;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>assert<sp/>(cont-&gt;m_pol<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>assert<sp/>(cont-&gt;size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONT::iterator<sp/>it<sp/>=<sp/>cont-&gt;begin();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>assert<sp/>(**it<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>assert<sp/>(**it<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(cont_p)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>CONT*<sp/>cont2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">CONT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad13605566580ca802482b94608bbad99" kindref="member" tooltip="Copy a container.">clone</ref><sp/>(cont_p));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>assert<sp/>(cont2<sp/>!=<sp/>cont);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>assert<sp/>(cont2-&gt;m_pol<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>assert<sp/>(cont2-&gt;size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>cont2-&gt;begin();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>assert<sp/>(**it<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>assert<sp/>(**it<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(cont2)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a2246047fc9a985e4ffff3714e6a06994" kindref="member" tooltip="Erase the elements in the container.">clear</ref>(cont2);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1ad79b4055dea09683ea9bb1b1f7cd7e70" kindref="member" tooltip="Return the size of the container.">size</ref><sp/>(cont2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>assert<sp/>(cont2-&gt;size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a5a85ad96eef9b6cecfc41ca28c845c2d" kindref="member" tooltip="Delete a container.">del</ref><sp/>(cont2);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>CONT<sp/>cont3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>cont3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(i));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>cont3.push_back<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)0);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase" kindref="compound" tooltip="Helper to iterate over a DV container.">DataModel_detail::DVLIteratorBase</ref>*<sp/>iit<sp/>=<sp/>info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(&amp;cont3);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>iit-&gt;<ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase_1a9e74fe1d375806b4958e024bb9a6171e" kindref="member" tooltip="Return the next element from the container.">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(*pp<sp/>==<sp/>ii++);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cont;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_DVLInfo()</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>myvec*<sp/>vec<sp/>=<sp/>test_DVLInfo1&lt;myvec&gt;();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>assert<sp/>(vec-&gt;capacity()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>test_DVLInfo1&lt;mylist&gt;<sp/>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;myvec&gt;</ref><sp/>info;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>assert<sp/>(info.base(vec)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="d1/daa/classmyvec2" kindref="compound">myvec2</ref><sp/>vec2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;myvec2&gt;</ref><sp/>info2;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>assert<sp/>(info2.<ref refid="df/d12/classDataModel__detail_1_1DVLInfo_1a19dc551f37ecfd494bfb838efc210e4f" kindref="member" tooltip="Return a pointer to the container base.">base</ref>(&amp;vec2)<sp/>==<sp/>&amp;vec2);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/db3/structB" kindref="compound">B</ref></highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>:<sp/>bb(x)<sp/>{}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d9/db3/structB" kindref="compound">B</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bb;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/db3/structD" kindref="compound">D</ref></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref></highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>:<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(x+10),<sp/>dd(x)<sp/>{}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dd;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">SG_BASE<sp/>(<ref refid="d7/db3/structD" kindref="compound">D</ref>,<sp/>SG_VIRTUAL(<ref refid="d9/db3/structB" kindref="compound">B</ref>));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::vector&lt;B*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">myvecb</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::vector&lt;D*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">myvecd</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::list&lt;B*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">mylistb</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d3/d4b/classmycont" kindref="compound">mycont&lt;std::list&lt;D*&gt;</ref><sp/>&gt;<sp/><ref refid="d3/d4b/classmycont" kindref="compound">mylistd</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">CLASS_DEF<sp/>(myvecb,<sp/>7428349,<sp/>1)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">CLASS_DEF<sp/>(myvecd,<sp/>7428350,<sp/>1)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">CLASS_DEF<sp/>(mylistb,<sp/>7428351,<sp/>1)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">CLASS_DEF<sp/>(mylistd,<sp/>7428352,<sp/>1)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">template<sp/>&lt;class<sp/>CONTB,<sp/>class<sp/>CONTD,<sp/>class<sp/>CONTI&gt;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_dvl_convert1()</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;CONTB&gt;</ref><sp/>info;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>CONTD*<sp/>contd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CONTD<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>contd-&gt;push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>*<sp/>info2;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>newp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(*contd,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(CONTI),<sp/>info2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>assert<sp/>(newp<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>newp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(*contd,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(CONTB),<sp/>info2);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>()<sp/>==<sp/>info.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>CONTB*<sp/>contb<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">CONTB*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(newp);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>assert<sp/>(contb-&gt;size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CONTB::iterator<sp/>it<sp/>=<sp/>contb-&gt;begin();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>((*it)-&gt;bb<sp/>=<sp/>i+10);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>newp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(*contd,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;CONTB&gt;::ID</ref>(),<sp/>info2);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>assert<sp/>(info2-&gt;<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>()<sp/>==<sp/>info.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a869345b45a460cdaca3247852aba3d34" kindref="member" tooltip="Return the type_info for the container.">tinfo</ref>());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>contb<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">CONTB*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(newp);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>assert<sp/>(contb-&gt;size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>contb-&gt;begin();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>((*it)-&gt;bb<sp/>=<sp/>i+10);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>CONTD*<sp/>contd2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CONTD<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=9;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>contd-&gt;push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>DataModel_detail::dvl_update<sp/>(*contd2,<sp/>newp,<sp/>info2);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>contb-&gt;begin();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=9;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>((*it)-&gt;bb<sp/>=<sp/>i+10);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_dvl_convert()</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>b1<sp/>=<sp/>d1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>assert<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)b1<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)d1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>test_dvl_convert1&lt;myvecb,<sp/>myvecd,<sp/>myvec&gt;();</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>test_DVLInfoBase();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>test_DVLInfo();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>test_dvl_convert();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLInfo_test.cxx"/>
  </compounddef>
</doxygen>
