<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/dda/classEL_1_1WhiteBoardSvc" kind="class" prot="public">
    <compoundname>EL::WhiteBoardSvc</compoundname>
    <basecompoundref refid="de/ddb/classEL_1_1Algorithm" prot="public" virt="non-virtual">EL::Algorithm</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a8aefa8b9a59f230f243338348fa44ec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1afa8999f46656a42d53df3731216f1296">testInvariant</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="45"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a74f347dd23285a127dd78701944983e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::WhiteBoardSvc::WhiteBoardSvc</definition>
        <argsstring>()</argsstring>
        <name>WhiteBoardSvc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard constructor guarantee: strong failures: out of memory I rationale: this constructor has to be public to allow root streaming. normally I would have made it protected to prevent the user from creating an object of base class type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="55"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a59b145b5b090b6698dcb75921709b825" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EL::WhiteBoardSvc::hasVar</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>hasVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether we have the given variable guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="62"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1af079b162326fdda08920166a069e98ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float EL::WhiteBoardSvc::getFloat</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the content of the variable, assuming the given type guarantee: strong failures: variable not found failures: variable of wrong type failures: given type not supported postcondition(3): result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a1e7327511652af9775c540652a56d72d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::getArray</definition>
        <argsstring>(const std::string &amp;name, std::size_t &amp;size, const float *&amp;values) const </argsstring>
        <name>getArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float *&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="74"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a4cf987c1ed65f22cce7e4925bd1b5db0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TObject *</type>
        <definition>TObject* EL::WhiteBoardSvc::getTObject</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getTObject</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1af9b054cb4b8997fa4eb8628983c870f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T * EL::WhiteBoardSvc::retrieve</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>retrieve</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the content of the variable, casted to the given type guarantee: strong failures: variable not found failures: variable of wrong type failures: TObject type not supported </para>        </detaileddescription>
        <inbodydescription>
<para>no invariant used </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" bodystart="171" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a0ddcadbfa6b1318b69d0aa3017334005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::setFloat</definition>
        <argsstring>(const std::string &amp;name, float value)</argsstring>
        <name>setFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: set/create a variable, assuming the given type guarantee: strong failures: given type not supported failures: variable can not be set failures: out of memory II requires(4): TObject != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a8a791937564b89b873dc0df543d8c49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::setArray</definition>
        <argsstring>(const std::string &amp;name, const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a9290d410cc0071b60b72daefb1e41d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::setArray</definition>
        <argsstring>(const std::string &amp;name, std::size_t size, const float *values)</argsstring>
        <name>setArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="97"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a1960939423d3cf6c82106c97d1c459dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::WhiteBoardSvc::setTObject</definition>
        <argsstring>(TObject *object, bool swallow=true)</argsstring>
        <name>setTObject</name>
        <param>
          <type>TObject *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>swallow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a53b247aa1dc496faa08407b2d8061c63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* EL::WhiteBoardSvc::GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: return the name of this algorithm guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a2758bc462ed4ac7818aaac2f3a244829" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool EL::WhiteBoardSvc::doHasVar</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>doHasVar</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether we have the given variable guarantee: strong failures: out of memory II rationale: the virtual part of <ref refid="d5/dda/classEL_1_1WhiteBoardSvc_1a59b145b5b090b6698dcb75921709b825" kindref="member">WhiteBoardSvc::hasVar</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1aff7c0062d6a7cf13070b5660ab1f96fb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>float</type>
        <definition>virtual float EL::WhiteBoardSvc::doGetFloat</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>doGetFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the content of the variable, assuming the given type guarantee: strong failures: variable not found failures: variable of wrong type failures: given type not supported postcondition(4): result != 0 description: the virtual part of the getters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1ac94c810a76ba02195fa35aab07730d22" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::WhiteBoardSvc::doGetArray</definition>
        <argsstring>(const std::string &amp;name, std::size_t &amp;size, const float *&amp;values) const </argsstring>
        <name>doGetArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float *&amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1adae7f8e2a78bc101e3b8e4afdb8ac655" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>TObject *</type>
        <definition>virtual TObject* EL::WhiteBoardSvc::doGetTObject</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>doGetTObject</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1ab931011594d114e38101f6095c01f124" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::WhiteBoardSvc::doSetFloat</definition>
        <argsstring>(const std::string &amp;name, float value)</argsstring>
        <name>doSetFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: set/create a variable, assuming the given type guarantee: strong failures: given type not supported failures: variable can not be set failures: out of memory II requires(3): TObject != 0 description: the virtual part of the setters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="147"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a966f4d2c28a38ef126e5bbec9aedcedc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::WhiteBoardSvc::doSetArray</definition>
        <argsstring>(const std::string &amp;name, std::size_t size, const float *values)</argsstring>
        <name>doSetArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="149"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a754567f69291b8cd0801a63c5063c3d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::WhiteBoardSvc::doSetTObject</definition>
        <argsstring>(TObject *object, bool swallow)</argsstring>
        <name>doSetTObject</name>
        <param>
          <type>TObject *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>swallow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="150"/>
      </memberdef>
      <memberdef kind="function" id="d5/dda/classEL_1_1WhiteBoardSvc_1a45f21cc2c749d15f1191a8249998fd10" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::WhiteBoardSvc::ClassDef</definition>
        <argsstring>(WhiteBoardSvc, 1)</argsstring>
        <name>ClassDef</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1aaaf7e4b47c721a094449edc60a2ffe88">ClassDef</reimplements>
        <param>
          <type><ref refid="d5/dda/classEL_1_1WhiteBoardSvc" kindref="compound">WhiteBoardSvc</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="23181">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
      </node>
      <node id="23180">
        <label>EL::WhiteBoardSvc</label>
        <link refid="d5/dda/classEL_1_1WhiteBoardSvc"/>
        <childnode refid="23181" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="23183">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
        <childnode refid="23184" relation="usage">
          <edgelabel>m_wk</edgelabel>
        </childnode>
      </node>
      <node id="23184">
        <label>EL::Worker</label>
        <link refid="da/d12/classEL_1_1Worker"/>
        <childnode refid="23185" relation="usage">
          <edgelabel>m_metaData</edgelabel>
        </childnode>
      </node>
      <node id="23182">
        <label>EL::WhiteBoardSvc</label>
        <link refid="d5/dda/classEL_1_1WhiteBoardSvc"/>
        <childnode refid="23183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23185">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" bodystart="36" bodyend="159"/>
    <listofallmembers>
      <member refid="de/ddb/classEL_1_1Algorithm_1abb182dee6741786ce59ddbd8a8fc4cc0" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>Algorithm</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a9e2072bd4fdda18ebc86f847b691d9b9" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>book</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a45f21cc2c749d15f1191a8249998fd10" prot="private" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>ClassDef</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1ac94c810a76ba02195fa35aab07730d22" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doGetArray</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1aff7c0062d6a7cf13070b5660ab1f96fb" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doGetFloat</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1adae7f8e2a78bc101e3b8e4afdb8ac655" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doGetTObject</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a2758bc462ed4ac7818aaac2f3a244829" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doHasVar</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a966f4d2c28a38ef126e5bbec9aedcedc" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doSetArray</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1ab931011594d114e38101f6095c01f124" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doSetFloat</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a754567f69291b8cd0801a63c5063c3d4" prot="private" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>doSetTObject</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a1e7327511652af9775c540652a56d72d" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>getArray</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1af079b162326fdda08920166a069e98ba" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>getFloat</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a53b247aa1dc496faa08407b2d8061c63" prot="public" virt="virtual"><scope>EL::WhiteBoardSvc</scope><name>GetName</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a4cf987c1ed65f22cce7e4925bd1b5db0" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>getTObject</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a59b145b5b090b6698dcb75921709b825" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>hasVar</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a03872c24f8a637ba069b61d847ad557e" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>hist</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a468b0314089506f2c36445cfc84f673b" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d3345f2effc1ea5b8add736df764ca7" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1ad89c787f00a88c7b51a23a4a397f5c05" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>msgLvl</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1af9b054cb4b8997fa4eb8628983c870f7" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>retrieve</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a8a791937564b89b873dc0df543d8c49c" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>setArray</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a9290d410cc0071b60b72daefb1e41d4a" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>setArray</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a0ddcadbfa6b1318b69d0aa3017334005" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>setFloat</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a767c1725616f14d347b79002d755bf55" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>setMsgLevel</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a1960939423d3cf6c82106c97d1c459dd" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>setTObject</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a8aefa8b9a59f230f243338348fa44ec4" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>testInvariant</name></member>
      <member refid="d5/dda/classEL_1_1WhiteBoardSvc_1a74f347dd23285a127dd78701944983e9" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>WhiteBoardSvc</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a36e05186cb50cc0e5929121d3f6b6053" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>wk</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d787a867dbe55af8241032c7b4aabf4" prot="public" virt="non-virtual"><scope>EL::WhiteBoardSvc</scope><name>~Algorithm</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
