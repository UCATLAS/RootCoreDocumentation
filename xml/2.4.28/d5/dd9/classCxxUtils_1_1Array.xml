<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/dd9/classCxxUtils_1_1Array" kind="class" prot="public">
    <compoundname>CxxUtils::Array</compoundname>
    <derivedcompoundref refid="dc/dcc/classCxxUtils_1_1WritableArray" prot="public" virt="non-virtual">CxxUtils::WritableArray&lt; N &gt;</derivedcompoundref>
    <includes refid="df/dd0/Array_8h" local="no">Array.h</includes>
    <templateparamlist>
      <param>
        <type>unsigned int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d5/dd9/classCxxUtils_1_1Array_1af59f836aa265abddfd2498a5583163e7" prot="public" static="no">
        <name>@6</name>
        <enumvalue id="d5/dd9/classCxxUtils_1_1Array_1af59f836aa265abddfd2498a5583163e7a43f42401c01d2e7ac46e1a34aea23a57" prot="public">
          <name>NDIM</name>
          <initializer> N</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The number of dimensions of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/dd9/classCxxUtils_1_1Array_1af8716c5726c944e8ba55f90a576949e3" prot="public" static="no">
        <type><ref refid="d5/d27/classCxxUtils_1_1ArrayIteratorChooser" kindref="compound">ArrayIteratorChooser</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt;::<ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">const_iterator</ref></type>
        <definition>typedef ArrayIteratorChooser&lt;N&gt;::const_iterator CxxUtils::Array&lt; N &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>The iterator for this container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="137" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d5/dd9/classCxxUtils_1_1Array_1a55051c0d8d0b6265dc2dbfc5806348fd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Array&lt; N+1 &gt;</definition>
        <argsstring></argsstring>
        <name>Array&lt; N+1 &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="232" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d5/dd9/classCxxUtils_1_1Array_1ada7a09553f874e8b4279f7b6b9dbd6f4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ArrayIterator&lt; N+1 &gt;</definition>
        <argsstring></argsstring>
        <name>ArrayIterator&lt; N+1 &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="233" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d5/dd9/classCxxUtils_1_1Array_1af055e952849ac49b2e122b8ba0ae04b3" prot="protected" static="no" mutable="no">
        <type>const <ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref> *</type>
        <definition>const Arrayrep* CxxUtils::Array&lt; N &gt;::m_rep</definition>
        <argsstring></argsstring>
        <name>m_rep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the representation. Null if this instance was created using the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/dd9/classCxxUtils_1_1Array_1afd68d80d38edf9ae0c9608d93e2e5a3d" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CxxUtils::Array&lt; N &gt;::m_offs</definition>
        <argsstring></argsstring>
        <name>m_offs</name>
        <briefdescription>
<para>Offset in the <computeroutput>Arrayrep&apos;s</computeroutput> data of the first element of this array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="240" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1a140a13141f4e7584684e60437a5e9396" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::Array&lt; N &gt;::Array</definition>
        <argsstring>()</argsstring>
        <name>Array</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This produces an invalid <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> that is not associated with an <computeroutput>Arrayrep</computeroutput>. <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array_1abd36844e529259b2b764ef2b9a50e644" kindref="member">valid()</ref></computeroutput> will return <computeroutput>false</computeroutput> for such an array. The only other things that it is legal to do with an invalid array are to assign to it (which may make it valid) or request its size with <ref refid="d5/dd9/classCxxUtils_1_1Array_1a682d671307b58eb66a706a2af76cfb84" kindref="member">size()</ref> (which will always return 0).</para><para>This produces an invalid <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> that is not associated with an <computeroutput>Arrayrep</computeroutput>. <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array_1abd36844e529259b2b764ef2b9a50e644" kindref="member">valid()</ref></computeroutput> will return <computeroutput>false</computeroutput> for such an array. The only other thing that it is legal to do with an invalid array is to assign to it (which may make it valid). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="149" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1a1e2f65808fcf258d1abda76534696a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::Array&lt; N &gt;::Array</definition>
        <argsstring>(const Arrayrep &amp;rep)</argsstring>
        <name>Array</name>
        <param>
          <type>const <ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref> &amp;</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Arrayrep</computeroutput> from which to initialize the array.</para></parameterdescription>
</parameteritem>
</parameterlist>
Initialize an array from an <computeroutput>Arrayrep</computeroutput>. The new array will represent the entire <computeroutput>Arrayrep</computeroutput>. The dimension <computeroutput><ref refid="da/deb/structN" kindref="compound">N</ref></computeroutput> must match the length of the <computeroutput>Arrayrep&apos;s</computeroutput> shape. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1abd36844e529259b2b764ef2b9a50e644" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::Array&lt; N &gt;::valid</definition>
        <argsstring>() const </argsstring>
        <name>valid</name>
        <briefdescription>
<para>Test for validity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> is associated with an <computeroutput>Arrayrep</computeroutput>, false if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1ad4a962d70962e83f293e00daf146d7ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt; unsigned int &gt; CxxUtils::Array&lt; N &gt;::shape</definition>
        <argsstring>() const </argsstring>
        <name>shape</name>
        <briefdescription>
<para>Return the array shape. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The array shape.</para></simplesect>
The array shape is vector with one element for each array dimension, giving the size of the array along that dimension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="175" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1a682d671307b58eb66a706a2af76cfb84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CxxUtils::Array&lt; N &gt;::size</definition>
        <argsstring>(unsigned int dim=0) const </argsstring>
        <name>size</name>
        <param>
          <type>unsigned int</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the size of the array along one dimension. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the size to retrieve. Must be less than the number of dimensions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The array size along dimension .</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of the size to retrieve. Must be less than the number of dimensions.</para></parameterdescription>
</parameteritem>
</parameterlist>
As a special case, the size of an invalid array will always be 0. <simplesect kind="return"><para>The array size along dimension . </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="183" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1af8fb023d8d5e219d961478c123efff70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>-1 &gt;</type>
        <definition>Array&lt; N-1 &gt; CxxUtils::Array&lt; N &gt;::operator[]</definition>
        <argsstring>(unsigned int i) const </argsstring>
        <name>operator[]</name>
        <reimplementedby refid="dc/dcc/classCxxUtils_1_1WritableArray_1adab6a71e4ccba671ea22b151c406ffbf">operator[]</reimplementedby>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> indexing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired index. Must be less than the array size along this dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <emphasis>i&apos;th</emphasis> <computeroutput>N-1</computeroutput> dimensional subarray in the array.</para></simplesect>
Note that this operation is not available if <computeroutput><ref refid="da/deb/structN" kindref="compound">N</ref></computeroutput> is 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1aa6809b294f82601ec1753535c40b09be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Arrayelt *</type>
        <definition>const Arrayelt * CxxUtils::Array&lt; N &gt;::ptr</definition>
        <argsstring>() const </argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Return a direct pointer to array elements. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pointer to the first array elements.</para></simplesect>
Subsequent elements follow in standard <ref refid="db/db2/structC" kindref="compound">C</ref> indexing order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="201" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1adafacdf32bab04c6eec523a1a82d50a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">const_iterator</ref></type>
        <definition>Array&lt; N &gt;::const_iterator CxxUtils::Array&lt; N &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Return an iterator pointing at the beginning of the container. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator pointing at the beginning of the container. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="208" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1a5b1a3899473201e02c71188267ab6afe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">const_iterator</ref></type>
        <definition>Array&lt; N &gt;::const_iterator CxxUtils::Array&lt; N &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Return an iterator pointing past the end of the container. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator pointing past the end of the container. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="215" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="182" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d5/dd9/classCxxUtils_1_1Array_1a00d58b74503916ed6f414e3766f9136f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::Array&lt; N &gt;::Array</definition>
        <argsstring>(const Arrayrep &amp;rep, unsigned int offs)</argsstring>
        <name>Array</name>
        <param>
          <type>const <ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref> &amp;</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Private constructor for array indexing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>Arrayrep</computeroutput> from which to initialize the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the first element of the new array within <emphasis>rep</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is a private constructor used to make the <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> instances returned from an indexing operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="229" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="200" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Read-only multidimensional array. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>WriteableArray</computeroutput> together with an <computeroutput>Arrayrep</computeroutput>.</para><para>Read-only multidimensional array, specialized for <computeroutput>N=0</computeroutput>.</para><para><computeroutput>Array&lt;N&gt;</computeroutput> provides read-only access to an array. Indexing with [] returns an <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref>&lt;N-1&gt;</computeroutput>. <computeroutput><ref refid="df/d88/classCxxUtils_1_1Array_3_010_01_4" kindref="compound">Array&lt;0&gt;</ref></computeroutput> is special; it doesn&apos;t support indexing, but does support implicit conversion to the element type, <computeroutput>Arrayelt</computeroutput>. The <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> classes do not own their storage (and thus indexing does not require a complete copy). Rather, the complete data for the array are stored in an instance of <computeroutput>Arrayrep</computeroutput>. An <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> holds a pointer to an <computeroutput>Arrayrep</computeroutput> and an offset into the data.</para><para>This is a specialization of <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref></computeroutput> for the case <computeroutput>N=0</computeroutput>, i.e., a scalar. It does not support indexing, but it does support implicit conversions to <computeroutput>Arrayelt</computeroutput>, as well as an explicit conversion to an integer.</para><para>This is a convenient way of creating from scratch an array to which you can write. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="827">
        <label>CxxUtils::Array&lt; N &gt;</label>
        <link refid="d5/dd9/classCxxUtils_1_1Array"/>
      </node>
      <node id="828">
        <label>CxxUtils::WritableArray&lt; N &gt;</label>
        <link refid="dc/dcc/classCxxUtils_1_1WritableArray"/>
        <childnode refid="827" relation="public-inheritance">
        </childnode>
      </node>
      <node id="829">
        <label>CxxUtils::WritableArrayData&lt; N &gt;</label>
        <link refid="d3/dd4/classCxxUtils_1_1WritableArrayData"/>
        <childnode refid="828" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="831">
        <label>CaloRec::Arrayrep</label>
        <link refid="d4/dc1/structCaloRec_1_1Arrayrep"/>
      </node>
      <node id="830">
        <label>CxxUtils::Array&lt; N &gt;</label>
        <link refid="d5/dd9/classCxxUtils_1_1Array"/>
        <childnode refid="831" relation="usage">
          <edgelabel>m_rep</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="130" bodyend="241"/>
    <listofallmembers>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a140a13141f4e7584684e60437a5e9396" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>Array</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a1e2f65808fcf258d1abda76534696a2a" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>Array</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a00d58b74503916ed6f414e3766f9136f" prot="protected" virt="non-virtual"><scope>CxxUtils::Array</scope><name>Array</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a55051c0d8d0b6265dc2dbfc5806348fd" prot="protected" virt="non-virtual"><scope>CxxUtils::Array</scope><name>Array&lt; N+1 &gt;</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1ada7a09553f874e8b4279f7b6b9dbd6f4" prot="protected" virt="non-virtual"><scope>CxxUtils::Array</scope><name>ArrayIterator&lt; N+1 &gt;</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1adafacdf32bab04c6eec523a1a82d50a3" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>begin</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1af8716c5726c944e8ba55f90a576949e3" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>const_iterator</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a5b1a3899473201e02c71188267ab6afe" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>end</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1afd68d80d38edf9ae0c9608d93e2e5a3d" prot="protected" virt="non-virtual"><scope>CxxUtils::Array</scope><name>m_offs</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1af055e952849ac49b2e122b8ba0ae04b3" prot="protected" virt="non-virtual"><scope>CxxUtils::Array</scope><name>m_rep</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1af59f836aa265abddfd2498a5583163e7a43f42401c01d2e7ac46e1a34aea23a57" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>NDIM</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1af8fb023d8d5e219d961478c123efff70" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>operator[]</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1aa6809b294f82601ec1753535c40b09be" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>ptr</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1ad4a962d70962e83f293e00daf146d7ed" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>shape</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1a682d671307b58eb66a706a2af76cfb84" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>size</name></member>
      <member refid="d5/dd9/classCxxUtils_1_1Array_1abd36844e529259b2b764ef2b9a50e644" prot="public" virt="non-virtual"><scope>CxxUtils::Array</scope><name>valid</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
