<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/ddf/DataList_8icc" kind="file">
    <compoundname>DataList.icc</compoundname>
    <includes refid="d5/da8/CompareAndPrint_8h" local="yes">AthContainers/tools/CompareAndPrint.h</includes>
    <includes refid="de/d6b/ATHCONTAINERS__ASSERT_8h" local="yes">AthContainers/tools/ATHCONTAINERS_ASSERT.h</includes>
    <includes local="no">limits</includes>
    <includes refid="dd/d5e/DVLEltBaseInfo_8icc" local="yes">AthContainers/tools/DVLEltBaseInfo.icc</includes>
    <includedby refid="d1/d43/DataList_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h</includedby>
    <incdepgraph>
      <node id="32590">
        <label>limits</label>
      </node>
      <node id="32589">
        <label>cassert</label>
      </node>
      <node id="32584">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc</label>
        <link refid="DataList.icc"/>
        <childnode refid="32585" relation="include">
        </childnode>
        <childnode refid="32588" relation="include">
        </childnode>
        <childnode refid="32590" relation="include">
        </childnode>
        <childnode refid="32591" relation="include">
        </childnode>
      </node>
      <node id="32588">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="32589" relation="include">
        </childnode>
      </node>
      <node id="32587">
        <label>typeinfo</label>
      </node>
      <node id="32585">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="32586" relation="include">
        </childnode>
        <childnode refid="32587" relation="include">
        </childnode>
      </node>
      <node id="32591">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="32586">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32592">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc</label>
        <link refid="DataList.icc"/>
        <childnode refid="32593" relation="include">
        </childnode>
      </node>
      <node id="32593">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h</label>
        <link refid="d1/d43/DataList_8h"/>
        <childnode refid="32594" relation="include">
        </childnode>
        <childnode refid="32595" relation="include">
        </childnode>
      </node>
      <node id="32595">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLDataBucket_test.cxx</label>
        <link refid="d4/de3/DVLDataBucket__test_8cxx"/>
      </node>
      <node id="32594">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h</label>
        <link refid="db/ded/ConstDataList_8h"/>
        <childnode refid="32595" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d7/d36/structDataList__detail_1_1VirtBases_3_01B1_00_01DataModel__detail_1_1NoBase_00_01DataModel__detail_1_1NoBase_01_4" prot="public">DataList_detail::VirtBases&lt; B1, DataModel_detail::NoBase, DataModel_detail::NoBase &gt;</innerclass>
    <innerclass refid="df/d71/structDataList__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4" prot="public">DataList_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</innerclass>
    <innerclass refid="d5/dec/structDataList__detail_1_1VirtBases" prot="public">DataList_detail::VirtBases</innerclass>
    <innerclass refid="d5/dec/structDataList__detail_1_1VirtBases" prot="public">DataList_detail::VirtBases</innerclass>
    <innernamespace refid="da/dc2/namespaceDataList__detail">DataList_detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d5/ddf/DataList_8icc_1af158686424333ddc04fb3fa2a7b72856" prot="public" static="no">
        <name>DATALIST</name>
        <initializer><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>, <ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound">DataModel_detail::NoBase</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="1275" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="1275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d5/ddf/DataList_8icc_1ad5ca9ebc88abd6bff7483a87aac89acb" prot="public" static="no">
        <name>DVLTYPE</name>
        <initializer><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2522" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2522" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a2f4af3db6bca5dc8d962d673635f0865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List equality comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff the size and elements of the lists are equal.</para></simplesect>
This is an equivalence relation. It is linear in the size of the lists. Lists are considered equivalent if their sizes are equal, and if corresponding elements compare equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2439" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2438" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1aa7a25d1b36f44af915a534c124985c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator==. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2447" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2446" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a331f1405e2b4323d37655e725a8f5b63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List ordering relation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff <emphasis>x</emphasis> is lexicographically less than <emphasis>y</emphasis>.</para></simplesect>
This is a total ordering relation. It is linear in the size of the lists. Comparisons are done on the pointer values of the elements.</para><para>See <computeroutput>std::lexicographical_compare()</computeroutput> for how the determination is made. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2465" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2464" bodyend="2467"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a4292484069a07bf3057169565d175df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2473" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2472" bodyend="2475"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a8dfe0fab283df99f49e2e84acda68ad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2481" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2480" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a9cd772f232193f4545efb136406153d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2489" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2488" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a712da80007cfbb1207df094811f2a78b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(DataList&lt; T &gt; &amp;a, DataList&lt; T &gt; &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>See <computeroutput><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member">DataList&lt;T, BASE&gt;::swap()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>See <computeroutput><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member">DataList&lt;T, BASE&gt;::swap()</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2497" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2496" bodyend="2499"/>
      </memberdef>
      <memberdef kind="function" id="d5/ddf/DataList_8icc_1a4d1d3c758cc95dad2d968640b743ce68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dvl_makecontainer</definition>
        <argsstring>(size_t, DataList&lt; T &gt; *&amp;cont)</argsstring>
        <name>dvl_makecontainer</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; *&amp;</type>
          <declname>cont</declname>
        </param>
        <briefdescription>
<para>Construct a new container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nreserve</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements for which to reserve space. (Ignored if not appropriate.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cont[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the constructed container. (Returned via an argument to allow for template argument deduction.)</para></parameterdescription>
</parameteritem>
</parameterlist>
Specialization for <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" line="2542" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2541" bodyend="2544"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An STL list of pointers that by default owns its pointed-to elements. Implementation file. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder, Paolo Calafiura, Sebastien Binet, etc </para></simplesect>
<simplesect kind="date"><para>February 2006; rewritten from earlier version. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Dear<sp/>emacs,<sp/>this<sp/>is<sp/>-*-<sp/>c++<sp/>-*-</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/tools/CompareAndPrint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d6b/ATHCONTAINERS__ASSERT_8h" kindref="compound" tooltip="An overridable variant of assert.">AthContainers/tools/ATHCONTAINERS_ASSERT.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VirtBases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">ENTER_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataList_detail<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B3&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VirtBases;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">EXIT_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataList_detail<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>DO_REMOVE_DUPLICATES<sp/>to<sp/>activate<sp/>for<sp/>debugging<sp/>purposes<sp/>(Slow)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>this<sp/>name<sp/>should<sp/>be<sp/>distinct<sp/>from<sp/>the<sp/>corresponding<sp/>one<sp/>in<sp/>DataVector,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>they&apos;re<sp/>in<sp/>different<sp/>namespaces.<sp/><sp/>This<sp/>due<sp/>to<sp/>an<sp/>apparent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Koenig<sp/>lookup<sp/>bug<sp/>in<sp/>gccxml<sp/>0.9.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>optimizeMeAway_DL(L&amp;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">){}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>LIST&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LIST::iterator<sp/>remove_duplicates(LIST&amp;<sp/>l,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quiet=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DO_REMOVE_DUPLICATES</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>l.sort();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique(l.begin(),<sp/>l.end(),<sp/><ref refid="d7/d24/classDataModel__detail_1_1CompareAndPrint" kindref="compound" tooltip="Helper for remove_duplicates.">DataModel_detail::CompareAndPrint</ref>(quiet));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>optimizeMeAway_DL(l,<sp/>quiet);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.end();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1&gt;</highlight></codeline>
<codeline lineno="69" refid="d7/d36/structDataList__detail_1_1VirtBases_3_01B1_00_01DataModel__detail_1_1NoBase_00_01DataModel__detail_1_1NoBase_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref>&lt;B1,<sp/>DataModel_detail::NoBase,<sp/>DataModel_detail::NoBase&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B1&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>these<sp/>types<sp/>available<sp/>to<sp/>the<sp/>derived<sp/>@c<sp/>DataList.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::PtrList</ref><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aff6bcb7f0afc9984f2628a8091ef355c" kindref="member">PtrList</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::size_type</ref><sp/>size_type;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::difference_type</ref><sp/>difference_type;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::allocator_type</ref><sp/>allocator_type;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__REFLEX__</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>using<sp/>virtual<sp/>derivation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aabe3c3e4e889a51b255107fa9132cf05" kindref="member">has_virtual</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>this<sp/>down<sp/>to<sp/>base<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">clearMostDerived</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B1&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>these<sp/>here<sp/>to<sp/>prevent<sp/>ambiguities,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>they<sp/>shouldn&apos;t<sp/>actually<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aef497fdbda365d2b65713b798bb5b375" kindref="member" tooltip="Find the most-derived DataList class in the hierarchy.">dl_typeid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a66500cddb45312b794fdcdb28aedafae" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo_v</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="98"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;B1&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a726104054dc33f795f9b1c6bf5fc3d65" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>DataList_detail::VirtBases&lt;B1,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>,<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>&gt;::self<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B2&gt;</highlight></codeline>
<codeline lineno="124" refid="df/d71/structDataList__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref>&lt;B1,<sp/>B2,<sp/>DataModel_detail::NoBase&gt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B1&gt;,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B2&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>be<sp/>sure<sp/>that<sp/>@c<sp/>B1<sp/>and<sp/>@c<sp/>B2<sp/>have<sp/>the<sp/>same<sp/>ultimate<sp/>base<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>typedef<sp/>::boost::is_same&lt;typename<sp/>DataList&lt;B1&gt;::PtrList,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B2&gt;::PtrList</ref>&gt;<sp/>check;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT<sp/>(check::value);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>these<sp/>types<sp/>available<sp/>to<sp/>the<sp/>derived<sp/>@c<sp/>DataList.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::PtrList</ref><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aff6bcb7f0afc9984f2628a8091ef355c" kindref="member">PtrList</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::size_type</ref><sp/>size_type;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::difference_type</ref><sp/>difference_type;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::allocator_type</ref><sp/>allocator_type;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__REFLEX__</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>using<sp/>virtual<sp/>derivation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aabe3c3e4e889a51b255107fa9132cf05" kindref="member">has_virtual</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>this<sp/>down<sp/>to<sp/>base<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">clearMostDerived</ref>()</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B1&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B2&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>these<sp/>here<sp/>to<sp/>prevent<sp/>ambiguities,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>they<sp/>shouldn&apos;t<sp/>actually<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aef497fdbda365d2b65713b798bb5b375" kindref="member" tooltip="Find the most-derived DataList class in the hierarchy.">dl_typeid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="156"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a66500cddb45312b794fdcdb28aedafae" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo_v</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="160"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;B1&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a726104054dc33f795f9b1c6bf5fc3d65" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>()</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>DataList_detail::VirtBases&lt;B1,<sp/>B2,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>&gt;::self<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B3&gt;</highlight></codeline>
<codeline lineno="185" refid="d5/dec/structDataList__detail_1_1VirtBases" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B1&gt;,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B2&gt;,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B3&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>to<sp/>be<sp/>sure<sp/>that<sp/>@c<sp/>B1,<sp/>@c<sp/>B2,<sp/>and<sp/>@c<sp/>B3<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ultimate<sp/>base<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>typedef<sp/>::boost::is_same&lt;typename<sp/>DataList&lt;B1&gt;::PtrList,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B2&gt;::PtrList</ref>&gt;<sp/>check1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>typedef<sp/>::boost::is_same&lt;typename<sp/>DataList&lt;B1&gt;::PtrList,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B3&gt;::PtrList</ref>&gt;<sp/>check2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT<sp/>(check1::value);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT<sp/>(check2::value);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>these<sp/>types<sp/>available<sp/>to<sp/>the<sp/>derived<sp/>@c<sp/>DataList.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::PtrList</ref><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aff6bcb7f0afc9984f2628a8091ef355c" kindref="member">PtrList</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::size_type</ref><sp/>size_type;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::difference_type</ref><sp/>difference_type;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B1&gt;::allocator_type</ref><sp/>allocator_type;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__REFLEX__</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>using<sp/>virtual<sp/>derivation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aabe3c3e4e889a51b255107fa9132cf05" kindref="member">has_virtual</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>this<sp/>down<sp/>to<sp/>base<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">clearMostDerived</ref>()</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B1&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B2&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">DataList&lt;B3&gt;::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>these<sp/>here<sp/>to<sp/>prevent<sp/>ambiguities,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>they<sp/>shouldn&apos;t<sp/>actually<sp/>be<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aef497fdbda365d2b65713b798bb5b375" kindref="member" tooltip="Find the most-derived DataList class in the hierarchy.">dl_typeid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="224"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">VirtBases</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a66500cddb45312b794fdcdb28aedafae" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo_v</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="228"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataList&lt;B1&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a726104054dc33f795f9b1c6bf5fc3d65" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>()</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::DataList_detail::VirtBases&lt;B1,<sp/>B2,<sp/>B3&gt;::self</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>DataList_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">ENTER_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataList_detail<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ROOT_VERSION_CODE<sp/>&lt;<sp/>ROOT_VERSION(<sp/>5,<sp/>99,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B3&gt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VirtBases</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">DataList_detail::VirtBases&lt;B1, B2, B3&gt;</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::TEMPLATE_DEFAULTS&lt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>ROOT_SELECTION_NS::NODEFAULT,<ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy."></ref></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">    ::DataModel_detail::NoBase</ref>,<ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy."></ref></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">    ::DataModel_detail::NoBase</ref>&gt;<sp/>dum1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B3<sp/>&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VirtBases<sp/>:<sp/><ref refid="d6/de5/classKeepFirstTemplateArguments" kindref="compound">KeepFirstTemplateArguments</ref>&lt;<sp/>1<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">DataList_detail::VirtBases&lt; B1, B2, B3 &gt;</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ROOT_VERSION</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal">EXIT_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>(derived)<sp/>DataList<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Constructors,<sp/>destructors,<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList&lt;T, BASE&gt;::DataList</ref></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::OWN_ELEMENTS*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>this-&gt;m_ownPolicy<sp/>=<sp/>ownPolicy;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">BASE::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::DataList</ref></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>(size_type<sp/>n,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::OWN_ELEMENTS*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>this-&gt;m_ownPolicy<sp/>=<sp/>ownPolicy;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">BASE::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.resize<sp/>(n,<sp/>(value_type)0);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::DataList</ref></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>(InputIterator<sp/>first,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::VIEW_ELEMENTS*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>input<sp/>iterator<sp/>can<sp/>actually<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>T*.<sp/><sp/>Lets<sp/>us<sp/>give<sp/>a<sp/>compilation<sp/>error<sp/>for<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DATALIST_BASE(D,<sp/>B);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>B*<sp/>bb[]<sp/>=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DataList&lt;D&gt;<sp/>d<sp/>(bb,<sp/>bb+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>would<sp/>otherwise<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::value_type<sp/>ittype;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT<sp/>((::boost::is_convertible&lt;ittype,<sp/>const<sp/>T*&gt;::value));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>this-&gt;m_ownPolicy<sp/>=<sp/>ownPolicy;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">BASE::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.assign<sp/>(first,<sp/>last);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;</ref>&amp;<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;rhs<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignment<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member">clear</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>any<sp/>currently-owned<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont<sp/>=<sp/>rhs.m_pCont;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::assign</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assign&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member">clear</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>any<sp/>currently-owned<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Element<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::front</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="454"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_cast(<sp/>this-&gt;m_pCont.front()<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::back</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="469"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_cast(<sp/>this-&gt;m_pCont.back()<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataList&lt;T, BASE&gt;::ElementProxy</ref></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::front</ref>()</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a1b6d12f288b6623ce6f7bf748ad472cd" kindref="member">ElementProxy</ref>(<sp/>this-&gt;m_pCont.begin(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataList&lt;T, BASE&gt;::ElementProxy</ref></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::back</ref>()</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a1b6d12f288b6623ce6f7bf748ad472cd" kindref="member">ElementProxy</ref>(<sp/>--(this-&gt;m_pCont.end()),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Iterator<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::const_iterator</ref></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::begin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="523"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref>(<sp/>this-&gt;m_pCont.begin()<sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::const_iterator</ref></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::end</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="540"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref>(<sp/>this-&gt;m_pCont.end()<sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::iterator</ref></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::begin</ref>()</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;m_pCont.begin(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::iterator</ref></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::end</ref>()</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;m_pCont.end(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::const_reverse_iterator</ref></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::rbegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="593"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::const_reverse_iterator</ref></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::rend</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="610"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::reverse_iterator</ref></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::rbegin</ref>()</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;m_pCont.end(),<sp/>this<sp/>));</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::reverse_iterator</ref></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::rend</ref>()</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;m_pCont.begin(),<sp/>this<sp/>));</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Insertion<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::push_front</ref>(<sp/>value_type<sp/>pElem<sp/>)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;push_front&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.push_front(<sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::push_back</ref>(<sp/>value_type<sp/>pElem<sp/>)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;push_back&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.push_back(<sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::iterator</ref></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::insert</ref>(<sp/>iterator<sp/>position,<sp/>value_type<sp/>pElem<sp/>)</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;m_pCont.insert(<sp/>position.base(),<sp/>pElem<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::insert</ref>(<sp/>iterator<sp/>position,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator<sp/>first,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>input<sp/>iterator<sp/>can<sp/>actually<sp/>be<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>T*.<sp/><sp/>Lets<sp/>us<sp/>give<sp/>a<sp/>compilation<sp/>error<sp/>for<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DATALIST_BASE(D,<sp/>B);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>B*<sp/>bb[]<sp/>=<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>DataList&lt;D&gt;<sp/>d;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>d.insert<sp/>(d.begin(),<sp/>bb,<sp/>bb+1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>would<sp/>otherwise<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::value_type<sp/>ittype;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>BOOST_STATIC_ASSERT<sp/>((::boost::is_convertible&lt;ittype,<sp/>const<sp/>T*&gt;::value));</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.insert(position.base(),<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Erasure<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::iterator</ref></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::erase</ref>(iterator<sp/>position)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;erase_base(<sp/>position.base()<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataList&lt;T, BASE&gt;::iterator</ref></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::erase</ref>(<sp/>iterator<sp/>first,<sp/>iterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;erase_base(<sp/>first.base(),<sp/>last.base()<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Swap<sp/>and<sp/>sort.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">DataList&lt;T, BASE&gt;::swap</ref>(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>rhs.<ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">std::swap</ref>(this-&gt;m_ownPolicy,<sp/>rhs.m_ownPolicy);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.swap(rhs.m_pCont);</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::iter_swap</ref><sp/>(iterator<sp/>a,<sp/>iterator<sp/>b)</highlight></codeline>
<codeline lineno="817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_ASSERT<sp/>(a.ownPolicy()<sp/>==<sp/>b.ownPolicy());</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>a.testInsert<sp/>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>b.testInsert<sp/>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a36d2905b9453ebc3a385881d22b7417b" kindref="member" tooltip="Swap the referents of two DataVector iterators.">std::iter_swap</ref><sp/>(a.base(),<sp/>b.base());</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::sort</ref>()</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::less&lt;typename<sp/>PtrList::value_type&gt;<sp/>less;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.sort(<sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper&lt;DataList, less&gt;</ref>(<sp/>less()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::sort</ref>(COMPARE<sp/>comp)</highlight></codeline>
<codeline lineno="845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.sort(<sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper&lt;DataList, COMPARE&gt;</ref>(<sp/>comp<sp/>));</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>List<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::splice</ref>(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont<sp/>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::splice</ref>(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>iterator<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont,<sp/>i.base()<sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::splice</ref>(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>first,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont,<sp/></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first.base(),<sp/>last.base()<sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::remove</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value<sp/>)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref><sp/>i<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>!=<sp/>(<sp/>i<sp/>=<sp/>std::find(<sp/>i,<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>value<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(i++);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PREDICATE&gt;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::remove_if</ref>(<sp/>PREDICATE<sp/>pred<sp/>)</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref><sp/>i<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>!=<sp/>(<sp/>i<sp/>=<sp/>std::find_if(<sp/>i,<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>pred<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(i++);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::unique</ref>()</highlight></codeline>
<codeline lineno="962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.unique();</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryPredicate&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::unique</ref>(<sp/>BinaryPredicate<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.unique(<ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryPredicate&gt;(p));</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;merge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrap<sp/>the<sp/>default<sp/>comparison<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>someone&apos;s<sp/>overridden<sp/>operator&lt;<sp/>for<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::less&lt;typename<sp/>DataList&lt;T,<sp/>BASE&gt;::PtrList::value_type&gt;<sp/>less;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.merge(<sp/>l.m_pCont,<sp/></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper&lt;DataList, less&gt;</ref>(<sp/>less()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>COMPARE<sp/>predicate<sp/>)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;merge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.merge(<sp/>l.m_pCont,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;</ref>,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPARE&gt;(predicate)<sp/>);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::reverse</ref>()</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.reverse();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Non-standard<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::swapElement</ref>(iterator<sp/>pos,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>newElem,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/>oldElem)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swapElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>oldElem<sp/>=</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d59/structDataModel__detail_1_1DVLCast" kindref="compound" tooltip="casting operations for DataVector/DataList. ">DataModel_detail::DVLCast&lt;DataList&gt;::cast</ref>(*pos.base());</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>*pos.base()<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::dvlinfo</ref>()</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_info;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::dvlinfo_v</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1099"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_info;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Internal<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::dl_typeid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1120"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::resortAux</ref><sp/>(iterator<sp/></highlight><highlight class="comment">/*beg*/</highlight><highlight class="normal">,<sp/>iterator<sp/></highlight><highlight class="comment">/*end*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::testInsert</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ATHCONTAINERS_LIKELY<sp/>(m_isMostDerived))</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1ae606c7332aeefc4ef0fa354ed8bce0fb" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsertOol</ref><sp/>(op);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::testInsertOol</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a726104054dc33f795f9b1c6bf5fc3d65" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isMostDerived)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>),<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aef497fdbda365d2b65713b798bb5b375" kindref="member" tooltip="Find the most-derived DataList class in the hierarchy.">dl_typeid</ref>());</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::clearMostDerived</ref>()</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">BASE::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::setMostDerived</ref>()</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a1dcd0f8aca19e5d366b88cc3be97250f" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">BASE::clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::assignElement</ref><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>newElem)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*pos;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>*pos<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::assignBaseElement</ref><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::value_type<sp/>newElem)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignBaseElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*pos;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>*pos<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::do_cast</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::value_type<sp/>p)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d59/structDataModel__detail_1_1DVLCast" kindref="compound" tooltip="casting operations for DataVector/DataList. ">DataModel_detail::DVLCast&lt;DataList&gt;::cast</ref><sp/>(p);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::s_info</ref>;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">//****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialized<sp/>(base)<sp/>DataList<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__<sp/>//<sp/>I<sp/>don&apos;t<sp/>think<sp/>CINT<sp/>will<sp/>be<sp/>able<sp/>to<sp/>read<sp/>this.</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>abbreviation<sp/>for<sp/>the<sp/>DataList<sp/>specialization<sp/>to<sp/>try<sp/>to<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>things<sp/>a<sp/>little<sp/>more<sp/>readable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATALIST<sp/>DataList&lt;T,<sp/>DataModel_detail::NoBase&gt;</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Constructors,<sp/>destructors,<sp/>assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal">DATALIST::DataList(<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::OWN_ELEMENTS*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>:<sp/>m_ownPolicy(ownPolicy)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">DATALIST::DataList(<sp/>size_type<sp/>n,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::OWN_ELEMENTS*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>:<sp/>m_ownPolicy(ownPolicy),</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont<sp/>(n,<sp/>(value_type)0)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal">DATALIST::DataList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>:<sp/>m_ownPolicy(SG::<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">VIEW_ELEMENTS</ref>),</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont(rhs.m_pCont)</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>m_isMostDerived<sp/>false<sp/>here,<sp/>because<sp/>we<sp/>may<sp/>be<sp/>being<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>a<sp/>derived<sp/>class<sp/>implicit<sp/>copy<sp/>constructor.<sp/><sp/>The<sp/>flags<sp/>will<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>correctly<sp/>when<sp/>@c<sp/>testInsert<sp/>gets<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal">DATALIST::DataList(<sp/>InputIterator<sp/>first,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/></highlight><highlight class="comment">/*=<sp/>SG::VIEW_ELEMENTS*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>:<sp/>m_ownPolicy(ownPolicy),</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont(first,<sp/>last)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal">DATALIST&amp;<sp/>DATALIST::operator=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;rhs<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignment<sp/>operator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member">clear</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>any<sp/>currently-owned<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont<sp/>=<sp/>rhs.m_pCont;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::assign(<sp/>InputIterator<sp/>first,</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assign&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member">clear</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Release<sp/>any<sp/>currently-owned<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">DATALIST::~DataList()</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>new_end<sp/>=</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataList_detail::remove_duplicates(m_pCont);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>iter<sp/>=<sp/>m_pCont.begin();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>new_end)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*(iter++);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Size<sp/>and<sp/>capacity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::size_type<sp/>DATALIST::size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1438"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.size();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::size_type<sp/>DATALIST::max_size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1449"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.max_size();</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::resize(size_type<sp/>sz)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&lt;<sp/><ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref><sp/>itr<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr<sp/>!=<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>sz;<sp/>++itr,<sp/>++length)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>want<sp/>to<sp/>point<sp/>at<sp/>the<sp/>good<sp/>element:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>one<sp/>which<sp/>will<sp/>be<sp/>the<sp/>new<sp/>end<sp/>of<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref><sp/>(<sp/>itr,<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont.insert(m_pCont.end(),<sp/>sz<sp/>-<sp/>m_pCont.size(),<sp/>0);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>DATALIST::empty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1488"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.empty();</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Element<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>DATALIST::front()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1506"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.front();</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>DATALIST::back()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1521"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.back();</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::ElementProxy<sp/>DATALIST::front<sp/>()</highlight></codeline>
<codeline lineno="1537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a1b6d12f288b6623ce6f7bf748ad472cd" kindref="member">ElementProxy</ref>(<sp/>m_pCont.begin(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::ElementProxy<sp/>DATALIST::back<sp/>()</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a1b6d12f288b6623ce6f7bf748ad472cd" kindref="member">ElementProxy</ref>(<sp/>--m_pCont.end(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Iterator<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::const_iterator<sp/>DATALIST::begin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1572"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.begin();</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::const_iterator<sp/>DATALIST::end()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1588"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.end();</highlight></codeline>
<codeline lineno="1590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::iterator<sp/>DATALIST::begin()</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>m_pCont.begin(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::iterator<sp/>DATALIST::end()</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>m_pCont.end(),<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::const_reverse_iterator<sp/>DATALIST::rbegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1638"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>(<sp/>m_pCont.end()<sp/>);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::const_reverse_iterator<sp/>DATALIST::rend()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1654"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref>(<sp/>m_pCont.begin()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::reverse_iterator<sp/>DATALIST::rbegin()</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>m_pCont.end(),<sp/>this<sp/>));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::reverse_iterator<sp/>DATALIST::rend()</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>(<sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>m_pCont.begin(),<sp/>this<sp/>));</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Insertion<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::push_front(value_type<sp/>pElem)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;push_front&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>m_pCont.push_front(pElem);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::push_back(value_type<sp/>pElem)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;push_back&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>m_pCont.push_back(pElem);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::iterator</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">DATALIST::insert(<sp/>iterator<sp/>position,<sp/>value_type<sp/>pElem<sp/>)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>m_pCont.insert(<sp/>position.base(),<sp/>pElem<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal">DATALIST::insert(<sp/>iterator<sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>m_pCont.insert(position.base(),<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Erasure<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::iterator<sp/>DATALIST::erase(<sp/>iterator<sp/>position<sp/>)</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;erase_base(<sp/>position.base()<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::iterator<sp/>DATALIST::erase(<sp/>iterator<sp/>first,<sp/>iterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref>(<sp/>this-&gt;erase_base(<sp/>first.base(),<sp/>last.base()<sp/>),<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::pop_front()</highlight></codeline>
<codeline lineno="1829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pCont.empty())<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pCont.front();</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont.pop_front();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::pop_back()</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pCont.empty())<sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pCont.back();</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pCont.pop_back();</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::clear()</highlight></codeline>
<codeline lineno="1865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Swap<sp/>and<sp/>sort.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">DATALIST::swap</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>rhs.<ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">std::swap</ref>(<sp/>m_ownPolicy,<sp/>rhs.m_ownPolicy<sp/>);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>m_pCont.swap(<sp/>rhs.m_pCont<sp/>);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::iter_swap<sp/>(iterator<sp/>a,<sp/>iterator<sp/>b)</highlight></codeline>
<codeline lineno="1900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_ASSERT<sp/>(a.ownPolicy()<sp/>==<sp/>b.ownPolicy());</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/>a.testInsert<sp/>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>b.testInsert<sp/>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a36d2905b9453ebc3a385881d22b7417b" kindref="member" tooltip="Swap the referents of two DataVector iterators.">std::iter_swap</ref><sp/>(a.base(),<sp/>b.base());</highlight></codeline>
<codeline lineno="1905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::sort()</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>m_pCont.sort();</highlight></codeline>
<codeline lineno="1917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::sort(<sp/>COMPARE<sp/>comp<sp/>)</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>m_pCont.sort(<sp/>comp<sp/>);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>List<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::splice(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont<sp/>);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::splice(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>iterator<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont,<sp/>i.base()<sp/>);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::splice(<sp/>iterator<sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>first,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;splice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.splice(<sp/>position.base(),<sp/>l.m_pCont,<sp/></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first.base(),<sp/>last.base()<sp/>);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::remove(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value<sp/>)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref><sp/>i<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>!=<sp/>(<sp/>i<sp/>=<sp/>std::find(<sp/>i,<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>value<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(i++);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PREDICATE&gt;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::remove_if(<sp/>PREDICATE<sp/>pred<sp/>)</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" kindref="member">iterator</ref><sp/>i<sp/>=<sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/>!=<sp/>(<sp/>i<sp/>=<sp/>std::find_if(<sp/>i,<sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>pred<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(i++);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::unique()</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.unique();</highlight></codeline>
<codeline lineno="2046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryPredicate&gt;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::unique(<sp/>BinaryPredicate<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="2061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrap<sp/>the<sp/>default<sp/>comparison<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>someone&apos;s<sp/>overridden<sp/>operator&lt;<sp/>for<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.unique(<sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper</ref>&lt;DATALIST,</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryPredicate&gt;(p)<sp/>);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::merge(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="2079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;merge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrap<sp/>the<sp/>default<sp/>comparison<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>someone&apos;s<sp/>overridden<sp/>operator&lt;<sp/>for<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::less&lt;typename<sp/>DATALIST::PtrList::value_type&gt;<sp/>less;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.merge(<sp/>l.m_pCont,<sp/></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper</ref>&lt;DATALIST,<sp/></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>less&gt;(<sp/>less()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::merge(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>COMPARE<sp/>predicate<sp/>)</highlight></codeline>
<codeline lineno="2108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_ownPolicy<sp/>==<sp/>l.m_ownPolicy<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>we&apos;re<sp/>not<sp/>being<sp/>called<sp/>via<sp/>a<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;merge&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;m_pCont.merge(<sp/>l.m_pCont,<sp/></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d8a/structDataModel__detail_1_1Compwrapper" kindref="compound" tooltip="Comparison helper for DataVector/List classes.">DataModel_detail::Compwrapper</ref>&lt;DATALIST,</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMPARE&gt;(predicate)<sp/>);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::reverse()</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>this-&gt;m_pCont.reverse();</highlight></codeline>
<codeline lineno="2130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Non-standard<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::swapElement(iterator<sp/>pos,</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>newElem,</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/>oldElem)</highlight></codeline>
<codeline lineno="2157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;swapElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>oldElem<sp/>=<sp/>*pos.base();</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/>*pos.base()<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::PtrList&amp;<sp/>DATALIST::stdcont()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2174"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont;</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>DATALIST::ownPolicy()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2185"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="2187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::clear<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy)</highlight></codeline>
<codeline lineno="2201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>m_ownPolicy<sp/>=<sp/>ownPolicy;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>DATALIST::dvlinfo()</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_info;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>DATALIST::dvlinfo_v()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2226"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_info;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment">//===<sp/>Internal<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::assignElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>newElem)</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*pos;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>*pos<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::assignBaseElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::value_type<sp/>newElem)</highlight></codeline>
<codeline lineno="2262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="stringliteral">&quot;assignBaseElement&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*pos;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>*pos<sp/>=<sp/>newElem;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::PtrList::iterator</highlight></codeline>
<codeline lineno="2281"><highlight class="normal">DATALIST::erase_base(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>position<sp/>)</highlight></codeline>
<codeline lineno="2282"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref><sp/>&amp;&amp;<sp/>position<sp/>!=<sp/>m_pCont.end())</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*position;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.erase(<sp/>position<sp/>);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DATALIST::PtrList::iterator</highlight></codeline>
<codeline lineno="2302"><highlight class="normal">DATALIST::erase_base(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>first,</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>last<sp/>)</highlight></codeline>
<codeline lineno="2304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>==<sp/>last)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ownPolicy<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>iter<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>last)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*(iter++);</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pCont.erase(first,<sp/>last);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::clearMostDerived()</highlight></codeline>
<codeline lineno="2322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::setMostDerived()</highlight></codeline>
<codeline lineno="2336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" kindref="member" tooltip="Declare the transient variable(s):.">m_isMostDerived</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">DATALIST::dl_typeid()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2355"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref><sp/>);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::resortAux<sp/>(iterator<sp/></highlight><highlight class="comment">/*beg*/</highlight><highlight class="normal">,<sp/>iterator<sp/></highlight><highlight class="comment">/*end*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ATHCONTAINERS_LIKELY<sp/>(m_isMostDerived))</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d9/dfb/classDataList_1ae606c7332aeefc4ef0fa354ed8bce0fb" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsertOol</ref><sp/>(op);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DATALIST::testInsertOol<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="2406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d5/dec/structDataList__detail_1_1VirtBases_1a726104054dc33f795f9b1c6bf5fc3d65" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isMostDerived)</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>),<sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases_1aef497fdbda365d2b65713b798bb5b375" kindref="member" tooltip="Find the most-derived DataList class in the hierarchy.">dl_typeid</ref>());</highlight></codeline>
<codeline lineno="2410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/>DATALIST::s_info;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DATALIST</highlight></codeline>
<codeline lineno="2419"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>__CINT__</highlight></codeline>
<codeline lineno="2420"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="comment">//****************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>function<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a2f4af3db6bca5dc8d962d673635f0865" kindref="member" tooltip="List equality comparison.">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>==<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1aa7a25d1b36f44af915a534c124985c2b" kindref="member" tooltip="Based on operator==.">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>!=<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(const<sp/>DataList&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>&lt;<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a4292484069a07bf3057169565d175df1" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>&gt;<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=<sp/>(const<sp/>DataList&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>&lt;=<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a9cd772f232193f4545efb136406153d5" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="2489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/>&gt;=<sp/>b.<ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="2491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>)</highlight></codeline>
<codeline lineno="2497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>a.<ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">swap</ref><sp/>(b);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal">std::string<sp/>ClassName&lt;DataList&lt;T&gt;<sp/>&gt;::name()</highlight></codeline>
<codeline lineno="2510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>std::string<sp/>out<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>out<sp/>+=<sp/>ClassName&lt;T&gt;::name();</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out[out.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>out<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>initialization<sp/>of<sp/>element<sp/>type<sp/>BaseInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataList_detail<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DVLTYPE<sp/>DataList</highlight></codeline>
<codeline lineno="2523"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dd/d5e/DVLEltBaseInfo_8icc" kindref="compound" tooltip="Set up BaseInfo information for DataVector/DataList elements.">AthContainers/tools/DVLEltBaseInfo.icc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DVLTYPE</highlight></codeline>
<codeline lineno="2525"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>DataList_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>specialize<sp/>the<sp/>function<sp/>that<sp/>DVLInfo<sp/>uses<sp/>to<sp/>create<sp/>the<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>DataVector.</highlight></codeline>
<codeline lineno="2540"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/ddf/DataList_8icc_1a4d1d3c758cc95dad2d968640b743ce68" kindref="member" tooltip="Construct a new container.">dvl_makecontainer</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*nreserve*/</highlight><highlight class="normal">,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>*&amp;<sp/>cont)</highlight></codeline>
<codeline lineno="2542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/>cont<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc"/>
  </compounddef>
</doxygen>
