<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d42/PackedConverter__test_8cxx" kind="file">
    <compoundname>PackedConverter_test.cxx</compoundname>
    <includes refid="d2/df1/PackedConverter_8h" local="yes">AthContainers/PackedConverter.h</includes>
    <includes refid="d1/d79/random_8h" local="yes">TestTools/random.h</includes>
    <includes refid="d1/d4f/FLOATassert_8h" local="yes">TestTools/FLOATassert.h</includes>
    <includes refid="dd/d16/ones_8h" local="yes">CxxUtils/ones.h</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="74203">
        <label>limits</label>
      </node>
      <node id="74210">
        <label>CxxUtils/BitUnpacker.h</label>
        <link refid="d5/d33/BitUnpacker_8h"/>
        <childnode refid="74204" relation="include">
        </childnode>
        <childnode refid="74208" relation="include">
        </childnode>
        <childnode refid="74211" relation="include">
        </childnode>
      </node>
      <node id="74215">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="74204" relation="include">
        </childnode>
      </node>
      <node id="74200">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="74201" relation="include">
        </childnode>
        <childnode refid="74202" relation="include">
        </childnode>
      </node>
      <node id="74212">
        <label>CxxUtils/ones.h</label>
        <link refid="dd/d16/ones_8h"/>
      </node>
      <node id="74204">
        <label>stdint.h</label>
      </node>
      <node id="74219">
        <label>cmath</label>
      </node>
      <node id="74208">
        <label>cassert</label>
      </node>
      <node id="74201">
        <label>string</label>
      </node>
      <node id="74207">
        <label>CxxUtils/BitPacker.h</label>
        <link refid="dc/d57/BitPacker_8h"/>
        <childnode refid="74204" relation="include">
        </childnode>
        <childnode refid="74208" relation="include">
        </childnode>
        <childnode refid="74209" relation="include">
        </childnode>
      </node>
      <node id="74218">
        <label>cfloat</label>
      </node>
      <node id="74206">
        <label>CxxUtils/FloatPacker.h</label>
        <link refid="de/d0d/FloatPacker_8h"/>
        <childnode refid="74201" relation="include">
        </childnode>
        <childnode refid="74204" relation="include">
        </childnode>
      </node>
      <node id="74199">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="74200" relation="include">
        </childnode>
        <childnode refid="74203" relation="include">
        </childnode>
        <childnode refid="74204" relation="include">
        </childnode>
        <childnode refid="74205" relation="include">
        </childnode>
      </node>
      <node id="74211">
        <label>CxxUtils/BitUnpacker.icc</label>
        <link refid="db/db1/BitUnpacker_8icc"/>
        <childnode refid="74212" relation="include">
        </childnode>
      </node>
      <node id="74220">
        <label>typeinfo</label>
      </node>
      <node id="74214">
        <label>AthContainers/PackedConverter.icc</label>
        <link refid="da/ded/PackedConverter_8icc"/>
      </node>
      <node id="74205">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="74197">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx</label>
        <link refid="PackedConverter_test.cxx"/>
        <childnode refid="74198" relation="include">
        </childnode>
        <childnode refid="74215" relation="include">
        </childnode>
        <childnode refid="74216" relation="include">
        </childnode>
        <childnode refid="74212" relation="include">
        </childnode>
        <childnode refid="74220" relation="include">
        </childnode>
        <childnode refid="74213" relation="include">
        </childnode>
        <childnode refid="74217" relation="include">
        </childnode>
        <childnode refid="74208" relation="include">
        </childnode>
      </node>
      <node id="74202">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="74213">
        <label>vector</label>
      </node>
      <node id="74198">
        <label>AthContainers/PackedConverter.h</label>
        <link refid="d2/df1/PackedConverter_8h"/>
        <childnode refid="74199" relation="include">
        </childnode>
        <childnode refid="74206" relation="include">
        </childnode>
        <childnode refid="74207" relation="include">
        </childnode>
        <childnode refid="74210" relation="include">
        </childnode>
        <childnode refid="74213" relation="include">
        </childnode>
        <childnode refid="74204" relation="include">
        </childnode>
        <childnode refid="74214" relation="include">
        </childnode>
      </node>
      <node id="74217">
        <label>iostream</label>
      </node>
      <node id="74216">
        <label>TestTools/FLOATassert.h</label>
        <link refid="d1/d4f/FLOATassert_8h_source"/>
        <childnode refid="74217" relation="include">
        </childnode>
        <childnode refid="74208" relation="include">
        </childnode>
        <childnode refid="74218" relation="include">
        </childnode>
        <childnode refid="74219" relation="include">
        </childnode>
      </node>
      <node id="74209">
        <label>CxxUtils/BitPacker.icc</label>
        <link refid="d9/dad/BitPacker_8icc"/>
      </node>
    </incdepgraph>
    <innerclass refid="d8/da7/structOutputArgs" prot="public">OutputArgs</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d5/d42/PackedConverter__test_8cxx_1a30c8a635c5b94ba55d98c5d47068a369" prot="public" static="no">
        <name>TESTIT1</name>
        <param><defname>T</defname></param>
        <initializer>testit&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>,<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="235" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a54c0add02a3e75724d31e13f74e76412" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fill_cont</definition>
        <argsstring>(size_t nbits, std::vector&lt; T &gt; &amp;cont, size_t n, bool is_signed)</argsstring>
        <name>fill_cont</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="31" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1afdb8135f909c1e3e03398666436d8312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fill_float_cont</definition>
        <argsstring>(size_t, std::vector&lt; T &gt; &amp;cont, size_t n, bool is_signed)</argsstring>
        <name>fill_float_cont</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1aa69b07cf417cfb5468d94e08041acb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fill_cont</definition>
        <argsstring>(size_t nbits, std::vector&lt; float &gt; &amp;cont, size_t n, bool is_signed)</argsstring>
        <name>fill_cont</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1abe95f50f3e93a42e783926f84fa287a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fill_cont</definition>
        <argsstring>(size_t nbits, std::vector&lt; double &gt; &amp;cont, size_t n, bool is_signed)</argsstring>
        <name>fill_cont</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1ac028dcf8bac6222c002b90f9a99cedaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fill_cont</definition>
        <argsstring>(size_t nbits, std::vector&lt; std::vector&lt; T &gt; &gt; &amp;cont, size_t n, bool is_signed)</argsstring>
        <name>fill_cont</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt; &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="71" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1aafe3420d3f724e48c60d5d9e5d6ec54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare_signed_int</definition>
        <argsstring>(size_t nbits, int x1, int x2)</argsstring>
        <name>compare_signed_int</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="82" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a5cd0f1f203938c4d3fe318e8e110e679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void compare_int_vec</definition>
        <argsstring>(size_t nbits, const std::vector&lt; T1 &gt; &amp;c1, const std::vector&lt; T2 &gt; &amp;c2)</argsstring>
        <name>compare_int_vec</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const std::vector&lt; T1 &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; T2 &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="97" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a12c1cce07c900eb11a76fcc0d54581e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void compare_float_vec</definition>
        <argsstring>(size_t nmantissa, const std::vector&lt; T &gt; &amp;c1, const std::vector&lt; T &gt; &amp;c2)</argsstring>
        <name>compare_float_vec</name>
        <param>
          <type>size_t</type>
          <declname>nmantissa</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a3d84928c9fb67efba6d069e07423e4ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; T1 &gt; &amp;c1, const std::vector&lt; T2 &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; T1 &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; T2 &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1ac6c3843bd99d86ad7122302e93d6c4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; float &gt; &amp;c1, const std::vector&lt; float &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a172a902878dce9318f1f4002973e124c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; double &gt; &amp;c1, const std::vector&lt; double &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1aaccd9df5a050a88302928ca5b399ee19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; std::vector&lt; T1 &gt; &gt; &amp;c1, const std::vector&lt; std::vector&lt; T2 &gt; &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; T1 &gt; &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; T2 &gt; &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a1f50ea3c9f8681d2cd38815fc254ad0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;c1, const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="170" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a56c884d4c584548b8b37c6584ef9ed0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c1, const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; double &gt; &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="181" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a1b1aff5637330b510d1cb79c3cd9e510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void compare_cont</definition>
        <argsstring>(const SG::PackedParameters &amp;parms, const std::vector&lt; std::vector&lt; std::vector&lt; T1 &gt; &gt; &gt; &amp;c1, const std::vector&lt; std::vector&lt; std::vector&lt; T2 &gt; &gt; &gt; &amp;c2)</argsstring>
        <name>compare_cont</name>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; T1 &gt; &gt; &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; T2 &gt; &gt; &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a070f45bb75945a1111b1b4c0a7aaf535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T1</type>
          </param>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testit</definition>
        <argsstring>(size_t nbits, size_t n=100, bool is_signed=false, size_t nmantissa=23)</argsstring>
        <name>testit</name>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmantissa</declname>
          <defval>23</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="202" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="239" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="238" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="264" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="263" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="287" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="286" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1a327d8cef466a7560ead5eb3995c0cbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test4</definition>
        <argsstring>()</argsstring>
        <name>test4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="311" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="310" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="d5/d42/PackedConverter__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" line="319" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx" bodystart="318" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/df1/PackedConverter_8h" kindref="compound" tooltip="Helper for packing/unpacking a PackedContainer to/from a stream.">AthContainers/PackedConverter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d79/random_8h" kindref="compound" tooltip="Very simple random numbers for regression testing.">TestTools/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TestTools/FLOATassert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dd/d16/ones_8h" kindref="compound" tooltip="Construct a bit mask.">CxxUtils/ones.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="d8/da7/structOutputArgs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/da7/structOutputArgs" kindref="compound">OutputArgs</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="d8/da7/structOutputArgs" kindref="compound">OutputArgs</ref>()<sp/>:<sp/>ipos(0)<sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ipos;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="d8/da7/structOutputArgs" kindref="compound">OutputArgs</ref>&amp;<sp/>operator&lt;&lt;<sp/>(uint32_t<sp/>x)<sp/>{<sp/>vec.push_back(x);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="d8/da7/structOutputArgs" kindref="compound">OutputArgs</ref>&amp;<sp/>operator&gt;&gt;<sp/>(uint32_t&amp;<sp/>x)<sp/>{<sp/>x<sp/>=<sp/>vec[ipos++];<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_cont<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/>std::vector&lt;T&gt;&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>CxxUtils::ones&lt;uint32_t&gt;<sp/>(nbits-1);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>&lt;<sp/>30)<sp/>max<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>&lt;<sp/>29)<sp/>max<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cont.push_back<sp/>(static_cast&lt;T&gt;<sp/>(Athena_test::randi<sp/>(max,<sp/>-max-1)));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cont.push_back<sp/>(static_cast&lt;T&gt;<sp/>(Athena_test::rng()));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_float_cont<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*nbits*/</highlight><highlight class="normal">,<sp/>std::vector&lt;T&gt;&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cont.push_back<sp/>(Athena_test::randf(200)<sp/>-<sp/>100);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cont.push_back<sp/>(Athena_test::randf(100));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_cont<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/>std::vector&lt;float&gt;&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>fill_float_cont<sp/>(nbits,<sp/>cont,<sp/>n,<sp/>is_signed);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_cont<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/>std::vector&lt;double&gt;&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>fill_float_cont<sp/>(nbits,<sp/>cont,<sp/>n,<sp/>is_signed);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_cont<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/>std::vector&lt;std::vector&lt;T&gt;<sp/>&gt;&amp;<sp/>cont,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>cont.resize<sp/>(n);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelt<sp/>=<sp/>Athena_test::randi<sp/>(30);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_cont<sp/>(nbits,<sp/>cont[i],<sp/>nelt,<sp/>is_signed);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cont[i].size()<sp/>==<sp/>nelt);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_signed_int<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>CxxUtils::ones&lt;uint32_t&gt;<sp/>(nbits-1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min<sp/>=<sp/>-<sp/>max-1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(x2<sp/>==<sp/>max);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(x2<sp/>==<sp/>min);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(x1<sp/>==<sp/>x2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_int_vec<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T1&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T2&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>CxxUtils::ones&lt;uint32_t&gt;<sp/>(nbits);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>c1[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>c2[i]<sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;T2&gt;::is_signed)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compare_signed_int<sp/>(nbits,<sp/>c1[i],<sp/>c2[i]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>val1<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(c1[i]);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(static_cast&lt;T2&gt;<sp/>(mask<sp/>&amp;<sp/>val1)<sp/>==<sp/>c2[i]);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_float_vec<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nmantissa,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thresh<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nmantissa;<sp/>i++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>thresh<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(Athena_test::isEqual<sp/>(c1[i],<sp/>c2[i],<sp/>thresh));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T1&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T2&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>compare_int_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1ab00ae71fdadeea196896a0a7fc85426a" kindref="member" tooltip="The number of bits used to store each element.">nbits</ref>(),<sp/>c1,<sp/>c2);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>compare_float_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1af705c32cce991271601d9f59f7f302fd" kindref="member" tooltip="The number of bits used for the mantissa portion of a float-point representation...">nmantissa</ref>(),<sp/>c1,<sp/>c2);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>compare_float_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1af705c32cce991271601d9f59f7f302fd" kindref="member" tooltip="The number of bits used for the mantissa portion of a float-point representation...">nmantissa</ref>(),<sp/>c1,<sp/>c2);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;T1&gt;<sp/>&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;T2&gt;<sp/>&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_int_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1ab00ae71fdadeea196896a0a7fc85426a" kindref="member" tooltip="The number of bits used to store each element.">nbits</ref>(),<sp/>c1[i],<sp/>c2[i]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_float_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1af705c32cce991271601d9f59f7f302fd" kindref="member" tooltip="The number of bits used for the mantissa portion of a float-point representation...">nmantissa</ref>(),<sp/>c1[i],<sp/>c2[i]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_float_vec<sp/>(parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1af705c32cce991271601d9f59f7f302fd" kindref="member" tooltip="The number of bits used for the mantissa portion of a float-point representation...">nmantissa</ref>(),<sp/>c1[i],<sp/>c2[i]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compare_cont<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref>&amp;<sp/>parms,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;T1&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>c1,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;T2&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>c2.size());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>c1.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>compare_cont<sp/>(parms,<sp/>c1[i],<sp/>c2[i]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testit<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbits,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>100,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nmantissa<sp/>=<sp/>23)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>std::vector&lt;T1&gt;<sp/>c1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>fill_cont<sp/>(nbits,<sp/>c1,<sp/>n,<sp/>is_signed);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>assert<sp/>(c1.size()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound" tooltip="Describe how the contents of a PackedContainer are to be saved.">SG::PackedParameters</ref><sp/>parms;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>parms.<ref refid="d5/dc1/classSG_1_1PackedParameters_1a44550d4e5aea2dfec93e19913e65e9cb" kindref="member" tooltip="Set the number of bits to be used for each element.">setNbits</ref><sp/>(nbits);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>parms.setNmantissa<sp/>(nmantissa);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>parms.setSigned<sp/>(is_signed);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;float&gt;)<sp/>||</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;double&gt;)<sp/>||</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;)<sp/>||</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T1)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>parms.setFloat<sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="d8/da7/structOutputArgs" kindref="compound">OutputArgs</ref><sp/>args;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="d9/d4e/classSG_1_1PackedConverter" kindref="compound" tooltip="Helper for packing/unpacking a PackedContainer to/from a stream.">SG::PackedConverter</ref><sp/>cnv<sp/>(parms);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>cnv.write<sp/>(n,<sp/>c1,<sp/>args);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::vector&lt;T2&gt;<sp/>c2;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>cnv.read<sp/>(n,<sp/>c2,<sp/>args);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>assert<sp/>(c2.size()<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>compare_cont<sp/>(parms,<sp/>c1,<sp/>c2);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TESTIT1(T)<sp/>testit&lt;T,T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=1;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(uint32_t)<sp/>(nbits);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(uint16_t)<sp/>(nbits);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(uint8_t)<sp/>(nbits);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=2;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(int32_t)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(int16_t)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(int8_t)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>TESTIT1(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>TESTIT1(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>TESTIT1(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>TESTIT1(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>doubly-nested<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=1;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;uint32_t&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;uint16_t&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;uint8_t&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=2;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;int32_t&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;int16_t&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;int8_t&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;float&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;float&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;double&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;double&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>triply-nested<sp/>vectors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test3()</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=1;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;uint32_t&gt;<sp/>&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;uint16_t&gt;<sp/>&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;uint8_t&gt;<sp/>&gt;)<sp/>(nbits);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=2;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;int32_t&gt;<sp/>&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;int16_t&gt;<sp/>&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;int8_t&gt;<sp/>&gt;)<sp/>(nbits,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>TESTIT1(std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;)<sp/>(24,<sp/>100,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>16);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>some<sp/>simple<sp/>conversions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test4()</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test4\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>testit&lt;uint16_t,<sp/>uint32_t&gt;<sp/>(13);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>test3();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>test4();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx"/>
  </compounddef>
</doxygen>
