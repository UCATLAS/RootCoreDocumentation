<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d68/classSG_1_1AuxTypeVector" kind="class" prot="public">
    <compoundname>SG::AuxTypeVector</compoundname>
    <basecompoundref refid="de/d12/classSG_1_1IAuxTypeVector" prot="public" virt="non-virtual">SG::IAuxTypeVector</basecompoundref>
    <includes refid="d6/dd2/AuxTypeVector_8h" local="no">AuxTypeVector.h</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
      </param>
      <param>
        <type>class CONT</type>
        <defval>typename <ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;::<ref refid="d5/d68/classSG_1_1AuxTypeVector_1af6930cb2b83114821662a439e8d7ed64" kindref="member">vector_type</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d5/d68/classSG_1_1AuxTypeVector_1af6930cb2b83114821662a439e8d7ed64" prot="public" static="no">
        <type>CONT</type>
        <definition>typedef CONT SG::AuxTypeVector&lt; T, CONT &gt;::vector_type</definition>
        <argsstring></argsstring>
        <name>vector_type</name>
        <briefdescription>
<para>Type of the STL vector used for storage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d68/classSG_1_1AuxTypeVector_1a0a110041bdd570df181df5f74d167533" prot="public" static="no">
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::<ref refid="d1/def/classT" kindref="compound">element_type</ref></type>
        <definition>typedef AuxDataTraits&lt;T&gt;::element_type SG::AuxTypeVector&lt; T, CONT &gt;::element_type</definition>
        <argsstring></argsstring>
        <name>element_type</name>
        <briefdescription>
<para>Type that the user sees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d68/classSG_1_1AuxTypeVector_1a207bae5ad42ed1b4aeeac165ea3b7b4d" prot="public" static="no">
        <type>vector_type::value_type</type>
        <definition>typedef vector_type::value_type SG::AuxTypeVector&lt; T, CONT &gt;::vector_value_type</definition>
        <argsstring></argsstring>
        <name>vector_value_type</name>
        <briefdescription>
<para>Vector element type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="d5/d68/classSG_1_1AuxTypeVector_1a9bf92d9a6d19d21c24f723d782b046e4" prot="private" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int SG::AuxTypeVector&lt; T, CONT &gt;::SCALE</definition>
        <argsstring></argsstring>
        <name>SCALE</name>
        <initializer> sizeof(<ref refid="d1/def/classT" kindref="compound">element_type</ref>) / sizeof(<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a207bae5ad42ed1b4aeeac165ea3b7b4d" kindref="member">vector_value_type</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>1 for the usual case of <computeroutput>V</computeroutput> being <computeroutput>vector&lt;T&gt;</computeroutput>. If <computeroutput>V</computeroutput> is <computeroutput>vector&lt;char&gt;</computeroutput>, then this is <computeroutput>sizeof(T)</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="68" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/d68/classSG_1_1AuxTypeVector_1afa9318b8204181550e6fcf9d0cde3acc" prot="private" static="no" mutable="no">
        <type><ref refid="d5/d68/classSG_1_1AuxTypeVector_1af6930cb2b83114821662a439e8d7ed64" kindref="member">vector_type</ref></type>
        <definition>vector_type SG::AuxTypeVector&lt; T, CONT &gt;::m_vec</definition>
        <argsstring></argsstring>
        <name>m_vec</name>
        <briefdescription>
<para>The contained vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="217" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a8907c90c3a00972fc3cabda79a8a85c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxTypeVector&lt; T, CONT &gt;::AuxTypeVector</definition>
        <argsstring>(size_t size, size_t capacity)</argsstring>
        <name>AuxTypeVector</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Constructor. Makes a new vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial size of the new vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial capacity of the new vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d68/classSG_1_1AuxTypeVector_1af6930cb2b83114821662a439e8d7ed64" kindref="member">vector_type</ref> &amp;</type>
        <definition>AuxTypeVector&lt; T, CONT &gt;::vector_type &amp; SG::AuxTypeVector&lt; T, CONT &gt;::vec</definition>
        <argsstring>()</argsstring>
        <name>vec</name>
        <briefdescription>
<para>Return a reference to the payload vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a44002ff6152aafdb5d7123a8ac547905" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref> *</type>
        <definition>IAuxTypeVector * SG::AuxTypeVector&lt; T, CONT &gt;::clone</definition>
        <argsstring>() const ATH_OVERRIDE</argsstring>
        <name>clone</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1aaacc3e3c1dcc1e46f4ec8148c901d065">clone</reimplements>
        <briefdescription>
<para>Make a copy of this vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>void * SG::AuxTypeVector&lt; T, CONT &gt;::toPtr</definition>
        <argsstring>() ATH_OVERRIDE</argsstring>
        <name>toPtr</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff">toPtr</reimplements>
        <briefdescription>
<para>Return a pointer to the start of the vector&apos;s data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1aa6d797c3945ce8ec97ae65439f551fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>void * SG::AuxTypeVector&lt; T, CONT &gt;::toVector</definition>
        <argsstring>() ATH_OVERRIDE</argsstring>
        <name>toVector</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1afed4af45990e7670d930c265d779b80c">toVector</reimplements>
        <briefdescription>
<para>Return a pointer to the STL vector itself. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::type_info *</type>
        <definition>const std::type_info * SG::AuxTypeVector&lt; T, CONT &gt;::objType</definition>
        <argsstring>() const ATH_OVERRIDE</argsstring>
        <name>objType</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a2b585440095feb65b1b3512f16e6490f">objType</reimplements>
        <briefdescription>
<para>Return the type of the payload object for this instance. </para>        </briefdescription>
        <detaileddescription>
<para>Return the type of the complete payload object.</para><para>May be different from what we get from the registry; if packing is used, for example. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="110" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>size_t SG::AuxTypeVector&lt; T, CONT &gt;::size</definition>
        <argsstring>() const ATH_OVERRIDE</argsstring>
        <name>size</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a62b69917936ea8302fa3a4689c4fa636">size</reimplements>
        <briefdescription>
<para>Return the size of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1ac1934e4f62d5eabb36b3074a06ee5306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::resize</definition>
        <argsstring>(size_t sz) ATH_OVERRIDE</argsstring>
        <name>resize</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1ab193d7841a46c020e54cd83eeefaa6fb">resize</reimplements>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the size of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1add8a225a8b7d80dc53dd134ca92e8f19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::reserve</definition>
        <argsstring>(size_t sz) ATH_OVERRIDE</argsstring>
        <name>reserve</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1afa8e2ee061b050019960c326f28b343e">reserve</reimplements>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the capacity of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="130" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a86fc0c679974769134d9492538c960bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool SG::AuxTypeVector&lt; T, CONT &gt;::setOption</definition>
        <argsstring>(const AuxDataOption &amp;option) ATH_OVERRIDE</argsstring>
        <name>setOption</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a480e9245717e14b86cf326f8be4d2dad">setOption</reimplements>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">AuxDataOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Make an option setting. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of the option depends on the concrete class.</para><para>Returns true if the option setting was successful; false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="141" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a027a64382b5238f0e3a8ebaf1bff1751" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::shift</definition>
        <argsstring>(size_t pos, ptrdiff_t offs) ATH_OVERRIDE</argsstring>
        <name>shift</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a056c9481088c3c4155d4802db7e8a69e">shift</reimplements>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Shift the elements of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index for the shift. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>The (signed) amount of the shift.</para></parameterdescription>
</parameteritem>
</parameterlist>
This operation shifts the elements in the vectors for all aux data items, to implement an insertion or deletion. <computeroutput>offs</computeroutput> may be either positive or negative.</para><para>If <computeroutput>offs</computeroutput> is positive, then the container is growing. The container size should be increased by <computeroutput>offs</computeroutput>, the element at <computeroutput>pos</computeroutput> moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The elements between <computeroutput>pos</computeroutput> and <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput> should be default-initialized.</para><para>If <computeroutput>offs</computeroutput> is negative, then the container is shrinking. The element at <computeroutput>pos</computeroutput> should be moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The container should then be shrunk by <computeroutput>-offs</computeroutput> elements (running destructors as appropriate). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="196" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a08f3079c22a019b08377a9287563af5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref> *</type>
        <definition>IAuxTypeVector * SG::AuxTypeVector&lt; T, CONT &gt;::toPacked</definition>
        <argsstring>() ATH_OVERRIDE</argsstring>
        <name>toPacked</name>
        <reimplements refid="de/d12/classSG_1_1IAuxTypeVector_1a3226c7c2e703aeb2b8c7736ae3663a52">toPacked</reimplements>
        <briefdescription>
<para>Try to convert this aux vector to a <computeroutput><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound">PackedContainer</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>If successful, returns a newly-allocated <computeroutput><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref></computeroutput>. In this case, the contents of the vector will have been moved to the new vector (and this object will be empty).</para><para>Returns null on failure. </para>        </detaileddescription>
        <inbodydescription>
<para>Use the proper instantiation depending on whether or not this type can be packed. </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="291" bodyend="297"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1a882bba3c75debc479f55b328393d6d84" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::copy</definition>
        <argsstring>(void *dst, size_t dst_index, const void *src, size_t src_index)</argsstring>
        <name>copy</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_index</declname>
        </param>
        <briefdescription>
<para>Copy an element between vectors (static method). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the destination vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of destination element in the vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the source vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of source element in the vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>dst</computeroutput> and @ src can be either the same or different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="191" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1afcf37478958c2082edf830e5bc33b53a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::swap</definition>
        <argsstring>(void *a, size_t aindex, void *b, size_t bindex)</argsstring>
        <name>swap</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>aindex</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bindex</declname>
        </param>
        <briefdescription>
<para>Swap an element between vectors (static method). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the first vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the first vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the second vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the second vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>a</computeroutput> and @ b can be either the same or different. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="330" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="d5/d68/classSG_1_1AuxTypeVector_1aa84c957e2a0d246906bef0536b72051c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxTypeVector&lt; T, CONT &gt;::clear</definition>
        <argsstring>(void *dst, size_t dst_index)</argsstring>
        <name>clear</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_index</declname>
        </param>
        <briefdescription>
<para>Clear an element within a vector (static method). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the vector&apos;s data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element in the vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="212" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.icc" bodystart="345" bodyend="348"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of <computeroutput><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref></computeroutput> for specific types. </para>    </briefdescription>
    <detaileddescription>
<para>The auxiliary data for a container is stored in a set of STL vectors, one for each data item. However, we want to allow storing arbitrary types in these vectors. Thus, we define this abstract interface to operate on the vectors. This template class provides the concrete implementations of this interface. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1988">
        <label>SG::AuxTypeVector&lt; T, CONT &gt;</label>
        <link refid="d5/d68/classSG_1_1AuxTypeVector"/>
        <childnode refid="1989" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1989">
        <label>SG::IAuxTypeVector</label>
        <link refid="de/d12/classSG_1_1IAuxTypeVector"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1990">
        <label>SG::AuxTypeVector&lt; T, CONT &gt;</label>
        <link refid="d5/d68/classSG_1_1AuxTypeVector"/>
        <childnode refid="1991" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1991">
        <label>SG::IAuxTypeVector</label>
        <link refid="de/d12/classSG_1_1IAuxTypeVector"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/AuxTypeVector.h" bodystart="52" bodyend="218"/>
    <listofallmembers>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a8907c90c3a00972fc3cabda79a8a85c5" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>AuxTypeVector</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1aa84c957e2a0d246906bef0536b72051c" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>clear</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a44002ff6152aafdb5d7123a8ac547905" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>clone</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a882bba3c75debc479f55b328393d6d84" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>copy</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a0a110041bdd570df181df5f74d167533" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>element_type</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1afa9318b8204181550e6fcf9d0cde3acc" prot="private" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>m_vec</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>objType</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1add8a225a8b7d80dc53dd134ca92e8f19" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>reserve</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1ac1934e4f62d5eabb36b3074a06ee5306" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>resize</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a9bf92d9a6d19d21c24f723d782b046e4" prot="private" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>SCALE</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a86fc0c679974769134d9492538c960bc" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>setOption</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a027a64382b5238f0e3a8ebaf1bff1751" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>shift</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>size</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1afcf37478958c2082edf830e5bc33b53a" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>swap</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a08f3079c22a019b08377a9287563af5b" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>toPacked</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>toPtr</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1aa6d797c3945ce8ec97ae65439f551fdf" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>toVector</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>vec</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1af6930cb2b83114821662a439e8d7ed64" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>vector_type</name></member>
      <member refid="d5/d68/classSG_1_1AuxTypeVector_1a207bae5ad42ed1b4aeeac165ea3b7b4d" prot="public" virt="non-virtual"><scope>SG::AuxTypeVector</scope><name>vector_value_type</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1ac39506959d2b852f78e8aeda22e6651e" prot="public" virt="virtual"><scope>SG::AuxTypeVector</scope><name>~IAuxTypeVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
