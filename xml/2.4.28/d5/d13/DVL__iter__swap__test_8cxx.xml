<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d13/DVL__iter__swap__test_8cxx" kind="file">
    <compoundname>DVL_iter_swap_test.cxx</compoundname>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sstream</includes>
    <includes refid="d6/ddb/DVL__iter__swap_8h" local="yes">AthContainers/tools/DVL_iter_swap.h</includes>
    <includes refid="d3/dc7/DVLIterator_8h" local="yes">AthContainers/tools/DVLIterator.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="73716">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="73717">
        <label>functional</label>
      </node>
      <node id="73707">
        <label>boost/version.hpp</label>
      </node>
      <node id="73693">
        <label>limits</label>
      </node>
      <node id="73708">
        <label>iterator</label>
      </node>
      <node id="73709">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="73710" relation="include">
        </childnode>
        <childnode refid="73718" relation="include">
        </childnode>
        <childnode refid="73687" relation="include">
        </childnode>
        <childnode refid="73695" relation="include">
        </childnode>
        <childnode refid="73686" relation="include">
        </childnode>
      </node>
      <node id="73692">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="73693" relation="include">
        </childnode>
        <childnode refid="73694" relation="include">
        </childnode>
        <childnode refid="73695" relation="include">
        </childnode>
        <childnode refid="73696" relation="include">
        </childnode>
        <childnode refid="73697" relation="include">
        </childnode>
      </node>
      <node id="73700">
        <label>RVersion.h</label>
      </node>
      <node id="73711">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="73712" relation="include">
        </childnode>
        <childnode refid="73702" relation="include">
        </childnode>
        <childnode refid="73717" relation="include">
        </childnode>
      </node>
      <node id="73715">
        <label>cmath</label>
      </node>
      <node id="73705">
        <label>cassert</label>
      </node>
      <node id="73687">
        <label>stdexcept</label>
      </node>
      <node id="73706">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="73686">
        <label>string</label>
      </node>
      <node id="73685">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx</label>
        <link refid="DVL_iter_swap_test.cxx"/>
        <childnode refid="73686" relation="include">
        </childnode>
        <childnode refid="73687" relation="include">
        </childnode>
        <childnode refid="73688" relation="include">
        </childnode>
        <childnode refid="73689" relation="include">
        </childnode>
        <childnode refid="73690" relation="include">
        </childnode>
        <childnode refid="73709" relation="include">
        </childnode>
        <childnode refid="73719" relation="include">
        </childnode>
        <childnode refid="73705" relation="include">
        </childnode>
      </node>
      <node id="73690">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="73691" relation="include">
        </childnode>
        <childnode refid="73692" relation="include">
        </childnode>
        <childnode refid="73698" relation="include">
        </childnode>
        <childnode refid="73706" relation="include">
        </childnode>
        <childnode refid="73707" relation="include">
        </childnode>
        <childnode refid="73708" relation="include">
        </childnode>
        <childnode refid="73696" relation="include">
        </childnode>
      </node>
      <node id="73701">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="73698">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="73691" relation="include">
        </childnode>
        <childnode refid="73699" relation="include">
        </childnode>
        <childnode refid="73702" relation="include">
        </childnode>
        <childnode refid="73703" relation="include">
        </childnode>
      </node>
      <node id="73699">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="73700" relation="include">
        </childnode>
        <childnode refid="73701" relation="include">
        </childnode>
      </node>
      <node id="73694">
        <label>limits.h</label>
      </node>
      <node id="73710">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="73697" relation="include">
        </childnode>
        <childnode refid="73711" relation="include">
        </childnode>
      </node>
      <node id="73712">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="73713" relation="include">
        </childnode>
        <childnode refid="73714" relation="include">
        </childnode>
        <childnode refid="73708" relation="include">
        </childnode>
        <childnode refid="73697" relation="include">
        </childnode>
        <childnode refid="73696" relation="include">
        </childnode>
        <childnode refid="73715" relation="include">
        </childnode>
        <childnode refid="73693" relation="include">
        </childnode>
        <childnode refid="73686" relation="include">
        </childnode>
        <childnode refid="73716" relation="include">
        </childnode>
      </node>
      <node id="73704">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="73705" relation="include">
        </childnode>
      </node>
      <node id="73703">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="73692" relation="include">
        </childnode>
        <childnode refid="73704" relation="include">
        </childnode>
      </node>
      <node id="73695">
        <label>typeinfo</label>
      </node>
      <node id="73719">
        <label>vector</label>
      </node>
      <node id="73714">
        <label>utility</label>
      </node>
      <node id="73688">
        <label>sstream</label>
      </node>
      <node id="73696">
        <label>cstdlib</label>
      </node>
      <node id="73718">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="73697">
        <label>cstddef</label>
      </node>
      <node id="73713">
        <label>algorithm</label>
      </node>
      <node id="73689">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="73690" relation="include">
        </childnode>
        <childnode refid="73704" relation="include">
        </childnode>
        <childnode refid="73708" relation="include">
        </childnode>
      </node>
      <node id="73691">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="73702">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="d6/d00/classtest__err" prot="public">test_err</innerclass>
    <innerclass refid="d2/d45/structX1" prot="public">X1</innerclass>
    <innerclass refid="d9/df4/structCont1" prot="public">Cont1</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d5/d13/DVL__iter__swap__test_8cxx_1a86fba812902b6fb0feea3faf586e45d2" prot="public" static="no">
        <name>ATHCONTAINERS_ASSERT</name>
        <param><defname>X</defname></param>
        <initializer>do {     \
    if (!(<ref refid="d3/d24/structX" kindref="compound">X</ref>)) { \
      throw_test_err (__FILE__, __LINE__, #<ref refid="d3/d24/structX" kindref="compound">X</ref>); \
    } \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/d13/DVL__iter__swap__test_8cxx_1abdcca316a342937e128edfd8488c82f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_test_err</definition>
        <argsstring>(const char *file, int line, const char *what)</argsstring>
        <name>throw_test_err</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d5/d13/DVL__iter__swap__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" line="124" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" bodystart="123" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d5/d13/DVL__iter__swap__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" line="226" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx" bodystart="225" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for DVL_iter_swap. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2010 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>DVL_iter_swap_test.cxx<sp/>470529<sp/>2011-11-24<sp/>23:54:22Z<sp/>ssnyder<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//***************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>assertions<sp/>failures<sp/>to<sp/>exceptions,<sp/>so<sp/>we<sp/>can<sp/>catch<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="d6/d00/classtest__err" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_what.c_str();<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>std::string<sp/>m_what;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">test_err::test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>assertion<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>what;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>m_what<sp/>=<sp/>os.str();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref><sp/>(file,<sp/>line,<sp/>what));</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_ASSERT(X)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(X))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>throw_test_err<sp/>(__FILE__,<sp/>__LINE__,<sp/>#X);<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//***************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/ddb/DVL__iter__swap_8h" kindref="compound" tooltip="Specializations of iter_swap for DataVector/DataList. ">AthContainers/tools/DVL_iter_swap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/tools/DVLIterator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="d2/d45/structX1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d45/structX1" kindref="compound">X1</ref></highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d2/d45/structX1" kindref="compound">X1</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="d9/df4/structCont1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref></highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;X1*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>*<sp/><ref refid="d2/d45/structX1" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>*<sp/><ref refid="d2/d45/structX1" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">base_value_type</ref>**<sp/><ref refid="d2/d45/structX1" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;Cont&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;Cont&gt;</ref><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;Cont&gt;</ref><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>can_insert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_ownPolicy<sp/>(ownPolicy),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_can_insert<sp/>(can_insert)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ownPolicy;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInsert<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_can_insert)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref><sp/>(op,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>iter_swap<sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>a,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>b)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>ATHCONTAINERS_ASSERT<sp/>(a.<ref refid="d5/d70/classDataModel__detail_1_1iterator_1a17db3e1de212ff52809fc820a64aa410" kindref="member" tooltip="Return the ownership policy of the container from which this iterator was created...">ownPolicy</ref>()<sp/>==<sp/>b.<ref refid="d5/d70/classDataModel__detail_1_1iterator_1a17db3e1de212ff52809fc820a64aa410" kindref="member" tooltip="Return the ownership policy of the container from which this iterator was created...">ownPolicy</ref>());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>a.<ref refid="d5/d70/classDataModel__detail_1_1iterator_1a6ee2d7f42640cd58719cc85f6917b3cd" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="d5/d70/classDataModel__detail_1_1iterator_1a6ee2d7f42640cd58719cc85f6917b3cd" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref>(</highlight><highlight class="stringliteral">&quot;iter_swap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(a.base(),<sp/>b.base());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x1<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_x2<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_can_insert;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>*<sp/>m_x1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>*<sp/>m_x2;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="d2/d45/structX1" kindref="compound">X1</ref>*<sp/>Cont1::m_x1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="d2/d45/structX1" kindref="compound">X1</ref>*<sp/>Cont1::m_x2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;Cont1&gt;</ref><sp/>iterator;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;<sp/>reverse_iterator;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/>cont;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::vector&lt;X1*&gt;<sp/>v;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(1));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(2));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>iterator<sp/>i1<sp/>(v.begin(),<sp/>&amp;cont);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>iterator<sp/>i2<sp/>(v.begin()+1,<sp/>&amp;cont);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>assert<sp/>((*i1)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>assert<sp/>((*i2)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(i1,<sp/>i2);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>assert<sp/>((*i2)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>assert<sp/>((*i1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>assert<sp/>(cont.m_x1-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>assert<sp/>(cont.m_x2-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/>cont3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>iterator<sp/>i3<sp/>(v.begin()+1,<sp/>&amp;cont3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(i1,<sp/>i3);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(i3,<sp/>i1);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref><sp/>cont2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>iterator<sp/>i4<sp/>(v.begin()+1,<sp/>&amp;cont2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(i1,<sp/>i4);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>iterator<sp/>i5<sp/>(v.begin(),<sp/>&amp;cont2);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(i4,<sp/>i5);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>assert<sp/>((*i1)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>assert<sp/>((*i2)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//*************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>ri1<sp/>(iterator<sp/>(v.begin()+1,<sp/>&amp;cont));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>ri2<sp/>(iterator<sp/>(v.begin()+2,<sp/>&amp;cont));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri1)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri2)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(ri1,<sp/>ri2);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri2)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>ri3<sp/>(iterator<sp/>(v.begin()+2,<sp/>&amp;cont3));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(ri1,<sp/>ri3);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(ri3,<sp/>ri1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>ri4<sp/>(iterator<sp/>(v.begin()+2,<sp/>&amp;cont2));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(ri1,<sp/>ri4);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d6/d00/classtest__err" kindref="compound">test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>ri5<sp/>(iterator<sp/>(v.begin()+1,<sp/>&amp;cont2));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(ri4,<sp/>ri5);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri1)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>assert<sp/>((*ri2)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVL_iter_swap_test.cxx"/>
  </compounddef>
</doxygen>
