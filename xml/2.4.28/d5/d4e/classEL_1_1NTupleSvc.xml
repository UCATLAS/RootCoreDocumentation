<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d4e/classEL_1_1NTupleSvc" kind="class" prot="public">
    <compoundname>EL::NTupleSvc</compoundname>
    <basecompoundref refid="de/ddb/classEL_1_1Algorithm" prot="public" virt="non-virtual">EL::Algorithm</basecompoundref>
    <innerclass refid="d9/db7/structEL_1_1NTupleSvc_1_1CopyInfo" prot="private">EL::NTupleSvc::CopyInfo</innerclass>
    <innerclass refid="db/dcd/structEL_1_1NTupleSvc_1_1WhiteInfo" prot="private">EL::NTupleSvc::WhiteInfo</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d5/d4e/classEL_1_1NTupleSvc_1a1bfb9c17e6a0a657796d5e8533cbae6a" prot="private" static="no">
        <type>std::set&lt; std::string &gt;::iterator</type>
        <definition>typedef std::set&lt;std::string&gt;::iterator EL::NTupleSvc::m_copyBranchesIter</definition>
        <argsstring></argsstring>
        <name>m_copyBranchesIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="232" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d4e/classEL_1_1NTupleSvc_1a30397d5a608c1044a5c97b872edf6a2a" prot="private" static="no">
        <type>std::set&lt; std::string &gt;::iterator</type>
        <definition>typedef std::set&lt;std::string&gt;::iterator EL::NTupleSvc::m_whiteFloatIter</definition>
        <argsstring></argsstring>
        <name>m_whiteFloatIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d4e/classEL_1_1NTupleSvc_1adb264433a75d46acfcda9366b9682e25" prot="private" static="no">
        <type>std::set&lt; std::string &gt;::iterator</type>
        <definition>typedef std::set&lt;std::string&gt;::iterator EL::NTupleSvc::m_whiteArrayIter</definition>
        <argsstring></argsstring>
        <name>m_whiteArrayIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="242" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d4e/classEL_1_1NTupleSvc_1a47491dfb5c7a55591cb3e9d657aab95d" prot="private" static="no">
        <type>std::vector&lt; CopyInfo &gt;::iterator</type>
        <definition>typedef std::vector&lt;CopyInfo&gt;::iterator EL::NTupleSvc::copyInfoMIter</definition>
        <argsstring></argsstring>
        <name>copyInfoMIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="294" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d5/d4e/classEL_1_1NTupleSvc_1afb9d22b49fa6a776284696593a4f05a9" prot="private" static="no">
        <type>std::vector&lt; WhiteInfo &gt;::iterator</type>
        <definition>typedef std::vector&lt;WhiteInfo&gt;::iterator EL::NTupleSvc::whiteInfoMIter</definition>
        <argsstring></argsstring>
        <name>whiteInfoMIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="318" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a4f605494f936b3eb787415b230933d2e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::NTupleSvc::m_outputName</definition>
        <argsstring></argsstring>
        <name>m_outputName</name>
        <briefdescription>
<para>description: the name of the output stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="219" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a6ac264e0f5cab41a28b1ee00e200e285" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::NTupleSvc::m_treeName</definition>
        <argsstring></argsstring>
        <name>m_treeName</name>
        <briefdescription>
<para>description: the name of the output tree </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="223" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a7471cb013be39eddbf738285a62c117a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::NTupleSvc::m_tree_title</definition>
        <argsstring></argsstring>
        <name>m_tree_title</name>
        <briefdescription>
<para>description: the title of the output tree </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="227" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1afa66c2790c9f1954d2b10a4d0674f59b" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; EL::NTupleSvc::m_copyBranches</definition>
        <argsstring></argsstring>
        <name>m_copyBranches</name>
        <briefdescription>
<para>description: the list of branches we copy </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="231" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a01b0eed695b202a8d9feae30df29f19b" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; EL::NTupleSvc::m_whiteFloat</definition>
        <argsstring></argsstring>
        <name>m_whiteFloat</name>
        <briefdescription>
<para>description: the list of whiteboard floats we copy </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="236" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1aee4c5cc5e8716e79ca627df067033421" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; EL::NTupleSvc::m_whiteArray</definition>
        <argsstring></argsstring>
        <name>m_whiteArray</name>
        <briefdescription>
<para>description: the list of whiteboard arrays we copy </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="241" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a33f7c99de7ac7e358be30a3097ea4501" prot="private" static="no" mutable="no">
        <type>TFile *</type>
        <definition>TFile* EL::NTupleSvc::m_file</definition>
        <argsstring></argsstring>
        <name>m_file</name>
        <briefdescription>
<para>description: the file we are writing out </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="246" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1aaf53c8d183fe68e9e289e814a78ff58f" prot="private" static="no" mutable="no">
        <type>TTree *</type>
        <definition>TTree* EL::NTupleSvc::m_tree</definition>
        <argsstring></argsstring>
        <name>m_tree</name>
        <briefdescription>
<para>description: the tree we are writing out </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="250" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1afe0e48b182a76b9961342374297bd38b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EL::NTupleSvc::m_initialized</definition>
        <argsstring></argsstring>
        <name>m_initialized</name>
        <briefdescription>
<para>description: whether we initialized the tree we are writing out </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="254" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1ae3c3fba3a98bb3b8141aa9c960e20235" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EL::NTupleSvc::m_taken</definition>
        <argsstring></argsstring>
        <name>m_taken</name>
        <briefdescription>
<para>description: whether we take the current event </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="258" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1a3dd947ea1ff3dc004251574c9911708d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool EL::NTupleSvc::m_connected</definition>
        <argsstring></argsstring>
        <name>m_connected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: whether our output branches are properly connected to the input tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="263" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1ac1ad4ec1b5b6ade942d3b013ac3288e6" prot="private" static="no" mutable="no">
        <type>D3PDReader::Event *</type>
        <definition>D3PDReader::Event* EL::NTupleSvc::m_d3pdreader</definition>
        <argsstring></argsstring>
        <name>m_d3pdreader</name>
        <briefdescription>
<para>description: the D3PDReader, if we are using it </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="267" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1af8d8a20213d0496ee7f2f2b8d36611a3" prot="private" static="no" mutable="no">
        <type><ref refid="d5/dda/classEL_1_1WhiteBoardSvc" kindref="compound">WhiteBoardSvc</ref> *</type>
        <definition>WhiteBoardSvc* EL::NTupleSvc::m_whiteboard</definition>
        <argsstring></argsstring>
        <name>m_whiteboard</name>
        <briefdescription>
<para>description: the white board service, if we are using it </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="271" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1aede00dc035c019a21905c54b6eb618b6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; CopyInfo &gt;</type>
        <definition>std::vector&lt;CopyInfo&gt; EL::NTupleSvc::m_copyInfo</definition>
        <argsstring></argsstring>
        <name>m_copyInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d5/d4e/classEL_1_1NTupleSvc_1ab2e16770b187e60094d3ecae2aa22487" prot="private" static="no" mutable="no">
        <type>std::vector&lt; WhiteInfo &gt;</type>
        <definition>std::vector&lt;WhiteInfo&gt; EL::NTupleSvc::m_whiteInfo</definition>
        <argsstring></argsstring>
        <name>m_whiteInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="317" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a4105c696c3585c13f3f9d8a28fca5e3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1afa8999f46656a42d53df3731216f1296">testInvariant</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="58"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a83487ca6489db5ca3b71041331c0f84f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::NTupleSvc::NTupleSvc</definition>
        <argsstring>(const std::string &amp;val_outputName=&quot;output&quot;)</argsstring>
        <name>NTupleSvc</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_outputName</declname>
          <defval>&quot;output&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard constructor guarantee: strong failures: out of memory I requires: !val_outputName.empty() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="66"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1ac379791f16580327ed721cc637bb87ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::NTupleSvc::~NTupleSvc</definition>
        <argsstring>()</argsstring>
        <name>~NTupleSvc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard destructor guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1aee0ae4782ef2fd19fe71619e526e19b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::copyBranch</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>copyBranch</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: add another branch to copy. allows use of regular expressions guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="80"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1af03431ba945157e2de62616992e129bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::copyBranchList</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>copyBranchList</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: read a list of branches to copy from a file. allows use of regular expressions inside the file. leading and trailing spaces are ignored. lines starting with # are ignored. guarantee: strong failures: out of memory III failures: i/o errors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="91"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a2728d2b2783d05a48fd699a7643a1337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::addWhiteFloat</definition>
        <argsstring>(const std::string &amp;varName)</argsstring>
        <name>addWhiteFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>varName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: add a float from the whiteboard guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a83e7a55a929603ad621cc79160894915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::addWhiteArray</definition>
        <argsstring>(const std::string &amp;varName)</argsstring>
        <name>addWhiteArray</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>varName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: add an array from the whiteboard guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="105"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a777d0791cc722911113df6e49006059f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TTree *</type>
        <definition>TTree* EL::NTupleSvc::tree</definition>
        <argsstring>() const </argsstring>
        <name>tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: the tree we are writing out guarantee: no-fail requires(soft): initialize() has been called postcondition: result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a60c219ee981fed0594513abbac942e0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EL::NTupleSvc::getFilterPassed</definition>
        <argsstring>() const </argsstring>
        <name>getFilterPassed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether the current event will be taken guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1abae1532279451e16c1ed0836af8be540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::setFilterPassed</definition>
        <argsstring>(bool passed=true)</argsstring>
        <name>setFilterPassed</name>
        <param>
          <type>bool</type>
          <declname>passed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: take the current event if passed is set, otherwise perform a no-op guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="126"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1aaedac57a731fca422f95694ef31e854b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; EL::NTupleSvc::treeName</definition>
        <argsstring>() const </argsstring>
        <name>treeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the tree, or the empty string to use the name of the input tree guarantee: no-fail / strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a7db0d436466ee6cea4ea9b0e56bae674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::treeName</definition>
        <argsstring>(const std::string &amp;val_treeName)</argsstring>
        <name>treeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_treeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a00e51c9bf2ca92f3316184849f3aef40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>virtual const char* EL::NTupleSvc::GetName</definition>
        <argsstring>() const </argsstring>
        <name>GetName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: return the name of this algorithm guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a51b14da474bd793eab14396cf401c1d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">StatusCode</ref></type>
        <definition>virtual StatusCode EL::NTupleSvc::setupJob</definition>
        <argsstring>(Job &amp;job)</argsstring>
        <name>setupJob</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a6bea54e06f41f386407aad066f051f59">setupJob</reimplements>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: give the algorithm a chance to intialize the job with anything this algorithm needs. this method is automatically called before the algorithm is actually added to the job. guarantee: basic failures: algorithm dependent rationale: this is currently used to give algorithms a chance to register their output datasets, but can also be used for other stuff. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="157"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1aa416c761aa108a43559651d5a85ef027" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">StatusCode</ref></type>
        <definition>virtual StatusCode EL::NTupleSvc::changeInput</definition>
        <argsstring>(bool firstFile)</argsstring>
        <name>changeInput</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a555bf98d9d040bd8cca3cb55473fac0a">changeInput</reimplements>
        <param>
          <type>bool</type>
          <declname>firstFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do all changes to work with a new input file, e.g. set new branch addresses. if firstFile is set, this method is called just before init() is called guarantee: basic failures: algorithm dependent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1ac4173be4e75a575a8c35f93e37085f95" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">StatusCode</ref></type>
        <definition>virtual StatusCode EL::NTupleSvc::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1ad880ac0eae790193a28d0ec063727f5e">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do everything that needs to be done before running the algorithm, e.g. create output n-tuples and histograms. this method is called only once right after changeInput(true) is called guarantee: basic failures: algorithm dependent rationale: in principle all this work could be done on changeInput(true). However, providing this method should make it easier for the user to set up all his outputs and to do so only once. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="180"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1ab362206e94bb5a76105cafeb3f7d7ccc" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">StatusCode</ref></type>
        <definition>virtual StatusCode EL::NTupleSvc::execute</definition>
        <argsstring>()</argsstring>
        <name>execute</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a2ca11106132eab43a10bba3be427ead8">execute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: process the next event guarantee: basic failures: algorithm dependent rationale: the virtual part of Algorithm::process </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="188"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1aab27977d8e43a4a751564441d5765daf" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">StatusCode</ref></type>
        <definition>virtual StatusCode EL::NTupleSvc::postExecute</definition>
        <argsstring>()</argsstring>
        <name>postExecute</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a18c2689dec03b5b3159bec4236dbcd16">postExecute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do the post-processing for the event guarantee: basic failures: algorithm dependent rationale: the virtual part of Algorithm::process rationale: this is mainly used for specialized services that need to get input from subsequent algorithms before filling their event data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="199"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1af87ec81eedffa10b6017377d177f21c3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool EL::NTupleSvc::hasName</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>hasName</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a3c694ed2de08251908f20b67ce9b1201">hasName</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether this algorithm has the given name guarantee: basic failures: algorithm dependent rationale: this is to allow an algorithm to be known by multiple names. this is needed for <ref refid="d5/d4e/classEL_1_1NTupleSvc" kindref="compound">NTupleSvc</ref>, so that it can be located with and without the output tree name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="209"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1aea249b986851a57cd5a62fe145ba120c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::initBranches</definition>
        <argsstring>()</argsstring>
        <name>initBranches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create all the branches when called for the first time guarantee: basic, may create some failures: out of memory III failures: branch not found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="326"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1afed1974fb267c49ef7e9851703d78d15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::findBranches</definition>
        <argsstring>(std::set&lt; std::string &gt; &amp;branchList)</argsstring>
        <name>findBranches</name>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>branchList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: find the branches in the input tree guarantee: basic, may create some failures: out of memory III failures: branch not found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="334"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a632293f369af8a5f3422b9f1400fa6ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::initOutput</definition>
        <argsstring>(const std::string &amp;branchName)</argsstring>
        <name>initOutput</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>branchName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create the branch in the output tree guarantee: basic, may create some failures: out of memory II failures: branch not found failures: branch not copyable rationale: it is safe to call this function for branches that are already configured, since this function can call itself recursively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="346"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a843b12fdc8c6a884cfa48106fde3e993" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::initOutput</definition>
        <argsstring>(const std::set&lt; std::string &gt; &amp;branchList)</argsstring>
        <name>initOutput</name>
        <param>
          <type>const std::set&lt; std::string &gt; &amp;</type>
          <declname>branchList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create the branches in the output tree guarantee: basic, may create some failures: out of memory II failures: branch not found failures: branch not copyable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="355"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a976bc808733b016508850cac50377389" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::NTupleSvc::copyInput</definition>
        <argsstring>()</argsstring>
        <name>copyInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: copy the input branches to the output branches guarantee: basic, may copy some failures: out of memory III </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="362"/>
      </memberdef>
      <memberdef kind="function" id="d5/d4e/classEL_1_1NTupleSvc_1a2a7f1eb153bd4e9570b7d9bf14a25991" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::NTupleSvc::ClassDef</definition>
        <argsstring>(NTupleSvc, 1)</argsstring>
        <name>ClassDef</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1aaaf7e4b47c721a094449edc60a2ffe88">ClassDef</reimplements>
        <param>
          <type><ref refid="d5/d4e/classEL_1_1NTupleSvc" kindref="compound">NTupleSvc</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="365"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="15357">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
      </node>
      <node id="15356">
        <label>EL::NTupleSvc</label>
        <link refid="d5/d4e/classEL_1_1NTupleSvc"/>
        <childnode refid="15357" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="15359">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
        <childnode refid="15360" relation="usage">
          <edgelabel>m_wk</edgelabel>
        </childnode>
      </node>
      <node id="15360">
        <label>EL::Worker</label>
        <link refid="da/d12/classEL_1_1Worker"/>
        <childnode refid="15361" relation="usage">
          <edgelabel>m_metaData</edgelabel>
        </childnode>
      </node>
      <node id="15363">
        <label>string</label>
      </node>
      <node id="15362">
        <label>EL::WhiteBoardSvc</label>
        <link refid="d5/dda/classEL_1_1WhiteBoardSvc"/>
        <childnode refid="15359" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15361">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
      <node id="15358">
        <label>EL::NTupleSvc</label>
        <link refid="d5/d4e/classEL_1_1NTupleSvc"/>
        <childnode refid="15359" relation="public-inheritance">
        </childnode>
        <childnode refid="15362" relation="usage">
          <edgelabel>m_whiteboard</edgelabel>
        </childnode>
        <childnode refid="15363" relation="usage">
          <edgelabel>m_treeName</edgelabel>
          <edgelabel>m_outputName</edgelabel>
          <edgelabel>m_tree_title</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" bodystart="49" bodyend="366"/>
    <listofallmembers>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a83e7a55a929603ad621cc79160894915" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>addWhiteArray</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a2728d2b2783d05a48fd699a7643a1337" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>addWhiteFloat</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1abb182dee6741786ce59ddbd8a8fc4cc0" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>Algorithm</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a9e2072bd4fdda18ebc86f847b691d9b9" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>book</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aa416c761aa108a43559651d5a85ef027" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>changeInput</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a2a7f1eb153bd4e9570b7d9bf14a25991" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>ClassDef</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aee0ae4782ef2fd19fe71619e526e19b4" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>copyBranch</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1af03431ba945157e2de62616992e129bf" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>copyBranchList</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a47491dfb5c7a55591cb3e9d657aab95d" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>copyInfoMIter</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a976bc808733b016508850cac50377389" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>copyInput</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ab362206e94bb5a76105cafeb3f7d7ccc" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>execute</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1afed1974fb267c49ef7e9851703d78d15" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>findBranches</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a60c219ee981fed0594513abbac942e0c" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>getFilterPassed</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a00e51c9bf2ca92f3316184849f3aef40" prot="public" virt="virtual"><scope>EL::NTupleSvc</scope><name>GetName</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1af87ec81eedffa10b6017377d177f21c3" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>hasName</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a03872c24f8a637ba069b61d847ad557e" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>hist</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aea249b986851a57cd5a62fe145ba120c" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>initBranches</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ac4173be4e75a575a8c35f93e37085f95" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>initialize</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a632293f369af8a5f3422b9f1400fa6ae" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>initOutput</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a843b12fdc8c6a884cfa48106fde3e993" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>initOutput</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a3dd947ea1ff3dc004251574c9911708d" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_connected</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1afa66c2790c9f1954d2b10a4d0674f59b" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_copyBranches</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a1bfb9c17e6a0a657796d5e8533cbae6a" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_copyBranchesIter</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aede00dc035c019a21905c54b6eb618b6" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_copyInfo</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ac1ad4ec1b5b6ade942d3b013ac3288e6" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_d3pdreader</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a33f7c99de7ac7e358be30a3097ea4501" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_file</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1afe0e48b182a76b9961342374297bd38b" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_initialized</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a4f605494f936b3eb787415b230933d2e" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_outputName</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ae3c3fba3a98bb3b8141aa9c960e20235" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_taken</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aaf53c8d183fe68e9e289e814a78ff58f" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_tree</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a7471cb013be39eddbf738285a62c117a" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_tree_title</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a6ac264e0f5cab41a28b1ee00e200e285" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_treeName</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aee4c5cc5e8716e79ca627df067033421" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteArray</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1adb264433a75d46acfcda9366b9682e25" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteArrayIter</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1af8d8a20213d0496ee7f2f2b8d36611a3" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteboard</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a01b0eed695b202a8d9feae30df29f19b" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteFloat</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a30397d5a608c1044a5c97b872edf6a2a" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteFloatIter</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ab2e16770b187e60094d3ecae2aa22487" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>m_whiteInfo</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a468b0314089506f2c36445cfc84f673b" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d3345f2effc1ea5b8add736df764ca7" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1ad89c787f00a88c7b51a23a4a397f5c05" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>msgLvl</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a83487ca6489db5ca3b71041331c0f84f" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>NTupleSvc</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aab27977d8e43a4a751564441d5765daf" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>postExecute</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1abae1532279451e16c1ed0836af8be540" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>setFilterPassed</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a767c1725616f14d347b79002d755bf55" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>setMsgLevel</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a51b14da474bd793eab14396cf401c1d9" prot="private" virt="virtual"><scope>EL::NTupleSvc</scope><name>setupJob</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a4105c696c3585c13f3f9d8a28fca5e3d" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>testInvariant</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a777d0791cc722911113df6e49006059f" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>tree</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1aaedac57a731fca422f95694ef31e854b" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>treeName</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1a7db0d436466ee6cea4ea9b0e56bae674" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>treeName</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1afb9d22b49fa6a776284696593a4f05a9" prot="private" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>whiteInfoMIter</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a36e05186cb50cc0e5929121d3f6b6053" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>wk</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d787a867dbe55af8241032c7b4aabf4" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>~Algorithm</name></member>
      <member refid="d5/d4e/classEL_1_1NTupleSvc_1ac379791f16580327ed721cc637bb87ec" prot="public" virt="non-virtual"><scope>EL::NTupleSvc</scope><name>~NTupleSvc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
