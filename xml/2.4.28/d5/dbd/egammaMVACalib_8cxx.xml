<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/dbd/egammaMVACalib_8cxx" kind="file">
    <compoundname>egammaMVACalib.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">map</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes local="no">stdexcept</includes>
    <includes refid="d3/d77/make__unique_8h" local="yes">CxxUtils/make_unique.h</includes>
    <includes local="no">TPRegexp.h</includes>
    <includes local="no">TObjArray.h</includes>
    <includes local="no">TObjString.h</includes>
    <includes local="no">TSystemDirectory.h</includes>
    <includes local="no">TSystemFile.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">TMath.h</includes>
    <includes local="no">TTreeFormula.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">TList.h</includes>
    <includes local="no">TChain.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TXMLEngine.h</includes>
    <includes local="no">TH2Poly.h</includes>
    <includes local="no">TAxis.h</includes>
    <includes local="no">TF1.h</includes>
    <includes local="no">TMVA/Reader.h</includes>
    <includes local="no">TMVA/MethodBDT.h</includes>
    <includes refid="db/de6/egammaMVALayerDepth_8h" local="yes">egammaMVACalib/egammaMVALayerDepth.h</includes>
    <includes refid="d9/d71/egammaMVACalib_8h" local="yes">egammaMVACalib/egammaMVACalib.h</includes>
    <includes refid="dc/dd3/BDT_8h" local="yes">MVAUtils/BDT.h</includes>
    <includes refid="d3/d32/PathResolver_8h" local="yes">PathResolver/PathResolver.h</includes>
    <incdepgraph>
      <node id="115893">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115888" relation="include">
        </childnode>
        <childnode refid="115894" relation="include">
        </childnode>
        <childnode refid="115895" relation="include">
        </childnode>
      </node>
      <node id="115899">
        <label>MVAUtils/BDT.h</label>
        <link refid="dc/dd3/BDT_8h_source"/>
        <childnode refid="115861" relation="include">
        </childnode>
        <childnode refid="115885" relation="include">
        </childnode>
        <childnode refid="115900" relation="include">
        </childnode>
      </node>
      <node id="115895">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="115884">
        <label>egammaMVACalib/egammaMVACalib.h</label>
        <link refid="d9/d71/egammaMVACalib_8h_source"/>
        <childnode refid="115859" relation="include">
        </childnode>
        <childnode refid="115861" relation="include">
        </childnode>
        <childnode refid="115855" relation="include">
        </childnode>
        <childnode refid="115860" relation="include">
        </childnode>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115885" relation="include">
        </childnode>
        <childnode refid="115886" relation="include">
        </childnode>
        <childnode refid="115875" relation="include">
        </childnode>
        <childnode refid="115887" relation="include">
        </childnode>
      </node>
      <node id="115865">
        <label>TObjArray.h</label>
      </node>
      <node id="115901">
        <label>cstdint</label>
      </node>
      <node id="115900">
        <label>MVAUtils/Node.h</label>
        <link refid="db/d92/Node_8h_source"/>
        <childnode refid="115861" relation="include">
        </childnode>
        <childnode refid="115901" relation="include">
        </childnode>
      </node>
      <node id="115880">
        <label>TMVA/Reader.h</label>
      </node>
      <node id="115878">
        <label>TAxis.h</label>
      </node>
      <node id="115873">
        <label>TList.h</label>
      </node>
      <node id="115898">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="115856">
        <label>cassert</label>
      </node>
      <node id="115862">
        <label>stdexcept</label>
      </node>
      <node id="115891">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115888" relation="include">
        </childnode>
        <childnode refid="115892" relation="include">
        </childnode>
      </node>
      <node id="115888">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="115871">
        <label>TTreeFormula.h</label>
      </node>
      <node id="115858">
        <label>string</label>
      </node>
      <node id="115863">
        <label>CxxUtils/make_unique.h</label>
        <link refid="d3/d77/make__unique_8h"/>
      </node>
      <node id="115864">
        <label>TPRegexp.h</label>
      </node>
      <node id="115859">
        <label>map</label>
      </node>
      <node id="115879">
        <label>TF1.h</label>
      </node>
      <node id="115866">
        <label>TObjString.h</label>
      </node>
      <node id="115857">
        <label>fstream</label>
      </node>
      <node id="115882">
        <label>egammaMVACalib/egammaMVALayerDepth.h</label>
        <link refid="db/de6/egammaMVALayerDepth_8h_source"/>
        <childnode refid="115883" relation="include">
        </childnode>
      </node>
      <node id="115892">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="115867">
        <label>TSystemDirectory.h</label>
      </node>
      <node id="115854">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx</label>
        <link refid="egammaMVACalib.cxx"/>
        <childnode refid="115855" relation="include">
        </childnode>
        <childnode refid="115856" relation="include">
        </childnode>
        <childnode refid="115857" relation="include">
        </childnode>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115859" relation="include">
        </childnode>
        <childnode refid="115860" relation="include">
        </childnode>
        <childnode refid="115861" relation="include">
        </childnode>
        <childnode refid="115862" relation="include">
        </childnode>
        <childnode refid="115863" relation="include">
        </childnode>
        <childnode refid="115864" relation="include">
        </childnode>
        <childnode refid="115865" relation="include">
        </childnode>
        <childnode refid="115866" relation="include">
        </childnode>
        <childnode refid="115867" relation="include">
        </childnode>
        <childnode refid="115868" relation="include">
        </childnode>
        <childnode refid="115869" relation="include">
        </childnode>
        <childnode refid="115870" relation="include">
        </childnode>
        <childnode refid="115871" relation="include">
        </childnode>
        <childnode refid="115872" relation="include">
        </childnode>
        <childnode refid="115873" relation="include">
        </childnode>
        <childnode refid="115874" relation="include">
        </childnode>
        <childnode refid="115875" relation="include">
        </childnode>
        <childnode refid="115876" relation="include">
        </childnode>
        <childnode refid="115877" relation="include">
        </childnode>
        <childnode refid="115878" relation="include">
        </childnode>
        <childnode refid="115879" relation="include">
        </childnode>
        <childnode refid="115880" relation="include">
        </childnode>
        <childnode refid="115881" relation="include">
        </childnode>
        <childnode refid="115882" relation="include">
        </childnode>
        <childnode refid="115884" relation="include">
        </childnode>
        <childnode refid="115899" relation="include">
        </childnode>
        <childnode refid="115902" relation="include">
        </childnode>
      </node>
      <node id="115868">
        <label>TSystemFile.h</label>
      </node>
      <node id="115886">
        <label>TObject.h</label>
      </node>
      <node id="115897">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="115888" relation="include">
        </childnode>
        <childnode refid="115891" relation="include">
        </childnode>
        <childnode refid="115898" relation="include">
        </childnode>
      </node>
      <node id="115874">
        <label>TChain.h</label>
      </node>
      <node id="115869">
        <label>TSystem.h</label>
      </node>
      <node id="115861">
        <label>vector</label>
      </node>
      <node id="115875">
        <label>TFile.h</label>
      </node>
      <node id="115883">
        <label>array</label>
      </node>
      <node id="115890">
        <label>sstream</label>
      </node>
      <node id="115855">
        <label>iostream</label>
      </node>
      <node id="115896">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="115889">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115890" relation="include">
        </childnode>
        <childnode refid="115888" relation="include">
        </childnode>
        <childnode refid="115891" relation="include">
        </childnode>
        <childnode refid="115893" relation="include">
        </childnode>
        <childnode refid="115896" relation="include">
        </childnode>
      </node>
      <node id="115881">
        <label>TMVA/MethodBDT.h</label>
      </node>
      <node id="115894">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="115885">
        <label>TString.h</label>
      </node>
      <node id="115870">
        <label>TMath.h</label>
      </node>
      <node id="115876">
        <label>TXMLEngine.h</label>
      </node>
      <node id="115902">
        <label>PathResolver/PathResolver.h</label>
        <link refid="d3/d32/PathResolver_8h_source"/>
        <childnode refid="115887" relation="include">
        </childnode>
        <childnode refid="115858" relation="include">
        </childnode>
      </node>
      <node id="115877">
        <label>TH2Poly.h</label>
      </node>
      <node id="115887">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="115858" relation="include">
        </childnode>
        <childnode refid="115888" relation="include">
        </childnode>
        <childnode refid="115889" relation="include">
        </childnode>
        <childnode refid="115897" relation="include">
        </childnode>
      </node>
      <node id="115872">
        <label>TTree.h</label>
      </node>
      <node id="115860">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d5/dbd/egammaMVACalib_8cxx_1adb3c620afb838923a668c9c3cff4c0d2" prot="public" static="no">
        <name>CHECK_SETUPBDT</name>
        <param><defname>EXP</defname></param>
        <initializer>{ \
  if (!EXP) { \
	 	ATH_MSG_WARNING( #EXP &lt;&lt; &quot; returned false (not present?), skipping &quot; &lt;&lt; f-&gt;GetName() ); \
    f-&gt;Close(); \
    return; \
  } \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/dbd/egammaMVACalib_8cxx_1a77b4c5d2d35327bfbe8a908961314f66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; loadFromFile</definition>
        <argsstring>(TFile *f, std::string key)</argsstring>
        <name>loadFromFile</name>
        <param>
          <type>TFile *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx" bodystart="52" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d77/make__unique_8h" kindref="compound" tooltip="Provide a version of the C++14 make_unique.">CxxUtils/make_unique.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TPRegexp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TObjArray.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TObjString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystemDirectory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystemFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TMath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTreeFormula.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TList.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TChain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TXMLEngine.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH2Poly.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TAxis.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TF1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TMVA/Reader.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TMVA/MethodBDT.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;egammaMVACalib/egammaMVALayerDepth.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;egammaMVACalib/egammaMVACalib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MVAUtils/BDT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PathResolver/PathResolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">MVAUtils;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_SETUPBDT(EXP)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/>if<sp/>(!EXP)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/>#EXP<sp/>&lt;&lt;<sp/>&quot;<sp/>returned<sp/>false<sp/>(not<sp/>present?),<sp/>skipping<sp/>&quot;<sp/>&lt;&lt;<sp/>f-&gt;GetName()<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>f-&gt;Close();<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>DOCUMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Print<sp/>&quot;empty&quot;<sp/>bins<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>loadFromFile(TFile*<sp/>f,<sp/>std::string<sp/>key)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f-&gt;Get(key.c_str())));</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="d3/d52/classegammaMVACalib_1a75073bdfec113c09feb43c32f88cc7bc" kindref="member">egammaMVACalib::egammaMVACalib</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>particle,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useNewBDTs,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>folder,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>method,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>calibrationType,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>etaBinVar,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>energyBinVar,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>particleTypeVar,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>filePattern,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreSpectators)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>:<sp/>asg::AsgMessaging(</highlight><highlight class="stringliteral">&quot;egammaMVACalib&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>m_useNewBDTs(useNewBDTs),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>fMethodName(method),</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>m_etaVar(etaBinVar),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>m_energyVar(energyBinVar),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m_particleTypeVar(particleTypeVar),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ignoreSpectators(ignoreSpectators),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hasEnergyBins(false),<sp/>m_binMultiplicity(0),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>m_particleType(0),<sp/>m_eta(0),<sp/>m_energy(0),<sp/>m_initialEnergy(0),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hPoly(0),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tree(0),<sp/>m_input_tree(0),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>m_useInternalTree(true),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mvaOutput(0),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dummyFloat(0),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shiftType(NOSHIFT),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>m_clusterFormula(0),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_rawcl_Es0(0),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_rawcl_Es1(0),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_rawcl_Es2(0),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_rawcl_Es3(0),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_cl_eta(0),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_cl_E(0),</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_ptconv(0),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_pt1conv(0),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_pt2conv(0),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_cl_etaCalo(0),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_cl_phiCalo(0),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_convtrk1nPixHits(0),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_convtrk1nSCTHits(0),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_convtrk2nPixHits(0),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_convtrk2nSCTHits(0),</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_rawcl_calibHitsShowerDepth(0),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>m_ph_Rconv(0),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_rawcl_Es0(0),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_rawcl_Es1(0),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_rawcl_Es2(0),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_rawcl_Es3(0),</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_E_TileGap3(0),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_eta(0),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_E(0),</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_etaCalo(0),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_phiCalo(0),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_cl_phi(0),</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>m_el_rawcl_calibHitsShowerDepth(0)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>egammaMVACalib<sp/>in<sp/>debug<sp/>mode<sp/>with<sp/>options:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>particle<sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>particle</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>new<sp/>BDTs<sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>useNewBDTs</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>folder<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folder</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>method<sp/>name<sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fMethodName</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>calib<sp/>type<sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>calibrationType</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>etavar<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_etaVar</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>energy<sp/>var<sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_energyVar</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>particle<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_particleType</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>file<sp/>pattern<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filePattern</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>ignore<sp/>spect<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ignoreSpectators);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(debug)<sp/>{<sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;debug<sp/>flag<sp/>is<sp/>deprecated<sp/>and<sp/>has<sp/>no<sp/>effect&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>setPeakCorrection(MEAN10TOTRUE);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>useClusterIf0(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>&lt;<sp/>0<sp/>||<sp/>particle<sp/>&gt;=<sp/>static_cast&lt;int&gt;(NEGAMMATYPES))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument<sp/>for<sp/>particle<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>particle);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument<sp/>for<sp/>particle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>m_egammaType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">egammaType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(particle);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(calibrationType<sp/>&lt;<sp/>0<sp/>||<sp/>calibrationType<sp/>&gt;=<sp/>static_cast&lt;int&gt;(NCalibrationTypes))</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument<sp/>for<sp/>calibrationType<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>calibrationType);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>argument<sp/>for<sp/>calibrationType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>m_calibrationType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CalibrationType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(calibrationType);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filePattern.Length()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>filePattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MVACalib_(.*?)_(.*?)_&lt;calibType&gt;_&lt;method&gt;.weights.xml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>m_fileNamePattern<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TPRegexp(filePattern.ReplaceAll(</highlight><highlight class="stringliteral">&quot;&lt;calibType&gt;&quot;</highlight><highlight class="normal">,<sp/>getCalibTypeString()).ReplaceAll(</highlight><highlight class="stringliteral">&quot;&lt;method&gt;&quot;</highlight><highlight class="normal">,<sp/>fMethodName));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;regex<sp/>pattern:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_fileNamePattern-&gt;GetPattern());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>default<sp/>formula<sp/>for<sp/>etaBin<sp/>if<sp/>not<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_etaVar.Length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>m_etaVar<sp/>=<sp/>(m_egammaType<sp/>==<sp/>egPHOTON)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ph_cl_eta&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;el_cl_eta&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;etavar<sp/>not<sp/>specified:<sp/>set<sp/>to<sp/>default<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_etaVar);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>default<sp/>formula<sp/>for<sp/>energyBin<sp/>if<sp/>not<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_energyVar.Length()<sp/>==<sp/>0)<sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>m_energyVar<sp/>=<sp/>(m_egammaType<sp/>==<sp/>egPHOTON)<sp/>?</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(ph_rawcl_Es1<sp/>+<sp/>ph_rawcl_Es2<sp/>+<sp/>ph_rawcl_Es3)/cosh(ph_cl_eta)&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(el_rawcl_Es1<sp/>+<sp/>el_rawcl_Es2<sp/>+<sp/>el_rawcl_Es3)/cosh(el_cl_eta)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;energy<sp/>var<sp/>not<sp/>specified:<sp/>set<sp/>to<sp/>default<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_energyVar);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>formula<sp/>for<sp/>particleType<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>!=<sp/>egELECTRON<sp/>&amp;&amp;<sp/>m_particleTypeVar.Length()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>old:<sp/>0=unconverted,<sp/>1=converted<sp/>not<sp/>Si+Si,<sp/>2=converted<sp/>Si+Si</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_particleTypeVar<sp/>=<sp/>&quot;(ph_convFlag%10<sp/>&gt;<sp/>0)<sp/>+<sp/>(ph_convFlag%10<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(ph_convtrk1nPixHits<sp/>+<sp/>ph_convtrk1nSCTHits)<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>(ph_convtrk2nPixHits<sp/>+<sp/>ph_convtrk2nSCTHits)<sp/>&gt;<sp/>1)&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current:<sp/>0=unconverted,<sp/>1=converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>m_particleTypeVar<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ph_Rconv<sp/>&gt;<sp/>0.<sp/>&amp;&amp;<sp/>ph_Rconv<sp/>&lt;<sp/>800.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Variable<sp/>that<sp/>defines<sp/>particleType<sp/>not<sp/>set.<sp/>Using<sp/>default<sp/>formula:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_particleTypeVar.Data());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(folder.Length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>calibration<sp/>folder<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>calibration<sp/>folder<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Accessing<sp/>calibration<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folder.Data());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initializa<sp/>MVA<sp/>electron<sp/>/<sp/>photon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Reading<sp/>weights<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;folder.Data());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useNewBDTs)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>getBDTs(folder.Data());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>getReaders(folder);<sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>m_readers<sp/>and<sp/>m_additional_infos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getNreaders())</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;No<sp/>reader<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>reader<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>printReadersInfo();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>variables:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_formulae.size());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msgLvl(MSG::DEBUG))<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;TString,<sp/>egammaMVACalib::VarFormula&gt;::const_iterator<sp/>it<sp/>=<sp/>m_formulae.begin();<sp/>it<sp/>!=<sp/>m_formulae.end();<sp/>++it)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;formula:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it-&gt;second.expression);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>formulae<sp/>to<sp/>retrieve<sp/>the<sp/>reader<sp/>corresponding<sp/>to<sp/>each<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>setupFormulasForReaderID();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>formula<sp/>to<sp/>retrieve<sp/>the<sp/>initial<sp/>energy<sp/>(used<sp/>in<sp/>getMVAResponseTree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>defineInitialEnergyFormula();</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="d3/d52/classegammaMVACalib_1a877dc51c3e90b9f727b14e97ceaa0509" kindref="member">egammaMVACalib::~egammaMVACalib</ref>()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>formulae&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>m_formulae.begin();<sp/>it<sp/>!=<sp/>m_formulae.end();<sp/>++it)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second.formula;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>the<sp/>readers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>readers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>egammaMVACalib::ReaderID,<sp/>TMVA::Reader*<sp/>&gt;::iterator<sp/>itR;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itR<sp/>=<sp/>m_readers.begin();<sp/>itR<sp/>!=<sp/>m_readers.end();<sp/>++itR)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>itR-&gt;second;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>the<sp/>BDTs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>readers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>egammaMVACalib::ReaderID,<sp/>BDT*<sp/>&gt;::iterator<sp/>itB;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itB<sp/>=<sp/>m_BDTs.begin();<sp/>itB<sp/>!=<sp/>m_BDTs.end();<sp/>++itB)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>itB-&gt;second;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>filenamepattern<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_fileNamePattern);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_fileNamePattern;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>m_hPoly<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hPoly);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_hPoly;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>shift<sp/>formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>m_shiftMap&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>ShiftMap::iterator<sp/>itS;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itS<sp/>=<sp/>m_shiftMap.begin();<sp/>itS<sp/>!=<sp/>m_shiftMap.end();<sp/>++itS)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>itS-&gt;second;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>clusterFormula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_clusterFormula;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;deleting<sp/>internal<sp/>tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_tree;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;finishing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>egammaMVACalib::setPeakCorrection(TString<sp/>shift_type)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>ShiftType<sp/>shift<sp/>=<sp/>NOSHIFT;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NOSHIFT&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>NOSHIFT;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;PEAKTOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>PEAKTOTRUE;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEANTOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEANTOTRUE;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEDIANTOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEDIANTOTRUE;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEAN10TOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEAN10TOTRUE;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEAN20TOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEAN20TOTRUE;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEDIAN10TOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEDIAN10TOTRUE;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MEDIAN20TOTRUE&quot;</highlight><highlight class="normal">)<sp/>shift<sp/>=<sp/>MEDIAN20TOTRUE;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::setPeakCorrection<sp/>non<sp/>valid<sp/>shift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shift_type.Data());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;not<sp/>valid<sp/>shift&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>setPeakCorrection(shift);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">TH2Poly*<sp/><ref refid="d3/d52/classegammaMVACalib_1ac0889f23e9012af9288143ed7e6bdd93" kindref="member">egammaMVACalib::getTH2Poly</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="271"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH2Poly*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_hPoly-&gt;Clone(</highlight><highlight class="stringliteral">&quot;hPoly&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">egammaMVACalib::AdditionalInfoMap</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="d3/d52/classegammaMVACalib_1a51505e36a40d079b345b70460b8e2175" kindref="member">egammaMVACalib::getUserInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>xmlfilename)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>egammaMVACalib::AdditionalInfoMap<sp/>result;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>TXMLEngine<sp/>xml;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>XMLDocPointer_t<sp/>xmldoc<sp/>=<sp/>xml.ParseFile(xmlfilename);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xmldoc)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>XMLNodePointer_t<sp/>mainnode<sp/>=<sp/>xml.DocGetRootElement(xmldoc);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>to<sp/>find<sp/>&lt;UserInfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>XMLNodePointer_t<sp/>user_infos_node<sp/>=<sp/>xml.GetChild(mainnode);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::string(xml.GetNodeName(user_infos_node))<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;UserInfo&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>user_infos_node<sp/>=<sp/>xml.GetNext(user_infos_node);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(user_infos_node<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!user_infos_node)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>all<sp/>children<sp/>inside<sp/>&lt;UserInfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>XMLNodePointer_t<sp/>info_node<sp/>=<sp/>xml.GetChild(user_infos_node);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(info_node<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>XMLAttrPointer_t<sp/>attr<sp/>=<sp/>xml.GetFirstAttr(info_node);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>name,<sp/>value;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(attr<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>key_name<sp/>=<sp/>xml.GetAttrName(attr);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>key_value<sp/>=<sp/>xml.GetAttrValue(attr);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name.Length())<sp/>name<sp/>=<sp/>key_value;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value.Length())<sp/>value<sp/>=<sp/>key_value;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attr<sp/>=<sp/>xml.GetNextAttr(attr);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.Length()<sp/>and<sp/>value.Length())</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(std::make_pair(name,<sp/>value));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>m_msg(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::getUserInfo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msg.msg(MSG::ERROR)&lt;&lt;</highlight><highlight class="stringliteral">&quot;error<sp/>reading<sp/>UserInfo<sp/>section<sp/>xml<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>xmlfilename.Data()&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>info_node<sp/>=<sp/>xml.GetNext(info_node);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a019edba0388bb69a28d0f7f2fe1911ad" kindref="member">egammaMVACalib::getReaders</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;&lt;getReaders&gt;<sp/>in<sp/>folder:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folder);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>m_hPoly<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TH2Poly();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>TMVA::Reader*<sp/>&gt;<sp/>readers;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>TString<sp/>path(folder);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>gSystem-&gt;ExpandPathName(path);<sp/></highlight><highlight class="comment">//<sp/>expand<sp/>special<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>TSystemDirectory<sp/>dir(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>path.Data());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>TList*<sp/>list_of_files<sp/>=<sp/>dir.GetListOfFiles();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_of_files)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::getReaders<sp/>Directory<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folder.Data());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Directory<sp/>doesn&apos;t<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>list_of_files-&gt;GetEntries()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>files&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;searching<sp/>all<sp/>xml<sp/>files<sp/>with<sp/>pattern<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_fileNamePattern-&gt;GetPattern());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>TSystemFile<sp/>*file;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>TIter<sp/>next(list_of_files);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/>key;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((file=(TSystemFile*)next()))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>fileName<sp/>=<sp/>file-&gt;GetName();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileName.EndsWith(</highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/d52/classegammaMVACalib_1a7f80eabd6db88d80afdd87b84a62b8c4" kindref="member">parseFileName</ref>(fileName,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::getReaders<sp/>filename<sp/>not<sp/>valid,<sp/>skipping<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileName.Data());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_readers.find(key)<sp/>!=<sp/>m_readers.end())<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::getReaders<sp/>trying<sp/>to<sp/>create<sp/>the<sp/>same<sp/>reader<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;trying<sp/>to<sp/>create<sp/>the<sp/>same<sp/>reader<sp/>twice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;create<sp/>&quot;<sp/>&lt;&lt;<sp/>key.bin<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>m_readers[key]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TMVA::Reader(</highlight><highlight class="stringliteral">&quot;Silent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1ae18093195010d69d1900ee1e3915654a" kindref="member">setupReader</ref>(m_readers[key],<sp/>path<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>fileName);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>AdditionalInfoMap<sp/>infos<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a51505e36a40d079b345b70460b8e2175" kindref="member">getUserInfo</ref>(path<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>fileName);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>m_additional_infos.insert(std::make_pair(key,<sp/>infos));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>list_of_files;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1aee2dadbb7dc41395629d48202527a6f5" kindref="member">egammaMVACalib::getBDTs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>folder)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;&lt;getBDTs&gt;<sp/>in<sp/>folder:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>folder);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>==<sp/>egPHOTON)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a386dbff38da7a82b109f78755a186b1f" kindref="member">setupBDT</ref>(PathResolverFindCalibFile(folder<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/MVACalib_unconvertedPhoton.weights.root&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a386dbff38da7a82b109f78755a186b1f" kindref="member">setupBDT</ref>(PathResolverFindCalibFile(folder<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/MVACalib_convertedPhoton.weights.root&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a386dbff38da7a82b109f78755a186b1f" kindref="member">setupBDT</ref>(PathResolverFindCalibFile(folder<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/MVACalib_electron.weights.root&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>m_binMultiplicity<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>just<sp/>to<sp/>print...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a386dbff38da7a82b109f78755a186b1f" kindref="member">egammaMVACalib::setupBDT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>fileName)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/>key;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/d52/classegammaMVACalib_1a7f80eabd6db88d80afdd87b84a62b8c4" kindref="member">parseFileName</ref>(fileName,<sp/>key.particleType))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Setup<sp/>BDT<sp/>for<sp/>particle<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key.particleType);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>TString<sp/>filePath<sp/>=<sp/>PathResolverFindCalibFile(fileName.Data());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TFile&gt;<sp/>f(TFile::Open(filePath));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>f.get()<sp/>&amp;&amp;<sp/>f-&gt;IsZombie()<sp/>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>hPoly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hPoly<sp/>=<sp/>loadFromFile&lt;TH2Poly&gt;(f.get(),<sp/></highlight><highlight class="stringliteral">&quot;hPoly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>hPoly<sp/>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_hPoly)<sp/>m_hPoly<sp/>=<sp/>(TH2Poly*)<sp/>hPoly.get()-&gt;Clone();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>m_hPoly-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>m_hPoly<sp/>);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formulae<sp/>=<sp/>loadFromFile&lt;TObjArray&gt;(f.get(),<sp/></highlight><highlight class="stringliteral">&quot;formulae&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>formulae<sp/>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>formulae-&gt;SetOwner();<sp/></highlight><highlight class="comment">//<sp/>to<sp/>delete<sp/>the<sp/>objects<sp/>when<sp/>d-tor<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>variables<sp/>=<sp/>loadFromFile&lt;TObjArray&gt;(f.get(),<sp/></highlight><highlight class="stringliteral">&quot;variables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>variables<sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>variables-&gt;SetOwner();<sp/></highlight><highlight class="comment">//<sp/>to<sp/>delete<sp/>the<sp/>objects<sp/>when<sp/>d-tor<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>shifts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shifts<sp/>=<sp/>loadFromFile&lt;TObjArray&gt;(f.get(),<sp/></highlight><highlight class="stringliteral">&quot;shifts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>shifts<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>shifts-&gt;SetOwner();<sp/></highlight><highlight class="comment">//<sp/>to<sp/>delete<sp/>the<sp/>objects<sp/>when<sp/>d-tor<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>trees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trees<sp/>=<sp/>loadFromFile&lt;TObjArray&gt;(f.get(),<sp/></highlight><highlight class="stringliteral">&quot;trees&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trees.get())<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>trees-&gt;SetOwner();<sp/></highlight><highlight class="comment">//<sp/>to<sp/>delete<sp/>the<sp/>objects<sp/>when<sp/>d-tor<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setupBDT<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BDTs<sp/>read<sp/>from<sp/>TObjArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setupBDT<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reading<sp/>trees<sp/>individually&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>trees<sp/>=<sp/>CxxUtils::make_unique&lt;TObjArray&gt;();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>trees-&gt;SetOwner();<sp/></highlight><highlight class="comment">//<sp/>to<sp/>delete<sp/>the<sp/>objects<sp/>when<sp/>d-tor<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>variables-&gt;GetEntries();<sp/>++i)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TTree<sp/>*tree<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TTree*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f-&gt;Get(Form(</highlight><highlight class="stringliteral">&quot;BDT%d&quot;</highlight><highlight class="normal">,<sp/>i)));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree)<sp/>tree-&gt;SetCacheSize(0);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trees-&gt;AddAtAndExpand(tree,<sp/>i);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>objects<sp/>have<sp/>(the<sp/>same<sp/>number<sp/>of)<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>trees-&gt;GetEntries()<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>CHECK_SETUPBDT(<sp/>(trees-&gt;GetEntries()<sp/>==<sp/>variables-&gt;GetEntries())<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(pre)<sp/>define<sp/>formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>TNamed<sp/>*formula;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>TIter<sp/>nextFormula(formulae.get());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((formula<sp/>=<sp/>(TNamed*)<sp/>nextFormula())){</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(formula-&gt;GetName(),<sp/>formula-&gt;GetTitle(),<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>simultaneously<sp/>over<sp/>trees,<sp/>variables<sp/>and<sp/>shifts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>BDTs,<sp/>the<sp/>list<sp/>of<sp/>variables<sp/>and<sp/>the<sp/>shift<sp/>for<sp/>each<sp/>BDT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>TObjString<sp/>*str2,<sp/>*shift;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>TTree<sp/>*tree;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>TIter<sp/>nextTree(trees.get());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>TIter<sp/>nextVariables(variables.get());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>TIter<sp/>nextShift(shifts.get());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>(tree<sp/>=<sp/>(TTree*)<sp/>nextTree())<sp/>&amp;&amp;<sp/>((TObjString*)<sp/>nextVariables());<sp/>++i)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>key.bin<sp/>=<sp/>i+1;<sp/></highlight><highlight class="comment">//<sp/>bin<sp/>has<sp/>an<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref><sp/>*bdt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref>(tree);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>m_BDTs[key]<sp/>=<sp/>bdt;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float*&gt;<sp/>pointers;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>variables,<sp/>which<sp/>are<sp/>separated<sp/>by<sp/>comma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>separator_var<sp/>=<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(variables-&gt;At(i)).Index(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">)<sp/>&lt;<sp/>1)<sp/>separator_var<sp/>=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>old<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TObjArray&gt;<sp/>tokens(<ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(variables-&gt;At(i)).Tokenize(separator_var));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>TIter<sp/>nextVar(tokens.get());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((str2<sp/>=<sp/>(TObjString*)<sp/>nextVar()))</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>varName<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(str2);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!varName.Length())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;<sp/>TString,<sp/>VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.find(varName);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::setupBDT<sp/>Variable<sp/>not<sp/>defined:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>varName.Data());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Variable<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pointers.push_back(&amp;(it-&gt;second.variable));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>bdt-&gt;<ref refid="d2/daa/classMVAUtils_1_1BDT_1ad09ba2ff11c5867cfc2556a1716b9721" kindref="member">SetPointers</ref>(pointers);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>(TObjString*)<sp/>nextShift();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift)<sp/>m_additional_infos[key][</highlight><highlight class="stringliteral">&quot;Mean10&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(shift);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a7f80eabd6db88d80afdd87b84a62b8c4" kindref="member">egammaMVACalib::parseFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>fileName,<sp/><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/>&amp;key)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>fileName<sp/>matches<sp/>the<sp/>expected<sp/>pattern<sp/>for<sp/>readers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TObjArray&gt;<sp/>match(m_fileNamePattern-&gt;MatchS(fileName));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!match.get()<sp/>or<sp/>match-&gt;GetEntries()<sp/>!=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>ParticleType,<sp/>convert<sp/>the<sp/>string<sp/>to<sp/>the<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>TString<sp/>pType<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(match-&gt;At(1));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>egammaMVACalib::ParticleType<sp/>particleType<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">getParticleType</ref>(pType);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particleType<sp/>==<sp/>INVALIDPARTICLE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>fileName<sp/>to<sp/>define<sp/>the<sp/>fields<sp/>(eta/energy)<sp/>and<sp/>the<sp/>range<sp/>of<sp/>each<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(split<sp/>the<sp/>fileName<sp/>assuming<sp/>the<sp/>fields<sp/>are<sp/>separated<sp/>by<sp/>&quot;_&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>TString<sp/>binDef<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(match-&gt;At(2));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.<sp/>Et20-40_eta1.55-1.74</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>delete<sp/>match;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TObjArray&gt;<sp/>binArray(binDef.Tokenize(</highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!binArray.get())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>TIter<sp/>next(binArray.get());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>bin<sp/>multiplicity<sp/>(1D,<sp/>2D)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_binMultiplicity)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>m_binMultiplicity<sp/>=<sp/>binArray-&gt;GetSize()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_binMultiplicity<sp/>!=<sp/>binArray-&gt;GetSize()<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;parseFileName<sp/>Mismatch<sp/>in<sp/>bin<sp/>definition<sp/>from<sp/>file<sp/>names&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;(parseFileName)<sp/>Mismatch<sp/>in<sp/>bin<sp/>definition<sp/>from<sp/>file<sp/>names&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>TPRegexp<sp/>binPattern(</highlight><highlight class="stringliteral">&quot;(eta|Et|E)(.*)-(.*)&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>better,<sp/>*<sp/>-&gt;<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMin<sp/>=<sp/>0.,<sp/>etaMax<sp/>=<sp/>1e99,<sp/>energyMin<sp/>=<sp/>0.,<sp/>energyMax<sp/>=<sp/>1e99;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>TObjString<sp/>*sObj;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((sObj<sp/>=<sp/>(TObjString*)<sp/>next()))</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>TObjArray*<sp/>binMatch<sp/>=<sp/>binPattern.MatchS(sObj-&gt;GetString());</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!binMatch<sp/>||<sp/>binMatch-&gt;GetEntries()<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::setupBDT<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>interpret<sp/>(from<sp/>fileName):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binDef.Data());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>min/max<sp/>of<sp/>eta/E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>binName<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(binMatch-&gt;At(1));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>etaMin<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(binMatch-&gt;At(2)).Atof();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>etaMax<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(binMatch-&gt;At(3)).Atof();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal"><sp/>||<sp/>binName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Et&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>energyMin<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(binMatch-&gt;At(2)).Atof();</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>energyMax<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(binMatch-&gt;At(3)).Atof();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>binMatch;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>key.particleType<sp/>=<sp/>particleType;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>key.bin<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a51f7caa93b23c19565b5e59c59e0e874" kindref="member">getBin</ref>(etaMin,<sp/>etaMax,<sp/>energyMin,<sp/>energyMax);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a7f80eabd6db88d80afdd87b84a62b8c4" kindref="member">egammaMVACalib::parseFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>fileName,<sp/>egammaMVACalib::ParticleType<sp/>&amp;particleType)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>fileName<sp/>matches<sp/>the<sp/>expected<sp/>pattern<sp/>for<sp/>readers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>TPRegexp<sp/>fileNamePattern(</highlight><highlight class="stringliteral">&quot;MVACalib_(.*?).weights.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;TObjArray&gt;<sp/>match(fileNamePattern.MatchS(fileName));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!match.get()<sp/>or<sp/>match-&gt;GetEntries()<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Checking:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileName.Data());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>ParticleType,<sp/>convert<sp/>the<sp/>string<sp/>to<sp/>the<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>TString<sp/>pType<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(match-&gt;At(1));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>particleType<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">getParticleType</ref>(pType);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particleType<sp/>==<sp/>INVALIDPARTICLE)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">TString<sp/><ref refid="d3/d52/classegammaMVACalib_1ade3d962595b6d8b41a246eaf5c513f90" kindref="member">egammaMVACalib::getBinName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>binField)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binField.BeginsWith(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TString(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binField.BeginsWith(</highlight><highlight class="stringliteral">&quot;Et&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TString(</highlight><highlight class="stringliteral">&quot;Et&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binField.BeginsWith(</highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TString(</highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TString();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TString<sp/>m_binVars(&quot;eta,E&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>possible<sp/>fields<sp/>(defined<sp/>by<sp/>m_binVars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>the<sp/>(first)<sp/>one<sp/>that<sp/>matches<sp/>the<sp/>given<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>TIter<sp/>varNext(m_binVars.Tokenize(&quot;,&quot;));<sp/>//<sp/>possible<sp/>fields<sp/>are<sp/>separated<sp/>by<sp/>a<sp/>comma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>TObjString<sp/>*varCandidate;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>while<sp/>((varCandidate<sp/>=<sp/>(TObjString*)<sp/>varNext()))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>binName<sp/>=<sp/>varCandidate-&gt;GetString();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(binField.BeginsWith(binName))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>binName;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>TString();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a51f7caa93b23c19565b5e59c59e0e874" kindref="member">egammaMVACalib::getBin</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMax,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energyMin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energyMax)</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_hPoly-&gt;FindBin(0.5*(etaMin<sp/>+<sp/>etaMax),<sp/>0.5*(energyMin<sp/>+<sp/>energyMax));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>bin<sp/>or<sp/>check<sp/>the<sp/>edges<sp/>to<sp/>avoid<sp/>overlapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>1e-10<sp/>because<sp/>TH2Poly<sp/>does<sp/>not<sp/>include<sp/>low<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>bin<sp/>=<sp/>m_hPoly-&gt;AddBin(etaMin<sp/>-<sp/>1e-10,<sp/>energyMin<sp/>-<sp/>1e-10,<sp/>etaMax,<sp/>energyMax);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hPoly-&gt;SetBinContent(bin,<sp/>bin);<sp/></highlight><highlight class="comment">//<sp/>just<sp/>for<sp/>drawing,<sp/>no<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;New<sp/>bin<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>etaMin<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>etaMin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>etaMax<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>etaMax</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>Emin<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>energyMin</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>Emax<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>energyMax);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d3/d52/classegammaMVACalib_1aa8b0087da1942b29aa9302e24aba232e" kindref="member">checkBin</ref>(bin,<sp/>etaMin,<sp/>etaMax,<sp/>energyMin,<sp/>energyMax))</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ae18093195010d69d1900ee1e3915654a" kindref="member">egammaMVACalib::setupReader</ref>(TMVA::Reader<sp/>*reader,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>xml_filename)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//ATH_MSG_DEBUG(&quot;In<sp/>setupReader:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>xml_filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;<sp/>variable_infos<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a58ce592ef52fb0ef266ecae983908a71" kindref="member">parseXml</ref>(xml_filename);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variables<sp/>and<sp/>spectators<sp/>using<sp/>the<sp/>floats<sp/>from<sp/>m_formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>TTreeFormula<sp/>is<sp/>defined<sp/>later<sp/>in<sp/>InitTree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;::const_iterator<sp/>itvar<sp/>=<sp/>variable_infos.begin();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itvar<sp/>!=<sp/>variable_infos.end();<sp/>++itvar)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>variable<sp/>/<sp/>spectator<sp/>name<sp/>and<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>infoType<sp/><sp/>=<sp/>(TString(itvar-&gt;nodeName).Contains(</highlight><highlight class="stringliteral">&quot;Variable&quot;</highlight><highlight class="normal">)<sp/>?</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>expression<sp/>=<sp/>itvar-&gt;expression;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>varName<sp/><sp/><sp/><sp/>=<sp/>itvar-&gt;label;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ignoreSpectators<sp/>||<sp/>infoType<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(varName,<sp/>expression,<sp/>infoType,<sp/>itvar-&gt;varType);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variable<sp/>/<sp/>spectator<sp/>to<sp/>the<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>expression<sp/>(if<sp/>different<sp/>than<sp/>variable<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>varDefinition(varName);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varName<sp/>!=<sp/>expression)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varDefinition<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>expression;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ATH_MSG_DEBUG(&quot;Adding<sp/>&quot;<sp/>&lt;&lt;<sp/>infoType<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>varDefinition);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;AddVariable(varDefinition,<sp/>&amp;(m_formulae[varName].variable));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!m_ignoreSpectators)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;AddSpectator(varDefinition,<sp/>&amp;(m_formulae[varName].variable));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;AddSpectator(varDefinition,<sp/>&amp;m_dummyFloat);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;(setupReader)<sp/>:<sp/>Unknown<sp/>type<sp/>from<sp/>parser<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>infoType.Data());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;(setupReader)<sp/>:<sp/>Unknown<sp/>type<sp/>from<sp/>parser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>reader-&gt;BookMVA(<ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>.Data(),<sp/>xml_filename.Data());</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a098a50e2400942e42d2cbb5ef8fdd289" kindref="member">egammaMVACalib::setupFormulasForReaderID</ref>()</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.end();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>!=<sp/>egELECTRON<sp/>&amp;&amp;<sp/>m_particleTypeVar.Length())</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(</highlight><highlight class="stringliteral">&quot;particleType&quot;</highlight><highlight class="normal">,<sp/>m_particleTypeVar,<sp/></highlight><highlight class="stringliteral">&quot;other&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a1b7beae45b40158bbf09b6f5ca9f6fee" kindref="member" tooltip="Use clusterE if MVA response is 0.">m_particleType</ref><sp/>=<sp/>&amp;(m_formulae[</highlight><highlight class="stringliteral">&quot;particleType&quot;</highlight><highlight class="normal">].variable);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="d3/d52/classegammaMVACalib_1a1b7beae45b40158bbf09b6f5ca9f6fee" kindref="member" tooltip="Use clusterE if MVA response is 0.">m_particleType</ref>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="comment">/*m_hasEnergyBins<sp/>&amp;&amp;*/</highlight><highlight class="normal"><sp/>m_energyVar.Length())</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(m_energyVar);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())<sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>correspond<sp/>to<sp/>a<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(</highlight><highlight class="stringliteral">&quot;energyBin&quot;</highlight><highlight class="normal">,<sp/>m_energyVar,<sp/></highlight><highlight class="stringliteral">&quot;other&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_energy<sp/>=<sp/>&amp;(m_formulae[</highlight><highlight class="stringliteral">&quot;energyBin&quot;</highlight><highlight class="normal">].variable);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_energy<sp/>=<sp/>&amp;(it-&gt;second.variable);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m_energy);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1a48e7bbe65ba8693c7ecf2dd1adde7e56" kindref="member" tooltip="correct Eaccordion, Ecluster...">m_etaVar</ref>.Length())</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(<ref refid="d3/d52/classegammaMVACalib_1a48e7bbe65ba8693c7ecf2dd1adde7e56" kindref="member" tooltip="correct Eaccordion, Ecluster...">m_etaVar</ref>);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())<sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>correspond<sp/>to<sp/>a<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(</highlight><highlight class="stringliteral">&quot;etaBin&quot;</highlight><highlight class="normal">,<sp/><ref refid="d3/d52/classegammaMVACalib_1a48e7bbe65ba8693c7ecf2dd1adde7e56" kindref="member" tooltip="correct Eaccordion, Ecluster...">m_etaVar</ref>,<sp/></highlight><highlight class="stringliteral">&quot;other&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_eta<sp/>=<sp/>&amp;(m_formulae[</highlight><highlight class="stringliteral">&quot;etaBin&quot;</highlight><highlight class="normal">].variable);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_eta<sp/>=<sp/>&amp;(it-&gt;second.variable);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m_eta);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">egammaMVACalib::predefineFormula</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>expression,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>infoType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>valueType)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>a<sp/>previously<sp/>defined<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.find(name);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())<sp/></highlight><highlight class="comment">//<sp/>variable<sp/>not<sp/>yet<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>VarFormula<sp/>v<sp/>=<sp/>{<sp/>0,<sp/>expression,<sp/>infoType,<sp/>valueType,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>m_formulae[name]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Formula<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expression);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>defined,<sp/>compare<sp/>the<sp/>expressions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.expression<sp/>!=<sp/>expression)</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;predefineFormula,<sp/>Expressions<sp/>for<sp/>do<sp/>not<sp/>match.<sp/>Old:<sp/>New:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;name.Data()<sp/>&lt;&lt;<sp/>it-&gt;second.expression.Data()<sp/>&lt;&lt;<sp/>expression.Data());</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Expressions<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>it-&gt;second.infoType<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Setting<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>\&quot;variable\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second.infoType<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/><ref refid="d3/d52/classegammaMVACalib_1acc9f51e4ce816b57845b343f77ef9f91" kindref="member">egammaMVACalib::getReaderID</ref>()</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/>key<sp/>=<sp/>{<sp/>(ParticleType)<sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">getParticleType</ref>(),<sp/><ref refid="d3/d52/classegammaMVACalib_1a51f7caa93b23c19565b5e59c59e0e874" kindref="member">getBin</ref>()<sp/>};<sp/></highlight><highlight class="comment">//getEtaBin(),<sp/>getEnergyBin()<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">egammaMVACalib::getParticleType</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="747"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>==<sp/>egELECTRON)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ELECTRON;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>assert(<ref refid="d3/d52/classegammaMVACalib_1a1b7beae45b40158bbf09b6f5ca9f6fee" kindref="member" tooltip="Use clusterE if MVA response is 0.">m_particleType</ref>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*<ref refid="d3/d52/classegammaMVACalib_1a1b7beae45b40158bbf09b6f5ca9f6fee" kindref="member" tooltip="Use clusterE if MVA response is 0.">m_particleType</ref><sp/>+<sp/>0.5);<sp/></highlight><highlight class="comment">//<sp/>+0.5<sp/>to<sp/>avoid<sp/>bad<sp/>truncation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a51f7caa93b23c19565b5e59c59e0e874" kindref="member">egammaMVACalib::getBin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="756"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>TMath::Abs(m_eta<sp/>?<sp/>*m_eta<sp/>:<sp/>0.);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energy<sp/>=<sp/>(m_energy<sp/>?<sp/>(*m_energy)/1e3<sp/>:<sp/>0.);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;(getBin)<sp/>eta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>energy<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bin<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hPoly-&gt;FindBin(eta,<sp/>energy));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hPoly-&gt;FindBin(eta,<sp/>energy);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">TTree*<sp/><ref refid="d3/d52/classegammaMVACalib_1ae71070fc34f5306398c47c7a8d4c74e8" kindref="member">egammaMVACalib::createInternalTree</ref>(egammaType<sp/>egamma_type,<sp/>TTree<sp/>*tree)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>internal<sp/>tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>TTree*<sp/>new_tree<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TTree();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>new_tree-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>new_tree-&gt;SetCacheSize(0);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>new_tree-&gt;Branch(<ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>.Data(),<sp/>&amp;m_mvaOutput,<sp/>Form(</highlight><highlight class="stringliteral">&quot;%s/F&quot;</highlight><highlight class="normal">,<sp/><ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>.Data()));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>m_useInternalTree<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1ae6016f0d7d2e1e26bc82761efe396c33" kindref="member">checkShowerDepth</ref>(tree);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(egamma_type<sp/>==<sp/>egPHOTON)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_rawcl_Es0&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_rawcl_Es0);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_rawcl_Es1&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_rawcl_Es1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_rawcl_Es2&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_rawcl_Es2);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_rawcl_Es3&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_rawcl_Es3);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_cl_eta&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_cl_eta);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_cl_E&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_cl_E);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_ptconv&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_ptconv);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_pt1conv&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_pt1conv);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_pt2conv&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_pt2conv);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_cl_etaCalo&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_cl_etaCalo);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_cl_phiCalo&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_cl_phiCalo);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_convtrk1nPixHits&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_convtrk1nPixHits);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_convtrk1nSCTHits&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_convtrk1nSCTHits);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_convtrk2nPixHits&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_convtrk2nPixHits);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_convtrk2nSCTHits&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_convtrk2nSCTHits);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_rawcl_calibHitsShowerDepth&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_rawcl_calibHitsShowerDepth);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;ph_Rconv&quot;</highlight><highlight class="normal">,<sp/>&amp;m_ph_Rconv);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(egamma_type<sp/>==<sp/>egELECTRON)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_rawcl_Es0&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_rawcl_Es0);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_rawcl_Es1&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_rawcl_Es1);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_rawcl_Es2&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_rawcl_Es2);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_rawcl_Es3&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_rawcl_Es3);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_E_TileGap3&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_E_TileGap3);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_eta&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_eta);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_E&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_E);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_etaCalo&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_etaCalo);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_phiCalo&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_phiCalo);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_cl_phi&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_cl_phi);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>new_tree-&gt;Branch(</highlight><highlight class="stringliteral">&quot;el_rawcl_calibHitsShowerDepth&quot;</highlight><highlight class="normal">,<sp/>&amp;m_el_rawcl_calibHitsShowerDepth);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_tree;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1af98ee8ac03030c68a0174a4007304bfc" kindref="member">egammaMVACalib::InitTree</ref>(TTree*<sp/>tree,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doNotify)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;InitTree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_tree)<sp/>m_tree<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1ae71070fc34f5306398c47c7a8d4c74e8" kindref="member">createInternalTree</ref>(m_egammaType,<sp/>tree);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_input_tree<sp/>==<sp/>tree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>m_input_tree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tree-&gt;AddFriend(m_input_tree);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tree<sp/>changed<sp/>(eg<sp/>new<sp/>file<sp/>or<sp/>first<sp/>time<sp/>InitTree<sp/>is<sp/>called)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;tree<sp/>changed<sp/>/<sp/>new<sp/>tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>formula<sp/>map<sp/>and<sp/>instantiate<sp/>the<sp/>formulae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Instantiating<sp/>formulae&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>formulaIt;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formulaIt<sp/>=<sp/>m_formulae.begin();<sp/>formulaIt<sp/>!=<sp/>m_formulae.end();<sp/>++formulaIt)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>varName(formulaIt-&gt;first);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/da8/structegammaMVACalib_1_1VarFormula" kindref="compound">egammaMVACalib::VarFormula</ref><sp/>*varFormula<sp/>=<sp/>&amp;(formulaIt-&gt;second);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>delete<sp/>old<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>varFormula-&gt;formula<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1aba3a31eea8a61285ef8e5d90bf2f7cf9" kindref="member">defineFormula</ref>(varName,<sp/>varFormula-&gt;expression,<sp/>m_tree);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formulaIt-&gt;second.formula)</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;InitTree<sp/>Could<sp/>not<sp/>define<sp/>formula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>define<sp/>formula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>the<sp/>formulae<sp/>for<sp/>the<sp/>shifts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Instantiating<sp/>formulae<sp/>for<sp/>the<sp/>shifts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>egammaMVACalib::ReaderID,<sp/>egammaMVACalib::AdditionalInfoMap&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>m_additional_infos.begin();<sp/>it<sp/>!=<sp/>m_additional_infos.end();<sp/>++it)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a770b872241cbe15e8bb259c3c40746ce" kindref="member">defineShiftFormula</ref>(it-&gt;first);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instantiate<sp/>the<sp/>formula<sp/>for<sp/>cluster<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Instantiating<sp/>formulae<sp/>for<sp/>cluster<sp/>energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a0c1015484c5ec1ef7e66e8706a8372d4" kindref="member">defineClusterEnergyFormula</ref>();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree<sp/>and<sp/>doNotify)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formulaIt<sp/>=<sp/>m_formulae.begin();<sp/>formulaIt<sp/>!=<sp/>m_formulae.end();<sp/>++formulaIt)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_notify_dispatcher.add_object(formulaIt-&gt;second.formula);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_clusterFormula)<sp/>{<sp/>m_notify_dispatcher.add_object(m_clusterFormula);<sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>m_input_tree-&gt;SetNotify(&amp;m_notify_dispatcher);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Init<sp/>tree<sp/>done&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">TTreeFormula*<sp/><ref refid="d3/d52/classegammaMVACalib_1aba3a31eea8a61285ef8e5d90bf2f7cf9" kindref="member">egammaMVACalib::defineFormula</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>varName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>expression,<sp/>TTree<sp/>*tree)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>and<sp/>check<sp/>the<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>TTreeFormula*<sp/>formula<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TTreeFormula(varName.Data(),<sp/>expression.Data(),<sp/>tree);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formula-&gt;GetNdim())</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;defineFormula<sp/>Invalid<sp/>formula:<sp/>(probably<sp/>branch<sp/>not<sp/>present)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>varName.Data()<sp/>&lt;&lt;<sp/>expression.Data());</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>formula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Formula:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>formula-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>formula-&gt;GetTitle());</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formula;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1aa6f09c469ad0884aeed1590a6436af7a" kindref="member">egammaMVACalib::LoadVariables</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;LoadVariables(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>formulaIt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formulaIt<sp/>=<sp/>m_formulae.begin();<sp/>formulaIt<sp/>!=<sp/>m_formulae.end();<sp/>++formulaIt)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/da8/structegammaMVACalib_1_1VarFormula" kindref="compound">egammaMVACalib::VarFormula</ref><sp/>*varFormula<sp/>=<sp/>&amp;(formulaIt-&gt;second);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(varFormula);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!varFormula-&gt;external)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(varFormula-&gt;formula);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varFormula-&gt;formula-&gt;GetNdata();<sp/></highlight><highlight class="comment">//<sp/>Avoids<sp/>getting<sp/>wrong<sp/>values...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;evaluating<sp/>formula<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>varFormula-&gt;expression</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>TTreeFormula::Title=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>varFormula-&gt;formula-&gt;GetTitle()</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varFormula-&gt;variable<sp/>=<sp/>varFormula-&gt;formula-&gt;EvalInstance(index);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Value<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>formulaIt-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>varFormula-&gt;variable);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="d3/d52/classegammaMVACalib_1a16e9b3e7f5db08305410caf429c27620" kindref="member">egammaMVACalib::getAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>input_name)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.find(input_name);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>formulae_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it2<sp/>=<sp/>m_formulae.begin();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it2<sp/>!=<sp/>m_formulae.end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formulae_string<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>it2-&gt;first<sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;getAddress<sp/>,<sp/>formula<sp/>not<sp/>found.<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>input_name.Data()<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Should<sp/>be<sp/>one<sp/>of<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>formulae_string.c_str());</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;formula<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(it-&gt;second.variable);</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a4f1d71d4da116948de656e211932eba7" kindref="member">egammaMVACalib::setExternal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>input_name)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.find(input_name);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>formulae_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it2<sp/>=<sp/>m_formulae.begin();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it2<sp/>!=<sp/>m_formulae.end();<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formulae_string<sp/>+=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>it2-&gt;first<sp/>+<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;setExternal<sp/>,<sp/>formula<sp/>not<sp/>found.<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>input_name.Data()<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>Should<sp/>be<sp/>one<sp/>of<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>formulae_string.c_str());</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;formula<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>it-&gt;second.external<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a0a891d6e41bbe2ce5e141d0bce48929c" kindref="member">egammaMVACalib::printValueInput</ref>()</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>formulaIt;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;printValueInput&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;information<sp/>about<sp/>last<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formulaIt<sp/>=<sp/>m_formulae.begin();<sp/>formulaIt<sp/>!=<sp/>m_formulae.end();<sp/>++formulaIt)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/da8/structegammaMVACalib_1_1VarFormula" kindref="compound">egammaMVACalib::VarFormula</ref><sp/>*varFormula<sp/>=<sp/>&amp;(formulaIt-&gt;second);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(varFormula);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(varFormula-&gt;formula);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO<sp/>(</highlight><highlight class="stringliteral">&quot;printValueInput<sp/>formula:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>formulaIt-&gt;first.Data()</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>expression:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>varFormula-&gt;expression.Data()</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>TTreeFormula::Title=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>varFormula-&gt;formula-&gt;GetTitle()</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>varFormula-&gt;variable);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a89225fcf16a9e0b68b17ec4aef389aee" kindref="member">egammaMVACalib::getNdata</ref>()</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>TTreeFormula<sp/>*testFormula<sp/>=<sp/>m_formulae.begin()-&gt;second.formula;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!testFormula<sp/>||<sp/>testFormula-&gt;GetNdim()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;getNdata<sp/>,<sp/>Could<sp/>not<sp/>get<sp/>TTreeFormula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>TTreeFormula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testFormula-&gt;GetNdata();</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal">TTree*<sp/><ref refid="d3/d52/classegammaMVACalib_1af65d2ff2998b8694776f7d97f9e2c608" kindref="member">egammaMVACalib::getMVAResponseTree</ref>(TTree<sp/>*tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nentries,<sp/>TString<sp/>branchName,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>copyBranches,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_event,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flatten,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>update)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tree)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;getMVAResponseTree<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>to<sp/>tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1af98ee8ac03030c68a0174a4007304bfc" kindref="member">InitTree</ref>(tree);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>a<sp/>TTreeFormula<sp/>to<sp/>define<sp/>the<sp/>number<sp/>of<sp/>instances<sp/>per<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>define<sp/>if<sp/>we<sp/>have<sp/>vectors...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>TTreeFormula<sp/>*testFormula<sp/>=<sp/>m_formulae.begin()-&gt;second.formula;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!testFormula<sp/>||<sp/>testFormula-&gt;GetNdim()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;getMVAResponseTree<sp/>Could<sp/>not<sp/>get<sp/>TTreeFormula<sp/>for<sp/>testing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>TTreeFormula<sp/>for<sp/>testing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>TTree<sp/>*mvaTree<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a300e3d314aea56f2c47daf0901304a35" kindref="member">getOutputTree</ref>(copyBranches,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a487df03e9c0b2f9a767709717be0744f" kindref="member">activateBranches</ref>();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>output<sp/>branch<sp/>and<sp/>the<sp/>variables<sp/>to<sp/>fill<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(branchName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>branchName<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useVector(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mvaOutput;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>mvaVector;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>vector<sp/>(the<sp/>dimension<sp/>of<sp/>the<sp/>formula<sp/>should<sp/>tell)<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flatten<sp/>&amp;&amp;<sp/>testFormula-&gt;GetMultiplicity()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>useVector<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>mvaTree-&gt;Branch(branchName.Data(),<sp/>&amp;mvaVector);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>mvaTree-&gt;Branch(branchName.Data(),<sp/>&amp;mvaOutput,<sp/>Form(</highlight><highlight class="stringliteral">&quot;%s/F&quot;</highlight><highlight class="normal">,<sp/><ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>.Data()));</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>entries<sp/>of<sp/>the<sp/>input<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Nentries<sp/>==<sp/>-1)<sp/>Nentries<sp/>=<sp/>tree-&gt;GetEntries()<sp/>-<sp/>first_event;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Entries<sp/>to<sp/>process:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nentries);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ientry=first_event;<sp/>ientry<sp/>&lt;<sp/>Nentries<sp/>+<sp/>first_event;<sp/>++ientry)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Processing<sp/>entry<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ientry);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ientry%update<sp/>==<sp/>0)<sp/>ATH_MSG_INFO<sp/>(</highlight><highlight class="stringliteral">&quot;Processing<sp/>entry<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ientry);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useVector)<sp/>mvaVector.clear();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tree-&gt;GetEntry(ientry)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mvaTree;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>indices<sp/>inside<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>tree<sp/>(or<sp/>the<sp/>vector)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>testFormula-&gt;GetNdata();<sp/>++index)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mvaOutput<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a41ded7860232f0202c3457c8ec25518d" kindref="member">getMVAEnergy</ref>(index);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!useVector)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mvaTree-&gt;Fill();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mvaVector.push_back(mvaOutput);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useVector)<sp/>mvaTree-&gt;Fill();</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Processing<sp/>done:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Nentries<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>written&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mvaTree;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a05d392363c7b151e60a26e829ba2ed01" kindref="member">egammaMVACalib::getMVAOutput</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1aa6f09c469ad0884aeed1590a6436af7a" kindref="member">LoadVariables</ref>(index);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1abac4e310a75fc0bfafb1476d56a597e1" kindref="member" tooltip="electron or photon">m_useNewBDTs</ref>)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref><sp/>*bdt<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a1cc6ff394f92c71ec2632df132fa7829" kindref="member">getBDT</ref>(<ref refid="d3/d52/classegammaMVACalib_1acc9f51e4ce816b57845b343f77ef9f91" kindref="member">getReaderID</ref>());</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bdt)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bdt-&gt;<ref refid="d2/daa/classMVAUtils_1_1BDT_1ac02455a0b31f3d971c75a727127d3511" kindref="member">GetResponse</ref>();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>corresponding<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>TMVA::Reader<sp/>*reader<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a158858ab4848f3e783c5cc0be80011e1" kindref="member">getReader</ref>(<ref refid="d3/d52/classegammaMVACalib_1acc9f51e4ce816b57845b343f77ef9f91" kindref="member">getReaderID</ref>());</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d1/d97/classasg_1_1AsgMessaging_1af52f582970fc09501ead498c285ebb32" kindref="member">msgLvl</ref>(MSG::DEBUG))</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>particle<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">getParticleType</ref>();</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_eta)<sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>eta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*m_eta;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_energy)<sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>energy<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*m_energy;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;--<sp/>No<sp/>reader<sp/>found,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ss.str());</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;--<sp/>Found<sp/>reader,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ss.str());</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader-&gt;EvaluateRegression(<ref refid="d3/d52/classegammaMVACalib_1a97a239110e724756a834c9fc91e1796c" kindref="member" tooltip="use egamma::BDT or TMVA::Reader">fMethodName</ref>.Data())[0];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>egammaMVACalib::getMVAEnergyPhoton(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_rawcl_Es0,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_rawcl_Es1,</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_rawcl_Es2,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_rawcl_Es3,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_cl_eta,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_cl_E,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_cl_etaCalo,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_cl_phiCalo,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_ptconv,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_pt1conv,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_pt2conv,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ph_convtrk1nPixHits,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ph_convtrk1nSCTHits,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ph_convtrk2nPixHits,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ph_convtrk2nSCTHits,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ph_Rconv)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>m_ph_rawcl_Es0<sp/>=<sp/>ph_rawcl_Es0;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>m_ph_rawcl_Es1<sp/>=<sp/>ph_rawcl_Es1;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>m_ph_rawcl_Es2<sp/>=<sp/>ph_rawcl_Es2;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>m_ph_rawcl_Es3<sp/>=<sp/>ph_rawcl_Es3;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>m_ph_cl_etaCalo<sp/>=<sp/>ph_cl_etaCalo;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>m_ph_cl_phiCalo<sp/>=<sp/>ph_cl_phiCalo;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>m_ph_cl_eta<sp/>=<sp/>ph_cl_eta;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>m_ph_cl_E<sp/>=<sp/>ph_cl_E;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>m_ph_ptconv<sp/>=<sp/>ph_ptconv;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>m_ph_pt1conv<sp/>=<sp/>ph_pt1conv;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>m_ph_pt2conv<sp/>=<sp/>ph_pt2conv;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>m_ph_convtrk1nPixHits<sp/>=<sp/>ph_convtrk1nPixHits;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>m_ph_convtrk1nSCTHits<sp/>=<sp/>ph_convtrk1nSCTHits;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>m_ph_convtrk2nPixHits<sp/>=<sp/>ph_convtrk2nPixHits;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>m_ph_convtrk2nSCTHits<sp/>=<sp/>ph_convtrk2nSCTHits;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>m_ph_rawcl_calibHitsShowerDepth<sp/>=<sp/>get_shower_depth(</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>ph_cl_eta,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>ph_rawcl_Es0,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>ph_rawcl_Es1,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>ph_rawcl_Es2,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>ph_rawcl_Es3);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>m_ph_Rconv<sp/>=<sp/>ph_Rconv;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a41ded7860232f0202c3457c8ec25518d" kindref="member">getMVAEnergy</ref>();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>egammaMVACalib::getMVAEnergyElectron(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_rawcl_Es0,</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_rawcl_Es1,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_rawcl_Es2,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_rawcl_Es3,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_cl_eta,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_cl_E,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_cl_etaCalo,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_cl_phiCalo)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>m_el_rawcl_Es0<sp/>=<sp/>el_rawcl_Es0;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>m_el_rawcl_Es1<sp/>=<sp/>el_rawcl_Es1;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>m_el_rawcl_Es2<sp/>=<sp/>el_rawcl_Es2;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>m_el_rawcl_Es3<sp/>=<sp/>el_rawcl_Es3;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>m_el_cl_eta<sp/>=<sp/>el_cl_eta;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>m_el_cl_E<sp/>=<sp/>el_cl_E;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>m_el_cl_etaCalo<sp/>=<sp/>el_cl_etaCalo;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>m_el_cl_phiCalo<sp/>=<sp/>el_cl_phiCalo;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>m_el_rawcl_calibHitsShowerDepth<sp/>=<sp/>get_shower_depth(</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>el_cl_eta,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>el_rawcl_Es0,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>el_rawcl_Es1,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>el_rawcl_Es2,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>el_rawcl_Es3);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;computing<sp/>getMVAEnergy<sp/>electron<sp/>with<sp/>Es0|Es1|Es2|Es2|cl_eta|cl_E|cl_etaCalo|cl_phiCalo|showerdepth<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_el_rawcl_Es0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_rawcl_Es1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_rawcl_Es2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_rawcl_Es3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_el_cl_eta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_cl_E<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_cl_etaCalo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_el_cl_phiCalo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_el_rawcl_calibHitsShowerDepth);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a41ded7860232f0202c3457c8ec25518d" kindref="member">getMVAEnergy</ref>();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a41ded7860232f0202c3457c8ec25518d" kindref="member">egammaMVACalib::getMVAEnergy</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShiftType<sp/>shift_type<sp/></highlight><highlight class="comment">/*<sp/>=NSHIFTCORRECTIONS<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>m_mvaOutput<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a05d392363c7b151e60a26e829ba2ed01" kindref="member">getMVAOutput</ref>(index);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;MVA<sp/>output<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_mvaOutput);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_mvaOutput<sp/>==<sp/>0.)</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_clusterEif0<sp/>&amp;&amp;<sp/>m_clusterFormula)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_clusterFormula-&gt;GetNdata();<sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>seems<sp/>this<sp/>is<sp/>needed<sp/>to<sp/>prevent<sp/>0s...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clusterE<sp/>=<sp/>m_clusterFormula-&gt;EvalInstance(index);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Returning<sp/>cluster<sp/>E:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>clusterE);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clusterE;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>fullCalibration)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>energy<sp/>=<sp/>m_mvaOutput;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_initialEnergy)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>energy<sp/>=<sp/>(*m_initialEnergy)<sp/>*<sp/>m_mvaOutput;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;energy<sp/>after<sp/>MVA<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energy);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>ShiftType<sp/>shift_to_use<sp/>=<sp/>m_shiftType;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>!=<sp/>NSHIFTCORRECTIONS)<sp/>shift_to_use<sp/>=<sp/>shift_type;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><ref refid="dc/d12/structegammaMVACalib_1_1ReaderID" kindref="compound">egammaMVACalib::ReaderID</ref><sp/>key<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1acc9f51e4ce816b57845b343f77ef9f91" kindref="member">getReaderID</ref>();</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a212c103d105f1056786f67b6b06663fa" kindref="member">getShift</ref>(energy<sp/>/<sp/>cosh(*m_eta),<sp/>key,<sp/>shift_to_use);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;shift<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy<sp/>/<sp/>shift;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;getMVAEnergy<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shift<sp/>not<sp/>applied<sp/>(too<sp/>small<sp/>or<sp/>negative<sp/>value?)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ae2a9c75c0fcfc9a41330a5e5bd1b0c69" kindref="member">egammaMVACalib::defineInitialEnergyFormula</ref>()</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>fullCalibration)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_formulae.end();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>correctEcluster)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>==<sp/>egPHOTON)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(</highlight><highlight class="stringliteral">&quot;ph_cl_E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(</highlight><highlight class="stringliteral">&quot;el_cl_E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>correctEaccordion)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>==<sp/>egPHOTON)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(</highlight><highlight class="stringliteral">&quot;ph_rawcl_Eacc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(</highlight><highlight class="stringliteral">&quot;el_rawcl_Eacc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_formulae.end())</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;defineInitialEnergyFormula&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>define<sp/>formula<sp/>for<sp/>initial<sp/>energy...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>expr<sp/>=<sp/>(m_egammaType<sp/>==<sp/>egPHOTON)<sp/>?</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ph_rawcl_Es1<sp/>+<sp/>ph_rawcl_Es2<sp/>+<sp/>ph_rawcl_Es3&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;el_rawcl_Es1<sp/>+<sp/>el_rawcl_Es2<sp/>+<sp/>el_rawcl_Es3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a359968814e2818e40a5f8b0a32e0fbf2" kindref="member">predefineFormula</ref>(</highlight><highlight class="stringliteral">&quot;initEnergy&quot;</highlight><highlight class="normal">,<sp/>expr,<sp/></highlight><highlight class="stringliteral">&quot;other&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_formulae.find(</highlight><highlight class="stringliteral">&quot;initEnergy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_formulae.end())</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>m_initialEnergy<sp/>=<sp/>&amp;(it-&gt;second.variable);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;defineInitialEnergyFormula<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>define<sp/>formula<sp/>for<sp/>initial<sp/>energy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>define<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><ref refid="d3/d52/classegammaMVACalib_1a58ce592ef52fb0ef266ecae983908a71" kindref="member">egammaMVACalib::parseXml</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>xml_filename)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>TXMLEngine<sp/>xml;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>XMLDocPointer_t<sp/>xmldoc<sp/>=<sp/>xml.ParseFile(xml_filename);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xmldoc)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>m_msg(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::parseXml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msg.msg(MSG::FATAL)&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>file<sp/>not<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;xml_filename.Data()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>current<sp/>directory<sp/>is:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>gSystem-&gt;WorkingDirectory()&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;file<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>XMLNodePointer_t<sp/>mainnode<sp/>=<sp/>xml.DocGetRootElement(xmldoc);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>to<sp/>find<sp/>&lt;Variables&gt;<sp/>and<sp/>&lt;Spectators&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>XMLNodePointer_t<sp/>node<sp/>=<sp/>xml.GetChild(mainnode);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>xml.GetNext(node);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>nodeName<sp/>=<sp/>xml.GetNodeName(node);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nodeName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Variables&quot;</highlight><highlight class="normal"><sp/>||<sp/>nodeName<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Spectators&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;<sp/>r<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1af3fd5d1dd801d18897e3ef0557edf76d" kindref="member">parseVariables</ref>(&amp;xml,<sp/>node,<sp/>nodeName);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(result.end(),<sp/>r.begin(),<sp/>r.end());</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>xml.FreeDoc(xmldoc);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><ref refid="d3/d52/classegammaMVACalib_1af3fd5d1dd801d18897e3ef0557edf76d" kindref="member">egammaMVACalib::parseVariables</ref>(TXMLEngine<sp/>*xml,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>nodeName)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;<sp/>result;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xml<sp/>||<sp/>!node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>all<sp/>children<sp/>inside<sp/>&lt;Variables&gt;<sp/>or<sp/>&lt;Spectators&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(XMLNodePointer_t<sp/>info_node<sp/>=<sp/>xml-&gt;GetChild(node);<sp/>info_node<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_node<sp/>=<sp/>xml-&gt;GetNext(info_node))</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>XMLAttrPointer_t<sp/>attr<sp/>=<sp/>xml-&gt;GetFirstAttr(info_node);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlVariableInfo<sp/>o;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>the<sp/>attributes<sp/>of<sp/>each<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(attr<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>name<sp/>=<sp/>xml-&gt;GetAttrName(attr);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Expression&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.expression<sp/>=<sp/>xml-&gt;GetAttrValue(attr);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Label&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.label<sp/>=<sp/>xml-&gt;GetAttrValue(attr);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.varType<sp/>=<sp/>xml-&gt;GetAttrValue(attr);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>attr<sp/>=<sp/>xml-&gt;GetNextAttr(attr);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(&quot;Expression:<sp/>&quot;<sp/>&lt;&lt;<sp/>expression<sp/>&lt;&lt;<sp/>&quot;<sp/>Label:<sp/>&quot;<sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/>&quot;<sp/>varType:<sp/>&quot;<sp/>&lt;&lt;<sp/>varType);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>o.nodeName<sp/>=<sp/>nodeName;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>result.push_back(o);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal">TString<sp/><ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">egammaMVACalib::getString</ref>(TObject*<sp/>obj)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>TObjString<sp/>*objS<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!objS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TString();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>objS-&gt;GetString();</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal">TObjArray*<sp/><ref refid="d3/d52/classegammaMVACalib_1a3551a3e79bc6c0671f1392ffc31fe0dc" kindref="member">egammaMVACalib::getVariables</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;xmlFileName)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>std::vector&lt;XmlVariableInfo&gt;<sp/>varInfo<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a58ce592ef52fb0ef266ecae983908a71" kindref="member">parseXml</ref>(xmlFileName);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>TObjArray<sp/>*o<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjArray();</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>varInfo.size();<sp/>++i)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>o-&gt;Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(varInfo[i].label));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal">TString*<sp/><ref refid="d3/d52/classegammaMVACalib_1a3551a3e79bc6c0671f1392ffc31fe0dc" kindref="member">egammaMVACalib::getVariables</ref>(TMVA::Reader<sp/>*reader)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>TString<sp/>*str<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TString();</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>std::vector&lt;TMVA::VariableInfo&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>reader-&gt;DataInfo().GetVariableInfos().begin();<sp/>it<sp/>!=<sp/>reader-&gt;DataInfo().GetVariableInfos().end();<sp/>++it)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;Append(TString(str-&gt;Length()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>it-&gt;GetLabel());</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">egammaMVACalib::ParticleType<sp/><ref refid="d3/d52/classegammaMVACalib_1ac938a554d8958549f5b2988e4472dac7" kindref="member">egammaMVACalib::getParticleType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;unconvertedPhoton&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNCONVERTED;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;convertedPhoton&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CONVERTED;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;convertedSiSiPhoton&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SiSi;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;electron&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ELECTRON;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INVALIDPARTICLE;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a828cc62d016bcb5bbd9815812f754d38" kindref="member">egammaMVACalib::printReadersInfo</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1317"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(getNreaders()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>readers<sp/>created&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>TAxis*<sp/>fAxisEta<sp/>=<sp/>m_hPoly-&gt;GetXaxis();<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>???</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>TAxis*<sp/>fAxisEnergy<sp/>=<sp/>(m_binMultiplicity<sp/>&gt;<sp/>1<sp/>?<sp/>m_hPoly-&gt;GetYaxis()<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fAxisEta){</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::printReadersInfo<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fAxisEta-&gt;GetNbins()</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>eta<sp/>bin(s)<sp/>--<sp/>(<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;fAxisEta-&gt;GetXmin()<sp/>+<sp/>1e-10</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>abs(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a48e7bbe65ba8693c7ecf2dd1adde7e56" kindref="member" tooltip="correct Eaccordion, Ecluster...">m_etaVar</ref>.Data()</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fAxisEta-&gt;GetXmax());</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fAxisEnergy){</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::printReadersInfo<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fAxisEnergy-&gt;GetNbins()</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>energy<sp/>bin(s)<sp/>--<sp/>(<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fAxisEnergy-&gt;GetXmin()<sp/>+<sp/>1e-10</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/>m_energyVar.Data()</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fAxisEnergy-&gt;GetXmax()</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GeV&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ad1564578f021d567e6c17c9c9ea507bc" kindref="member">egammaMVACalib::printFormulae</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1347"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>m_formulae.begin();<sp/>it<sp/>!=<sp/><sp/>m_formulae.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>it-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;second.formula)<sp/><sp/>ATH_MSG_DEBUG(<sp/>it-&gt;second.formula-&gt;GetTitle());</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a2ff28a15a9d613bbdf902da326fc1383" kindref="member">egammaMVACalib::checkFormula</ref>(TTreeFormula<sp/>*formula)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>assert(formula);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>formula-&gt;UpdateFormulaLeaves();</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal">TObjArray*<sp/><ref refid="d3/d52/classegammaMVACalib_1ae3ee563b8e3efca058b487e744660689" kindref="member">egammaMVACalib::getListOfBranches</ref>()</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_input_tree)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;getListOfBranches<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>No<sp/>tree<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>TObjArray*<sp/>branches<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjArray();</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>m_formulae.begin();<sp/>it<sp/>!=<sp/><sp/>m_formulae.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a15c173b4a466c34ffb1b9efdfd5070ca" kindref="member">addBranchesFromFormula</ref>(branches,<sp/>it-&gt;second.formula);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_clusterFormula)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a15c173b4a466c34ffb1b9efdfd5070ca" kindref="member">addBranchesFromFormula</ref>(branches,<sp/>m_clusterFormula);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>branches;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a15c173b4a466c34ffb1b9efdfd5070ca" kindref="member">egammaMVACalib::addBranchesFromFormula</ref>(TObjArray*<sp/>branches,<sp/>TTreeFormula<sp/>*formula)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!formula<sp/>||<sp/>!branches)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>formula-&gt;GetNcodes();<sp/>++i)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>TBranch<sp/>*br<sp/>=<sp/>formula-&gt;GetLeaf(i)-&gt;GetBranch();</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(br<sp/>&amp;&amp;<sp/>!branches-&gt;FindObject(br))</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>branches-&gt;Add(br);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a487df03e9c0b2f9a767709717be0744f" kindref="member">egammaMVACalib::activateBranches</ref>()</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>TBranch<sp/>*branch;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>TIter<sp/>next(<ref refid="d3/d52/classegammaMVACalib_1ae3ee563b8e3efca058b487e744660689" kindref="member">getListOfBranches</ref>());</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((branch<sp/>=<sp/>(TBranch*)<sp/>next()))<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;activating<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>branch-&gt;GetName());</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>m_input_tree-&gt;SetBranchStatus(branch-&gt;GetName(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal">TString<sp/><ref refid="d3/d52/classegammaMVACalib_1ab58a6ae59993de768b6633b917426464" kindref="member">egammaMVACalib::getCalibTypeString</ref>()</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>correctEcluster)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Ecluster&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>correctEaccordion)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Eaccordion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1ab79b6cd309d817ecf3118043a12b0cea" kindref="member" tooltip="BDTG.">m_calibrationType</ref><sp/>==<sp/>fullCalibration)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Efull&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal">TTree*<sp/><ref refid="d3/d52/classegammaMVACalib_1a300e3d314aea56f2c47daf0901304a35" kindref="member">egammaMVACalib::getOutputTree</ref>(TString<sp/>copyBranches,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>deactivateFirst)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Deactivate<sp/>all<sp/>branches<sp/>before<sp/>cloning<sp/>the<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deactivateFirst)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>m_input_tree-&gt;SetBranchStatus(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Activate<sp/>back<sp/>the<sp/>ones<sp/>defined<sp/>by<sp/>&lt;copyBranches&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>TObjString<sp/>*sObj;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>TIter<sp/>next(copyBranches.Tokenize(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((sObj<sp/>=<sp/>(TObjString*)<sp/>next()))</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(sObj)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>branches<sp/>used<sp/>to<sp/>calculate<sp/>MVA<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a487df03e9c0b2f9a767709717be0744f" kindref="member">activateBranches</ref>();</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_input_tree-&gt;SetBranchStatus(<ref refid="d3/d52/classegammaMVACalib_1adff43fb39714b02fb6157db2744ecd52" kindref="member">getString</ref>(sObj),<sp/>1);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TTree<sp/>*mvaTree<sp/>=<sp/>new<sp/>TTree(fMethodName.Data(),<sp/>Form(&quot;%s<sp/>tree&quot;,<sp/>fMethodName.Data()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>TTree<sp/>*mvaTree<sp/>=<sp/>m_input_tree-&gt;CloneTree(0);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//mvaTree-&gt;AddFriend(m_input_tree);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>mvaTree-&gt;SetName(</highlight><highlight class="stringliteral">&quot;MVA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mvaTree;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1aa8b0087da1942b29aa9302e24aba232e" kindref="member">egammaMVACalib::checkBin</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMax,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energyMin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energyMax)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TH2Poly<sp/>stores<sp/>the<sp/>bins<sp/>in<sp/>the<sp/>sequence<sp/>they<sp/>appear,<sp/>so<sp/>bin<sp/>1<sp/>is<sp/>stored<sp/>at<sp/>bins[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>TH2PolyBin<sp/>*polyBin<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH2PolyBin*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_hPoly-&gt;GetBins()-&gt;At(bin<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!polyBin)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;checkBin<sp/>Could<sp/>not<sp/>get<sp/>bin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hPoly-&gt;GetBins()-&gt;GetEntries());</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>bin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TMath::AreEqualAbs(polyBin-&gt;GetXMin(),<sp/>etaMin,<sp/>1e-9)<sp/>||</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!TMath::AreEqualAbs(polyBin-&gt;GetXMax(),<sp/>etaMax,<sp/>1e-9)<sp/>||</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!TMath::AreEqualAbs(polyBin-&gt;GetYMin(),<sp/>energyMin,<sp/>1e-9)<sp/>||</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!TMath::AreEqualAbs(polyBin-&gt;GetYMax(),<sp/>energyMax,<sp/>1e-9))</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;checkBin<sp/>Bins<sp/>do<sp/>not<sp/>coincide&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Previous<sp/>bin<sp/>xmin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>polyBin-&gt;GetXMin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>new:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etaMin);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Previous<sp/>bin<sp/>xmax:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>polyBin-&gt;GetXMax()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>new:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etaMax);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Previous<sp/>bin<sp/>ymin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>polyBin-&gt;GetYMin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>new:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energyMin);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Previous<sp/>bin<sp/>ymax:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>polyBin-&gt;GetYMax()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>new:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>energyMax);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Bins<sp/>do<sp/>not<sp/>coincide&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a212c103d105f1056786f67b6b06663fa" kindref="member">egammaMVACalib::getShift</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Et,<sp/>ReaderID<sp/>key,<sp/>ShiftType<sp/>shift_type)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1466"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>ShiftType<sp/>shift_to_use<sp/>=<sp/>m_shiftType;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shift_type<sp/>!=<sp/>NSHIFTCORRECTIONS)<sp/>shift_to_use<sp/>=<sp/>shift_type;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>egammaMVACalib::ShiftMap::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>it<sp/>=<sp/>m_shiftMap.find(std::make_pair(key,<sp/>shift_to_use));</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>m_shiftMap.end()<sp/>||<sp/>!it-&gt;second)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>it-&gt;second-&gt;Eval(Et<sp/>/<sp/>1e3);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Shift<sp/>(Et<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Et/1e3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/><ref refid="d3/d52/classegammaMVACalib_1aeb312ff147ede8fc28ece4d0acc8e48a" kindref="member">egammaMVACalib::getShiftName</ref>(ShiftType<sp/>shift)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1479"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TString<sp/>result;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(shift)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NOSHIFT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PEAKTOTRUE:<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Peak&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEANTOTRUE:<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Mean&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEDIANTOTRUE:<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Median&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEAN10TOTRUE:<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Mean10&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEAN20TOTRUE:<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Mean20&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEDIAN10TOTRUE:<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Median10&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MEDIAN20TOTRUE:<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Median20&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a770b872241cbe15e8bb259c3c40746ce" kindref="member">egammaMVACalib::defineShiftFormula</ref>(ReaderID<sp/>key)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>possible<sp/>shifts<sp/>and<sp/>define<sp/>a<sp/>formula<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(NSHIFTCORRECTIONS);<sp/>++i)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>ShiftType<sp/>shift<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ShiftType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>shift_name<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1aeb312ff147ede8fc28ece4d0acc8e48a" kindref="member">getShiftName</ref>(shift);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_additional_infos[key].count(shift_name))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>expr<sp/>=<sp/>m_additional_infos[key][shift_name];</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>expr.ReplaceAll(</highlight><highlight class="stringliteral">&quot;BDTG*(ph_rawcl_Es1<sp/>+<sp/>ph_rawcl_Es2<sp/>+<sp/>ph_rawcl_Es3)/cosh(ph_cl_eta)/1e3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>expr.ReplaceAll(</highlight><highlight class="stringliteral">&quot;BDTG*(el_rawcl_Es1<sp/>+<sp/>el_rawcl_Es2<sp/>+<sp/>el_rawcl_Es3)/cosh(el_cl_eta)/1e3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_DEBUG(&quot;Defining<sp/>shift<sp/>for<sp/>bin<sp/>&quot;<sp/>&lt;&lt;<sp/>key.bin<sp/>&lt;&lt;<sp/>&quot;:<sp/>&quot;<sp/>&lt;&lt;<sp/>expr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>name<sp/>=<sp/>Form(</highlight><highlight class="stringliteral">&quot;shift_%d_%d_%s&quot;</highlight><highlight class="normal">,<sp/>key.particleType,<sp/>key.bin,<sp/>shift_name.Data());</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>TTreeFormula*<sp/>formula<sp/>=<sp/>defineFormula(name,<sp/>expr,<sp/>m_tree);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>m_shiftMap[std::make_pair(key,<sp/>shift)]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TF1(name,<sp/>expr);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a0c1015484c5ec1ef7e66e8706a8372d4" kindref="member">egammaMVACalib::defineClusterEnergyFormula</ref>()</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>cluster<sp/>energy<sp/>formula&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>TString<sp/>expr<sp/>=<sp/>(m_egammaType<sp/>==<sp/>egPHOTON)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ph_cl_E&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;el_cl_E&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/>m_clusterFormula<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1aba3a31eea8a61285ef8e5d90bf2f7cf9" kindref="member">defineFormula</ref>(</highlight><highlight class="stringliteral">&quot;clusterE&quot;</highlight><highlight class="normal">,<sp/>expr,<sp/>m_tree);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ac632fac006ff5b1068bae45238f3d5f2" kindref="member">egammaMVACalib::setDefinition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>variable,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>formula<sp/>map<sp/>and<sp/>replace<sp/>variable<sp/>by<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>TString,<sp/>egammaMVACalib::VarFormula<sp/>&gt;::iterator<sp/>formulaIt;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(formulaIt<sp/>=<sp/>m_formulae.begin();<sp/>formulaIt<sp/>!=<sp/>m_formulae.end();<sp/>++formulaIt)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/da8/structegammaMVACalib_1_1VarFormula" kindref="compound">egammaMVACalib::VarFormula</ref><sp/>*varFormula<sp/>=<sp/>&amp;(formulaIt-&gt;second);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varFormula-&gt;expression.Contains(variable))</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varFormula-&gt;expression<sp/>=<sp/>varFormula-&gt;expression.ReplaceAll(variable,<sp/>expression);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;setDefinition<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Replacements<sp/>made:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1ae6016f0d7d2e1e26bc82761efe396c33" kindref="member">egammaMVACalib::checkShowerDepth</ref>(TTree<sp/>*tree)</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>TString<sp/>prefix<sp/>=<sp/>(m_egammaType<sp/>==<sp/>egPHOTON)<sp/>?<sp/><sp/></highlight><highlight class="stringliteral">&quot;ph_&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;el_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>TString<sp/>showerDepth(prefix);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>showerDepth.Append(</highlight><highlight class="stringliteral">&quot;rawcl_calibHitsShowerDepth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_formulae.count(showerDepth)<sp/>&amp;&amp;<sp/>!tree-&gt;GetBranch(showerDepth.Data()))</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;checkShowerDepth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>CalibrationHitOffline<sp/>to<sp/>calculate<sp/>shower<sp/>depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>newShowerDepth<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;egammaMVACalib::get_shower_depth(ph_cl_eta,<sp/>ph_rawcl_Es0,<sp/>ph_rawcl_Es1,<sp/>ph_rawcl_Es2,<sp/>ph_rawcl_Es3)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>newShowerDepth.ReplaceAll(</highlight><highlight class="stringliteral">&quot;ph_&quot;</highlight><highlight class="normal">,<sp/>prefix);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>m_formulae[showerDepth].expression<sp/>=<sp/>newShowerDepth;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a51a923426a09aede1618094aeb967f03" kindref="member">egammaMVACalib::writeROOTfile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>directory,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>particle)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1abac4e310a75fc0bfafb1476d56a597e1" kindref="member" tooltip="electron or photon">m_useNewBDTs</ref><sp/>?<sp/>!m_BDTs.size()<sp/>:<sp/>!m_readers.size())</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;writeROOTfile<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>reader<sp/>defined,<sp/>not<sp/>dumping<sp/>ROOT<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/>INVALIDPARTICLE)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_egammaType<sp/>==<sp/>egPHOTON)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a51a923426a09aede1618094aeb967f03" kindref="member">writeROOTfile</ref>(directory,<sp/>UNCONVERTED);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a51a923426a09aede1618094aeb967f03" kindref="member">writeROOTfile</ref>(directory,<sp/>CONVERTED);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a51a923426a09aede1618094aeb967f03" kindref="member">writeROOTfile</ref>(directory,<sp/>ELECTRON);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d3/d52/classegammaMVACalib_1abac4e310a75fc0bfafb1476d56a597e1" kindref="member" tooltip="electron or photon">m_useNewBDTs</ref>)</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;writeROOTfile<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>implemented<sp/>when<sp/>reading<sp/>ROOT<sp/>files&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>TString<sp/>particleName(</highlight><highlight class="stringliteral">&quot;electron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/>UNCONVERTED)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>particleName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;unconvertedPhoton&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particle<sp/>==<sp/>CONVERTED)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>particleName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;convertedPhoton&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/>TString<sp/>fileName<sp/>=<sp/>directory<sp/>+<sp/>TString(</highlight><highlight class="stringliteral">&quot;/MVACalib_&quot;</highlight><highlight class="normal">)<sp/>+<sp/>particleName<sp/>+<sp/>TString(</highlight><highlight class="stringliteral">&quot;.weights.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>TFile<sp/>*f<sp/>=<sp/>TFile::Open(fileName,<sp/></highlight><highlight class="stringliteral">&quot;UPDATE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>TObjArray<sp/>trees,<sp/>variables,<sp/>formulae,<sp/>shifts;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>readers<sp/>to<sp/>TTrees<sp/>and<sp/>fill<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>index<sp/>of<sp/>each<sp/>object<sp/>in<sp/>the<sp/>array<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>egammaMVACalib::ReaderID,<sp/>TMVA::Reader*<sp/>&gt;::const_iterator<sp/>itReader;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itReader<sp/>=<sp/>m_readers.begin();<sp/>itReader<sp/>!=<sp/>m_readers.end();<sp/>++itReader)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itReader-&gt;first.particleType<sp/>!=<sp/>particle)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bin<sp/>has<sp/>an<sp/>offset<sp/>so<sp/>index<sp/>=<sp/>bin<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1a87dc9be3a2bfb0652c1419a0a28b7dc5" kindref="member">addReaderInfoToArrays</ref>(itReader-&gt;second,<sp/>&amp;trees,<sp/>&amp;variables,<sp/>itReader-&gt;first.bin<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expressions<sp/>(formulae)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>std::map&lt;TString,<sp/>egammaMVACalib::VarFormula&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>m_formulae.begin();<sp/>it<sp/>!=<sp/>m_formulae.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>formulae.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TNamed(it-&gt;first,<sp/>it-&gt;second.expression));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shifts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ShiftMap::iterator<sp/>itS<sp/>=<sp/>m_shiftMap.begin();<sp/>itS<sp/>!=<sp/>m_shiftMap.end();<sp/>++itS)</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itS-&gt;first.first.particleType<sp/>!=<sp/>particle<sp/>||<sp/>itS-&gt;first.second<sp/>!=<sp/>MEAN10TOTRUE)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>shifts.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(itS-&gt;second-&gt;GetTitle()));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>and<sp/>close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>option<sp/>=<sp/>(TObject::kSingleKey<sp/>|<sp/>TObject::kOverwrite);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>trees.Write(&quot;trees&quot;,<sp/>option);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;writeROOTfile<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Ntrees:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>trees.GetEntries());</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>trees.Print();</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>trees.Write();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>variables.Write(</highlight><highlight class="stringliteral">&quot;variables&quot;</highlight><highlight class="normal">,<sp/>option);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>formulae.Write(</highlight><highlight class="stringliteral">&quot;formulae&quot;</highlight><highlight class="normal">,<sp/>option);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>shifts.Write(</highlight><highlight class="stringliteral">&quot;shifts&quot;</highlight><highlight class="normal">,<sp/>option);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><ref refid="d3/d52/classegammaMVACalib_1ac0889f23e9012af9288143ed7e6bdd93" kindref="member">getTH2Poly</ref>()-&gt;Write(0,<sp/>option);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>f-&gt;Close();</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;writeROOTfile<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Wrote<sp/>ROOT<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;fileName.Data());</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d52/classegammaMVACalib_1a87dc9be3a2bfb0652c1419a0a28b7dc5" kindref="member">egammaMVACalib::addReaderInfoToArrays</ref>(TMVA::Reader<sp/>*reader,</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TObjArray<sp/>*trees,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TObjArray<sp/>*variables,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="1636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)<sp/>index<sp/>=<sp/>variables-&gt;GetSize();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>TString<sp/>*vars<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a3551a3e79bc6c0671f1392ffc31fe0dc" kindref="member">getVariables</ref>(reader);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>assert(vars);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>TMVA::MethodBDT*<sp/>tbdt<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TMVA::MethodBDT*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(reader-&gt;FindMVA(</highlight><highlight class="stringliteral">&quot;BDTG&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>assert(tbdt);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref><sp/>*bdt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref>(tbdt);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>TTree<sp/>*tree<sp/>=<sp/>bdt-&gt;<ref refid="d2/daa/classMVAUtils_1_1BDT_1aa04c98d747591ed821b8a9aff5d33381" kindref="member">WriteTree</ref>(Form(</highlight><highlight class="stringliteral">&quot;BDT%d&quot;</highlight><highlight class="normal">,<sp/>index));</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>variables-&gt;AddAtAndExpand(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(*vars),<sp/>index);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>trees-&gt;AddAtAndExpand(tree,<sp/>index);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bdt;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>egammaMVACalib::get_shower_depth(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_cl_0,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_cl_1,</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_cl_2,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_cl_3)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;float,<sp/>4&gt;<sp/>radius(get_MVAradius(eta));</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denominator<sp/>=<sp/>raw_cl_0<sp/>+<sp/>raw_cl_1<sp/>+<sp/>raw_cl_2<sp/>+<sp/>raw_cl_3;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denominator<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(radius[0]<sp/>*<sp/>raw_cl_0</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radius[1]<sp/>*<sp/>raw_cl_1</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radius[2]<sp/>*<sp/>raw_cl_2</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>radius[3]<sp/>*<sp/>raw_cl_3)<sp/>/<sp/>denominator;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal">TMVA::Reader*<sp/><ref refid="d3/d52/classegammaMVACalib_1aacbdcd0ec5293ef41dad395da0fbeca6" kindref="member">egammaMVACalib::getDummyReader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString<sp/>&amp;xmlFileName)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dummyFloat;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>TMVA::Reader<sp/>*reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TMVA::Reader(</highlight><highlight class="stringliteral">&quot;Silent&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;<sp/>variable_infos<sp/>=<sp/><ref refid="d3/d52/classegammaMVACalib_1a58ce592ef52fb0ef266ecae983908a71" kindref="member">parseXml</ref>(xmlFileName);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;egammaMVACalib::XmlVariableInfo&gt;::const_iterator<sp/>itvar<sp/>=<sp/>variable_infos.begin();</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itvar<sp/>!=<sp/>variable_infos.end();<sp/>++itvar)</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>variable<sp/>/<sp/>spectator<sp/>name<sp/>and<sp/>expression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>infoType<sp/><sp/>=<sp/>(TString(itvar-&gt;nodeName).Contains(</highlight><highlight class="stringliteral">&quot;Variable&quot;</highlight><highlight class="normal">)<sp/>?</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>expression<sp/>=<sp/>itvar-&gt;expression;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>varName<sp/><sp/><sp/><sp/>=<sp/>itvar-&gt;label;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>variable<sp/>/<sp/>spectator<sp/>to<sp/>the<sp/>reader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>expression<sp/>(if<sp/>different<sp/>than<sp/>variable<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>varDefinition(varName);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varName<sp/>!=<sp/>expression)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>varDefinition<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>expression;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;variable&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;AddVariable(varDefinition,<sp/>&amp;dummyFloat);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infoType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;spectator&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;AddSpectator(varDefinition,<sp/>&amp;dummyFloat);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>m_msg(</highlight><highlight class="stringliteral">&quot;egammaMVACalib::getDummyReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msg.msg(MSG::FATAL)&lt;&lt;</highlight><highlight class="stringliteral">&quot;Unknown<sp/>type<sp/>from<sp/>parser<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>infoType.Data()&lt;&lt;endmsg;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>type<sp/>from<sp/>parser&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>reader-&gt;BookMVA(</highlight><highlight class="stringliteral">&quot;BDTG&quot;</highlight><highlight class="normal">,<sp/>xmlFileName);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LocalWords:<sp/><sp/>TObjArray</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaMVACalib/Root/egammaMVACalib.cxx"/>
  </compounddef>
</doxygen>
