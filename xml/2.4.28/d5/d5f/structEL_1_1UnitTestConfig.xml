<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/d5f/structEL_1_1UnitTestConfig" kind="struct" prot="public">
    <compoundname>EL::UnitTestConfig</compoundname>
    <derivedcompoundref refid="d8/dea/structMyUnitTestConfig" prot="public" virt="non-virtual">MyUnitTestConfig</derivedcompoundref>
    <derivedcompoundref refid="d8/dea/structMyUnitTestConfig" prot="public" virt="non-virtual">MyUnitTestConfig</derivedcompoundref>
    <derivedcompoundref refid="d8/dea/structMyUnitTestConfig" prot="public" virt="non-virtual">MyUnitTestConfig</derivedcompoundref>
    <derivedcompoundref refid="d8/dea/structMyUnitTestConfig" prot="public" virt="non-virtual">MyUnitTestConfig</derivedcompoundref>
    <includes refid="d6/dd1/UnitTestConfig_8h" local="no">UnitTestConfig.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d5/d5f/structEL_1_1UnitTestConfig_1a06b1d649ef4dcd4a2fec9c0f0176722f" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="de/d0a/classEL_1_1Driver" kindref="compound">Driver</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Driver&gt; EL::UnitTestConfig::m_driver</definition>
        <argsstring></argsstring>
        <name>m_driver</name>
        <briefdescription>
<para>the driver being tested </para>        </briefdescription>
        <detaileddescription>
<para>This is the only member the derived classes actually have to set. More members will be added over time, but those will meaningful default values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/d5f/structEL_1_1UnitTestConfig_1a0dfe4d170f19cd775f37db8cd78702d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual EL::UnitTestConfig::~UnitTestConfig</definition>
        <argsstring>() noexcept</argsstring>
        <name>~UnitTestConfig</name>
        <briefdescription>
<para>virtual destructor for virtual base class </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" line="44"/>
      </memberdef>
      <memberdef kind="function" id="d5/d5f/structEL_1_1UnitTestConfig_1a8a393999a4f0a44fef8e1e06872b75e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="db/dd1/classSH_1_1DiskWriter" kindref="compound">SH::DiskWriter</ref> &gt;</type>
        <definition>std::unique_ptr&lt; SH::DiskWriter &gt; EL::UnitTestConfig::make_file_writer</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>make_file_writer</name>
        <reimplementedby refid="d8/dea/structMyUnitTestConfig_1aec57a0bb65fb5a979cabab937a04a427">make_file_writer</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>create a file write for the given file </para>        </briefdescription>
        <detaileddescription>
<para>This allows to place the test files into non-standard locations <simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTestConfig.cxx" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="d5/d5f/structEL_1_1UnitTestConfig_1a9177cd06119da83dd7ebf004dbd6e02b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void EL::UnitTestConfig::setupJob</definition>
        <argsstring>(Job &amp;job) const </argsstring>
        <name>setupJob</name>
        <reimplementedby refid="d8/dea/structMyUnitTestConfig_1acc7dc73c3dad322638782b01d2cb0cf1">setupJob</reimplementedby>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
<para>apply extra job configuration parameters </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>config specific </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTestConfig.cxx" bodystart="37" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a class describing how to run the jobs for driver unit tests </para>    </briefdescription>
    <detaileddescription>
<para>This is so that I can write driver unit tests as briefly as possible. The unit tests should derive a class from this class that sets the proper members in the constructor and then pass the object into the parametric unit test. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="22642">
        <label>EL::UnitTestConfig</label>
        <link refid="d5/d5f/structEL_1_1UnitTestConfig"/>
      </node>
      <node id="22643">
        <label>MyUnitTestConfig</label>
        <link refid="d8/dea/structMyUnitTestConfig"/>
        <childnode refid="22642" relation="public-inheritance">
        </childnode>
        <childnode refid="22642" relation="public-inheritance">
        </childnode>
        <childnode refid="22642" relation="public-inheritance">
        </childnode>
        <childnode refid="22642" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/UnitTestConfig.h" bodystart="29" bodyend="66"/>
    <listofallmembers>
      <member refid="d5/d5f/structEL_1_1UnitTestConfig_1a06b1d649ef4dcd4a2fec9c0f0176722f" prot="public" virt="non-virtual"><scope>EL::UnitTestConfig</scope><name>m_driver</name></member>
      <member refid="d5/d5f/structEL_1_1UnitTestConfig_1a8a393999a4f0a44fef8e1e06872b75e2" prot="public" virt="virtual"><scope>EL::UnitTestConfig</scope><name>make_file_writer</name></member>
      <member refid="d5/d5f/structEL_1_1UnitTestConfig_1a9177cd06119da83dd7ebf004dbd6e02b" prot="public" virt="virtual"><scope>EL::UnitTestConfig</scope><name>setupJob</name></member>
      <member refid="d5/d5f/structEL_1_1UnitTestConfig_1a0dfe4d170f19cd775f37db8cd78702d7" prot="public" virt="virtual"><scope>EL::UnitTestConfig</scope><name>~UnitTestConfig</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
