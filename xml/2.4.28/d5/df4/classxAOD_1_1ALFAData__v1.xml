<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d5/df4/classxAOD_1_1ALFAData__v1" kind="class" prot="public">
    <compoundname>xAOD::ALFAData_v1</compoundname>
    <basecompoundref refid="dc/db0/classSG_1_1AuxElement" prot="public" virt="non-virtual">SG::AuxElement</basecompoundref>
    <includes refid="db/d91/ALFAData__v1_8h" local="no">ALFAData_v1.h</includes>
      <sectiondef kind="user-defined">
      <header>Information from LocRecEvCollection and LocRecODEvCollection</header>
      <description><para><anchor id="_1amgrpb2d17038481074ee0d23ef6623ebb3ba"/> </para></description>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ae35a31170c1a04cb48f9c6d5afff36af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::detectorPartID</definition>
        <argsstring>() const </argsstring>
        <name>detectorPartID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detector ID where a track was reconstructed</para><para>0 --- Default value, i.e. no reconstructed track 1 --- Main Detector (<ref refid="d4/dff/namespaceMD" kindref="compound">MD</ref>) 2 --- Overlap Detector (OD) x &gt; 0 3 --- Overlap Detector (OD) x &lt; 0</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="44"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1aae53b7d3a0e8d5774e00a6fbc2f83d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setDetectorPartID</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setDetectorPartID</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the detector ID where a track was reconstructed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="46"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xAOD::ALFAData_v1::maxTrackCnt</definition>
        <argsstring>() const </argsstring>
        <name>maxTrackCnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of reconstructed tracks in a pot</para><para>This value is used to set the size of arrays containing information about tracks.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="56"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ac36e94b72d575bb4ad0b802e9b4f6c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setMaxTrackCnt</definition>
        <argsstring>(int value)</argsstring>
        <name>setMaxTrackCnt</name>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of reconstructed tracks in a pot. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="58"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a833240c1a52bfe5b09d06faa1dc3e7b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::overU</definition>
        <argsstring>() const </argsstring>
        <name>overU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An overlap size for a U projection of the main detector</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a1dd916345ad0b1237753bfa68aa07972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setOverU</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setOverU</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an overlap size for a U projection of the main detector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a741fc901202b87c163b1a6cdcbcd3c1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::overV</definition>
        <argsstring>() const </argsstring>
        <name>overV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An overlap size for a V projection of the main detector</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1aed00d3a794e3ee6eb8b0230b39dcd692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setOverV</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setOverV</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an overlap size for a V projection of the main detector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a2de6818f384b8979a86376fcd0e4b72e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::overY</definition>
        <argsstring>() const </argsstring>
        <name>overY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An overlap size for a <ref refid="de/d29/structY" kindref="compound">Y</ref> projection of the Overlap Detector</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a9a0af28ea8ed379c389747c6c2f125f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setOverY</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setOverY</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an overlap size for a <ref refid="de/d29/structY" kindref="compound">Y</ref> projection of the main detector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="97"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a9cb2f34acf5303a402f563b3d4205351" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::numU</definition>
        <argsstring>() const </argsstring>
        <name>numU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of Main Detector U plates used in a reconstruction</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ae4f105f5b7c9fc7a7ac9e9f806fa33ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setNumU</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setNumU</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of main detector U plates used in a reconstruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="110"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1aea1a7871a9eb4a33f5de26c0b59f3984" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::numV</definition>
        <argsstring>() const </argsstring>
        <name>numV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of Main Detector V plates used in a reconstruction</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1abcb8ef1a19c1484b8bd092ae7523caed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setNumV</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setNumV</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of main detector V plates used in a reconstruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a03deb8ff03309ecd0945bde415361909" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::numY</definition>
        <argsstring>() const </argsstring>
        <name>numY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of Overlap Detector <ref refid="de/d29/structY" kindref="compound">Y</ref> plates used in a reconstruction</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="134"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a32f9bd633436a305e373418ed99ac6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setNumY</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setNumY</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of overlap detector <ref refid="de/d29/structY" kindref="compound">Y</ref> plates used in a reconstruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a74e01f2cf45dd47e1faeda176eeb394e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::mdFibSel</definition>
        <argsstring>() const </argsstring>
        <name>mdFibSel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map of plates used in main detector track reconstruction</para><para>The values can be of elements can be: 0 - when plate was not used in reconstruction 1 - when plate was used in reconstruction</para><para>This is a 3D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> x 20 plates) transformed to a 1D vector. In order to decipher the index see array3Dtracks.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="151"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a35cec13ac83655f72df6cb2576d01c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setMDFibSel</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setMDFibSel</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the map of plates used in the main detector track reco. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a2f07cf643c6e0c14b9a46922a1a40786" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::odFibSel</definition>
        <argsstring>() const </argsstring>
        <name>odFibSel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map of plates used in overlap detector track reconstruction</para><para>The values can be of elements can be: 0 - when plate was not used in reconstruction 1 - when plate was used in reconstruction</para><para>This is a 3D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> x 20 plates) transformed to a 1D vector. In order to decipher the index see array3Dtracks.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="168"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ad00910f6ddef0a267c2740108e1a002b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setODFibSel</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setODFibSel</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the map of plates used in the overlap detector track reco. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab6cfc287b3824213cce4534c304d2a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::xDetCS</definition>
        <argsstring>() const </argsstring>
        <name>xDetCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in ALFA detector coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="181"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a1583377d2a482e95556857352ecae1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setXDetCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setXDetCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the ALFA detector coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="183"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab04c639e48ec313cf8febe9ef110574f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::yDetCS</definition>
        <argsstring>() const </argsstring>
        <name>yDetCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in ALFA detector coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="194"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1afa202d51b6766f6c27c8d10c40cad777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setYDetCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setYDetCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the ALFA detector coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Information from LocRecCorrEvCollection and</header>
      <description><para><anchor id="_1amgrp5bc7fff654d735b8a0788f5c7aae1f34"/> LocRecCorrODEvCollection </para></description>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a2e0dc0501d0041dc5f72f98a71d341b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::xLhcCS</definition>
        <argsstring>() const </argsstring>
        <name>xLhcCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the LHC coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="213"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1aea618a67515e207d3d32606945c647a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setXLhcCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setXLhcCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the LHC coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="215"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a575b8644551de7fb5d03d46a3c9746aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::yLhcCS</definition>
        <argsstring>() const </argsstring>
        <name>yLhcCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in LHC coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="226"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ae6c981d447314839d183e0ce0c907aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setYLhcCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setYLhcCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the LHC coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="228"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a767311240736cba476093ebb59f52b35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::zLhcCS</definition>
        <argsstring>() const </argsstring>
        <name>zLhcCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d0e/structZ" kindref="compound">Z</ref> coordinate in LHC coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="239"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a19ae48be8218383d9310b84fd44a9794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setZLhcCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setZLhcCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d0e/structZ" kindref="compound">Z</ref> coordinate in the LHC coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="241"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a55026ae7e47df4c261a054c38fbc5459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::xRPotCS</definition>
        <argsstring>() const </argsstring>
        <name>xRPotCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the roman pot coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="252"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a36b57c91f110fe4e8e4826d26f0e8703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setXRPotCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setXRPotCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the roman pot coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="254"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab2af32fedfa978aeea140beb1266aa50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::yRPotCS</definition>
        <argsstring>() const </argsstring>
        <name>yRPotCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the roman pot coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="265"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a992a258d576748b296bcf1a9d0c6df9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setYRPotCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setYRPotCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the roman pot coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="267"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1af41e3b0aa5a87164687a80b986a0154d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::xStatCS</definition>
        <argsstring>() const </argsstring>
        <name>xStatCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the station coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="278"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ac5e9c82e7a441d1912823602e563b9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setXStatCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setXStatCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the station coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="280"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a79e08942f266f43f46473624210719cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::yStatCS</definition>
        <argsstring>() const </argsstring>
        <name>yStatCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the station coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="291"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1aa9219587f4beaf2a84749d51275e3e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setYStatCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setYStatCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the station coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="293"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1af6df7a9d736c87c36a6bb7c0a24becf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::xBeamCS</definition>
        <argsstring>() const </argsstring>
        <name>xBeamCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the beam coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="304"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ac47b4a4d88dbecd3c082c118fe19180c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setXBeamCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setXBeamCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate in the beam coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="306"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a7263276b9645dff907fe7a2398d06b07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; float &gt; &amp;</type>
        <definition>const std::vector&lt; float &gt;&amp; xAOD::ALFAData_v1::yBeamCS</definition>
        <argsstring>() const </argsstring>
        <name>yBeamCS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the beam coordinate system</para><para>This is a 2D array (8 stations x <ref refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" kindref="member">maxTrackCnt()</ref> ) transformed to a 1D vector. In order to decipher the index see array2D.</para><para>Variable stored in TrackingData tree i.e. first ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="317"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a61d34b02a21687b78bb7c3759c4d1abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setYBeamCS</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;value)</argsstring>
        <name>setYBeamCS</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the track <ref refid="de/d29/structY" kindref="compound">Y</ref> coordinate in the beam coordinate system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Information from RawDataContainer</header>
      <description><para><anchor id="_1amgrp61b2d8738e94bb9dca5a0edd22327f09"/> </para></description>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab9413372e862be0175785f2299300f98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::scaler</definition>
        <argsstring>() const </argsstring>
        <name>scaler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger rate</para><para>This is 1D array with 8 elements, one per pot.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="333"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a0336c0fa5961098a2cc3dcda7dad3ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setScaler</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setScaler</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the trigger rate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="335"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1af0de35211a86db92a584654b3ea2bf7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::trigPat</definition>
        <argsstring>() const </argsstring>
        <name>trigPat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger pattern</para><para>It is a 2D array (8 stations x 16 bits) The values can be of elements can be: 0 - false 1 - true</para><para><simplesect kind="warning"><para>This variable is most probably not filled. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="347"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a3dcbf65ba73ef90114f7c5e50a187366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setTrigPat</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setTrigPat</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the trigger pattern. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="349"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Information from DigitCollection</header>
      <description><para><anchor id="_1amgrpb7a3ade692c3dbba98ddd15c046873fe"/> </para></description>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a57b47915a10b73637129b9eed73e4a02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::mdFiberHits</definition>
        <argsstring>() const </argsstring>
        <name>mdFiberHits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map of fiber hits in main detectors</para><para>The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 3D array (8 stations x 20 plates x 64 layers) transformed to a 1D vector. In order to decipher the index see array3DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="369"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a7a73eed48e29d6cb3dbfb1a05c04199f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setMDFiberHits</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setMDFiberHits</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the map of fiber hits in the main detectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="371"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ac284c3a37d174f723ca853a4941432ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::mdMultiplicity</definition>
        <argsstring>() const </argsstring>
        <name>mdMultiplicity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of fibers fired in a layer in a main detector The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 2D array (8 stations x 20 plates) transformed to a 1D vector. In order to decipher the index see array2DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="386"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ac3546ba8fbf622d9bf4de46d0288049f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setMDMultiplicity</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setMDMultiplicity</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the total number of fibers fired in a later of a main detector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Information from ODDigitCollection</header>
      <description><para><anchor id="_1amgrpd7921e0d031b5dc148af2c32766a3c0b"/> </para></description>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a401827f1b72e4d6ee0b467130b340ad7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::odFiberHitsPos</definition>
        <argsstring>() const </argsstring>
        <name>odFiberHitsPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map of fiber hits in overlap detectors with the positive <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate</para><para>The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 3D array (8 stations x 20 plates x 64 layers) transformed to a 1D vector. In order to decipher the index see array3DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="408"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a4f929bcae5e5043cfa2e793e44f46db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setODFiberHitsPos</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setODFiberHitsPos</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the map of fiber hits in overlap detectors with positive <ref refid="d3/d24/structX" kindref="compound">X</ref> coord. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="410"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab56def9b4cc02a35553de23a13b5f6d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::odFiberHitsNeg</definition>
        <argsstring>() const </argsstring>
        <name>odFiberHitsNeg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map of fiber hits in overlap detectors with the negative <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate</para><para>The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 3D array (8 stations x 20 plates x 64 layers) transformed to a 1D vector. In order to decipher the index see array3DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="425"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1afef6883ad65bcf6debf9bd46e531dafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setODFiberHitsNeg</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setODFiberHitsNeg</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the map of fiber hits in overlap detectors with negative <ref refid="d3/d24/structX" kindref="compound">X</ref> coord. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="427"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ae15de1add7ed557e43e1e810a261eb5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::odMultiplicityPos</definition>
        <argsstring>() const </argsstring>
        <name>odMultiplicityPos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of fibers fired in a layer in an overlap detector with positive <ref refid="d3/d24/structX" kindref="compound">X</ref> coordiante</para><para>The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 2D array (8 stations x 20 plates) transformed to a 1D vector. In order to decipher the index see array2DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="443"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1a03139f7bb93baf56bd8f9f0d1db293e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setODMultiplicityPos</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setODMultiplicityPos</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the total number of fibers fired in a layer in an overlap detector positive <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="446"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ad24eb8b669ff080667b573ef96c10c4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt; int &gt;&amp; xAOD::ALFAData_v1::odMultiplicityNeg</definition>
        <argsstring>() const </argsstring>
        <name>odMultiplicityNeg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of fibers fired in a layer in an overlap detector with negative <ref refid="d3/d24/structX" kindref="compound">X</ref> coordiante</para><para>The values can be of elements can be: 0 - when fiber was empty 1 - when fiber was hit</para><para>This is a 2D array (8 stations x 20 plates) transformed to a 1D vector. In order to decipher the index see array2DFibers.</para><para>Variable stored in EventHeader tree i.e. second ALFAData object in the ALFADataContainer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="462"/>
      </memberdef>
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ab5b92fc1b46fc9bdf2e4381027fb1708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::ALFAData_v1::setODMultiplicityNeg</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;value)</argsstring>
        <name>setODMultiplicityNeg</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the total number of fibers fired in a layer in an overlap detector negative <ref refid="d3/d24/structX" kindref="compound">X</ref> coordinate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="465"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d5/df4/classxAOD_1_1ALFAData__v1_1ad4f2b8732a72b278bcf70b79e646b209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::ALFAData_v1::ALFAData_v1</definition>
        <argsstring>()</argsstring>
        <name>ALFAData_v1</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="25" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/Root/ALFAData_v1.cxx" bodystart="11" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class containing ALFA information</para><para>For information how to retrive, and to some level use this object, see the detailed package description.</para><para><simplesect kind="author"><para>Libor Nozka &lt;<ulink url="mailto:Libor.Nozka@cern.ch">Libor.Nozka@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>693858 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-09-09 12:30:15 +0200 (Wed, 09 Sep 2015) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="303">
        <label>xAOD::ALFAData_v1</label>
        <link refid="d5/df4/classxAOD_1_1ALFAData__v1"/>
        <childnode refid="304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="305">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="304">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="305" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="319">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="320">
        <label>Internal::hash_code_base&lt;Value , Value , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="315">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="324">
        <label>SG::AuxElementData</label>
        <link refid="dc/dfb/classSG_1_1AuxElementData"/>
        <childnode refid="309" relation="public-inheritance">
        </childnode>
      </node>
      <node id="318">
        <label>SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="319" relation="public-inheritance">
        </childnode>
        <childnode refid="320" relation="public-inheritance">
        </childnode>
        <childnode refid="321" relation="public-inheritance">
        </childnode>
      </node>
      <node id="306">
        <label>xAOD::ALFAData_v1</label>
        <link refid="d5/df4/classxAOD_1_1ALFAData__v1"/>
        <childnode refid="307" relation="public-inheritance">
        </childnode>
      </node>
      <node id="313">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="314">
        <label>DataLinkBase</label>
        <link refid="dd/d9d/classDataLinkBase"/>
      </node>
      <node id="308">
        <label>SG::IAuxElement</label>
        <link refid="df/dca/classSG_1_1IAuxElement"/>
      </node>
      <node id="311">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="312">
        <label>DataLink&lt; SG::IConstAuxStore &gt;</label>
        <link refid="da/da2/classDataLink"/>
        <childnode refid="313" relation="public-inheritance">
        </childnode>
        <childnode refid="314" relation="public-inheritance">
        </childnode>
        <childnode refid="315" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="311" relation="usage">
          <edgelabel>m_object</edgelabel>
        </childnode>
      </node>
      <node id="310">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="311" relation="public-inheritance">
        </childnode>
      </node>
      <node id="317">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="318" relation="public-inheritance">
        </childnode>
      </node>
      <node id="321">
        <label>Internal::map_base&lt;Value , Value , Internal::identity&lt; Value &gt; , unique_keys, hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="322">
        <label>SG::AuxVectorData::Cache</label>
        <childnode refid="323" relation="usage">
          <edgelabel>m_cache</edgelabel>
        </childnode>
      </node>
      <node id="316">
        <label>mutex</label>
      </node>
      <node id="307">
        <label>SG::AuxElement</label>
        <link refid="dc/db0/classSG_1_1AuxElement"/>
        <childnode refid="308" relation="public-inheritance">
        </childnode>
        <childnode refid="309" relation="usage">
          <edgelabel>m_container</edgelabel>
        </childnode>
        <childnode refid="324" relation="usage">
          <edgelabel>m_privateData</edgelabel>
          <edgelabel>s_privatePlaceholder</edgelabel>
        </childnode>
      </node>
      <node id="323">
        <label>void</label>
      </node>
      <node id="309">
        <label>SG::AuxVectorData</label>
        <link refid="db/dd6/classSG_1_1AuxVectorData"/>
        <childnode refid="310" relation="usage">
          <edgelabel>m_store</edgelabel>
        </childnode>
        <childnode refid="312" relation="usage">
          <edgelabel>m_constStoreLink</edgelabel>
        </childnode>
        <childnode refid="311" relation="usage">
          <edgelabel>m_constStore</edgelabel>
        </childnode>
        <childnode refid="316" relation="usage">
          <edgelabel>m_mutex</edgelabel>
        </childnode>
        <childnode refid="317" relation="usage">
          <edgelabel>s_emptySet</edgelabel>
        </childnode>
        <childnode refid="322" relation="usage">
          <edgelabel>m_cache</edgelabel>
          <edgelabel>m_constCache</edgelabel>
          <edgelabel>m_decorCache</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" line="21" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODForward/xAODForward/versions/ALFAData_v1.h" bodystart="21" bodyend="469"/>
    <listofallmembers>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ad4f2b8732a72b278bcf70b79e646b209" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>ALFAData_v1</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a7aaa8e9eb54091ab7ee43bb7c73918e4" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1acd13909ea46d99e1b502834f133a159c" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5279e0349d690c26121f60b5a8778322" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdata</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1fc119dd13bd2c74f2ce4f2ba19c8898" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afa20cbd90cdb931e16c2751709e35271" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdataConst</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af85b897bffef87879e0ed6a58428a60b" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6c8fc3d315a5ec0633e7ae6a2b26a432" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>auxdecor</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac8345167ba85a0788d804a39b8325a36" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>AuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>clearCache</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a71044a012a37af1bb0b6fab3d3ea1230" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>clearDecorations</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>container</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a45f6f3563f9c8f088e4b840f81103588" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>container</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ae35a31170c1a04cb48f9c6d5afff36af" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>detectorPartID</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>getAuxIDs</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>getConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>getStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>hasNonConstStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>hasStore</name></member>
      <member refid="df/dca/classSG_1_1IAuxElement_1afdd6ee3469014a690d257119d34ec598" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>IAuxElement</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>index</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af727b22ab51f1d848fc3cf59065b99ea" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>isAvailable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a864fc1dab026cbcf20b2c7e3904b89a4" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>isAvailableWritable</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a5c56e0b548ba0f0fa6eba200defaa44d" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>isAvailableWritableAsDecoration</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad2eaf2e38536e93c05aebaf1218516a2" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>makePrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a164f94b3ddbbc773ba8beefdb7cb8677" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>makePrivateStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1abc3d271970467ae525fba5249471f252" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>maxTrackCnt</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a57b47915a10b73637129b9eed73e4a02" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>mdFiberHits</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a74e01f2cf45dd47e1faeda176eeb394e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>mdFibSel</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ac284c3a37d174f723ca853a4941432ad" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>mdMultiplicity</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a9cb2f34acf5303a402f563b3d4205351" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>numU</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1aea1a7871a9eb4a33f5de26c0b59f3984" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>numV</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a03deb8ff03309ecd0945bde415361909" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>numY</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab56def9b4cc02a35553de23a13b5f6d8" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>odFiberHitsNeg</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a401827f1b72e4d6ee0b467130b340ad7" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>odFiberHitsPos</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a2f07cf643c6e0c14b9a46922a1a40786" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>odFibSel</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ad24eb8b669ff080667b573ef96c10c4e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>odMultiplicityNeg</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ae15de1add7ed557e43e1e810a261eb5e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>odMultiplicityPos</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a1ecd49ad16cba61c3131046d8e068650" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>operator=</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a833240c1a52bfe5b09d06faa1dc3e7b5" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>overU</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a741fc901202b87c163b1a6cdcbcd3c1e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>overV</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a2de6818f384b8979a86376fcd0e4b72e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>overY</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>releasePrivateStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab9413372e862be0175785f2299300f98" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>scaler</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a3079709e44e8ac7452c05454f4994ce9" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setConstStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1aae53b7d3a0e8d5774e00a6fbc2f83d44" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setDetectorPartID</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ac36e94b72d575bb4ad0b802e9b4f6c12" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setMaxTrackCnt</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a7a73eed48e29d6cb3dbfb1a05c04199f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setMDFiberHits</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a35cec13ac83655f72df6cb2576d01c0f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setMDFibSel</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ac3546ba8fbf622d9bf4de46d0288049f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setMDMultiplicity</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a68b13428943609fd2b56c35c9dec85b3" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setNonConstStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ae4f105f5b7c9fc7a7ac9e9f806fa33ed" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setNumU</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1abcb8ef1a19c1484b8bd092ae7523caed" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setNumV</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a32f9bd633436a305e373418ed99ac6ac" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setNumY</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1afef6883ad65bcf6debf9bd46e531dafb" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setODFiberHitsNeg</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a4f929bcae5e5043cfa2e793e44f46db2" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setODFiberHitsPos</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ad00910f6ddef0a267c2740108e1a002b" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setODFibSel</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab5b92fc1b46fc9bdf2e4381027fb1708" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setODMultiplicityNeg</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a03139f7bb93baf56bd8f9f0d1db293e3" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setODMultiplicityPos</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a1dd916345ad0b1237753bfa68aa07972" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setOverU</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1aed00d3a794e3ee6eb8b0230b39dcd692" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setOverV</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a9a0af28ea8ed379c389747c6c2f125f9" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setOverY</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a0336c0fa5961098a2cc3dcda7dad3ac4" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setScaler</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a9cc58e245a417833f297e836d9559a32" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4bdca4ef5f1df892b5dc9742644444b8" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a3dcbf65ba73ef90114f7c5e50a187366" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setTrigPat</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ac47b4a4d88dbecd3c082c118fe19180c" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setXBeamCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a1583377d2a482e95556857352ecae1bd" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setXDetCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1aea618a67515e207d3d32606945c647a9" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setXLhcCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a36b57c91f110fe4e8e4826d26f0e8703" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setXRPotCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ac5e9c82e7a441d1912823602e563b9fb" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setXStatCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a61d34b02a21687b78bb7c3759c4d1abb" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setYBeamCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1afa202d51b6766f6c27c8d10c40cad777" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setYDetCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ae6c981d447314839d183e0ce0c907aaf" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setYLhcCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a992a258d576748b296bcf1a9d0c6df9c" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setYRPotCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1aa9219587f4beaf2a84749d51275e3e8d" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setYStatCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a19ae48be8218383d9310b84fd44a9794" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>setZLhcCS</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a6a154ec406bc6531a348a80e679da31f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>SG::AuxVectorBase</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a4573c8a5a16556f7a1826c502a8a1577" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>SG::AuxVectorBase_test</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1af0de35211a86db92a584654b3ea2bf7c" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>trigPat</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>usingPrivateStore</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>usingStandaloneStore</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1af6df7a9d736c87c36a6bb7c0a24becf7" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>xBeamCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab6cfc287b3824213cce4534c304d2a41" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>xDetCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a2e0dc0501d0041dc5f72f98a71d341b8" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>xLhcCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a55026ae7e47df4c261a054c38fbc5459" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>xRPotCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1af41e3b0aa5a87164687a80b986a0154d" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>xStatCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a7263276b9645dff907fe7a2398d06b07" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>yBeamCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab04c639e48ec313cf8febe9ef110574f" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>yDetCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a575b8644551de7fb5d03d46a3c9746aa" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>yLhcCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1ab2af32fedfa978aeea140beb1266aa50" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>yRPotCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a79e08942f266f43f46473624210719cc" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>yStatCS</name></member>
      <member refid="d5/df4/classxAOD_1_1ALFAData__v1_1a767311240736cba476093ebb59f52b35" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>zLhcCS</name></member>
      <member refid="dc/db0/classSG_1_1AuxElement_1a0b6a5f12eb826137b6d218f5738bb0b1" prot="public" virt="non-virtual"><scope>xAOD::ALFAData_v1</scope><name>~AuxElement</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
