<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d6f/classCxxUtils_1_1pointer__list__base" kind="class" prot="public">
    <compoundname>CxxUtils::pointer_list_base</compoundname>
    <derivedcompoundref refid="d1/d88/classCxxUtils_1_1pointer__list" prot="public" virt="non-virtual">CxxUtils::pointer_list&lt; NELT &gt;</derivedcompoundref>
    <includes refid="df/d5b/pointer__list_8h" local="no">pointer_list.h</includes>
    <innerclass refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" prot="public">CxxUtils::pointer_list_base::allocator</innerclass>
    <innerclass refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block" prot="public">CxxUtils::pointer_list_base::list_block</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1aaef14c875027b24d7b0487afd154ac6c" prot="public" static="no">
        <type><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref></type>
        <definition>typedef allocator CxxUtils::pointer_list_base::pool_type</definition>
        <argsstring></argsstring>
        <name>pool_type</name>
        <reimplementedby refid="d1/d88/classCxxUtils_1_1pointer__list_1a44e32621d06865bce5b34b53dea5fb3c">pool_type</reimplementedby>
        <briefdescription>
<para>Alias for <ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="163" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" prot="public" static="no">
        <type><ref refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block_1a9114d9d3599d90b47839cf4fe50d62b7" kindref="member">list_block::value_type</ref></type>
        <definition>typedef list_block::value_type CxxUtils::pointer_list_base::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <reimplementedby refid="d1/d88/classCxxUtils_1_1pointer__list_1aeec2b005d8f592c4e380b50caaf78417">value_type</reimplementedby>
        <briefdescription>
<para>The stored element type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a26839e41df177ff3adb6daa55b863bb7" prot="protected" static="no" mutable="no">
        <type><ref refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block" kindref="compound">list_block</ref> *</type>
        <definition>list_block* CxxUtils::pointer_list_base::m_head</definition>
        <argsstring></argsstring>
        <name>m_head</name>
        <briefdescription>
<para>The first block in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="188" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a41cb1b04f47a7bc8139085917f87e575" prot="protected" static="no" mutable="no">
        <type><ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" kindref="member">value_type</ref> *</type>
        <definition>value_type* CxxUtils::pointer_list_base::m_insert</definition>
        <argsstring></argsstring>
        <name>m_insert</name>
        <briefdescription>
<para>The current insertion point in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="191" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a86eacb0b846710d79b15e8c731359bcc" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t CxxUtils::pointer_list_base::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
<para>The current list size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1abdf98cef31e29230e927bc54fa4b5568" prot="protected" static="no" mutable="no">
        <type><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref> &amp;</type>
        <definition>allocator&amp; CxxUtils::pointer_list_base::m_pool</definition>
        <argsstring></argsstring>
        <name>m_pool</name>
        <briefdescription>
<para>The list <ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="197" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1aa3ff405565087c57b138bc2c93b7d089" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::pointer_list_base::pointer_list_base</definition>
        <argsstring>(pool_type &amp;pool)</argsstring>
        <name>pointer_list_base</name>
        <param>
          <type><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">pool_type</ref> &amp;</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Constructor. <computeroutput>pool</computeroutput> gives the <ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref> for this container. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref> for this container. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="200" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::pointer_list_base::push_back</definition>
        <argsstring>(value_type p)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" kindref="member">value_type</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Add a new element to the end of the container. O(1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="172" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="213" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CxxUtils::pointer_list_base::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>The current size of the container. O(1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="175" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a576e42bb370de83f7c35adb55196ddba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::pointer_list_base::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erase the container. O(1). Note: doesn&apos;t free memory. Memory currently in use will be reused when the container is filled again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="180" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1aabc1382cca7d249203c993f1676690fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::pointer_list_base::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Test to see if the container is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="183" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="252" bodyend="255"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a729fb5db811798fb3043eebe2ef04769" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::pointer_list_base::firstblock</definition>
        <argsstring>()</argsstring>
        <name>firstblock</name>
        <briefdescription>
<para>Allocate the first block of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="200" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1a3f02d69a29905525ae631cb382b9b275" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::pointer_list_base::nextblock</definition>
        <argsstring>()</argsstring>
        <name>nextblock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extend the list with another block. <computeroutput>m_insert</computeroutput> should be at the end of the last block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx" bodystart="107" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad70f16a03ccd3148a7bc401cf25011e1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block" kindref="compound">list_block</ref> *</type>
        <definition>pointer_list_base::list_block * CxxUtils::pointer_list_base::getblock</definition>
        <argsstring>()</argsstring>
        <name>getblock</name>
        <briefdescription>
<para>Allocate a new block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="207" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/pointer_list.cxx" bodystart="123" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> fast way to store a variable-sized collection of pointers. </para>    </briefdescription>
    <detaileddescription>
<para>See <computeroutput><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref></computeroutput> below for a summary.</para><para>Some extra <ref refid="dd/d39/namespacedetail" kindref="compound">detail</ref>: The list is a set of fixed-size blocks, each holding (by default) 15 pointers. At the end of each block is another pointer used to form a a linked list. We used to mark this last pointer by setting the low bit as a sentinel. But now that we control our own <ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref> we can instead just insist that the blocks have a size that&apos;s a power of 2 and are fully aligned. We can then test the low bits of the address to tell if we&apos;re looking at the last pointer of a block.</para><para>We then need to keep pointers to the head block, and to the current insertion position. To insert, we see if the insertion position is pointing at a block end. If so, we allocate another block, chain to it, and reset the insertion position to the beginning of the new block. Then store the pointer in the insertion position and bump it. Iterators are just pointers to the stored pointers. We use the end positions to tell when to chain to a new block. The insertion point gives the end iterator.</para><para><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref> is templated on the number of pointers stored in each block. We put it as a template parameter so that it can be accessed from the iterator class without having to have a reference from the iterator back to the containing list. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="16322">
        <label>CxxUtils::pointer_list&lt; NELT &gt;</label>
        <link refid="d1/d88/classCxxUtils_1_1pointer__list"/>
        <childnode refid="16321" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16321">
        <label>CxxUtils::pointer_list_base</label>
        <link refid="d1/d6f/classCxxUtils_1_1pointer__list__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="16324">
        <label>CxxUtils::pointer_list_base::allocator</label>
        <link refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator"/>
        <childnode refid="16325" relation="usage">
          <edgelabel>m_chunks</edgelabel>
        </childnode>
      </node>
      <node id="16326">
        <label>CxxUtils::pointer_list_base::list_block</label>
        <link refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block"/>
        <childnode refid="16327" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="16325">
        <label>CxxUtils::pointer_list_base::allocator::chunk</label>
        <childnode refid="16325" relation="usage">
          <edgelabel>m_next</edgelabel>
        </childnode>
        <childnode refid="16326" relation="usage">
          <edgelabel>m_blocks</edgelabel>
        </childnode>
      </node>
      <node id="16323">
        <label>CxxUtils::pointer_list_base</label>
        <link refid="d1/d6f/classCxxUtils_1_1pointer__list__base"/>
        <childnode refid="16324" relation="usage">
          <edgelabel>m_pool</edgelabel>
        </childnode>
        <childnode refid="16327" relation="usage">
          <edgelabel>m_insert</edgelabel>
        </childnode>
        <childnode refid="16326" relation="usage">
          <edgelabel>m_head</edgelabel>
        </childnode>
      </node>
      <node id="16327">
        <label>void</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="52" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="51" bodyend="208"/>
    <listofallmembers>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a576e42bb370de83f7c35adb55196ddba" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>clear</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aabc1382cca7d249203c993f1676690fc" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>empty</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a729fb5db811798fb3043eebe2ef04769" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>firstblock</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad70f16a03ccd3148a7bc401cf25011e1" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>getblock</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a26839e41df177ff3adb6daa55b863bb7" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>m_head</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a41cb1b04f47a7bc8139085917f87e575" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>m_insert</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1abdf98cef31e29230e927bc54fa4b5568" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>m_pool</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a86eacb0b846710d79b15e8c731359bcc" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>m_size</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a3f02d69a29905525ae631cb382b9b275" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>nextblock</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aa3ff405565087c57b138bc2c93b7d089" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>pointer_list_base</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aaef14c875027b24d7b0487afd154ac6c" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>pool_type</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>push_back</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>size</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list_base</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
