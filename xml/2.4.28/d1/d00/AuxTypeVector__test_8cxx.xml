<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d00/AuxTypeVector__test_8cxx" kind="file">
    <compoundname>AuxTypeVector_test.cxx</compoundname>
    <includes refid="d6/dd2/AuxTypeVector_8h" local="yes">AthContainers/tools/AuxTypeVector.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="72210">
        <label>limits</label>
      </node>
      <node id="72207">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="72208" relation="include">
        </childnode>
        <childnode refid="72209" relation="include">
        </childnode>
      </node>
      <node id="72202">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="72203" relation="include">
        </childnode>
        <childnode refid="72204" relation="include">
        </childnode>
      </node>
      <node id="72211">
        <label>stdint.h</label>
      </node>
      <node id="72220">
        <label>cassert</label>
      </node>
      <node id="72208">
        <label>string</label>
      </node>
      <node id="72198">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="72199" relation="include">
        </childnode>
        <childnode refid="72200" relation="include">
        </childnode>
      </node>
      <node id="72218">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="72214">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="72206">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="72207" relation="include">
        </childnode>
        <childnode refid="72210" relation="include">
        </childnode>
        <childnode refid="72211" relation="include">
        </childnode>
        <childnode refid="72212" relation="include">
        </childnode>
      </node>
      <node id="72200">
        <label>typeinfo</label>
      </node>
      <node id="72212">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="72209">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="72217">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="72203">
        <label>vector</label>
      </node>
      <node id="72213">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="72201">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="72204">
        <label>cstdlib</label>
      </node>
      <node id="72219">
        <label>iostream</label>
      </node>
      <node id="72199">
        <label>cstddef</label>
      </node>
      <node id="72197">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="72198" relation="include">
        </childnode>
        <childnode refid="72201" relation="include">
        </childnode>
        <childnode refid="72202" relation="include">
        </childnode>
        <childnode refid="72205" relation="include">
        </childnode>
        <childnode refid="72213" relation="include">
        </childnode>
        <childnode refid="72200" relation="include">
        </childnode>
        <childnode refid="72203" relation="include">
        </childnode>
        <childnode refid="72215" relation="include">
        </childnode>
        <childnode refid="72211" relation="include">
        </childnode>
        <childnode refid="72216" relation="include">
        </childnode>
        <childnode refid="72217" relation="include">
        </childnode>
        <childnode refid="72218" relation="include">
        </childnode>
      </node>
      <node id="72216">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="72196">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx</label>
        <link refid="AuxTypeVector_test.cxx"/>
        <childnode refid="72197" relation="include">
        </childnode>
        <childnode refid="72219" relation="include">
        </childnode>
        <childnode refid="72220" relation="include">
        </childnode>
      </node>
      <node id="72205">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="72201" relation="include">
        </childnode>
        <childnode refid="72206" relation="include">
        </childnode>
        <childnode refid="72213" relation="include">
        </childnode>
        <childnode refid="72203" relation="include">
        </childnode>
        <childnode refid="72214" relation="include">
        </childnode>
      </node>
      <node id="72215">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="de/d11/classTestContainer" prot="public">TestContainer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1a7e14e2251cfafbea3ee609f799780a67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
        <definition>T makeT</definition>
        <argsstring>(int x=0)</argsstring>
        <name>makeT</name>
        <param>
          <type>int</type>
          <declname>x</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="19" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1a5b4097efd3cbfe3a7c16e44c50f331d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_vector</definition>
        <argsstring>()</argsstring>
        <name>test_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="25" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="122" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="121" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="138" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="137" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="d1/d00/AuxTypeVector__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" line="176" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx" bodystart="175" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for AuxTypeVector. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2013 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/dd2/AuxTypeVector_8h" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">AthContainers/tools/AuxTypeVector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>makeT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(x);<sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>makeT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x=0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x&amp;1)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_vector()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;T&gt;</ref>*<sp/>vconcrete<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;T&gt;</ref><sp/>(10,<sp/>20);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v<sp/>=<sp/>vconcrete;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>ptr[0]<sp/>=<sp/>makeT(1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>ptr[1]<sp/>=<sp/>makeT(2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>assert<sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>assert<sp/>(vconcrete-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>()[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>assert<sp/>(vconcrete-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>()[1]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>assert<sp/>(&amp;vconcrete-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>()<sp/>==<sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1aa6d797c3945ce8ec97ae65439f551fdf" kindref="member" tooltip="Return a pointer to the STL vector itself.">toVector</ref>());</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1add8a225a8b7d80dc53dd134ca92e8f19" kindref="member" tooltip="Change the capacity of the vector.">reserve</ref><sp/>(50);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ac1934e4f62d5eabb36b3074a06ee5306" kindref="member" tooltip="Change the size of the vector.">resize</ref><sp/>(40);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr<sp/>==<sp/>ptr2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert<sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>40);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a027a64382b5238f0e3a8ebaf1bff1751" kindref="member" tooltip="Shift the elements of the vector.">shift</ref><sp/>(1,<sp/>1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(1));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[2]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ptr[1]<sp/>=<sp/>makeT(20);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a027a64382b5238f0e3a8ebaf1bff1751" kindref="member" tooltip="Shift the elements of the vector.">shift</ref><sp/>(1,<sp/>-1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(20));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;T&gt;</ref><sp/>(10,<sp/>20);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>ptr2<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector_1a882bba3c75debc479f55b328393d6d84" kindref="member" tooltip="Copy an element between vectors (static method).">SG::AuxTypeVector&lt;T&gt;::copy</ref><sp/>(ptr2,<sp/>0,<sp/>ptr,<sp/>1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector_1a882bba3c75debc479f55b328393d6d84" kindref="member" tooltip="Copy an element between vectors (static method).">SG::AuxTypeVector&lt;T&gt;::copy</ref><sp/>(ptr2,<sp/>1,<sp/>ptr,<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(20));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>ptr2[0]<sp/>=<sp/>makeT(10);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ptr2[1]<sp/>=<sp/>makeT(11);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector_1afcf37478958c2082edf830e5bc33b53a" kindref="member" tooltip="Swap an element between vectors (static method).">SG::AuxTypeVector&lt;T&gt;::swap</ref><sp/>(ptr2,<sp/>0,<sp/>ptr,<sp/>1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[0]<sp/>==<sp/>makeT(20));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr[1]<sp/>==<sp/>makeT(10));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT(2));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(11));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector_1aa84c957e2a0d246906bef0536b72051c" kindref="member" tooltip="Clear an element within a vector (static method).">SG::AuxTypeVector&lt;T&gt;::clear</ref><sp/>(ptr2,<sp/>0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[0]<sp/>==<sp/>makeT());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr2[1]<sp/>==<sp/>makeT(11));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v3<sp/>=<sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a44002ff6152aafdb5d7123a8ac547905" kindref="member" tooltip="Make a copy of this vector.">clone</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>assert<sp/>(v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a62b69917936ea8302fa3a4689c4fa636" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr3<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v3-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>();<sp/>i++)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ptr[i]<sp/>==<sp/>ptr3[i]);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ac1934e4f62d5eabb36b3074a06ee5306" kindref="member" tooltip="Change the size of the vector.">resize</ref><sp/>(0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert<sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(bool))</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299" kindref="member" tooltip="Return the type of the payload object for this instance.">objType</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;char&gt;));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299" kindref="member" tooltip="Return the type of the payload object for this instance.">objType</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;T&gt;));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v3;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>test_vector&lt;int&gt;();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>test_vector&lt;bool&gt;();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>test_vector&lt;float&gt;();</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="de/d11/classTestContainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d11/classTestContainer" kindref="compound">TestContainer</ref></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::IAuxSetOption</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d11/classTestContainer_1ae87c8c29de3bc86feb31edbc1b83cfd2" kindref="member" tooltip="Make an option setting.">setOption</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound" tooltip="Hold information about an option setting request.">SG::AuxDataOption</ref>&amp;<sp/>option)<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{<sp/>lastopt<sp/>=<sp/>option;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound" tooltip="Hold information about an option setting request.">SG::AuxDataOption</ref><sp/>lastopt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound" tooltip="Hold information about an option setting request.">SG::AuxDataOption</ref><sp/>TestContainer::lastopt<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>setOption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int&gt;</ref>*<sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int&gt;</ref><sp/>(10,<sp/>20);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>assert<sp/>(!v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a86fc0c679974769134d9492538c960bc" kindref="member" tooltip="Make an option setting.">setOption</ref><sp/>(<ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound" tooltip="Hold information about an option setting request.">SG::AuxDataOption</ref><sp/>(</highlight><highlight class="stringliteral">&quot;opt&quot;</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int, TestContainer&gt;</ref>*<sp/>v2<sp/>=</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int, TestContainer&gt;</ref><sp/>(10,<sp/>20);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>assert<sp/>(v2-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a86fc0c679974769134d9492538c960bc" kindref="member" tooltip="Make an option setting.">setOption</ref><sp/>(<ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound" tooltip="Hold information about an option setting request.">SG::AuxDataOption</ref><sp/>(</highlight><highlight class="stringliteral">&quot;opt&quot;</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>assert<sp/>(TestContainer::lastopt.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;opt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>assert<sp/>(TestContainer::lastopt.intVal()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>toPacked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test3()</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int&gt;</ref>*<sp/>v1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;int&gt;</ref><sp/>(0,<sp/>0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>().push_back(1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>().push_back(2);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>assert<sp/>(v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299" kindref="member" tooltip="Return the type of the payload object for this instance.">objType</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::vector&lt;int&gt;));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>assert<sp/>(v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>assert<sp/>(iptr[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>assert<sp/>(iptr[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound" tooltip="Abstract interface for manipulating vectors of arbitrary types.">SG::IAuxTypeVector</ref>*<sp/>v2<sp/>=<sp/>v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a08f3079c22a019b08377a9287563af5b" kindref="member" tooltip="Try to convert this aux vector to a PackedContainer.">toPacked</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>assert<sp/>(v2<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>assert<sp/>(ptr<sp/>==<sp/>v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>assert<sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a62b69917936ea8302fa3a4689c4fa636" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>assert<sp/>(iptr[0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert<sp/>(iptr[1]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>assert<sp/>(v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>assert<sp/>(v1-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae" kindref="member" tooltip="Return a pointer to the start of the vector&amp;#39;s data.">toPtr</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>assert<sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1a2b585440095feb65b1b3512f16e6490f" kindref="member" tooltip="Return the type of the complete object to be saved.">objType</ref>()<sp/>==<sp/>&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound" tooltip="Container to hold aux data to be stored in a packed form.">SG::PackedContainer&lt;int&gt;</ref>));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound" tooltip="Container to hold aux data to be stored in a packed form.">SG::PackedContainer&lt;int&gt;</ref>*<sp/>pptr<sp/>=</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound" tooltip="Container to hold aux data to be stored in a packed form.">SG::PackedContainer&lt;int&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v2-&gt;<ref refid="de/d12/classSG_1_1IAuxTypeVector_1afed4af45990e7670d930c265d779b80c" kindref="member" tooltip="Return a pointer to the STL vector itself.">toVector</ref>());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>assert<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(*pptr)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound" tooltip="Container to hold aux data to be stored in a packed form.">SG::PackedContainer&lt;int&gt;</ref>));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;std::string&gt;</ref>*<sp/>v3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d68/classSG_1_1AuxTypeVector" kindref="compound" tooltip="Implementation of IAuxTypeVector for specific types.">SG::AuxTypeVector&lt;std::string&gt;</ref><sp/>(0,<sp/>0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>v3-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>().push_back(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>v3-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a7b2dcc63f997eba1bc28c9b3049cb253" kindref="member" tooltip="Return a reference to the payload vector.">vec</ref>().push_back(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>assert<sp/>(v3-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a08f3079c22a019b08377a9287563af5b" kindref="member" tooltip="Try to convert this aux vector to a PackedContainer.">toPacked</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>assert<sp/>(v3-&gt;<ref refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e" kindref="member" tooltip="Return the size of the vector.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>test3();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxTypeVector_test.cxx"/>
  </compounddef>
</doxygen>
