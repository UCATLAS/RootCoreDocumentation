<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d56/classSH_1_1SampleHandler" kind="class" prot="public">
    <compoundname>SH::SampleHandler</compoundname>
    <includes refid="d2/da1/SampleHandler_8h" local="no">SampleHandler.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> * &gt;::const_iterator</type>
        <definition>typedef std::vector&lt;Sample*&gt;::const_iterator SH::SampleHandler::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>the iterator to use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="445" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d1/d56/classSH_1_1SampleHandler_1a21a99d28f64940df35c87443c1e1dcac" prot="private" static="no">
        <type>std::vector&lt; <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> * &gt;::const_iterator</type>
        <definition>typedef std::vector&lt;SH::Sample*&gt;::const_iterator SH::SampleHandler::SamplesIter</definition>
        <argsstring></argsstring>
        <name>SamplesIter</name>
        <briefdescription>
<para>the iterator for m_samples </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="503" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d56/classSH_1_1SampleHandler_1a72742e422b5b9bc6473df0c603a1b356" prot="private" static="no">
        <type>std::vector&lt; <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> * &gt;::<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member">iterator</ref></type>
        <definition>typedef std::vector&lt;SH::Sample*&gt;::iterator SH::SampleHandler::SamplesMIter</definition>
        <argsstring></argsstring>
        <name>SamplesMIter</name>
        <briefdescription>
<para>the mutable iterator for m_samples </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="507" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d56/classSH_1_1SampleHandler_1a85cff2c2b31916944f15d062f3df676d" prot="private" static="no">
        <type>std::map&lt; std::string, <ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SH::SamplePtr</ref> &gt;::const_iterator</type>
        <definition>typedef std::map&lt;std::string,SH::SamplePtr&gt;::const_iterator SH::SampleHandler::NamedIter</definition>
        <argsstring></argsstring>
        <name>NamedIter</name>
        <briefdescription>
<para>the iterator for m_named </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="515" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d56/classSH_1_1SampleHandler_1a9b94ef4eee8a948015ea195f97340b36" prot="private" static="no">
        <type>std::map&lt; std::string, <ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SH::SamplePtr</ref> &gt;::<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member">iterator</ref></type>
        <definition>typedef std::map&lt;std::string,SH::SamplePtr&gt;::iterator SH::SampleHandler::NamedMIter</definition>
        <argsstring></argsstring>
        <name>NamedMIter</name>
        <briefdescription>
<para>the mutable iterator for m_named </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="519" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/d56/classSH_1_1SampleHandler_1a9a9f649aec73d86786db5e0ff26618ef" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">SH::Sample</ref> * &gt;</type>
        <definition>std::vector&lt;SH::Sample*&gt; SH::SampleHandler::m_samples</definition>
        <argsstring></argsstring>
        <name>m_samples</name>
        <briefdescription>
<para>the list of samples managed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="499" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d56/classSH_1_1SampleHandler_1a8a005dba3884a6be52b1c3848b4ba798" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SH::SamplePtr</ref> &gt;</type>
        <definition>std::map&lt;std::string,SH::SamplePtr&gt; SH::SampleHandler::m_named</definition>
        <argsstring></argsstring>
        <name>m_named</name>
        <briefdescription>
<para>the list of samples by name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="511" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a1cf2c2d4602e37d9ff32c53b1df231af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="65"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a5b33388423864f4abfab35e26cc66e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleHandler::SampleHandler</definition>
        <argsstring>()</argsstring>
        <name>SampleHandler</name>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1af8415bb449992c443b3768466df4ce50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleHandler::SampleHandler</definition>
        <argsstring>(const SampleHandler &amp;that)</argsstring>
        <name>SampleHandler</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard copy constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="85"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a6935184d0a330be575339ccc2d8dcadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::SampleHandler::~SampleHandler</definition>
        <argsstring>()</argsstring>
        <name>~SampleHandler</name>
        <briefdescription>
<para>standard destructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="93"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ad3215ac0415ef02ffc69b09db57133bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
        <definition>SampleHandler&amp; SH::SampleHandler::operator=</definition>
        <argsstring>(const SampleHandler &amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard assignment operator </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="103"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::add</definition>
        <argsstring>(Sample *sample)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>add a sample to the handler </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, sample is released if this is the last copy </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I<linebreak/>
 sample of same name already in use </para></simplesect>
<simplesect kind="pre"><para>sample != 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="115"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1af80ce64b63029a65b5905877d007041f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::add</definition>
        <argsstring>(std::unique_ptr&lt; Sample &gt; sample)</argsstring>
        <name>add</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> &gt;</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>add a sample to the handler </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, sample is released </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I<linebreak/>
 sample of same name already in use </para></simplesect>
<simplesect kind="pre"><para>!sample.empty() </para><simplesectsep/><para>!sample-&gt;name().empty() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="128"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a8d7b8421de9981a335c3f0889bdfd5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::add</definition>
        <argsstring>(const SamplePtr &amp;sample)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SamplePtr</ref> &amp;</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>add a sample to the handler </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, sample is released if this is the last copy </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I<linebreak/>
 sample of same name already in use </para></simplesect>
<simplesect kind="pre"><para>!sample.empty() </para><simplesectsep/><para>!sample-&gt;name().empty() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="141"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1afc5b304261fe831dacaac36cfc874bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::add</definition>
        <argsstring>(const SampleHandler &amp;sh)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>sh</declname>
        </param>
        <briefdescription>
<para>add all samples from the given <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> to this one </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, some samples may be added </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 sample of same name already in use </para></simplesect>
<simplesect kind="pre"><para>this != &amp;sh </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="153"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1aa55f3bded2aa6cb54fc5ea5035fb26be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::addWithPrefix</definition>
        <argsstring>(const SampleHandler &amp;sh, const std::string &amp;prefix)</argsstring>
        <name>addWithPrefix</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>sh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>add all samples from the given <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> to this one, with prefix prepended to their name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, some samples may be added </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 sample of same name already in use </para></simplesect>
<simplesect kind="pre"><para>this != &amp;sh </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="165"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1aac40116e0e36dac4d3604ea6aecbab8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::remove</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>remove the given sample </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 sample not in <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a43d63102702788ef9d227a59f073fdf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::remove</definition>
        <argsstring>(Sample *sample)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>remove the given sample </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 sample not in <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> </para></simplesect>
<simplesect kind="pre"><para>sample != 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="188"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
        <definition>Sample* SH::SampleHandler::get</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>get the sample with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the sample with the given name, or NULL if the sample can not be found </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="200"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ade16556be273c2c39b079e146297e018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref></type>
        <definition>SampleHandler SH::SampleHandler::find</definition>
        <argsstring>(const TagList &amp;tags) const </argsstring>
        <name>find</name>
        <param>
          <type>const <ref refid="dd/d41/classSH_1_1TagList" kindref="compound">TagList</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
<para>find all samples which have at least one of the given tags. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> with all found samples </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="212"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a611d2b50a989bbfd85f2e4ab143ce358" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref></type>
        <definition>SampleHandler SH::SampleHandler::find</definition>
        <argsstring>(const std::string &amp;tags) const </argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
<para>find all samples which have at least one of the given tags. </para>        </briefdescription>
        <detaileddescription>
<para>this version uses a comma separated tag list instead of a <ref refid="dd/d41/classSH_1_1TagList" kindref="compound">TagList</ref> object. <simplesect kind="return"><para>a <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> with all found samples </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="226"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ab51981abbe310e2a251f312803d271d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
        <definition>Sample* SH::SampleHandler::findBySource</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>findBySource</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>find a sample by the name in the source sample handler </para>        </briefdescription>
        <detaileddescription>
<para>this means it needs to match the content of the meta-data field &quot;nc_source&quot; or if that is not present by its own name. <simplesect kind="return"><para>the sample or NULL if no sample was found </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 more than one sample found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="241"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a93faf6a0dfbf4fe41282a03a502e09a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref></type>
        <definition>SampleHandler SH::SampleHandler::findByName</definition>
        <argsstring>(const std::string &amp;pattern) const </argsstring>
        <name>findByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>find samples by pattern on the name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the regular expression that&apos;s matched against the name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a sample handler with the new samples </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="254"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a9d22938c1860048b92456abf84640bea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::print</definition>
        <argsstring>() const </argsstring>
        <name>print</name>
        <briefdescription>
<para>print the debugging output to the screen </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may print partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 stream errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="265"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a74a1c4dea00061772f052ff4c86eef28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::printContent</definition>
        <argsstring>() const </argsstring>
        <name>printContent</name>
        <briefdescription>
<para>print the debugging output to the screen </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may print partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 stream errors </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>added a second print method for python </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="278"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::save</definition>
        <argsstring>(const std::string &amp;directory) const </argsstring>
        <name>save</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
<para>save the list of samples to the given directory </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may save partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 stream errors </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>Due to some ancient design decision we store a <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> as a directory with one root file per <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref>, instead of storing them all in a single root file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="293"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::load</definition>
        <argsstring>(const std::string &amp;directory)</argsstring>
        <name>load</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
<para>load all the samples from the given directory </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may load partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 duplicate sample </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>Due to some ancient design decision we store a <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> as a directory with one root file per <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref>, instead of storing them all in a single root file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="308"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1acc2c0ad59b1978ed5717dc143917bba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::updateLocation</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>updateLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>update all file references starting with from to to </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the original path to the data area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the new path to the data area </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may update partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="pre"><para>!from.empty() </para></simplesect>
<simplesect kind="post"><para>!to.empty() </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>this is needed when moving data around without recreating the samples from scratch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1afa7698bb543938ebf295da6f28e1dd45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::fetch</definition>
        <argsstring>(const SampleHandler &amp;source)</argsstring>
        <name>fetch</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>fetch the meta-data for all samples that are also in the source sample handler. </para>        </briefdescription>
        <detaileddescription>
<para>samples are identified by name in the source. the name is either taken from the meta-data field &quot;nc_source&quot; or (if not available) by the name of the sample. fields that have a name that starts with &quot;nc_&quot; are not copied. <simplesect kind="par"><title>Guarantee</title><para>basic, may only fetch some meta-data </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="340"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1af78a6503ae66179a86f5e0b44214d19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::fetchDefaults</definition>
        <argsstring>(const SampleHandler &amp;source)</argsstring>
        <name>fetchDefaults</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>fetch the meta-data for all that samples that don&apos;t have it in this sample. </para>        </briefdescription>
        <detaileddescription>
<para>this ignores any meta-data without name and any samples not present in source. <simplesect kind="par"><title>Guarantee</title><para>basic, may only fetch some meta-data </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="353"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a561e60a86785525d16159cddfa89f0b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SH::SampleHandler::check_complete</definition>
        <argsstring>(const SampleHandler &amp;source) const </argsstring>
        <name>check_complete</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>whether we have all samples from the source <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>samples are identified by name in the source. the name is either taken from the meta-data field &quot;nc_source&quot; or (if not available) by the name of the sample. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>the source <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether all samples in the source sample handler are contained in this sample. </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="370"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ab73bd6e6fef0f19316711c6f2253633c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::setMetaDouble</definition>
        <argsstring>(const std::string &amp;name, double value)</argsstring>
        <name>setMetaDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data double with the given name for all samples. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one or may not do it for all samples </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="warning"><para>: this is a one-time effect, if you add more samples they will not get their meta-data set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="386"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a09786a76670fc6b3bb6d1be6c42e582a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::setMetaString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value)</argsstring>
        <name>setMetaString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data string with the given name for all samples. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one or may not do it for all samples </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="warning"><para>: this is a one-time effect, if you add more samples they will not get their meta-data set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="402"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1ae3b78a103e8a9735d8550c929cf6616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::setMetaDouble</definition>
        <argsstring>(const std::string &amp;pattern, const std::string &amp;name, double value)</argsstring>
        <name>setMetaDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data double with the given name for samples matching a pattern. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the regular expression against which the sample name is matched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one or may not do it for all samples </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="warning"><para>: this is a one-time effect, if you add more samples they will not get their meta-data set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="421"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a9232dde9eb143b3687b213c8301623bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::SampleHandler::setMetaString</definition>
        <argsstring>(const std::string &amp;pattern, const std::string &amp;name, const std::string &amp;value)</argsstring>
        <name>setMetaString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data double with the given name for samples matching a pattern. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>the regular expression against which the sample name is matched </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one or may not do it for all samples </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="warning"><para>: this is a one-time effect, if you add more samples they will not get their meta-data set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="440"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member">iterator</ref></type>
        <definition>iterator SH::SampleHandler::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>the begin iterator to use </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="453"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member">iterator</ref></type>
        <definition>iterator SH::SampleHandler::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>the end iterator to use </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="461"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t SH::SampleHandler::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>the number of samples contained </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="469"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a7907467018c72b11c5d37151a4071fb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
        <definition>Sample* SH::SampleHandler::operator[]</definition>
        <argsstring>(std::size_t index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>the sample with the given index </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>index &lt; <ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member">size()</ref> </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="478"/>
      </memberdef>
      <memberdef kind="function" id="d1/d56/classSH_1_1SampleHandler_1a13c3561ecdfadfc8241a7552e5634076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> *</type>
        <definition>Sample* SH::SampleHandler::at</definition>
        <argsstring>(std::size_t index) const </argsstring>
        <name>at</name>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>the sample with the given index </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>index &lt; <ref refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" kindref="member">size()</ref> </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="487"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d1/d56/classSH_1_1SampleHandler_1a01b1a97b75e8f3478dd86021618afcbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(SampleHandler &amp;a, SampleHandler &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="495"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> class that manages a list of <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> objects. </para>    </briefdescription>
    <detaileddescription>
<para>This class is typically used either to hold a list of all samples known to the analyzer or to hold a list of samples produced by a search operation on another <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref>. It is also extensively used to manage the inputs and outputs of EventLoop. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/SampleHandler.h" bodystart="54" bodyend="522"/>
    <listofallmembers>
      <member refid="d1/d56/classSH_1_1SampleHandler_1acee526c10ff2d20d525af7caab0f447f" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>add</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1af80ce64b63029a65b5905877d007041f" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>add</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a8d7b8421de9981a335c3f0889bdfd5a9" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>add</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1afc5b304261fe831dacaac36cfc874bd7" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>add</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1aa55f3bded2aa6cb54fc5ea5035fb26be" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>addWithPrefix</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a13c3561ecdfadfc8241a7552e5634076" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>at</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1afeaff9e0c8173cf162db26ee0a4d81f6" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>begin</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a561e60a86785525d16159cddfa89f0b2" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>check_complete</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a6c039cba7cf97bbb90e98d631a9ca6cb" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>end</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1afa7698bb543938ebf295da6f28e1dd45" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>fetch</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1af78a6503ae66179a86f5e0b44214d19d" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>fetchDefaults</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ade16556be273c2c39b079e146297e018" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>find</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a611d2b50a989bbfd85f2e4ab143ce358" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>find</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a93faf6a0dfbf4fe41282a03a502e09a2" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>findByName</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ab51981abbe310e2a251f312803d271d1" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>findBySource</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>get</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>iterator</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>load</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a8a005dba3884a6be52b1c3848b4ba798" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>m_named</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a9a9f649aec73d86786db5e0ff26618ef" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>m_samples</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a85cff2c2b31916944f15d062f3df676d" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>NamedIter</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a9b94ef4eee8a948015ea195f97340b36" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>NamedMIter</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ad3215ac0415ef02ffc69b09db57133bc" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>operator=</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a7907467018c72b11c5d37151a4071fb8" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>operator[]</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a9d22938c1860048b92456abf84640bea" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>print</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a74a1c4dea00061772f052ff4c86eef28" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>printContent</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1aac40116e0e36dac4d3604ea6aecbab8f" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>remove</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a43d63102702788ef9d227a59f073fdf4" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>remove</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a5b33388423864f4abfab35e26cc66e05" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>SampleHandler</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1af8415bb449992c443b3768466df4ce50" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>SampleHandler</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a21a99d28f64940df35c87443c1e1dcac" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>SamplesIter</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a72742e422b5b9bc6473df0c603a1b356" prot="private" virt="non-virtual"><scope>SH::SampleHandler</scope><name>SamplesMIter</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ae72c5f5e64591cab260314835203e742" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>save</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ab73bd6e6fef0f19316711c6f2253633c" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>setMetaDouble</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1ae3b78a103e8a9735d8550c929cf6616e" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>setMetaDouble</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a09786a76670fc6b3bb6d1be6c42e582a" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>setMetaString</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a9232dde9eb143b3687b213c8301623bf" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>setMetaString</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a5b6a3c927212a29355482917c64793a0" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>size</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a01b1a97b75e8f3478dd86021618afcbf" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>swap</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a1cf2c2d4602e37d9ff32c53b1df231af" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>testInvariant</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1acc2c0ad59b1978ed5717dc143917bba1" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>updateLocation</name></member>
      <member refid="d1/d56/classSH_1_1SampleHandler_1a6935184d0a330be575339ccc2d8dcadc" prot="public" virt="non-virtual"><scope>SH::SampleHandler</scope><name>~SampleHandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
