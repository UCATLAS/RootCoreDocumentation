<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/ddf/SealSignal_8cxx" kind="file">
    <compoundname>SealSignal.cxx</compoundname>
    <includes refid="d1/dc7/SealCommon_8h" local="yes">CxxUtils/SealCommon.h</includes>
    <includes refid="d0/dc2/SealSignal_8h" local="yes">CxxUtils/SealSignal.h</includes>
    <includes refid="d3/d3b/SealDebug_8h" local="yes">CxxUtils/SealDebug.h</includes>
    <includes refid="d7/d36/SealSharedLib_8h" local="yes">CxxUtils/SealSharedLib.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cerrno</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="113559">
        <label>sys/stat.h</label>
      </node>
      <node id="113552">
        <label>list</label>
      </node>
      <node id="113542">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx</label>
        <link refid="SealSignal.cxx"/>
        <childnode refid="113543" relation="include">
        </childnode>
        <childnode refid="113544" relation="include">
        </childnode>
        <childnode refid="113548" relation="include">
        </childnode>
        <childnode refid="113550" relation="include">
        </childnode>
        <childnode refid="113554" relation="include">
        </childnode>
        <childnode refid="113555" relation="include">
        </childnode>
        <childnode refid="113556" relation="include">
        </childnode>
        <childnode refid="113557" relation="include">
        </childnode>
        <childnode refid="113558" relation="include">
        </childnode>
        <childnode refid="113559" relation="include">
        </childnode>
        <childnode refid="113560" relation="include">
        </childnode>
      </node>
      <node id="113543">
        <label>CxxUtils/SealCommon.h</label>
        <link refid="d1/dc7/SealCommon_8h"/>
      </node>
      <node id="113554">
        <label>cassert</label>
      </node>
      <node id="113551">
        <label>string</label>
      </node>
      <node id="113544">
        <label>CxxUtils/SealSignal.h</label>
        <link refid="d0/dc2/SealSignal_8h"/>
        <childnode refid="113545" relation="include">
        </childnode>
        <childnode refid="113546" relation="include">
        </childnode>
        <childnode refid="113547" relation="include">
        </childnode>
      </node>
      <node id="113553">
        <label>exception</label>
      </node>
      <node id="113546">
        <label>sys/types.h</label>
      </node>
      <node id="113557">
        <label>cstdio</label>
      </node>
      <node id="113560">
        <label>unistd.h</label>
      </node>
      <node id="113545">
        <label>signal.h</label>
      </node>
      <node id="113556">
        <label>cerrno</label>
      </node>
      <node id="113558">
        <label>cstdlib</label>
      </node>
      <node id="113550">
        <label>CxxUtils/SealSharedLib.h</label>
        <link refid="d7/d36/SealSharedLib_8h"/>
        <childnode refid="113551" relation="include">
        </childnode>
        <childnode refid="113552" relation="include">
        </childnode>
        <childnode refid="113553" relation="include">
        </childnode>
      </node>
      <node id="113549">
        <label>cstddef</label>
      </node>
      <node id="113547">
        <label>climits</label>
      </node>
      <node id="113548">
        <label>CxxUtils/SealDebug.h</label>
        <link refid="d3/d3b/SealDebug_8h"/>
        <childnode refid="113543" relation="include">
        </childnode>
        <childnode refid="113549" relation="include">
        </childnode>
      </node>
      <node id="113555">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d5/dc5/namespaceAthena">Athena</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d1/ddf/SealSignal_8cxx_1a4b61113caa1d32b1c194095040eb9a7a" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int SIGNAL_MESSAGE_BUFSIZE</definition>
        <argsstring></argsstring>
        <name>SIGNAL_MESSAGE_BUFSIZE</name>
        <initializer> 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum length of a signal message. Used for local format buffers for the signal number and name message in Signal::fataldump() and the currently loaded shared library message in SignalLibDump(). Make this long enough to fit long shared library names. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/ddf/SealSignal_8cxx_1a36b5748eb893e2d75d928fdb58b3bd67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>static pid_t ProcessInfo__pid</definition>
        <argsstring>(void)</argsstring>
        <name>ProcessInfo__pid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the process id. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/SealSignal_8cxx_1a643d99e55b95da18a513ad66f5d6e0f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pid_t</type>
        <definition>static pid_t ProcessInfo__ppid</definition>
        <argsstring>(void)</argsstring>
        <name>ProcessInfo__ppid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the parent process id. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" bodystart="77" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d1/ddf/SealSignal_8cxx_1a332ba8e2b46faab7c421182b9c597091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils_installFatalHandler</definition>
        <argsstring>()</argsstring>
        <name>CxxUtils_installFatalHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Install fatal handler with default options. This is meant to be easy to call from pyton via ctypes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" line="1511" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx" bodystart="1510" bodyend="1513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="16"><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>INCLUDES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/dc7/SealCommon_8h" kindref="compound" tooltip="Collecting a few shared bits and pieces from SEAL headers.">CxxUtils/SealCommon.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/dc2/SealSignal_8h" kindref="compound" tooltip="This is the signal handler from SEAL, adapted to build in Atlas, after the drop of...">CxxUtils/SealSignal.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d3b/SealDebug_8h" kindref="compound" tooltip="This are the SEAL debug aids, adapted to build in Atlas, after the drop of that project...">CxxUtils/SealDebug.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d36/SealSharedLib_8h" kindref="compound">CxxUtils/SealSharedLib.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wlav<sp/>copied<sp/>from<sp/>SealBase/sysapi/Signal.h</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIGNAL_MESSAGE_BUFSIZE<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>copy<sp/>from<sp/>SealBase/sysapi/Signal.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>krasznaa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>http://dmawww.epfl.ch/ebt-bin/nph-dweb/dynaweb/SGI_Developer/</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>T_IRIX_Prog/@Generic__BookTextView/7525</highlight></codeline>
<codeline lineno="39"><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>POSIX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SVR4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSD<sp/>4.2</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>=========================================================</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/>sigaction(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigset(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigvec(3)<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>sigsetops(3)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal(3)<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>sigaltstack(2)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>sigqueue(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigsend(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kill(3)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>kill(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kill(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>killpg(3)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/>pthread_kill(3P)<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>sigprocmask(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sighold(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigblock(3)<sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>pthread_sigmask(3P)<sp/><sp/><sp/>sigrelse(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigsetmask(3)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>sigpending(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n.a.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n.a.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>sigsuspend(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigpause(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigpause(3)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>sigwait(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n.a.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n.a.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>sigwaitinfo(2)<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>sigtimedwait(2)</highlight></codeline>
<codeline lineno="60"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wlav<sp/>copied<sp/>from<sp/>SealBase/src/ProcessInfo.cpp</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pid_t</highlight></codeline>
<codeline lineno="66"><highlight class="normal">ProcessInfo__pid<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetCurrentProcessId<sp/>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::getpid<sp/>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pid_t</highlight></codeline>
<codeline lineno="77"><highlight class="normal">ProcessInfo__ppid<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>PROCESS_BASIC_INFORMATION<sp/>pbi;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NtQueryInformationProcess<sp/>(GetCurrentProcess(),ProcessBasicInformation,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;pbi,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(pbi),<sp/>0)<sp/>==<sp/>STATUS_SUCCESS)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pbi.InheritedFromUniqueProcessId;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>throw<sp/>systemerror!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::getppid<sp/>();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//namespace<sp/>seal<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Athena<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PRIVATE<sp/>DEFINES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PRIVATE<sp/>CONSTANTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PRIVATE<sp/>TYPES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="d5/dc5/namespaceAthena_1abc64851a956e157687d05d9e59795de4" kindref="member">DummyHandlerType</ref>)<sp/>(int);<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PRIVATE<sp/>VARIABLE<sp/>DEFINITIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SharedLibrary::InfoHandler<sp/>*SignalDumpCallback<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PUBLIC<sp/>VARIABLE<sp/>DEFINITIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>CLASS<sp/>STRUCTURE<sp/>INITIALIZATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Signal::s_crashed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Signal::s_inFatal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Signal::s_applicationName<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Signal::s_fatalFd<sp/>=<sp/><ref refid="d1/dc7/SealCommon_8h_1a066e390969fb367df2540beba5bff9ca" kindref="member">IOFD_INVALID</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1ad4933f5dea26508794985dc36879fd4f" kindref="member">Signal::FatalHook</ref><sp/><sp/><sp/>Signal::s_fatalHook<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a0a1d20177cf76b6f120d8f70fd547414" kindref="member">Signal::FatalReturn</ref><sp/>Signal::s_fatalReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Signal::s_fatalOptions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a580d4d8dab36af1b92760624a314fe10" kindref="member">Signal::QuitHook</ref><sp/><sp/><sp/><sp/>Signal::s_quitHook<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!HAVE_POSIX_SIGNALS<sp/>||<sp/>!SA_SIGINFO</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">Signal::HandlerType</ref><sp/>Signal::s_trampolines<sp/>[NSIG];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PRIVATE<sp/>FUNCTION<sp/>DEFINITIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">SignalDumpLibs<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SharedLibrary::LibraryInfo<sp/>&amp;info,<sp/><ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/>fd)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size<sp/>=<sp/>BitTraits&lt;unsigned<sp/>long&gt;::HexDigits<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf<sp/>[buf_size];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>snprintf<sp/>(buf,<sp/>buf_size,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>0x%08lx<sp/>&quot;</highlight><highlight class="normal">,<sp/>info.m_text_start));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>info.m_filename,<sp/>strlen<sp/>(info.m_filename));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="172"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LONG<sp/>CALLBACK</highlight></codeline>
<codeline lineno="173"><highlight class="normal">SEHFatal<sp/>(PEXCEPTION_POINTERS<sp/>info)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">Signal::fatal</ref><sp/>(SIGABRT,<sp/>info-&gt;ExceptionRecord,<sp/>info-&gt;ContextRecord);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXCEPTION_EXECUTE_HANDLER;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_WIN32</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>PUBLIC<sp/>FUNCTION<sp/>DEFINITIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//&lt;&lt;&lt;&lt;&lt;&lt;<sp/>MEMBER<sp/>FUNCTION<sp/>DEFINITIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;&gt;&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="187"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">Signal::trampoline<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(sig<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>sig<sp/>&lt;<sp/>NSIG);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(s_trampolines<sp/>[sig]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>info;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>memset<sp/>(&amp;info,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(info));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>s_trampolines<sp/>[sig]<sp/>(sig,<sp/>&amp;info,<sp/>0);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="200"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a0adbe38fd6bad8af8f01df2ebadd226a" kindref="member">Signal::name</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_STRSIGNAL</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strsignal<sp/>(sig);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>HAVE_SYS_SIGLIST</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sys_siglist<sp/>[sig];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>thread<sp/>safe.<sp/><sp/>But<sp/>if<sp/>you<sp/>have<sp/>threads,<sp/>you<sp/>probably</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>strsignal()<sp/>as<sp/>well<sp/>(FIXME:<sp/>check<sp/>WIN32).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buf_size<sp/>=<sp/>8<sp/>+<sp/>BitTraits&lt;int&gt;::Digits;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf<sp/>[NSIG]<sp/>[buf_size];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>buf<sp/>[sig][0])</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf<sp/>(buf<sp/>[sig],<sp/>buf_size,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>sig);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf<sp/>[sig];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">Signal::HandlerType</ref></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a03b798ab9f156df7c4201b8ca965fc7c" kindref="member">Signal::handler</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/>sigset_t<sp/>*mask<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(sig<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>sig<sp/>&lt;<sp/>NSIG);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>old;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>STDC::memset<sp/>(&amp;old,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(old));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction<sp/>(sig,<sp/>&amp;old,<sp/>0)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mask<sp/>=<sp/>old.sa_mask;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>old.sa_handler;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_ERR;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>!<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref><sp/>old<sp/>=<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>signal<sp/>(sig,<sp/>SIG_DFL);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>signal<sp/>(sig,<sp/>(<ref refid="d5/dc5/namespaceAthena_1abc64851a956e157687d05d9e59795de4" kindref="member">DummyHandlerType</ref>)<sp/>old);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">Signal::HandlerType</ref></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">Signal::handle</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/>HandlerType<sp/>handler,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*blockMask<sp/></highlight><highlight class="comment">/*=0*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(sig<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>sig<sp/>&lt;<sp/>NSIG);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOG<sp/>(0,<sp/>trace,<sp/>LFsignal,<sp/>&quot;[&quot;<sp/>&lt;&lt;<sp/>sig<sp/>&lt;&lt;<sp/>&quot;]<sp/>(&quot;<sp/>&lt;&lt;<sp/>name<sp/>(sig)<sp/>&lt;&lt;<sp/>&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/>&lt;&lt;<sp/>(void<sp/>*)<sp/>handler<sp/>&lt;&lt;<sp/>&apos;\n&apos;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref><sp/>oldhandler;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!HAVE_POSIX_SIGNALS<sp/>||<sp/>!SA_SIGINFO</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>to<sp/>using<sp/>trampoline<sp/>if<sp/>we<sp/>don&apos;t<sp/>have<sp/>the<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments.<sp/><sp/>FIXME:<sp/>multiple<sp/>threads;<sp/>WIN32?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>oldhandler<sp/>=<sp/>s_trampolines<sp/>[sig];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handler<sp/>==<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_IGN<sp/>||<sp/>handler<sp/>==<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_DFL)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>s_trampolines<sp/>[sig]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_trampolines<sp/>[sig]<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler<sp/>=<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>&amp;trampoline;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>old,<sp/>act;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>STDC::memset<sp/>(&amp;act,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(act));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>STDC::memset<sp/>(&amp;old,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(old));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>act.sa_flags<sp/>=<sp/>SA_RESTART<sp/>|<sp/>SA_SIGINFO;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>act.sa_sigaction<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset<sp/>(&amp;act.sa_mask);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blockMask)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>act.sa_mask<sp/>=<sp/>*blockMask;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction<sp/>(sig,<sp/>&amp;old,<sp/>0)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>act.sa_mask<sp/>=<sp/>old.sa_mask;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset<sp/>(&amp;act.sa_mask);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>isn&apos;t<sp/>much<sp/>we<sp/>can<sp/>do<sp/>to<sp/>check<sp/>the<sp/>return<sp/>status.<sp/><sp/>We<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>in<sp/>all<sp/>sorts<sp/>fragile<sp/>places<sp/>like<sp/>signal<sp/>handlers,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>those<sp/>are<sp/>not<sp/>the<sp/>place<sp/>for<sp/>throwing<sp/>exceptions<sp/>or<sp/>asserting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigaction<sp/>(sig,<sp/>&amp;act,<sp/>&amp;old)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_ERR;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>oldhandler<sp/>=<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>old.sa_sigaction;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>!<sp/>HAVE_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>::signal<sp/>(sig,<sp/>(<ref refid="d5/dc5/namespaceAthena_1abc64851a956e157687d05d9e59795de4" kindref="member">DummyHandlerType</ref>)<sp/>handler);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldhandler;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a76c5c303a2f6cbf9af04709666f0e47c" kindref="member">Signal::revert</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{<sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(sig,<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_DFL);<sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a7694b12f8ec856d8ece08fe5ffd46c3f" kindref="member">Signal::ignore</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{<sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(sig,<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/>SIG_IGN);<sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a641025898baba970dddb3806fe4d7024" kindref="member">Signal::block</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sense)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>threads<sp/>--<sp/>need<sp/>to<sp/>use<sp/>pthread_sigmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>sigset_t<sp/>mask;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset<sp/>(&amp;mask);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaddset<sp/>(&amp;mask,<sp/>sig);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a641025898baba970dddb3806fe4d7024" kindref="member">block</ref><sp/>(&amp;mask,<sp/>sense);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a641025898baba970dddb3806fe4d7024" kindref="member">Signal::block</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*mask,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sense)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>threads<sp/>--<sp/>need<sp/>to<sp/>use<sp/>pthread_sigmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>sigprocmask<sp/>(sense<sp/>?<sp/>SIG_BLOCK<sp/>:<sp/>SIG_UNBLOCK,<sp/>mask,<sp/>0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a4d98e5d67200d900fdc04abecb3d6911" kindref="member">Signal::mask</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*mask,<sp/>sigset_t<sp/>*old<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>threads<sp/>--<sp/>need<sp/>to<sp/>use<sp/>pthread_sigmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>sigprocmask<sp/>(SIG_SETMASK,<sp/>mask,<sp/>old);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"></codeline>
<codeline lineno="361"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a08098f4712adf303e1308740a647b6fb" kindref="member">Signal::raise</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_RAISE</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a08098f4712adf303e1308740a647b6fb" kindref="member">return ::raise</ref><sp/>(sig);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a15848d5bc08689bda47833527c74512d" kindref="member">return ::kill</ref><sp/>(getpid<sp/>(),<sp/>sig);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a15848d5bc08689bda47833527c74512d" kindref="member">Signal::kill</ref><sp/>(pid_t<sp/>process,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>sending<sp/>signals<sp/>to<sp/>threads?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a15848d5bc08689bda47833527c74512d" kindref="member">return ::kill</ref><sp/>(process,<sp/>sig);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_RT_SIGNALS</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(pid_t<sp/>process,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">sigval<sp/>v;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sival_int<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigqueue<sp/>(process,<sp/>sig,<sp/>v);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(pid_t<sp/></highlight><highlight class="comment">/*process*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sig*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*value<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_RT_SIGNALS</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(pid_t<sp/>process,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">sigval<sp/>v;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sival_ptr<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigqueue<sp/>(process,<sp/>sig,<sp/>v);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(pid_t<sp/></highlight><highlight class="comment">/*process*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sig*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="comment">/*value*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_RT_SIGNALS</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">queue</ref><sp/>(getpid<sp/>(),<sp/>sig,<sp/>value);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sig*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*value<sp/><sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_RT_SIGNALS</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">queue</ref><sp/>(getpid<sp/>(),<sp/>sig,<sp/>value);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a2320430a74b58f6a2180a794f3e6aaab" kindref="member">Signal::queue</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sig*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="comment">/*value*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="455"><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a9b3d452bd4db782ababb16856e502b4d" kindref="member">Signal::pending</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{<sp/>sigset_t<sp/>s;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a9b3d452bd4db782ababb16856e502b4d" kindref="member">pending</ref><sp/>(&amp;s);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sigismember<sp/>(&amp;s,<sp/>sig);<sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a9b3d452bd4db782ababb16856e502b4d" kindref="member">Signal::pending</ref><sp/>(sigset_t<sp/>*mask)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(mask);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>sigpending<sp/>(mask);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a9b3d452bd4db782ababb16856e502b4d" kindref="member">Signal::pending</ref><sp/>(sigset_t<sp/>*</highlight><highlight class="comment">/*mask*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a12d5227fb0b4627b25f75c80bbc97232" kindref="member">Signal::suspend</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*mask)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(mask);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>sigsuspend<sp/>(mask);</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a12d5227fb0b4627b25f75c80bbc97232" kindref="member">Signal::suspend</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*</highlight><highlight class="comment">/*mask*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="499"><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a618af8c53f3f8942b558f712e12865ef" kindref="member">Signal::wait</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msecs<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>-1<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>sigset_t<sp/>s;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>sigemptyset<sp/>(&amp;s);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>sigaddset<sp/>(&amp;s,<sp/>sig);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a618af8c53f3f8942b558f712e12865ef" kindref="member">wait</ref><sp/>(&amp;s,<sp/>info,<sp/>msecs)<sp/>==<sp/>sig;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor">#if<sp/>HAVE_POSIX_RT_SIGNALS</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a618af8c53f3f8942b558f712e12865ef" kindref="member">Signal::wait</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*mask,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>msecs<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>-1<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/><sp/><sp/>myinfo;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>timespec<sp/><sp/><sp/><sp/>ts;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msecs<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>sigwaitinfo<sp/>(mask,<sp/>&amp;myinfo);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>ts.tv_sec<sp/>=<sp/>msecs<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ts.tv_nsec<sp/>=<sp/>(msecs<sp/>%<sp/>1000)<sp/>*<sp/>1000000;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sigtimedwait<sp/>(mask,<sp/>&amp;myinfo,<sp/>&amp;ts)<sp/>==<sp/>-1<sp/>&amp;&amp;<sp/>errno<sp/>==<sp/>EINTR)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>deal<sp/>with<sp/>other<sp/>error<sp/>codes<sp/>(NB:<sp/>EAGAIN<sp/>==<sp/>timed<sp/>out)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>*info<sp/>=<sp/>myinfo;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myinfo.si_signo;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a618af8c53f3f8942b558f712e12865ef" kindref="member">Signal::wait</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigset_t<sp/>*</highlight><highlight class="comment">/*mask*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*</highlight><highlight class="comment">/*info<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*msecs<sp/>=<sp/>-1<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="555"><highlight class="comment">/*<sp/>Install<sp/>#quit()<sp/>as<sp/>the<sp/>handler<sp/>for<sp/>quitting-related<sp/>signals.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/>This<sp/>method<sp/>installs<sp/>#quit()<sp/>as<sp/>the<sp/>handler<sp/>for<sp/>quitting-related</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/>signals<sp/>such<sp/>as<sp/>SIGHUP,<sp/>SIGTERM<sp/>and<sp/>SIGQUIT.<sp/><sp/>Upon<sp/>signal<sp/>delivery</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/>@a<sp/>hook<sp/>will<sp/>be<sp/>invoked;<sp/>if<sp/>it<sp/>returns<sp/>@c<sp/>true,<sp/>#quit()<sp/>proceeds<sp/>to</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/>exit<sp/>by<sp/>re-raising<sp/>the<sp/>signal<sp/>(in<sp/>order<sp/>to<sp/>make<sp/>the<sp/>program&apos;s<sp/>exit</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/>status<sp/>reflect<sp/>the<sp/>signal<sp/>exit).<sp/><sp/>If<sp/>the<sp/>@a<sp/>hook<sp/>returns<sp/>@c<sp/>false,</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/><sp/>the<sp/>signal<sp/>is<sp/>effectively<sp/>ignored.<sp/><sp/>Note<sp/>however<sp/>that<sp/>certain</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/>options<sp/>to<sp/>#fatal()<sp/>also<sp/>cause<sp/>the<sp/>quit<sp/>hook<sp/>to<sp/>be<sp/>invoked.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">Signal::handleQuit<sp/>(QuitHook<sp/>hook<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hups<sp/>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGHUP</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hang<sp/>up<sp/>(lost<sp/>terminal<sp/>or<sp/>process<sp/>group<sp/>leader)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>SIGHUP,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGTERM</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>terminate<sp/>(e.g.<sp/>system<sp/>going<sp/>down)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>SIGTERM,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGQUIT</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>request<sp/>to<sp/>quit<sp/>and<sp/>leave<sp/>debuggable<sp/>state<sp/>(from<sp/>quit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>key<sp/>on<sp/>controlling<sp/>terminal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>SIGQUIT,</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hook)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>s_quitHook<sp/>=<sp/>hook;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/>0;<sp/>hups<sp/>[sig]<sp/>!=<sp/>-1;<sp/>++sig)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(hups<sp/>[sig],<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a98067924cbcf318e105b92c019acf33e" kindref="member">quit</ref>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a91247206fb7476bfbc60ba82aed77309" kindref="member">Signal::handleFatal</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*applicationName<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/><sp/><sp/><sp/>fd<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>IOFD_INVALID<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalHook<sp/><sp/><sp/>hook<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalReturn<sp/>mainreturn<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>0<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>options<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>FATAL_DEFAULT<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Provide<sp/>means<sp/>to<sp/>install<sp/>handlers<sp/>for<sp/>fatal<sp/>signals<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>application<sp/>has<sp/>requested<sp/>and<sp/>app<sp/>was<sp/>supposed<sp/>to<sp/>register<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handler<sp/>before<sp/>making<sp/>the<sp/>request?<sp/><sp/>(So<sp/>that<sp/>if<sp/>the<sp/>app<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>installed<sp/>for<sp/>some<sp/>reason,<sp/>an<sp/>internal<sp/>error<sp/>hook<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run?)<sp/><sp/>Such<sp/>fatal<sp/>signals<sp/>include:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGPIPE:<sp/>read<sp/>or<sp/>write<sp/>to<sp/>broken<sp/>pipe;<sp/>child<sp/>died</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(read<sp/>or<sp/>write<sp/>to<sp/>socket<sp/>with<sp/>ASYNC<sp/>io?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGLOST:<sp/>lost<sp/>a<sp/>resource<sp/>(e.g.,<sp/>lock<sp/>on<sp/>nfs<sp/>server<sp/>reboot)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGALRM:<sp/>interval<sp/>timer<sp/>elapsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGUSR1,<sp/>SIGUSR2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGPOLL:<sp/>pollable<sp/>streams<sp/>device<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGIO:<sp/>i/o<sp/>possible<sp/>(from<sp/>async<sp/>i/o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGVTALRM:<sp/>virtual<sp/>timer<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGPROF:<sp/>profiling<sp/>timer<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>SIGRTMIN<sp/>-<sp/>SIGRTMAX:<sp/>POSIX<sp/>real-time<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>of<sp/>these<sp/>the<sp/>application<sp/>should<sp/>probably<sp/>just<sp/>#block()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(e.g.<sp/>SIGPIPE).<sp/><sp/>Some<sp/>of<sp/>them<sp/>the<sp/>app<sp/>should<sp/>block<sp/>and<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>or<sp/>poll<sp/>for<sp/>events<sp/>(SIGPOLL,<sp/>SIGIO,<sp/>possibly<sp/>SIGALRM,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>real-time<sp/>signals<sp/>if<sp/>they<sp/>are<sp/>used).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hups<sp/>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGHUP</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGHUP,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hang<sp/>up<sp/>(lost<sp/>terminal<sp/>or<sp/>process<sp/>group<sp/>leader)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGTERM</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGTERM,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>terminate<sp/>(e.g.<sp/>system<sp/>going<sp/>down)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGQUIT</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGQUIT,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>user<sp/>request<sp/>to<sp/>quit<sp/>and<sp/>leave<sp/>debuggable</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>(from<sp/>quit<sp/>key<sp/>on<sp/>controlling</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>terminal)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fatals<sp/>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGFPE</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGFPE,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arithmetic<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGILL</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGILL,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>illegal<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="680"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGSEGV</highlight></codeline>
<codeline lineno="681"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGSEGV,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>illegal<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGBUS</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGBUS,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardware<sp/>exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGIOT</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGIOT,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>IOT<sp/>trap.<sp/><sp/>Before<sp/>SIGABRT<sp/>so<sp/>that<sp/>if<sp/>SIGIOT</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>SIGABRT<sp/>then<sp/>SIGABRT<sp/>overrides<sp/>SIGIOT;</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIGABRT<sp/>is<sp/>in<sp/>ISO<sp/>C<sp/>and<sp/>POSIX.1,<sp/>SIGIOT<sp/>is</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGABRT</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGABRT,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>abort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGTRAP</highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGTRAP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trace/breakpoint<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGEMT</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGEMT,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emulation<sp/>trap<sp/>(may<sp/>be<sp/>used<sp/>by<sp/>profiler?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGSYS</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGSYS,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>system<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGXCPU</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGXCPU,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cpu<sp/>time<sp/>limit<sp/>exceeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGXFSZ</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SIGXFSZ,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>file<sp/>size<sp/>limit<sp/>exceeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>-1</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>`strsignal&apos;<sp/>is<sp/>properly<sp/>initialised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a0adbe38fd6bad8af8f01df2ebadd226a" kindref="member">name</ref><sp/>(1);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>app<sp/>name<sp/>if<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(applicationName<sp/>&amp;&amp;<sp/>*applicationName)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>s_applicationName<sp/>=<sp/>applicationName;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Automatically<sp/>initialise<sp/>s_fatalFd<sp/>on<sp/>first<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalFd<sp/>==<sp/><ref refid="d1/dc7/SealCommon_8h_1a066e390969fb367df2540beba5bff9ca" kindref="member">IOFD_INVALID</ref>)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalFd<sp/>=<sp/>STDERR_HANDLE;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>fatal<sp/>output<sp/>fd<sp/>if<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>!=<sp/><ref refid="d1/dc7/SealCommon_8h_1a066e390969fb367df2540beba5bff9ca" kindref="member">IOFD_INVALID</ref>)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalFd<sp/>=<sp/>fd;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>we<sp/>know<sp/>the<sp/>fd,<sp/>setup<sp/>a<sp/>callback<sp/>for<sp/>dumping<sp/>shared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>libraries<sp/>via<sp/>#SignalDumpLibs.<sp/><sp/>This<sp/>avoids<sp/>having<sp/>to<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>for<sp/>the<sp/>callback<sp/>implementation<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>signal,<sp/>and<sp/>on<sp/>the<sp/>other<sp/>hand<sp/>avoids<sp/>a<sp/>global<sp/>object<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>not<sp/>be<sp/>initialised<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>SignalDumpCallback;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>SignalDumpCallback<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SharedLibrary::InfoHandler</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CreateCallback<sp/>(&amp;SignalDumpLibs,<sp/>s_fatalFd));</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>hooks<sp/>if<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hook)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalHook<sp/>=<sp/>hook;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mainreturn)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalReturn<sp/>=<sp/>mainreturn;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>the<sp/>new<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalOptions<sp/>=<sp/>options;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Signal::fatal()<sp/>requires<sp/>this,<sp/>otherwise<sp/>weird<sp/>things<sp/>can<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Programs<sp/>not<sp/>wanting<sp/>to<sp/>return<sp/>to<sp/>main<sp/>should<sp/>set<sp/>FATAL_AUTO_EXIT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(s_fatalReturn<sp/>||<sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a150e4c8e320da5b8a0690973b287890e" kindref="member">FATAL_AUTO_EXIT</ref>));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Install<sp/>signal<sp/>handlers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a369e40f96220b4e610c171a03e09bde1" kindref="member">FATAL_ON_QUIT</ref>)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/>0;<sp/>hups<sp/>[sig]<sp/>!=<sp/>-1;<sp/>++sig)</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(hups<sp/>[sig],<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">fatal</ref>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/>0;<sp/>fatals<sp/>[sig]<sp/>!=<sp/>-1;<sp/>++sig)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(fatals<sp/>[sig],<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">fatal</ref>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGINT</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>key<sp/>from<sp/>controlling<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1afbce7583ec5181b33546721b78fe8f01" kindref="member">FATAL_ON_INT</ref>)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(SIGINT,<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">fatal</ref>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SIGUSR1</highlight></codeline>
<codeline lineno="767"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>program-defined<sp/>signals<sp/>SIGUSR1<sp/>and<sp/>SIGUSR2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1aadde66d635b299a4f8f88d222855ce3b" kindref="member">USR1_DUMP_CORE</ref>)</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(SIGUSR1,<sp/>(<ref refid="d9/d58/classAthena_1_1Signal_1a165a8a731e1c838d8fcbdc8e8a90672f" kindref="member">HandlerType</ref>)<sp/><ref refid="d4/d62/classAthena_1_1DebugAids_1a5d2d4712ef013938c0acca646445371c" kindref="member">DebugAids::coredump</ref>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>SetUnhandledExceptionFilter<sp/>(&amp;SEHFatal);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a98067924cbcf318e105b92c019acf33e" kindref="member">Signal::quit</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Quit<sp/>if<sp/>no<sp/>hook<sp/>has<sp/>been<sp/>registered:<sp/>we<sp/>are<sp/>coming<sp/>in<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FATAL_AUTO_EXIT<sp/>in<sp/>fatal<sp/>and<sp/>the<sp/>application<sp/>did<sp/>not<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handleQuit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>s_quitHook<sp/>||<sp/>(*s_quitHook)<sp/>(sig,<sp/>info,<sp/>x))</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reactivate<sp/>the<sp/>default<sp/>signal<sp/>handling<sp/>behaviour<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>signal,<sp/>which<sp/>is<sp/>to<sp/>terminate<sp/>the<sp/>application<sp/>one<sp/>way<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>other.<sp/><sp/>Then<sp/>exit<sp/>through<sp/>the<sp/>signal.<sp/><sp/>This<sp/>makes<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>exit<sp/>status<sp/>correct.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a76c5c303a2f6cbf9af04709666f0e47c" kindref="member">revert</ref><sp/>(sig);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">raise</highlight><highlight class="normal"><sp/>(sig);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">Signal::fatal</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x)</highlight></codeline>
<codeline lineno="880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(s_fatalReturn<sp/>||<sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a150e4c8e320da5b8a0690973b287890e" kindref="member">FATAL_AUTO_EXIT</ref>));</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinstall<sp/>the<sp/>handler<sp/>for<sp/>poor<sp/>SVR4<sp/>systems<sp/>that<sp/>reset<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handlers<sp/>upon<sp/>delivery.<sp/><sp/>I<sp/>doubt<sp/>this<sp/>code<sp/>ever<sp/>gets<sp/>run<sp/>on<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>without<sp/>sigaction,<sp/>but<sp/>let&apos;s<sp/>be<sp/>ultracorrect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb0930a18360698b9c20245fa140eba2" kindref="member">handle</ref><sp/>(sig,<sp/>&amp;<ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">fatal</ref>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="889"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unblock<sp/>the<sp/>signal<sp/>itself<sp/>so<sp/>that<sp/>if<sp/>we<sp/>get<sp/>this<sp/>again,<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enter<sp/>the<sp/>handler<sp/>again.<sp/><sp/>Otherwise<sp/>if<sp/>the<sp/>user&apos;s<sp/>hook<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fatalDump<sp/>has<sp/>trouble,<sp/>we&apos;ll<sp/>hang<sp/>until<sp/>someone<sp/>sends<sp/>us<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>signal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a641025898baba970dddb3806fe4d7024" kindref="member">block</ref><sp/>(sig,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>aren&apos;t<sp/>going<sp/>too<sp/>deep<sp/>in<sp/>fatal<sp/>handlers.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>a<sp/>little<sp/>nesting<sp/>as<sp/>sometimes<sp/>the<sp/>handlers<sp/>gets<sp/>tangled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>producing<sp/>a<sp/>dump,<sp/>but<sp/>after<sp/>an<sp/>extra<sp/>signal<sp/>can<sp/>finish.<sp/><sp/>If</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>nesting<sp/>exceeds<sp/>our<sp/>limit,<sp/>we<sp/>give<sp/>up<sp/>and<sp/>exit<sp/>with<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>signal<sp/>behaviour:<sp/>no<sp/>hooks<sp/>any<sp/>more,<sp/>they&apos;ve<sp/>had<sp/>their<sp/>chance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++s_inFatal<sp/>&gt;<sp/>4)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a76c5c303a2f6cbf9af04709666f0e47c" kindref="member">revert</ref><sp/>(sig);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">raise</highlight><highlight class="normal"><sp/>(sig);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>signal<sp/>is<sp/>fatal.<sp/><sp/>If<sp/>so,<sp/>indicate<sp/>we&apos;ve<sp/>crashed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a29ed2239824de7084eec2096921df121" kindref="member">fatal</ref><sp/>=<sp/>(sig<sp/>!=<sp/>SIGINT)<sp/>||<sp/>(s_fatalOptions<sp/>&amp;<sp/>FATAL_ON_INT);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fatal)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>s_crashed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>core<sp/>file<sp/>if<sp/>requested<sp/>(without<sp/>interrupting<sp/>the<sp/>program)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haveCore<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_inFatal<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>fatal<sp/>&amp;&amp;<sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a6798ead5f4386eed186a5e8dd885e00f" kindref="member">FATAL_DUMP_CORE</ref>))</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d62/classAthena_1_1DebugAids_1a5d2d4712ef013938c0acca646445371c" kindref="member">DebugAids::coredump</ref><sp/>(sig);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>haveCore<sp/>=<sp/>(::stat<sp/>(</highlight><highlight class="stringliteral">&quot;core&quot;</highlight><highlight class="normal">,<sp/>&amp;st)<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>S_ISREG<sp/>(st.st_mode)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>st.st_size<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>are<sp/>done<sp/>--<sp/>if<sp/>so,<sp/>commit<sp/>a<sp/>suicide,<sp/>it<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>painless.<sp/><sp/>s_fatalHook<sp/>and<sp/>s_quitHook<sp/>ought<sp/>to<sp/>be<sp/>protected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>infinitely<sp/>looping<sp/>signals,<sp/>either<sp/>using<sp/>#fatalLevel()<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deregistering<sp/>themselves<sp/>on<sp/>the<sp/>first<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_inFatal<sp/>&gt;<sp/>1<sp/>||<sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a150e4c8e320da5b8a0690973b287890e" kindref="member">FATAL_AUTO_EXIT</ref>))</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalHook</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(*s_fatalHook)<sp/>(haveCore<sp/>?<sp/>-sig<sp/>:<sp/>sig,<sp/>info,<sp/>x)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a5b6e599feec0e6ea2e5d204c7accf7ab" kindref="member">fatalDump</ref><sp/>(haveCore<sp/>?<sp/>-sig<sp/>:<sp/>sig,<sp/>info,<sp/>x))</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Suicide:<sp/>re-raise<sp/>the<sp/>signal;<sp/>we&apos;ll<sp/>die<sp/>as<sp/>we<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a98067924cbcf318e105b92c019acf33e" kindref="member">quit</ref><sp/>(sig,<sp/>info,<sp/>x);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>possible<sp/>infinite<sp/>recursion...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s_fatalReturn)<sp/></highlight><highlight class="comment">//<sp/>sss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abort();<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>main<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>--s_inFatal;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>(*s_fatalReturn)<sp/>(haveCore<sp/>?<sp/>-sig<sp/>:<sp/>sig,<sp/>info,<sp/>x);</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a35d052097f8387d33e7b74d63008a3a3" kindref="member">Signal::describe</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*desc;<sp/>}<sp/>infos<sp/>[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="956"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_USER,<sp/></highlight><highlight class="stringliteral">&quot;user<sp/>sent:<sp/>kill,<sp/>sigsend<sp/>or<sp/>raise&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>SI_KERNEL</highlight></codeline>
<codeline lineno="958"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_KERNEL,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kernel&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="960"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_QUEUE,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sigqueue&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_TIMER,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timer<sp/>expired&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_MESGQ,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mesq<sp/>state<sp/>changed&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_ASYNCIO,<sp/><sp/></highlight><highlight class="stringliteral">&quot;AIO<sp/>completed&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>SI_SIGIO<sp/>//<sp/>not<sp/>solaris</highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>SI_SIGIO,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;queued<sp/>SIGIO&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="967"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_NOOP<sp/>//<sp/>darwin</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_NOOP,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;noop&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_ILLOPC,<sp/><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>opcode&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_ILLOPN<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_ILLOPN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>operand&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_ILLADR<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_ILLADR,<sp/><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>addressing<sp/>mode&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_ILLTRP,<sp/><sp/></highlight><highlight class="stringliteral">&quot;illegal<sp/>trap&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_PRVOPC,<sp/><sp/></highlight><highlight class="stringliteral">&quot;privileged<sp/>opcode&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_PRVREG<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_PRVREG,<sp/><sp/></highlight><highlight class="stringliteral">&quot;privileged<sp/>register&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_COPROC<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_COPROC,<sp/><sp/></highlight><highlight class="stringliteral">&quot;coprocessor<sp/>error&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>ILL_BADSTK<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/>ILL_BADSTK,<sp/><sp/></highlight><highlight class="stringliteral">&quot;internal<sp/>stack<sp/>error&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>FPE_NOOP<sp/>//<sp/>darwin</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_NOOP,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;noop&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>FPE_INTDIV<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="994"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_INTDIV,<sp/><sp/></highlight><highlight class="stringliteral">&quot;integer<sp/>divide<sp/>by<sp/>zero&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>FPE_INTOVF<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_INTOVF,<sp/><sp/></highlight><highlight class="stringliteral">&quot;integer<sp/>overflow&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTDIV,<sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>divide<sp/>by<sp/>zero&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTOVF,<sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>overflow&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTUND,<sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>underflow&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTRES,<sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>inexact<sp/>result&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTINV,<sp/><sp/></highlight><highlight class="stringliteral">&quot;floating<sp/>point<sp/>invalid<sp/>operation&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>FPE_FLTSUB<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/>FPE_FLTSUB,<sp/><sp/></highlight><highlight class="stringliteral">&quot;subscript<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1007"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>SEGV_NOOP<sp/>//<sp/>darwin</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGSEGV,<sp/>SEGV_NOOP,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;noop&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGSEGV,<sp/>SEGV_MAPERR,<sp/></highlight><highlight class="stringliteral">&quot;address<sp/>not<sp/>mapped<sp/>to<sp/>object&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGSEGV,<sp/>SEGV_ACCERR,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>permissions<sp/>for<sp/>mapped<sp/>object&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BUS_NOOP<sp/>//<sp/>darwin</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGBUS,<sp/><sp/>BUS_NOOP,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;noop&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGBUS,<sp/><sp/>BUS_ADRALN,<sp/><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>address<sp/>alignment&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BUS_ADRERR<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1019"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGBUS,<sp/><sp/>BUS_ADRERR,<sp/><sp/></highlight><highlight class="stringliteral">&quot;non-existent<sp/>physical<sp/>address&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>BUS_OBJERR<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGBUS,<sp/><sp/>BUS_OBJERR,<sp/><sp/></highlight><highlight class="stringliteral">&quot;object<sp/>specific<sp/>hardware<sp/>error&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>TRAP_BRKPT<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGTRAP,<sp/>TRAP_BRKPT,<sp/><sp/></highlight><highlight class="stringliteral">&quot;process<sp/>break<sp/>point&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>TRAP_TRACE<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGTRAP,<sp/>TRAP_TRACE,<sp/><sp/></highlight><highlight class="stringliteral">&quot;process<sp/>trace<sp/>trap&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1031"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>CLD_NOOP<sp/>//<sp/>darwin</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_NOOP,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;noop&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1035"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_EXITED,<sp/><sp/></highlight><highlight class="stringliteral">&quot;child<sp/>has<sp/>exited&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_KILLED,<sp/><sp/></highlight><highlight class="stringliteral">&quot;child<sp/>was<sp/>killed&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_DUMPED,<sp/><sp/></highlight><highlight class="stringliteral">&quot;child<sp/>terminated<sp/>abnormally&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_TRAPPED,<sp/></highlight><highlight class="stringliteral">&quot;traced<sp/>child<sp/>has<sp/>trapped&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_STOPPED,<sp/></highlight><highlight class="stringliteral">&quot;child<sp/>has<sp/>stopped&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGCHLD,<sp/>CLD_CONTINUED,</highlight><highlight class="stringliteral">&quot;stopped<sp/>child<sp/>has<sp/>continued&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>SIGPOLL<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_IN,<sp/></highlight><highlight class="stringliteral">&quot;data<sp/>input<sp/>available&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_OUT,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output<sp/>buffers<sp/>available&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_MSG,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input<sp/>message<sp/>available&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_ERR,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;i/o<sp/>error&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_PRI,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;high<sp/>priority<sp/>input<sp/>available&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>SIGPOLL,<sp/>POLL_HUP,<sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;device<sp/>disconnected&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="1051"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>infos<sp/>[i].desc;<sp/>++i)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((infos<sp/>[i].sig<sp/>==<sp/>-1<sp/>||<sp/>infos<sp/>[i].sig<sp/>==<sp/>sig)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>infos<sp/>[i].code<sp/>==<sp/>code)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>infos<sp/>[i].desc;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;*unknown<sp/>reason*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1aa686ec513eec1f5f9270a3093b536bcd" kindref="member">Signal::dumpInfo</ref><sp/>(<ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/>fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>info)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="1074"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DOCODE(x)<sp/>case<sp/>x:<sp/>name<sp/>=<sp/>#x</highlight></codeline>
<codeline lineno="1075"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>siginfo_t<sp/>==<sp/>EXCEPTION_RECORD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="d9/d58/classAthena_1_1Signal_1a0adbe38fd6bad8af8f01df2ebadd226a" kindref="member">name</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(info-&gt;ExceptionCode)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_ABANDONED_WAIT_0);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_ACCESS_VIOLATION);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_ARRAY_BOUNDS_EXCEEDED);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_BREAKPOINT);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_CONTROL_C_EXIT);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_DATATYPE_MISALIGNMENT);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_DENORMAL_OPERAND);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_DIVIDE_BY_ZERO);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_INEXACT_RESULT);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_INVALID_OPERATION);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_OVERFLOW);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_STACK_CHECK);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_FLOAT_UNDERFLOW);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_GUARD_PAGE_VIOLATION);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_ILLEGAL_INSTRUCTION);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_INTEGER_DIVIDE_BY_ZERO);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_INTEGER_OVERFLOW);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_INVALID_DISPOSITION);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_IN_PAGE_ERROR);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_NONCONTINUABLE_EXCEPTION);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_NO_MEMORY);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_PENDING);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_PRIVILEGED_INSTRUCTION);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_SINGLE_STEP);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_STACK_OVERFLOW);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_TIMEOUT);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_USER_APC);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>DOCODE(STATUS_WAIT_0);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>DWORD<sp/>ExceptionCode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>DWORD<sp/>ExceptionFlags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>EXCEPTION_RECORD<sp/>*ExceptionRecord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>PVOID<sp/>ExceptionAddress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>DWORD<sp/>NumberParameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-&gt;<sp/>DWORD<sp/>ExceptionInfo<sp/>[MAX_PARAMETERS<sp/>(15)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;Exception:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>name));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;Exception<sp/>%lu\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;ExceptionCode));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>addr<sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal">,<sp/>info-&gt;ExceptionAddress));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>should<sp/>always<sp/>be<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>signo<sp/><sp/>=<sp/>%d,<sp/>errno<sp/>=<sp/>%d,<sp/>code<sp/>=<sp/>%d<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;si_signo,<sp/>info-&gt;si_errno,<sp/>info-&gt;si_code,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a35d052097f8387d33e7b74d63008a3a3" kindref="member">describe</ref><sp/>(sig,<sp/>info-&gt;si_code)));</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>set<sp/>if<sp/>the<sp/>signal<sp/>was<sp/>sent<sp/>by<sp/>kill,<sp/>POSIX<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>or<sp/>SIGCHLD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>pid<sp/><sp/><sp/><sp/>=<sp/>%ld,<sp/>uid<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>info-&gt;si_pid,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>info-&gt;si_uid));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Child<sp/>status<sp/>for<sp/>SIGCHLD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>==<sp/>SIGCHLD)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>temporary<sp/>variables,<sp/>as<sp/>MacOS/clang<sp/>doesn&apos;t<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accept<sp/>the<sp/>on-the-fly<sp/>conversion<sp/>of<sp/>the<sp/>following<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>printing<sp/>some<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>info-&gt;si_status;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>utime<sp/>=<sp/>info-&gt;si_utime;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stime<sp/>=<sp/>info-&gt;si_stime;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>status<sp/>=<sp/>%ld,<sp/>utime<sp/>=<sp/>%ld,<sp/>stime<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status,<sp/>utime,<sp/>stime));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>set<sp/>if<sp/>the<sp/>POSIX<sp/>signal<sp/>sender<sp/>passed<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>value<sp/><sp/>=<sp/>(%d,<sp/>%p)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info-&gt;si_int,<sp/>info-&gt;si_ptr));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>interesting<sp/>address<sp/>for<sp/>memory<sp/>faults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>==<sp/>SIGILL<sp/>||<sp/>sig<sp/>==<sp/>SIGFPE<sp/>||<sp/>sig<sp/>==<sp/>SIGSEGV<sp/>||<sp/>sig<sp/>==<sp/>SIGBUS)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>addr<sp/><sp/><sp/>=<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>info-&gt;si_addr));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>SIGPOLL<sp/>//<sp/>not<sp/>darwin</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIGPOLL<sp/>status<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>==<sp/>SIGPOLL)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>band<sp/><sp/><sp/>=<sp/>%ld,<sp/>fd<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>info-&gt;si_band,<sp/>info-&gt;si_fd));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="1162"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1ab3650e5ddb5bdc899edac43d18446779" kindref="member">Signal::dumpMemory</ref><sp/>(<ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/>fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>32;<sp/>++j,<sp/>++i)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>+=<sp/>sprintf<sp/>(buf<sp/>+<sp/>m,<sp/></highlight><highlight class="stringliteral">&quot;%s%02x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>%<sp/>4<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>data)<sp/>[i]));</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>m);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1acb9b9ecebefba6d45ac6ec5e019b133b" kindref="member">Signal::dumpContext</ref><sp/>(<ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref><sp/>fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_WIN32<sp/>&amp;&amp;<sp/>defined<sp/>_M_IX86</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CONTEXT<sp/>*uc<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">CONTEXT<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(context);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>eip:<sp/>%04lx:%08lx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eflags:<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>eax:<sp/>%08lx<sp/><sp/><sp/>ebx:<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>ecx:<sp/>%08lx<sp/><sp/><sp/>edx:<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>esi:<sp/>%08lx<sp/><sp/><sp/>edi:<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>ebp:<sp/>%08lx<sp/><sp/><sp/>esp:<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>ds:<sp/>%04lx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es:<sp/>%04lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>fs:<sp/>%04lx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss:<sp/>%04lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;SegCs,<sp/>uc-&gt;Eip,<sp/>uc-&gt;EFlags,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;Eax,<sp/>uc-&gt;Ebx,<sp/>uc-&gt;Ecx,<sp/>uc-&gt;Edx,</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;Esi,<sp/>uc-&gt;Edi,<sp/>uc-&gt;Ebp,<sp/>uc-&gt;Esp,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;SegDs,<sp/>uc-&gt;SegEs,<sp/>uc-&gt;SegFs,<sp/>uc-&gt;SegSs));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>FPU:<sp/><sp/>control<sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/><sp/><sp/><sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%04lx:%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/><sp/>=<sp/>%04lx:%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/><sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.ControlWord,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.StatusWord,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.TagWord,</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.ErrorSelector,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.ErrorOffset,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.DataSelector,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.DataOffset,</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.Cr0NpxState));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>%%fp%d<sp/>=<sp/>[%02x%02x:%02x%02x%02x%02x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%02x%02x%02x%02x]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>0],</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>1],</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>2],</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>3],</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>4],</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>5],</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>6],</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>7],</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>8],</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;FloatSave.RegisterArea<sp/>[i<sp/>*<sp/>10<sp/>+<sp/>9]));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(fd,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>how<sp/>much<sp/>of<sp/>this<sp/>is<sp/>defined<sp/>in<sp/>POSIX<sp/>or<sp/>ABIs?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ucontext_t<sp/>*uc<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ucontext_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(context);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>mcontext_t<sp/>*mc<sp/>=<sp/>&amp;uc-&gt;uc_mcontext;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>stack<sp/><sp/>=<sp/>(%x,<sp/>%x,<sp/>%p)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;uc_stack.ss_flags,</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(uc-&gt;uc_stack.ss_size),</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uc-&gt;uc_stack.ss_sp));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>__i386<sp/>&amp;&amp;<sp/>defined<sp/>__linux</highlight></codeline>
<codeline lineno="1249"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined<sp/>REG_CS<sp/>&amp;&amp;<sp/>defined<sp/>CS</highlight></codeline>
<codeline lineno="1250"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_CS<sp/><sp/><sp/><sp/>CS</highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_DS<sp/><sp/><sp/><sp/>DS</highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_ES<sp/><sp/><sp/><sp/>ES</highlight></codeline>
<codeline lineno="1253"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_FS<sp/><sp/><sp/><sp/>FS</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_SS<sp/><sp/><sp/><sp/>SS</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EIP<sp/><sp/><sp/>EIP</highlight></codeline>
<codeline lineno="1256"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EFL<sp/><sp/><sp/>EFL</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EAX<sp/><sp/><sp/>EAX</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EBX<sp/><sp/><sp/>EBX</highlight></codeline>
<codeline lineno="1259"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_ECX<sp/><sp/><sp/>ECX</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EDX<sp/><sp/><sp/>EDX</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_ESI<sp/><sp/><sp/>ESI</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EDI<sp/><sp/><sp/>EDI</highlight></codeline>
<codeline lineno="1263"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_EBP<sp/><sp/><sp/>EBP</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_ESP<sp/><sp/><sp/>ESP</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_UESP<sp/><sp/>UESP</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_TRAPNO<sp/><sp/><sp/><sp/>TRAPNO</highlight></codeline>
<codeline lineno="1267"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>REG_ERR<sp/><sp/><sp/>ERR</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>eip:<sp/>%04x:%08x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eflags:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>eax:<sp/>%08x<sp/><sp/><sp/>ebx:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>ecx:<sp/>%08x<sp/><sp/><sp/>edx:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>esi:<sp/>%08x<sp/><sp/><sp/>edi:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>ebp:<sp/>%08x<sp/><sp/><sp/>esp:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/>ds:<sp/>%04x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>es:<sp/>%04x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs:<sp/>%04x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss:<sp/>%04x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_CS]<sp/>&amp;<sp/>0xffff,<sp/>mc-&gt;gregs<sp/>[REG_EIP],</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_EFL],</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_EAX],<sp/>mc-&gt;gregs<sp/>[REG_EBX],</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_ECX],<sp/>mc-&gt;gregs<sp/>[REG_EDX],</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_ESI],<sp/>mc-&gt;gregs<sp/>[REG_EDI],</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_EBP],<sp/>mc-&gt;gregs<sp/>[REG_ESP],</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_DS]<sp/>&amp;<sp/>0xffff,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_ES]<sp/>&amp;<sp/>0xffff,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_FS]<sp/>&amp;<sp/>0xffff,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_SS]<sp/>&amp;<sp/>0xffff));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n\n<sp/><sp/>signal<sp/>esp:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>trap:<sp/>%d/%d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>oldmask:<sp/>%08lx<sp/><sp/><sp/>cr2:<sp/>%08lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_UESP],</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;gregs<sp/>[REG_TRAPNO],<sp/>mc-&gt;gregs<sp/>[REG_ERR],</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;oldmask,<sp/>mc-&gt;cr2));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mc-&gt;fpregs)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>FPU:<sp/><sp/>control<sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/><sp/><sp/><sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>%04lx:%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/><sp/><sp/><sp/>=<sp/>%04lx:%08lx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/><sp/><sp/>=<sp/>%08lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;cw,<sp/>mc-&gt;fpregs-&gt;sw,<sp/>mc-&gt;fpregs-&gt;tag,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;cssel<sp/>&amp;<sp/>0xffff,<sp/>mc-&gt;fpregs-&gt;ipoff,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;datasel<sp/>&amp;<sp/>0xffff,<sp/>mc-&gt;fpregs-&gt;dataoff,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;status));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>%%fp%d<sp/>=<sp/>[%04hx:%04hx%04hx%04hx%04hx]&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;_st<sp/>[i].exponent,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;_st<sp/>[i].significand<sp/>[0],</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;_st<sp/>[i].significand<sp/>[1],</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;_st<sp/>[i].significand<sp/>[2],</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc-&gt;fpregs-&gt;_st<sp/>[i].significand<sp/>[3]));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__APPLE__<sp/>&amp;&amp;<sp/>defined<sp/>__ppc__</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>dar:<sp/>%08lx<sp/><sp/><sp/>dsisr:<sp/>%08lx<sp/><sp/>exception:<sp/>%08lx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;es.dar,<sp/>(*mc)-&gt;es.dsisr,<sp/>(*mc)-&gt;es.exception));</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>srr0:<sp/>%08x<sp/><sp/>srr1:<sp/>%08x<sp/><sp/><sp/>cr:<sp/>%08x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xer:<sp/>%08x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>lr:<sp/>%08x<sp/><sp/><sp/><sp/>ctr:<sp/>%08x<sp/><sp/><sp/><sp/>vrsave:<sp/>%08x<sp/><sp/><sp/><sp/><sp/>fpscr:<sp/>%08x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;ss.srr0,<sp/>(*mc)-&gt;ss.srr1,<sp/>(*mc)-&gt;ss.cr,<sp/>(*mc)-&gt;ss.xer,</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;ss.lr,<sp/>(*mc)-&gt;ss.ctr,<sp/>(*mc)-&gt;ss.vrsave,<sp/>(*mc)-&gt;fs.fpscr));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>vrvalid:<sp/>%08x<sp/><sp/>vscr:<sp/>%08lx:%08lx:%08lx:%08lx\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;vs.save_vrvalid,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;vs.save_vscr<sp/>[0],<sp/>(*mc)-&gt;vs.save_vscr<sp/>[1],</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;vs.save_vscr<sp/>[2],<sp/>(*mc)-&gt;vs.save_vscr<sp/>[3]));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*regs<sp/>=<sp/>&amp;(*mc)-&gt;ss.r0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i<sp/>+=<sp/>4)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>r%-2d<sp/><sp/>%08x<sp/><sp/><sp/>r%-2d<sp/><sp/>%08x<sp/><sp/><sp/>r%-2d<sp/><sp/>%08x<sp/><sp/><sp/>r%-2d<sp/><sp/>%08x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/>regs<sp/>[i],<sp/>i+1,<sp/>regs<sp/>[i+1],<sp/>i+2,<sp/>regs<sp/>[i+2],<sp/>i+3,<sp/>regs<sp/>[i+3]));</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>fp%-2d<sp/>%016qx<sp/>(%f)&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)<sp/>&amp;(*mc)-&gt;fs.fpregs<sp/>[i],</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;fs.fpregs<sp/>[i]));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>vr%-2d<sp/>%08lx:%08lx:%08lx:%08lx&quot;</highlight><highlight class="normal">,<sp/>i,</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;vs.save_vr[i][0],<sp/>(*mc)-&gt;vs.save_vr[i][1],</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mc)-&gt;vs.save_vr[i][2],<sp/>(*mc)-&gt;vs.save_vr[i][3]));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__sun</highlight></codeline>
<codeline lineno="1349"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NGREG;<sp/>i++)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/>buf,<sp/>sprintf<sp/>(buf,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/><sp/>%%r%02d<sp/>=<sp/>%08x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>%<sp/>4<sp/>==<sp/>0<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>mc-&gt;gregs<sp/>[i]));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1ab3650e5ddb5bdc899edac43d18446779" kindref="member">dumpMemory</ref><sp/>(fd,<sp/>buf,<sp/>mc,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(*mc));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>__i386<sp/>&amp;&amp;<sp/>__linux,<sp/>__sun,<sp/>other</highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>write<sp/>(fd,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>HAVE_POSIX_SIGNALS</highlight></codeline>
<codeline lineno="1358"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a5b6e599feec0e6ea2e5d204c7accf7ab" kindref="member">Signal::fatalDump</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig,<sp/><ref refid="dc/dbc/structsiginfo__t" kindref="compound">siginfo_t</ref><sp/>*info,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*extra)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf<sp/>[SIGNAL_MESSAGE_BUFSIZE];<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>[256],<sp/>%.200s<sp/>below<sp/>is<sp/>connected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haveCore<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>-sig;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>haveCore<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1ac52e36621c04bb27790397c43dba6343" kindref="member">FATAL_DUMP_SIG</ref>)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_applicationName)</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/>s_applicationName,</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STDC::strlen<sp/>(s_applicationName));</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/>buf,</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf<sp/>(buf,<sp/>SIGNAL_MESSAGE_BUFSIZE,<sp/></highlight><highlight class="stringliteral">&quot;(pid=%ld<sp/>ppid=%ld)<sp/>received<sp/>fatal<sp/>signal<sp/>%d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(%.100s)%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ProcessInfo__pid<sp/>(),<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>ProcessInfo__ppid<sp/>(),<sp/></highlight><highlight class="comment">//<sp/>wlav<sp/>::<sp/>-&gt;<sp/>__<sp/>(x2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig,<sp/>name<sp/>(sig),<sp/>haveCore<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(core<sp/>dumped)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/>buf,<sp/>sprintf(buf,</highlight><highlight class="stringliteral">&quot;signal<sp/>context:\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1aa686ec513eec1f5f9270a3093b536bcd" kindref="member">dumpInfo</ref><sp/>(s_fatalFd,<sp/>buf,<sp/>sig,<sp/>info);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1a09b1ac53de90bda7a0619f730531767b" kindref="member">FATAL_DUMP_CONTEXT</ref>)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1acb9b9ecebefba6d45ac6ec5e019b133b" kindref="member">dumpContext</ref><sp/>(s_fatalFd,<sp/>buf,<sp/>extra);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1adf0c99c485898916f19e5f3b20a92855" kindref="member">FATAL_DUMP_STACK</ref>)</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/>buf,<sp/>sprintf(buf,</highlight><highlight class="stringliteral">&quot;\nstack<sp/>trace:\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d62/classAthena_1_1DebugAids_1a81159b3d39447c2d9b939bd43d0d6066" kindref="member">DebugAids::stacktrace</ref><sp/>(s_fatalFd);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalOptions<sp/>&amp;<sp/><ref refid="d9/d58/classAthena_1_1Signal_1aa774d944e7b551a7f9e2a4ad7d3558b6" kindref="member">FATAL_DUMP_LIBS</ref>)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>MYWRITE<sp/>(s_fatalFd,<sp/>buf,<sp/>sprintf(buf,</highlight><highlight class="stringliteral">&quot;\nshared<sp/>libraries<sp/>present:\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{<sp/><ref refid="d9/d80/classAthena_1_1SharedLibrary_1a5ffc686eff9a53c6fbe6c4448352a8e6" kindref="member">SharedLibrary::loaded</ref><sp/>(*SignalDumpCallback);<sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{<sp/>;<sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><ref refid="d1/dc7/SealCommon_8h_1a98d936fe848403f33ff9cebfc9a38597" kindref="member">IOFD</ref></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a531516a7bafb85ada87cc13df42be6c9" kindref="member">Signal::handleFatalFd</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Automatically<sp/>initialise<sp/>on<sp/>first<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_fatalFd<sp/>==<sp/><ref refid="d1/dc7/SealCommon_8h_1a066e390969fb367df2540beba5bff9ca" kindref="member">IOFD_INVALID</ref>)</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>s_fatalFd<sp/>=<sp/>STDERR_HANDLE;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_fatalFd;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1ad4933f5dea26508794985dc36879fd4f" kindref="member">Signal::FatalHook</ref></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1acf9c12a42518c098bcdc03e2e1ec164a" kindref="member">Signal::handleFatalHook</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_fatalHook;<sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a0a1d20177cf76b6f120d8f70fd547414" kindref="member">Signal::FatalReturn</ref></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a058d561130784cb3ff06f944dd2a642c" kindref="member">Signal::handleFatalReturn</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_fatalReturn;<sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1aab22be0d7aa1e7034b2de5f158c74533" kindref="member">Signal::handleFatalOptions</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_fatalOptions;<sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1a580d4d8dab36af1b92760624a314fe10" kindref="member">Signal::QuitHook</ref></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1ae09161d0e01449d88a870c9ce33e48ab" kindref="member">Signal::handleQuitHook</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_quitHook;<sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1ae19a24e2785bf4313373d693270a0318" kindref="member">Signal::fatalLevel</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_inFatal;<sp/>}</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><ref refid="d9/d58/classAthena_1_1Signal_1acb413f9b908ec38d19007f699679f8ab" kindref="member">Signal::crashed</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_crashed;<sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//}<sp/>//<sp/>namespace<sp/>seal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Athena<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wlav</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d0/dc2/SealSignal_8h_1a332ba8e2b46faab7c421182b9c597091" kindref="member">CxxUtils_installFatalHandler</ref>()</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/classAthena_1_1Signal_1a91247206fb7476bfbc60ba82aed77309" kindref="member">Athena::Signal::handleFatal</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/SealSignal.cxx"/>
  </compounddef>
</doxygen>
