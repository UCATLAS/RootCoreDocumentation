<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d88/classCxxUtils_1_1pointer__list" kind="class" prot="public">
    <compoundname>CxxUtils::pointer_list</compoundname>
    <basecompoundref refid="d1/d6f/classCxxUtils_1_1pointer__list__base" prot="public" virt="non-virtual">CxxUtils::pointer_list_base</basecompoundref>
    <includes refid="df/d5b/pointer__list_8h" local="no">pointer_list.h</includes>
    <innerclass refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" prot="public">CxxUtils::pointer_list::allocator</innerclass>
    <innerclass refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" prot="public">CxxUtils::pointer_list::iterator</innerclass>
    <templateparamlist>
      <param>
        <type>size_t</type>
        <declname>NELT</declname>
        <defname>NELT</defname>
        <defval>15</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d1/d88/classCxxUtils_1_1pointer__list_1aeec2b005d8f592c4e380b50caaf78417" prot="public" static="no">
        <type><ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" kindref="member">pointer_list_base::value_type</ref></type>
        <definition>typedef pointer_list_base::value_type CxxUtils::pointer_list&lt; NELT &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <reimplements refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d">value_type</reimplements>
        <briefdescription>
<para>Stored value type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="242" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/d88/classCxxUtils_1_1pointer__list_1a44e32621d06865bce5b34b53dea5fb3c" prot="public" static="no">
        <type><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">allocator</ref></type>
        <definition>typedef allocator CxxUtils::pointer_list&lt; NELT &gt;::pool_type</definition>
        <argsstring></argsstring>
        <name>pool_type</name>
        <reimplements refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aaef14c875027b24d7b0487afd154ac6c">pool_type</reimplements>
        <briefdescription>
<para>Alias for <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kindref="compound">allocator</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="314" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d88/classCxxUtils_1_1pointer__list_1a663398abeab589c3cad3c664be099ec5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::pointer_list&lt; NELT &gt;::pointer_list</definition>
        <argsstring>(pool_type &amp;pool)</argsstring>
        <name>pointer_list</name>
        <param>
          <type><ref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" kindref="compound">pool_type</ref> &amp;</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Constructor. <computeroutput>pool</computeroutput> gives the <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kindref="compound">allocator</ref> for this container. </para>        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kindref="compound">allocator</ref> for this container. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="317" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>pointer_list&lt; NELT &gt;::iterator CxxUtils::pointer_list&lt; NELT &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Iterator at the beginning of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="320" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="275" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="d1/d88/classCxxUtils_1_1pointer__list_1a3755fcb76a4052c866e9a0b402e869a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound">iterator</ref></type>
        <definition>pointer_list&lt; NELT &gt;::iterator CxxUtils::pointer_list&lt; NELT &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Iterator at the end of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="323" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="288" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="d1/d88/classCxxUtils_1_1pointer__list_1a6d6f01e5893dbe81e3bcb243783c3f8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::pointer_list&lt; NELT &gt;::erase</definition>
        <argsstring>(iterator it)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound">iterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Erase one element. O(n). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to erase. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="301" bodyend="313"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> fast way to store a variable-sized collection of pointers. </para>    </briefdescription>
    <detaileddescription>
<para>If you&apos;re growing a variable-sized collection of things, all the STL containers have some performance issues. <ref refid="d4/dc4/structA" kindref="compound">A</ref> std::vector needs to reallocate and copy its data as it grows. The use of variable-sized allocations also means that one cannot use the very efficient fixed-size memory allocators. <ref refid="d4/dc4/structA" kindref="compound">A</ref> std::list incurs a separate memory allocation for each element, and, if the elements are pointers, has a substantial size overhead.</para><para>The class here is a compromise, which builds a list consisting of fixed-size chunks.</para><para>The operations supported are rather limited. We support forward iteration, push_back, and erase (though the latter can have O(n) complexity).</para><para>For best performance, we use our own <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kindref="compound">allocator</ref>, an instance of which gets passed to the <computeroutput><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref></computeroutput> constructor. Memory is not freed until the <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kindref="compound">allocator</ref> is destroyed.</para><para>This class is templated on the number of elements stored per block. This must be one less than a power of two. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="16313">
        <label>CxxUtils::pointer_list&lt; NELT &gt;</label>
        <link refid="d1/d88/classCxxUtils_1_1pointer__list"/>
        <childnode refid="16314" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16314">
        <label>CxxUtils::pointer_list_base</label>
        <link refid="d1/d6f/classCxxUtils_1_1pointer__list__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="16315">
        <label>CxxUtils::pointer_list&lt; NELT &gt;</label>
        <link refid="d1/d88/classCxxUtils_1_1pointer__list"/>
        <childnode refid="16316" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16317">
        <label>CxxUtils::pointer_list_base::allocator</label>
        <link refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator"/>
        <childnode refid="16318" relation="usage">
          <edgelabel>m_chunks</edgelabel>
        </childnode>
      </node>
      <node id="16319">
        <label>CxxUtils::pointer_list_base::list_block</label>
        <link refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block"/>
        <childnode refid="16320" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="16318">
        <label>CxxUtils::pointer_list_base::allocator::chunk</label>
        <childnode refid="16318" relation="usage">
          <edgelabel>m_next</edgelabel>
        </childnode>
        <childnode refid="16319" relation="usage">
          <edgelabel>m_blocks</edgelabel>
        </childnode>
      </node>
      <node id="16316">
        <label>CxxUtils::pointer_list_base</label>
        <link refid="d1/d6f/classCxxUtils_1_1pointer__list__base"/>
        <childnode refid="16317" relation="usage">
          <edgelabel>m_pool</edgelabel>
        </childnode>
        <childnode refid="16320" relation="usage">
          <edgelabel>m_insert</edgelabel>
        </childnode>
        <childnode refid="16319" relation="usage">
          <edgelabel>m_head</edgelabel>
        </childnode>
      </node>
      <node id="16320">
        <label>void</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="239" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="237" bodyend="327"/>
    <listofallmembers>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1a15a2c627c51efb3ae20c2f105b37b914" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>begin</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a576e42bb370de83f7c35adb55196ddba" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>clear</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aabc1382cca7d249203c993f1676690fc" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>empty</name></member>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1a3755fcb76a4052c866e9a0b402e869a7" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>end</name></member>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1a6d6f01e5893dbe81e3bcb243783c3f8c" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>erase</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a729fb5db811798fb3043eebe2ef04769" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>firstblock</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad70f16a03ccd3148a7bc401cf25011e1" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>getblock</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a26839e41df177ff3adb6daa55b863bb7" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>m_head</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a41cb1b04f47a7bc8139085917f87e575" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>m_insert</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1abdf98cef31e29230e927bc54fa4b5568" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>m_pool</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a86eacb0b846710d79b15e8c731359bcc" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>m_size</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a3f02d69a29905525ae631cb382b9b275" prot="protected" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>nextblock</name></member>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1a663398abeab589c3cad3c664be099ec5" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>pointer_list</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1aa3ff405565087c57b138bc2c93b7d089" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>pointer_list_base</name></member>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1a44e32621d06865bce5b34b53dea5fb3c" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>pool_type</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a0b50edbe29554cab55604475de9ba892" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>push_back</name></member>
      <member refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1ad99ddada4b5778e2b1ed27dc66e9b412" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>size</name></member>
      <member refid="d1/d88/classCxxUtils_1_1pointer__list_1aeec2b005d8f592c4e380b50caaf78417" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
