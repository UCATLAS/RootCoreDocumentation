<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d66/classxExample" kind="class" prot="public">
    <compoundname>xExample</compoundname>
    <basecompoundref refid="de/ddb/classEL_1_1Algorithm" prot="public" virt="non-virtual">EL::Algorithm</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d1/d66/classxExample_1a2553c26882ed339b21f12325908387b0" prot="public" static="no" mutable="no">
        <type><ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">xAOD::TEvent</ref> *</type>
        <definition>xAOD::TEvent* xExample::m_event</definition>
        <argsstring></argsstring>
        <name>m_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a4f733b85c6eea00c90ce79029b667ae6" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, TH1 * &gt;</type>
        <definition>std::map&lt;std::string,TH1*&gt; xExample::m_TH1</definition>
        <argsstring></argsstring>
        <name>m_TH1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a9fe8d46f5101fcda23872b051bfa3bb5" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, TH2 * &gt;</type>
        <definition>std::map&lt;std::string,TH2*&gt; xExample::m_TH2</definition>
        <argsstring></argsstring>
        <name>m_TH2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1ac17b1585cdf2eb3cceccd10e27baddbd" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string xExample::ptStr[17]</definition>
        <argsstring>[17]</argsstring>
        <name>ptStr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a88c058f6957b261647f15a2f2b75ba58" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float xExample::ptLim[17]</definition>
        <argsstring>[17]</argsstring>
        <name>ptLim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1ad2c414ff8d6edc2c735b89284dc0088b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int xExample::m_eventCounter</definition>
        <argsstring></argsstring>
        <name>m_eventCounter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a8700d73879d3c56c70f57abbb9d67f49" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int xExample::m_warnCounter</definition>
        <argsstring></argsstring>
        <name>m_warnCounter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a90fa62b53ceb0bdc8c81a895468db659" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int xExample::m_warnLimit</definition>
        <argsstring></argsstring>
        <name>m_warnLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d1/d66/classxExample_1a527f393f789b8bf09939bf0776d2cb27" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long xExample::m_startTime</definition>
        <argsstring></argsstring>
        <name>m_startTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d66/classxExample_1a702a825465bd9a21a471ed57159528f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xExample::xExample</definition>
        <argsstring>()</argsstring>
        <name>xExample</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="65"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1af58a0865416fc417499cd1710d49ce08" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::setupJob</definition>
        <argsstring>(EL::Job &amp;job)</argsstring>
        <name>setupJob</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a6bea54e06f41f386407aad066f051f59">setupJob</reimplements>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: give the algorithm a chance to intialize the job with anything this algorithm needs. this method is automatically called before the algorithm is actually added to the job. guarantee: basic failures: algorithm dependent rationale: this is currently used to give algorithms a chance to register their output datasets, but can also be used for other stuff. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="68"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1a77e418c03f4b5694541112fd52f4b23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::fileExecute</definition>
        <argsstring>()</argsstring>
        <name>fileExecute</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1af77e160b0f307f1b53c2678542b18492">fileExecute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do all the processing that needs to be done once per file guarantee: basic failures: algorithm dependent rationale: this is to read per-file accounting data, e.g. the list of lumi-blocks processed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1ad2beb5c900a7ee2437ddbddc41294bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::histInitialize</definition>
        <argsstring>()</argsstring>
        <name>histInitialize</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a495fd98dfd3af930cc2563df18ff2d01">histInitialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: this is a pre-initialization routine that is called before changeInput is called. guarantee: basic failures: algorithm dependent rationale: unlike <ref refid="d1/d66/classxExample_1aff8374576d81f9872490c91c6ce4c94e" kindref="member">initialize()</ref>, this method is called all the time, even on empty input files. so you should create any histograms or n-tuples here that subsequent code expects </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="70"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1a34d666e0f9f39d048bdec885b1bf73d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::changeInput</definition>
        <argsstring>(bool firstFile)</argsstring>
        <name>changeInput</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a555bf98d9d040bd8cca3cb55473fac0a">changeInput</reimplements>
        <param>
          <type>bool</type>
          <declname>firstFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do all changes to work with a new input file, e.g. set new branch addresses. if firstFile is set, this method is called just before init() is called guarantee: basic failures: algorithm dependent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="71"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1aff8374576d81f9872490c91c6ce4c94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1ad880ac0eae790193a28d0ec063727f5e">initialize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do everything that needs to be done before running the algorithm, e.g. create output n-tuples and histograms. this method is called only once right after changeInput(true) is called guarantee: basic failures: algorithm dependent rationale: in principle all this work could be done on changeInput(true). However, providing this method should make it easier for the user to set up all his outputs and to do so only once. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1a3b1d1bcec52ba29b46471b0878f52bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::execute</definition>
        <argsstring>()</argsstring>
        <name>execute</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a2ca11106132eab43a10bba3be427ead8">execute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: process the next event guarantee: basic failures: algorithm dependent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="73"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1afe9ddc58d85d17cd9c4032e058e90719" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::postExecute</definition>
        <argsstring>()</argsstring>
        <name>postExecute</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a18c2689dec03b5b3159bec4236dbcd16">postExecute</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do the post-processing for the event guarantee: basic failures: algorithm dependent rationale: this is mainly used for specialized services that need to get input from subsequent algorithms before filling their event data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="74"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1aae27d4891a11f9c4aca1fa7679cd5693" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1a322365f8d90dcfc9fd1acf2f57c35b49">finalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: do everything that needs to be done after completing work on this worker guarantee: basic failures: algorithm dependent rationale: currently there is no use foreseen, but this routine is provided regardless </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="75"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1a5d39323f9ecd624b706a2f460879ed63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="d9/daa/classEL_1_1StatusCode" kindref="compound">EL::StatusCode</ref></type>
        <definition>virtual EL::StatusCode xExample::histFinalize</definition>
        <argsstring>()</argsstring>
        <name>histFinalize</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1ab8844066931062378f343c956369b1ec">histFinalize</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: this is a post-initialization routine that is called after finalize has been called. guarantee: basic failures: algorithm dependent rationale: unlike <ref refid="d1/d66/classxExample_1aae27d4891a11f9c4aca1fa7679cd5693" kindref="member">finalize()</ref>, this method is called all the time, even on empty input files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="d1/d66/classxExample_1a9a4eb5c0d62e3090d0324e7b2c672cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xExample::ClassDef</definition>
        <argsstring>(xExample, 1)</argsstring>
        <name>ClassDef</name>
        <reimplements refid="de/ddb/classEL_1_1Algorithm_1aaaf7e4b47c721a094449edc60a2ffe88">ClassDef</reimplements>
        <param>
          <type><ref refid="d1/d66/classxExample" kindref="compound">xExample</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="23376">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
      </node>
      <node id="23375">
        <label>xExample</label>
        <link refid="d1/d66/classxExample"/>
        <childnode refid="23376" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="23378">
        <label>EL::Algorithm</label>
        <link refid="de/ddb/classEL_1_1Algorithm"/>
        <childnode refid="23379" relation="usage">
          <edgelabel>m_wk</edgelabel>
        </childnode>
      </node>
      <node id="23382">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="23379">
        <label>EL::Worker</label>
        <link refid="da/d12/classEL_1_1Worker"/>
        <childnode refid="23380" relation="usage">
          <edgelabel>m_metaData</edgelabel>
        </childnode>
      </node>
      <node id="23381">
        <label>xAOD::TEvent</label>
        <link refid="de/d95/classxAOD_1_1TEvent"/>
        <childnode refid="23382" relation="public-inheritance">
        </childnode>
        <childnode refid="23383" relation="usage">
          <edgelabel>m_inChainTracker</edgelabel>
        </childnode>
        <childnode refid="23384" relation="usage">
          <edgelabel>m_outputEventFormat</edgelabel>
          <edgelabel>m_inputEventFormat</edgelabel>
        </childnode>
      </node>
      <node id="23385">
        <label>string</label>
      </node>
      <node id="23384">
        <label>xAOD::EventFormat_v1</label>
        <link refid="d8/d1f/classxAOD_1_1EventFormat__v1"/>
      </node>
      <node id="23377">
        <label>xExample</label>
        <link refid="d1/d66/classxExample"/>
        <childnode refid="23378" relation="public-inheritance">
        </childnode>
        <childnode refid="23381" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="23385" relation="usage">
          <edgelabel>ptStr</edgelabel>
        </childnode>
      </node>
      <node id="23380">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
      <node id="23383">
        <label>xAOD::TChainStateTracker</label>
        <link refid="d1/d3a/classxAOD_1_1TChainStateTracker"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CPAnalysisExamples/CPAnalysisExamples/xExample.h" bodystart="32" bodyend="80"/>
    <listofallmembers>
      <member refid="de/ddb/classEL_1_1Algorithm_1abb182dee6741786ce59ddbd8a8fc4cc0" prot="public" virt="non-virtual"><scope>xExample</scope><name>Algorithm</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a9e2072bd4fdda18ebc86f847b691d9b9" prot="public" virt="non-virtual"><scope>xExample</scope><name>book</name></member>
      <member refid="d1/d66/classxExample_1a34d666e0f9f39d048bdec885b1bf73d1" prot="public" virt="virtual"><scope>xExample</scope><name>changeInput</name></member>
      <member refid="d1/d66/classxExample_1a9a4eb5c0d62e3090d0324e7b2c672cbb" prot="public" virt="non-virtual"><scope>xExample</scope><name>ClassDef</name></member>
      <member refid="d1/d66/classxExample_1a3b1d1bcec52ba29b46471b0878f52bf6" prot="public" virt="virtual"><scope>xExample</scope><name>execute</name></member>
      <member refid="d1/d66/classxExample_1a77e418c03f4b5694541112fd52f4b23b" prot="public" virt="virtual"><scope>xExample</scope><name>fileExecute</name></member>
      <member refid="d1/d66/classxExample_1aae27d4891a11f9c4aca1fa7679cd5693" prot="public" virt="virtual"><scope>xExample</scope><name>finalize</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a03872c24f8a637ba069b61d847ad557e" prot="public" virt="non-virtual"><scope>xExample</scope><name>hist</name></member>
      <member refid="d1/d66/classxExample_1a5d39323f9ecd624b706a2f460879ed63" prot="public" virt="virtual"><scope>xExample</scope><name>histFinalize</name></member>
      <member refid="d1/d66/classxExample_1ad2beb5c900a7ee2437ddbddc41294bd7" prot="public" virt="virtual"><scope>xExample</scope><name>histInitialize</name></member>
      <member refid="d1/d66/classxExample_1aff8374576d81f9872490c91c6ce4c94e" prot="public" virt="virtual"><scope>xExample</scope><name>initialize</name></member>
      <member refid="d1/d66/classxExample_1a2553c26882ed339b21f12325908387b0" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_event</name></member>
      <member refid="d1/d66/classxExample_1ad2c414ff8d6edc2c735b89284dc0088b" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_eventCounter</name></member>
      <member refid="d1/d66/classxExample_1a527f393f789b8bf09939bf0776d2cb27" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_startTime</name></member>
      <member refid="d1/d66/classxExample_1a4f733b85c6eea00c90ce79029b667ae6" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_TH1</name></member>
      <member refid="d1/d66/classxExample_1a9fe8d46f5101fcda23872b051bfa3bb5" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_TH2</name></member>
      <member refid="d1/d66/classxExample_1a8700d73879d3c56c70f57abbb9d67f49" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_warnCounter</name></member>
      <member refid="d1/d66/classxExample_1a90fa62b53ceb0bdc8c81a895468db659" prot="public" virt="non-virtual"><scope>xExample</scope><name>m_warnLimit</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a468b0314089506f2c36445cfc84f673b" prot="public" virt="non-virtual"><scope>xExample</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d3345f2effc1ea5b8add736df764ca7" prot="public" virt="non-virtual"><scope>xExample</scope><name>msg</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1ad89c787f00a88c7b51a23a4a397f5c05" prot="public" virt="non-virtual"><scope>xExample</scope><name>msgLvl</name></member>
      <member refid="d1/d66/classxExample_1afe9ddc58d85d17cd9c4032e058e90719" prot="public" virt="virtual"><scope>xExample</scope><name>postExecute</name></member>
      <member refid="d1/d66/classxExample_1a88c058f6957b261647f15a2f2b75ba58" prot="public" virt="non-virtual"><scope>xExample</scope><name>ptLim</name></member>
      <member refid="d1/d66/classxExample_1ac17b1585cdf2eb3cceccd10e27baddbd" prot="public" virt="non-virtual"><scope>xExample</scope><name>ptStr</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a767c1725616f14d347b79002d755bf55" prot="public" virt="non-virtual"><scope>xExample</scope><name>setMsgLevel</name></member>
      <member refid="d1/d66/classxExample_1af58a0865416fc417499cd1710d49ce08" prot="public" virt="virtual"><scope>xExample</scope><name>setupJob</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1afa8999f46656a42d53df3731216f1296" prot="public" virt="non-virtual"><scope>xExample</scope><name>testInvariant</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a36e05186cb50cc0e5929121d3f6b6053" prot="public" virt="non-virtual"><scope>xExample</scope><name>wk</name></member>
      <member refid="d1/d66/classxExample_1a702a825465bd9a21a471ed57159528f2" prot="public" virt="non-virtual"><scope>xExample</scope><name>xExample</name></member>
      <member refid="de/ddb/classEL_1_1Algorithm_1a6d787a867dbe55af8241032c7b4aabf4" prot="public" virt="non-virtual"><scope>xExample</scope><name>~Algorithm</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
