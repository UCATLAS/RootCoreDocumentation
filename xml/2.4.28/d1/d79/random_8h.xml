<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d79/random_8h" kind="file">
    <compoundname>random.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="d2/d1c/AuxVectorBase__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx</includedby>
    <includedby refid="dc/da5/DataList__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx</includedby>
    <includedby refid="d2/db8/DataVector__test_8icc" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc</includedby>
    <includedby refid="d5/d42/PackedConverter__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/PackedConverter_test.cxx</includedby>
    <includedby refid="d2/d10/BitPackerUnpacker__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx</includedby>
    <incdepgraph>
      <node id="302671">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TestTools/TestTools/random.h</label>
        <link refid="random.h"/>
        <childnode refid="302672" relation="include">
        </childnode>
      </node>
      <node id="302672">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="302681">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_f_test.cxx</label>
        <link refid="dd/d14/DataVector__f__test_8cxx"/>
      </node>
      <node id="302673">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TestTools/TestTools/random.h</label>
        <link refid="random.h"/>
        <childnode refid="302674" relation="include">
        </childnode>
        <childnode refid="302675" relation="include">
        </childnode>
        <childnode refid="302682" relation="include">
        </childnode>
      </node>
      <node id="302680">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_e_test.cxx</label>
        <link refid="d6/da5/DataVector__e__test_8cxx"/>
      </node>
      <node id="302679">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_d_test.cxx</label>
        <link refid="de/da2/DataVector__d__test_8cxx"/>
      </node>
      <node id="302677">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_b_test.cxx</label>
        <link refid="d2/d0b/DataVector__b__test_8cxx"/>
      </node>
      <node id="302676">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_a_test.cxx</label>
        <link refid="d7/def/DataVector__a__test_8cxx"/>
      </node>
      <node id="302674">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx</label>
        <link refid="d2/d1c/AuxVectorBase__test_8cxx"/>
      </node>
      <node id="302675">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc</label>
        <link refid="d2/db8/DataVector__test_8icc"/>
        <childnode refid="302676" relation="include">
        </childnode>
        <childnode refid="302677" relation="include">
        </childnode>
        <childnode refid="302678" relation="include">
        </childnode>
        <childnode refid="302679" relation="include">
        </childnode>
        <childnode refid="302680" relation="include">
        </childnode>
        <childnode refid="302681" relation="include">
        </childnode>
      </node>
      <node id="302678">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_c_test.cxx</label>
        <link refid="dd/dd6/DataVector__c__test_8cxx"/>
      </node>
      <node id="302682">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx</label>
        <link refid="d2/d10/BitPackerUnpacker__test_8cxx"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d3/ddc/structAthena__test_1_1RNG" prot="public">Athena_test::RNG</innerclass>
    <innerclass refid="d8/dd6/structAthena__test_1_1URNG" prot="public">Athena_test::URNG</innerclass>
    <innernamespace refid="d3/d3a/namespaceAthena__test">Athena_test</innernamespace>
    <briefdescription>
<para>Very simple random numbers for regression testing. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Aug, 2014 This file provides a few very simple random number generators useful for regression testing. These are 32-bit LCGs, with constants taken from Numerical Recipes. These numbers will have poor quality; however, the results should be completely reproducible across platforms. For regression testing, that&apos;s often all that&apos;s really needed. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file&apos;s<sp/>extension<sp/>implies<sp/>that<sp/>it&apos;s<sp/>C,<sp/>but<sp/>it&apos;s<sp/>really<sp/>-*-<sp/>C++<sp/>-*-.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>TESTTOOLS_RANDOM_H</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TESTTOOLS_RANDOM_H</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Athena_test<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>rngmax<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="d3/d3a/namespaceAthena__test_1ae7026816ddc756714c8b2f5eea7d7f45" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="d3/d3a/namespaceAthena__test_1ae7026816ddc756714c8b2f5eea7d7f45" kindref="member" tooltip="Generate a random number between 0 and rngmax.">rng_seed</ref><sp/>(uint32_t&amp;<sp/>seed)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>seed<sp/>=<sp/>(1664525*seed<sp/>+<sp/>1013904223);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d3/d3a/namespaceAthena__test_1a67e1a72f44962a6fa1871987f160c44f" refkind="member"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1a67e1a72f44962a6fa1871987f160c44f" kindref="member" tooltip="Generate a floating-point random number between rmin and rmax.">randf_seed</ref><sp/>(uint32_t&amp;<sp/>seed,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rmax,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rmin<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d3/d3a/namespaceAthena__test_1ae7026816ddc756714c8b2f5eea7d7f45" kindref="member" tooltip="Generate a random number between 0 and rngmax.">rng_seed</ref>(seed))<sp/>/<sp/>rngmax<sp/>*<sp/>(rmax-rmin)<sp/>+<sp/>rmin;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="d3/d3a/namespaceAthena__test_1aeb11fe6f27a7e508c907ae65f01d65b4" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1aeb11fe6f27a7e508c907ae65f01d65b4" kindref="member" tooltip="Generate an integer random number between rmin and rmax.">randi_seed</ref><sp/>(uint32_t&amp;<sp/>seed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmin<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(<ref refid="d3/d3a/namespaceAthena__test_1a67e1a72f44962a6fa1871987f160c44f" kindref="member" tooltip="Generate a floating-point random number between rmin and rmax.">randf_seed</ref><sp/>(seed,<sp/>rmax,<sp/>rmin));</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="d3/ddc/structAthena__test_1_1RNG" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">RNG</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">RNG</ref>()<sp/>:<sp/>seed(1)<sp/>{}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1aeb11fe6f27a7e508c907ae65f01d65b4" kindref="member" tooltip="Generate an integer random number between rmin and rmax.">randi_seed</ref><sp/>(seed,<sp/>n);<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>uint32_t<sp/>seed;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="d8/dd6/structAthena__test_1_1URNG" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound" tooltip="Generator compatible with the C++11 STL UniformRandomNumberGenerator.">URNG</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>result_type;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound" tooltip="Generator compatible with the C++11 STL UniformRandomNumberGenerator.">URNG</ref>()<sp/>:<sp/>seed(1)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>result_type<sp/>min()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>result_type<sp/>max()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1000000;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>result_type<sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1aeb11fe6f27a7e508c907ae65f01d65b4" kindref="member" tooltip="Generate an integer random number between rmin and rmax.">randi_seed</ref><sp/>(seed,<sp/>max());<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>uint32_t<sp/>seed;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">uint32_t<sp/>seed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">uint32_t<sp/>rng()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1ae7026816ddc756714c8b2f5eea7d7f45" kindref="member" tooltip="Generate a random number between 0 and rngmax.">rng_seed</ref>(seed);<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randi<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmax,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rmin<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1aeb11fe6f27a7e508c907ae65f01d65b4" kindref="member" tooltip="Generate an integer random number between rmin and rmax.">randi_seed</ref><sp/>(seed,<sp/>rmax,<sp/>rmin);<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>randf<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rmax,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rmin<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d3a/namespaceAthena__test_1a67e1a72f44962a6fa1871987f160c44f" kindref="member" tooltip="Generate a floating-point random number between rmin and rmax.">randf_seed</ref><sp/>(seed,<sp/>rmax,<sp/>rmin);<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Athena_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>TESTTOOLS_RANDOM_H</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TestTools/TestTools/random.h"/>
  </compounddef>
</doxygen>
