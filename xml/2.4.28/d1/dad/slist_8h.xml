<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/dad/slist_8h" kind="file">
    <compoundname>slist.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108190">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
      <node id="108189">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h</label>
        <link refid="slist.h"/>
        <childnode refid="108190" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d7/d06/struct__SListIterator" prot="public">_SListIterator</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d1/dad/slist_8h_1a705f0dd95c590f7b273447ca4ebb6122" prot="public" static="no">
        <name>SLIST_NULL</name>
        <initializer>((void *) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> null <ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" prot="public" static="no">
        <type>struct _SListEntry</type>
        <definition>typedef struct _SListEntry SListEntry</definition>
        <argsstring></argsstring>
        <name>SListEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents an entry in a singly-linked list. The empty list is represented by a NULL pointer. To initialise a new singly linked list, simply create a variable of this type containing a pointer to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dad/slist_8h_1a245e61ed32e1de03d90eaef5691b1f75" prot="public" static="no">
        <type>struct <ref refid="d7/d06/struct__SListIterator" kindref="compound">_SListIterator</ref></type>
        <definition>typedef struct _SListIterator SListIterator</definition>
        <argsstring></argsstring>
        <name>SListIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Structure used to iterate over a list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SListValue</definition>
        <argsstring></argsstring>
        <name>SListValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value stored in a list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dad/slist_8h_1abc4f3057e1f51b4c393d470a7b60e59e" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* SListCompareFunc)(SListValue value1, SListValue value2)</definition>
        <argsstring>)(SListValue value1, SListValue value2)</argsstring>
        <name>SListCompareFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used to compare values in a list when sorting.</para><para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> negative value if value1 should be sorted before value2, a positive value if value1 should be sorted after value2, zero if value1 and value2 are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="117" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* SListEqualFunc)(SListValue value1, SListValue value2)</definition>
        <argsstring>)(SListValue value1, SListValue value2)</argsstring>
        <name>SListEqualFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used to determine of two values in a list are equal.</para><para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> non-zero value if value1 and value2 are equal, zero if they are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/dad/slist_8h_1a068c363864a552f4a416abaef038e8d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void slist_free</definition>
        <argsstring>(SListEntry *list)</argsstring>
        <name>slist_free</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an entire list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a075ec00c924de429e89c9bd94062424c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
        <definition>SListEntry* slist_prepend</definition>
        <argsstring>(SListEntry **list, SListValue data)</argsstring>
        <name>slist_prepend</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepend a value to the start of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to prepend to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new entry in the list, or NULL if it was not possible to allocate a new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a4496797020d8158358463dab22011bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
        <definition>SListEntry* slist_append</definition>
        <argsstring>(SListEntry **list, SListValue data)</argsstring>
        <name>slist_append</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a value to the end of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to append to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new entry in the list, or NULL if it was not possible to allocate a new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="157"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1aa38f9bef6dfc6ac66d88d83f4732da00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
        <definition>SListEntry* slist_next</definition>
        <argsstring>(SListEntry *listentry)</argsstring>
        <name>slist_next</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>listentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the next entry in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next entry in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a26b41c48bf5c8609e31f30d885b18b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
        <definition>SListValue slist_data</definition>
        <argsstring>(SListEntry *listentry)</argsstring>
        <name>slist_data</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>listentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value stored at a list entry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the list entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="175"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a8eb09b8c069fb989a29db4c1c2c830a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
        <definition>SListEntry* slist_nth_entry</definition>
        <argsstring>(SListEntry *list, int n)</argsstring>
        <name>slist_nth_entry</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the entry at a specified index in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the list . </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The entry at the specified index, or NULL if out of range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a5dfe89536250a693e0dbca9407ca86d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
        <definition>SListValue slist_nth_data</definition>
        <argsstring>(SListEntry *list, int n)</argsstring>
        <name>slist_nth_data</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value stored at a specified index in the list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value stored at the specified index, or <ref refid="d1/dad/slist_8h_1a705f0dd95c590f7b273447ca4ebb6122" kindref="member">SLIST_NULL</ref> if unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="196"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a6337bc2bb96fa438998051ce0641c252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int slist_length</definition>
        <argsstring>(SListEntry *list)</argsstring>
        <name>slist_length</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the length of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of entries in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="205"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a737b632189b25fd0d0cc5669e0bb70df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref> *</type>
        <definition>SListValue* slist_to_array</definition>
        <argsstring>(SListEntry *list)</argsstring>
        <name>slist_to_array</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="db/db2/structC" kindref="compound">C</ref> array containing the contents of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> newly-allocated <ref refid="db/db2/structC" kindref="compound">C</ref> array containing all values in the list, or NULL if it was not possible to allocate the memory for the array. The length of the array is equal to the length of the list (see <ref refid="d1/dad/slist_8h_1a6337bc2bb96fa438998051ce0641c252" kindref="member">slist_length</ref>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="217"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a7d9c32023d850368f385ce5a98bcdb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int slist_remove_entry</definition>
        <argsstring>(SListEntry **list, SListEntry *entry)</argsstring>
        <name>slist_remove_entry</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an entry from a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The list entry to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the entry is not found in the list, returns zero, else returns non-zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="228"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a32f18f035b205ba9165ecbd6d340c2a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int slist_remove_data</definition>
        <argsstring>(SListEntry **list, SListEqualFunc callback, SListValue data)</argsstring>
        <name>slist_remove_data</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" kindref="member">SListEqualFunc</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all occurrences of a particular value from a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to invoke to compare values in the list with the value to remove. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to remove from the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of entries removed from the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="242"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a2b5ee668b829bc0861109fc95b7fc945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void slist_sort</definition>
        <argsstring>(SListEntry **list, SListCompareFunc compare_func)</argsstring>
        <name>slist_sort</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1abc4f3057e1f51b4c393d470a7b60e59e" kindref="member">SListCompareFunc</ref></type>
          <declname>compare_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to sort. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to compare values in the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="251"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1ac915211de370da679415a2bb7e099cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
        <definition>SListEntry* slist_find_data</definition>
        <argsstring>(SListEntry *list, SListEqualFunc callback, SListValue data)</argsstring>
        <name>slist_find_data</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" kindref="member">SListEqualFunc</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the entry for a particular value in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function to be invoked to determine if values in the list are equal to the value to be searched for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list entry of the value being searched for, or NULL if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="267"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1ac568a60cbe098ef2b2473cae9c06f759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void slist_iterate</definition>
        <argsstring>(SListEntry **list, SListIterator *iter)</argsstring>
        <name>slist_iterate</name>
        <param>
          <type><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a <ref refid="d1/dad/slist_8h_1a245e61ed32e1de03d90eaef5691b1f75" kindref="member">SListIterator</ref> structure to iterate over a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to iterate over. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <ref refid="d1/dad/slist_8h_1a245e61ed32e1de03d90eaef5691b1f75" kindref="member">SListIterator</ref> structure to initialise. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="277"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a68f7005b94569446ebf0d40628324440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int slist_iter_has_more</definition>
        <argsstring>(SListIterator *iterator)</argsstring>
        <name>slist_iter_has_more</name>
        <param>
          <type><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if there are more values in the list to iterate over.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if there are no more values in the list to iterate over, non-zero if there are more values to read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="288"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a72da7ed998df1af30d6c7d6b5528f819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref></type>
        <definition>SListValue slist_iter_next</definition>
        <argsstring>(SListIterator *iterator)</argsstring>
        <name>slist_iter_next</name>
        <param>
          <type><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using a list iterator, retrieve the next value from the list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next value from the list, or SLIST_NULL if there are no more values in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="298"/>
      </memberdef>
      <memberdef kind="function" id="d1/dad/slist_8h_1a6702a826d5a962a69aa015a01507486c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void slist_iter_remove</definition>
        <argsstring>(SListIterator *iterator)</argsstring>
        <name>slist_iter_remove</name>
        <param>
          <type><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete the current entry in the list (the value last returned from <ref refid="d1/dad/slist_8h_1a72da7ed998df1af30d6c7d6b5528f819" kindref="member">slist_iter_next</ref>)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h" line="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Singly-linked list.</para><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> singly-linked list stores a collection of values. Each entry in the list (represented by a pointer to a <ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref> structure) contains a link to the next entry. It is only possible to iterate over entries in a singly linked list in one direction.</para><para>To create a new singly-linked list, create a variable which is a pointer to a <ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref>, and initialise it to NULL.</para><para>To destroy a singly linked list, use <ref refid="d1/dad/slist_8h_1a068c363864a552f4a416abaef038e8d1" kindref="member">slist_free</ref>.</para><para>To add a new value at the start of a list, use <ref refid="d1/dad/slist_8h_1a075ec00c924de429e89c9bd94062424c" kindref="member">slist_prepend</ref>. To add a new value at the end of a list, use <ref refid="d1/dad/slist_8h_1a4496797020d8158358463dab22011bee" kindref="member">slist_append</ref>.</para><para>To find the length of a list, use <ref refid="d1/dad/slist_8h_1a6337bc2bb96fa438998051ce0641c252" kindref="member">slist_length</ref>.</para><para>To access a value in a list by its index in the list, use <ref refid="d1/dad/slist_8h_1a5dfe89536250a693e0dbca9407ca86d9" kindref="member">slist_nth_data</ref>.</para><para>To search a list for a value, use <ref refid="d1/dad/slist_8h_1ac915211de370da679415a2bb7e099cdc" kindref="member">slist_find_data</ref>.</para><para>To sort a list into an order, use <ref refid="d1/dad/slist_8h_1a2b5ee668b829bc0861109fc95b7fc945" kindref="member">slist_sort</ref>.</para><para>To find a particular entry in a list by its index, use <ref refid="d1/dad/slist_8h_1a8eb09b8c069fb989a29db4c1c2c830a5" kindref="member">slist_nth_entry</ref>.</para><para>To iterate over each value in a list, use <ref refid="d1/dad/slist_8h_1ac568a60cbe098ef2b2473cae9c06f759" kindref="member">slist_iterate</ref> to initialise a <ref refid="d1/dad/slist_8h_1a245e61ed32e1de03d90eaef5691b1f75" kindref="member">SListIterator</ref> structure, with <ref refid="d1/dad/slist_8h_1a72da7ed998df1af30d6c7d6b5528f819" kindref="member">slist_iter_next</ref> and <ref refid="d1/dad/slist_8h_1a68f7005b94569446ebf0d40628324440" kindref="member">slist_iter_has_more</ref> to retrieve each value in turn. <ref refid="d1/dad/slist_8h_1a6702a826d5a962a69aa015a01507486c" kindref="member">slist_iter_remove</ref> can be used to efficiently remove the current entry from the list.</para><para>Given a particular entry in a list (<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref>):</para><para><itemizedlist>
<listitem><para>To find the next entry, use <ref refid="d1/dad/slist_8h_1aa38f9bef6dfc6ac66d88d83f4732da00" kindref="member">slist_next</ref>. </para></listitem>
<listitem><para>To access the value stored at the entry, use <ref refid="d1/dad/slist_8h_1a26b41c48bf5c8609e31f30d885b18b8b" kindref="member">slist_data</ref>. </para></listitem>
<listitem><para>To remove the entry, use <ref refid="d1/dad/slist_8h_1a7d9c32023d850368f385ce5a98bcdb06" kindref="member">slist_remove_entry</ref>. </para></listitem>
</itemizedlist>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_SLIST_H</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_SLIST_H</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="80" refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_SListEntry<sp/><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="d1/dad/slist_8h_1a245e61ed32e1de03d90eaef5691b1f75" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d06/struct__SListIterator" kindref="compound">_SListIterator</ref><sp/><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d1/dad/slist_8h_1a72bd2c3bdab4e6c3b37e4e3082216d56" kindref="member">SListValue</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="d7/d06/struct__SListIterator" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d06/struct__SListIterator" kindref="compound">_SListIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**prev_next;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*current;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="d1/dad/slist_8h_1a705f0dd95c590f7b273447ca4ebb6122" refkind="member"><highlight class="preprocessor">#define<sp/>SLIST_NULL<sp/>((void<sp/>*)<sp/>0)</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="117" refid="d1/dad/slist_8h_1abc4f3057e1f51b4c393d470a7b60e59e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d1/dad/slist_8h_1abc4f3057e1f51b4c393d470a7b60e59e" kindref="member">SListCompareFunc</ref>)(SListValue<sp/>value1,<sp/>SListValue<sp/>value2);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" kindref="member">SListEqualFunc</ref>)(SListValue<sp/>value1,<sp/>SListValue<sp/>value2);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a068c363864a552f4a416abaef038e8d1" kindref="member">slist_free</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*<ref refid="d1/dad/slist_8h_1a075ec00c924de429e89c9bd94062424c" kindref="member">slist_prepend</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,<sp/>SListValue<sp/>data);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*<ref refid="d1/dad/slist_8h_1a4496797020d8158358463dab22011bee" kindref="member">slist_append</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,<sp/>SListValue<sp/>data);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*<ref refid="d1/dad/slist_8h_1aa38f9bef6dfc6ac66d88d83f4732da00" kindref="member">slist_next</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*listentry);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">SListValue<sp/><ref refid="d1/dad/slist_8h_1a26b41c48bf5c8609e31f30d885b18b8b" kindref="member">slist_data</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*listentry);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*<ref refid="d1/dad/slist_8h_1a8eb09b8c069fb989a29db4c1c2c830a5" kindref="member">slist_nth_entry</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">SListValue<sp/><ref refid="d1/dad/slist_8h_1a5dfe89536250a693e0dbca9407ca86d9" kindref="member">slist_nth_data</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a6337bc2bb96fa438998051ce0641c252" kindref="member">slist_length</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">SListValue<sp/>*<ref refid="d1/dad/slist_8h_1a737b632189b25fd0d0cc5669e0bb70df" kindref="member">slist_to_array</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a7d9c32023d850368f385ce5a98bcdb06" kindref="member">slist_remove_entry</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,<sp/><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*entry);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a32f18f035b205ba9165ecbd6d340c2a2" kindref="member">slist_remove_data</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" kindref="member">SListEqualFunc</ref><sp/>callback,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SListValue<sp/>data);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a2b5ee668b829bc0861109fc95b7fc945" kindref="member">slist_sort</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,<sp/><ref refid="d1/dad/slist_8h_1abc4f3057e1f51b4c393d470a7b60e59e" kindref="member">SListCompareFunc</ref><sp/>compare_func);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*<ref refid="d1/dad/slist_8h_1ac915211de370da679415a2bb7e099cdc" kindref="member">slist_find_data</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>*list,<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/dad/slist_8h_1a78e0fe0681dc239b4aa7f71202bfb0e8" kindref="member">SListEqualFunc</ref><sp/>callback,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SListValue<sp/>data);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1ac568a60cbe098ef2b2473cae9c06f759" kindref="member">slist_iterate</ref>(<ref refid="d1/dad/slist_8h_1a929cf4049af3c2dca744cb041b2026b9" kindref="member">SListEntry</ref><sp/>**list,<sp/><ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref><sp/>*iter);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a68f7005b94569446ebf0d40628324440" kindref="member">slist_iter_has_more</ref>(<ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">SListValue<sp/><ref refid="d1/dad/slist_8h_1a72da7ed998df1af30d6c7d6b5528f819" kindref="member">slist_iter_next</ref>(<ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dad/slist_8h_1a6702a826d5a962a69aa015a01507486c" kindref="member">slist_iter_remove</ref>(<ref refid="d7/d06/struct__SListIterator" kindref="compound">SListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_SLIST_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/slist.h"/>
  </compounddef>
</doxygen>
