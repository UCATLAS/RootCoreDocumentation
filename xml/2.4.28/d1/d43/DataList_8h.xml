<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d43/DataList_8h" kind="file">
    <compoundname>DataList.h</compoundname>
    <includes local="no">list</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">functional</includes>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">boost/static_assert.hpp</includes>
    <includes local="no">boost/type_traits.hpp</includes>
    <includes local="no">boost/iterator/iterator_adaptor.hpp</includes>
    <includes local="yes">SGTools/BaseInfo.h</includes>
    <includes local="yes">SGTools/DataBucketTraitFwd.h</includes>
    <includes local="yes">SGTools/ClassName.h</includes>
    <includes refid="d3/da4/OwnershipPolicy_8h" local="yes">AthContainers/OwnershipPolicy.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="d7/d92/DVLNoBase_8h" local="yes">AthContainers/tools/DVLNoBase.h</includes>
    <includes refid="d3/d2e/DVLInfo_8h" local="yes">AthContainers/tools/DVLInfo.h</includes>
    <includes refid="d4/d16/DVLDataBucket_8h" local="yes">AthContainers/tools/DVLDataBucket.h</includes>
    <includes refid="df/d5c/DVLCast_8h" local="yes">AthContainers/tools/DVLCast.h</includes>
    <includes refid="d3/dc7/DVLIterator_8h" local="yes">AthContainers/tools/DVLIterator.h</includes>
    <includes refid="d6/ddb/DVL__iter__swap_8h" local="yes">AthContainers/tools/DVL_iter_swap.h</includes>
    <includes refid="d0/d7a/DVL__algorithms_8h" local="yes">AthContainers/tools/DVL_algorithms.h</includes>
    <includes refid="db/d26/ElementProxy_8h" local="yes">AthContainers/tools/ElementProxy.h</includes>
    <includes refid="d5/dfa/IsMostDerivedFlag_8h" local="yes">AthContainers/tools/IsMostDerivedFlag.h</includes>
    <includes refid="d3/dec/selection__ns_8h" local="yes">AthLinks/tools/selection_ns.h</includes>
    <includes refid="d5/ddf/DataList_8icc" local="yes">AthContainers/DataList.icc</includes>
    <includedby refid="db/ded/ConstDataList_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h</includedby>
    <includedby refid="dc/da5/DataList__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx</includedby>
    <includedby refid="d4/de3/DVLDataBucket__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLDataBucket_test.cxx</includedby>
    <includedby refid="d8/d15/removeDuplicates__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/removeDuplicates_test.cxx</includedby>
    <incdepgraph>
      <node id="32479">
        <label>list</label>
      </node>
      <node id="32576">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="32506" relation="include">
        </childnode>
        <childnode refid="32569" relation="include">
        </childnode>
        <childnode refid="32554" relation="include">
        </childnode>
        <childnode refid="32559" relation="include">
        </childnode>
        <childnode refid="32483" relation="include">
        </childnode>
      </node>
      <node id="32533">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="32506">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="32565">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="32566" relation="include">
        </childnode>
        <childnode refid="32507" relation="include">
        </childnode>
        <childnode refid="32503" relation="include">
        </childnode>
        <childnode refid="32567" relation="include">
        </childnode>
      </node>
      <node id="32550">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="32496" relation="include">
        </childnode>
        <childnode refid="32497" relation="include">
        </childnode>
        <childnode refid="32503" relation="include">
        </childnode>
        <childnode refid="32481" relation="include">
        </childnode>
      </node>
      <node id="32552">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="32512" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32488" relation="include">
        </childnode>
        <childnode refid="32513" relation="include">
        </childnode>
      </node>
      <node id="32551">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="32502">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="32481">
        <label>functional</label>
      </node>
      <node id="32560">
        <label>boost/version.hpp</label>
      </node>
      <node id="32500">
        <label>limits</label>
      </node>
      <node id="32488">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="32531">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="32484">
        <label>iterator</label>
      </node>
      <node id="32514">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="32501" relation="include">
        </childnode>
        <childnode refid="32515" relation="include">
        </childnode>
      </node>
      <node id="32490">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="32492">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="32493" relation="include">
        </childnode>
        <childnode refid="32504" relation="include">
        </childnode>
        <childnode refid="32505" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32501" relation="include">
        </childnode>
      </node>
      <node id="32516">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
      </node>
      <node id="32519">
        <label>stdint.h</label>
      </node>
      <node id="32569">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="32500" relation="include">
        </childnode>
        <childnode refid="32570" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
      </node>
      <node id="32553">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="32538">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
      </node>
      <node id="32522">
        <label>RVersion.h</label>
      </node>
      <node id="32495">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="32496" relation="include">
        </childnode>
        <childnode refid="32503" relation="include">
        </childnode>
        <childnode refid="32481" relation="include">
        </childnode>
      </node>
      <node id="32499">
        <label>cmath</label>
      </node>
      <node id="32557">
        <label>cassert</label>
      </node>
      <node id="32561">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="32485">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="32505">
        <label>stdexcept</label>
      </node>
      <node id="32534">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="32578">
        <label>AthContainers/DataList.icc</label>
        <link refid="d5/ddf/DataList_8icc"/>
        <childnode refid="32579" relation="include">
        </childnode>
        <childnode refid="32558" relation="include">
        </childnode>
        <childnode refid="32500" relation="include">
        </childnode>
        <childnode refid="32580" relation="include">
        </childnode>
      </node>
      <node id="32563">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="32487">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="32501">
        <label>string</label>
      </node>
      <node id="32511">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="32493" relation="include">
        </childnode>
        <childnode refid="32512" relation="include">
        </childnode>
        <childnode refid="32514" relation="include">
        </childnode>
        <childnode refid="32516" relation="include">
        </childnode>
        <childnode refid="32518" relation="include">
        </childnode>
        <childnode refid="32524" relation="include">
        </childnode>
        <childnode refid="32525" relation="include">
        </childnode>
        <childnode refid="32526" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32497" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
        <childnode refid="32527" relation="include">
        </childnode>
        <childnode refid="32528" relation="include">
        </childnode>
        <childnode refid="32529" relation="include">
        </childnode>
        <childnode refid="32535" relation="include">
        </childnode>
      </node>
      <node id="32537">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
      </node>
      <node id="32527">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="32478">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h</label>
        <link refid="DataList.h"/>
        <childnode refid="32479" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32481" relation="include">
        </childnode>
        <childnode refid="32482" relation="include">
        </childnode>
        <childnode refid="32483" relation="include">
        </childnode>
        <childnode refid="32484" relation="include">
        </childnode>
        <childnode refid="32485" relation="include">
        </childnode>
        <childnode refid="32486" relation="include">
        </childnode>
        <childnode refid="32487" relation="include">
        </childnode>
        <childnode refid="32488" relation="include">
        </childnode>
        <childnode refid="32489" relation="include">
        </childnode>
        <childnode refid="32490" relation="include">
        </childnode>
        <childnode refid="32491" relation="include">
        </childnode>
        <childnode refid="32492" relation="include">
        </childnode>
        <childnode refid="32506" relation="include">
        </childnode>
        <childnode refid="32507" relation="include">
        </childnode>
        <childnode refid="32565" relation="include">
        </childnode>
        <childnode refid="32569" relation="include">
        </childnode>
        <childnode refid="32571" relation="include">
        </childnode>
        <childnode refid="32574" relation="include">
        </childnode>
        <childnode refid="32575" relation="include">
        </childnode>
        <childnode refid="32572" relation="include">
        </childnode>
        <childnode refid="32577" relation="include">
        </childnode>
        <childnode refid="32521" relation="include">
        </childnode>
        <childnode refid="32578" relation="include">
        </childnode>
      </node>
      <node id="32571">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="32491" relation="include">
        </childnode>
        <childnode refid="32569" relation="include">
        </childnode>
        <childnode refid="32572" relation="include">
        </childnode>
        <childnode refid="32487" relation="include">
        </childnode>
        <childnode refid="32560" relation="include">
        </childnode>
        <childnode refid="32484" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
      </node>
      <node id="32566">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="32567">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="32568" relation="include">
        </childnode>
      </node>
      <node id="32568">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="32523">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="32547">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="32575">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="32571" relation="include">
        </childnode>
        <childnode refid="32484" relation="include">
        </childnode>
        <childnode refid="32483" relation="include">
        </childnode>
        <childnode refid="32576" relation="include">
        </childnode>
      </node>
      <node id="32528">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="32544">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="32572">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="32491" relation="include">
        </childnode>
        <childnode refid="32521" relation="include">
        </childnode>
        <childnode refid="32503" relation="include">
        </childnode>
        <childnode refid="32573" relation="include">
        </childnode>
      </node>
      <node id="32555">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="32521">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="32522" relation="include">
        </childnode>
        <childnode refid="32523" relation="include">
        </childnode>
      </node>
      <node id="32525">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="32532">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="32570">
        <label>limits.h</label>
      </node>
      <node id="32508">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="32509" relation="include">
        </childnode>
      </node>
      <node id="32542">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="32514" relation="include">
        </childnode>
        <childnode refid="32500" relation="include">
        </childnode>
        <childnode refid="32519" relation="include">
        </childnode>
        <childnode refid="32543" relation="include">
        </childnode>
      </node>
      <node id="32493">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32495" relation="include">
        </childnode>
      </node>
      <node id="32496">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="32483" relation="include">
        </childnode>
        <childnode refid="32497" relation="include">
        </childnode>
        <childnode refid="32484" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
        <childnode refid="32499" relation="include">
        </childnode>
        <childnode refid="32500" relation="include">
        </childnode>
        <childnode refid="32501" relation="include">
        </childnode>
        <childnode refid="32502" relation="include">
        </childnode>
      </node>
      <node id="32558">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="32557" relation="include">
        </childnode>
      </node>
      <node id="32573">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="32569" relation="include">
        </childnode>
        <childnode refid="32558" relation="include">
        </childnode>
      </node>
      <node id="32480">
        <label>typeinfo</label>
      </node>
      <node id="32556">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="32527" relation="include">
        </childnode>
        <childnode refid="32557" relation="include">
        </childnode>
      </node>
      <node id="32543">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="32524">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="32520">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="32519" relation="include">
        </childnode>
      </node>
      <node id="32515">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="32546">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="32507">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="32508" relation="include">
        </childnode>
        <childnode refid="32510" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32502" relation="include">
        </childnode>
        <childnode refid="32563" relation="include">
        </childnode>
        <childnode refid="32545" relation="include">
        </childnode>
        <childnode refid="32564" relation="include">
        </childnode>
      </node>
      <node id="32513">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="32536">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="32493" relation="include">
        </childnode>
        <childnode refid="32537" relation="include">
        </childnode>
        <childnode refid="32538" relation="include">
        </childnode>
        <childnode refid="32539" relation="include">
        </childnode>
        <childnode refid="32548" relation="include">
        </childnode>
        <childnode refid="32529" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32550" relation="include">
        </childnode>
        <childnode refid="32551" relation="include">
        </childnode>
      </node>
      <node id="32517">
        <label>vector</label>
      </node>
      <node id="32579">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="32483" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
      </node>
      <node id="32580">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="32497">
        <label>utility</label>
      </node>
      <node id="32489">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="32526">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="32562">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="32530">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="32540">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="32529">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="32530" relation="include">
        </childnode>
        <childnode refid="32531" relation="include">
        </childnode>
        <childnode refid="32532" relation="include">
        </childnode>
        <childnode refid="32533" relation="include">
        </childnode>
        <childnode refid="32534" relation="include">
        </childnode>
      </node>
      <node id="32498">
        <label>cstdlib</label>
      </node>
      <node id="32504">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="32482">
        <label>iostream</label>
      </node>
      <node id="32512">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="32493" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32513" relation="include">
        </childnode>
      </node>
      <node id="32494">
        <label>cstddef</label>
      </node>
      <node id="32535">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="32536" relation="include">
        </childnode>
        <childnode refid="32552" relation="include">
        </childnode>
        <childnode refid="32512" relation="include">
        </childnode>
        <childnode refid="32527" relation="include">
        </childnode>
        <childnode refid="32528" relation="include">
        </childnode>
      </node>
      <node id="32564">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="32491" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32479" relation="include">
        </childnode>
        <childnode refid="32557" relation="include">
        </childnode>
        <childnode refid="32498" relation="include">
        </childnode>
        <childnode refid="32488" relation="include">
        </childnode>
      </node>
      <node id="32539">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="32537" relation="include">
        </childnode>
        <childnode refid="32540" relation="include">
        </childnode>
        <childnode refid="32516" relation="include">
        </childnode>
        <childnode refid="32541" relation="include">
        </childnode>
        <childnode refid="32526" relation="include">
        </childnode>
        <childnode refid="32480" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32483" relation="include">
        </childnode>
        <childnode refid="32519" relation="include">
        </childnode>
        <childnode refid="32545" relation="include">
        </childnode>
        <childnode refid="32546" relation="include">
        </childnode>
        <childnode refid="32547" relation="include">
        </childnode>
      </node>
      <node id="32545">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="32510">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="32511" relation="include">
        </childnode>
        <childnode refid="32491" relation="include">
        </childnode>
        <childnode refid="32553" relation="include">
        </childnode>
        <childnode refid="32554" relation="include">
        </childnode>
        <childnode refid="32536" relation="include">
        </childnode>
        <childnode refid="32492" relation="include">
        </childnode>
        <childnode refid="32558" relation="include">
        </childnode>
        <childnode refid="32552" relation="include">
        </childnode>
        <childnode refid="32559" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32562" relation="include">
        </childnode>
      </node>
      <node id="32549">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="32541">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="32540" relation="include">
        </childnode>
        <childnode refid="32542" relation="include">
        </childnode>
        <childnode refid="32526" relation="include">
        </childnode>
        <childnode refid="32517" relation="include">
        </childnode>
        <childnode refid="32544" relation="include">
        </childnode>
      </node>
      <node id="32483">
        <label>algorithm</label>
      </node>
      <node id="32577">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="32554">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="32555" relation="include">
        </childnode>
        <childnode refid="32512" relation="include">
        </childnode>
        <childnode refid="32552" relation="include">
        </childnode>
        <childnode refid="32518" relation="include">
        </childnode>
        <childnode refid="32536" relation="include">
        </childnode>
        <childnode refid="32511" relation="include">
        </childnode>
        <childnode refid="32516" relation="include">
        </childnode>
        <childnode refid="32492" relation="include">
        </childnode>
        <childnode refid="32527" relation="include">
        </childnode>
        <childnode refid="32494" relation="include">
        </childnode>
        <childnode refid="32556" relation="include">
        </childnode>
      </node>
      <node id="32518">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="32519" relation="include">
        </childnode>
        <childnode refid="32501" relation="include">
        </childnode>
        <childnode refid="32520" relation="include">
        </childnode>
        <childnode refid="32521" relation="include">
        </childnode>
      </node>
      <node id="32574">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="32571" relation="include">
        </childnode>
        <childnode refid="32558" relation="include">
        </childnode>
        <childnode refid="32484" relation="include">
        </childnode>
      </node>
      <node id="32491">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="32509">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="32503">
        <label>memory</label>
      </node>
      <node id="32486">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="32548">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="32538" relation="include">
        </childnode>
        <childnode refid="32539" relation="include">
        </childnode>
        <childnode refid="32549" relation="include">
        </childnode>
      </node>
      <node id="32559">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="32555" relation="include">
        </childnode>
        <childnode refid="32552" relation="include">
        </childnode>
        <childnode refid="32512" relation="include">
        </childnode>
        <childnode refid="32545" relation="include">
        </childnode>
        <childnode refid="32560" relation="include">
        </childnode>
        <childnode refid="32561" relation="include">
        </childnode>
        <childnode refid="32501" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32581">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h</label>
        <link refid="DataList.h"/>
        <childnode refid="32582" relation="include">
        </childnode>
        <childnode refid="32583" relation="include">
        </childnode>
      </node>
      <node id="32583">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLDataBucket_test.cxx</label>
        <link refid="d4/de3/DVLDataBucket__test_8cxx"/>
      </node>
      <node id="32582">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h</label>
        <link refid="db/ded/ConstDataList_8h"/>
        <childnode refid="32583" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d2/de9/structDataListBase" prot="public">DataListBase</innerclass>
    <innerclass refid="d9/dfb/classDataList" prot="public">DataList</innerclass>
    <innerclass refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4" prot="public">DataList&lt; T, DataModel_detail::NoBase &gt;</innerclass>
    <innerclass refid="df/d9d/classClassName_3_01DataList_3_01T_01_4_01_4" prot="public">ClassName&lt; DataList&lt; T &gt; &gt;</innerclass>
    <innerclass refid="d9/dfb/classDataList" prot="public">DataList</innerclass>
    <innerclass refid="dc/d34/structSG_1_1DataBucketTrait_3_01DataList_3_01T_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; DataList&lt; T &gt;, U &gt;</innerclass>
    <innernamespace refid="da/dc2/namespaceDataList__detail">DataList_detail</innernamespace>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d1/d43/DataList_8h_1a7a29fa6695c3cb02dbb0faf32c779d54" prot="public" static="no">
        <name>HAVE_CONSTDATAVECTOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="224" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" prot="public" static="no">
        <name>DATALIST_BASE</name>
        <param><defname>T</defname></param>
        <param><defname>BASE</defname></param>
        <initializer>template &lt;&gt; struct <ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;      \
{ typedef <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;BASE&gt; <ref refid="d5/dd9/classtypename_01DataVectorBase_1_1Base" kindref="compound">Base</ref>; };       \
SG_BASE(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;, <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;BASE&gt;); \
template struct DataList_detail::DVLEltBaseInit&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</initializer>
        <briefdescription>
<para>Declare base class info to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. Single, non-virtual derivation. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member">DATALIST_BASE(D, B)</ref></computeroutput> says that <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput> derives non-virtually from <computeroutput><ref refid="d9/db3/structB" kindref="compound">B</ref></computeroutput>.</para><para>This macro creates an appropriate specialization of <computeroutput><ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="316" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" prot="public" static="no">
        <name>DATALIST_VIRTBASES1</name>
        <param><defname>T</defname></param>
        <param><defname>B1</defname></param>
        <initializer>template &lt;&gt; struct <ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;                  \
{ typedef <ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound">DataList_detail::VirtBases</ref>&lt;B1&gt; <ref refid="d5/dd9/classtypename_01DataVectorBase_1_1Base" kindref="compound">Base</ref>; };   \
SG_BASES1(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;, SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B1&gt;)); \
template struct DataList_detail::DVLEltBaseInit&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</initializer>
        <briefdescription>
<para>Declare base class info to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. Single, virtual derivation. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>DATALIST_VIRTBASES(D, B1)</computeroutput> says that <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput> derives virtually from <computeroutput>B1</computeroutput>.</para><para>This macro creates an appropriate specialization of <computeroutput><ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="332" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" prot="public" static="no">
        <name>DATALIST_VIRTBASES2</name>
        <param><defname>T</defname></param>
        <param><defname>B1</defname></param>
        <param><defname>B2</defname></param>
        <initializer>template &lt;&gt; struct <ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;                    \
{ typedef <ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound">DataList_detail::VirtBases</ref>&lt;B1, B2&gt; <ref refid="d5/dd9/classtypename_01DataVectorBase_1_1Base" kindref="compound">Base</ref>; }; \
SG_BASES2(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;, SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B1&gt;),      \
                       SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B2&gt;)); \
template struct DataList_detail::DVLEltBaseInit&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</initializer>
        <briefdescription>
<para>Declare base class info to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. Multiple derivation. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>DATALIST_VIRTBASES(D, B1)</computeroutput> says that <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput> derives from both <computeroutput>B1</computeroutput> and <computeroutput>B2</computeroutput>.</para><para>This macro creates an appropriate specialization of <computeroutput><ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="350" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d43/DataList_8h_1a3c2f8a00c08d0ffcb32fc1592a4a52d3" prot="public" static="no">
        <name>DATALIST_VIRTBASES3</name>
        <param><defname>T</defname></param>
        <param><defname>B1</defname></param>
        <param><defname>B2</defname></param>
        <param><defname>B3</defname></param>
        <initializer>template &lt;&gt; struct <ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;                    \
{ typedef <ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound">DataList_detail::VirtBases</ref>&lt;B1, B2, B3&gt; <ref refid="d5/dd9/classtypename_01DataVectorBase_1_1Base" kindref="compound">Base</ref>; }; \
SG_BASES3(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;, SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B1&gt;),          \
		       SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B2&gt;),          \
		       SG_VIRTUAL(<ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;B3&gt;)); \
template struct DataList_detail::DVLEltBaseInit&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</initializer>
        <briefdescription>
<para>Declare base class info to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. Multiple derivation. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>DATALIST_VIRTBASES(D, B1)</computeroutput> says that <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput> derives from all of <computeroutput>B1</computeroutput>, <computeroutput>B2</computeroutput>, and <computeroutput>B3</computeroutput>.</para><para>This macro creates an appropriate specialization of <computeroutput><ref refid="d2/de9/structDataListBase" kindref="compound">DataListBase</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="368" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d43/DataList_8h_1a1119a539ef95e66a83ed73e65ce4acb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DL</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement1</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="372" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx" bodystart="3170" bodyend="3181"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a2f4af3db6bca5dc8d962d673635f0865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List equality comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>a</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the size and elements of the lists are equal.</para></simplesect>
This is an equivalence relation. It is linear in the size of the lists. Lists are considered equivalent if their sizes are equal, and if corresponding elements compare equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff the size and elements of the lists are equal.</para></simplesect>
This is an equivalence relation. It is linear in the size of the lists. Lists are considered equivalent if their sizes are equal, and if corresponding elements compare equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2133" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2438" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1aa7a25d1b36f44af915a534c124985c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator==. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2138" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2446" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a331f1405e2b4323d37655e725a8f5b63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>List ordering relation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>a</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if <emphasis>a</emphasis> is lexicographically less than <emphasis>b</emphasis>.</para></simplesect>
This is a total ordering relation. It is linear in the size of the lists. Comparisons are done on the pointer values of the elements.</para><para>See <computeroutput>std::lexicographical_compare()</computeroutput> for how the determination is made.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> of the same type as <emphasis>x</emphasis>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True iff <emphasis>x</emphasis> is lexicographically less than <emphasis>y</emphasis>.</para></simplesect>
This is a total ordering relation. It is linear in the size of the lists. Comparisons are done on the pointer values of the elements.</para><para>See <computeroutput>std::lexicographical_compare()</computeroutput> for how the determination is made. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2153" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2464" bodyend="2467"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a4292484069a07bf3057169565d175df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2158" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2472" bodyend="2475"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a8dfe0fab283df99f49e2e84acda68ad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2163" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2480" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a9cd772f232193f4545efb136406153d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const DataList&lt; T &gt; &amp;a, const DataList&lt; T &gt; &amp;b)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Based on operator&lt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2168" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2488" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="d1/d43/DataList_8h_1a712da80007cfbb1207df094811f2a78b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(DataList&lt; T &gt; &amp;a, DataList&lt; T &gt; &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>See <computeroutput><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member">DataList&lt;T, BASE&gt;::swap()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h" line="2173" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.icc" bodystart="2496" bodyend="2499"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An STL list of pointers that by default owns its pointed-to elements. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Srini Rajagopalan, Sebastien Binet - ATLAS Collaboration </para></simplesect>
<simplesect kind="date"><para>February 2006; rewritten from earlier version. For further information, see &lt;<ulink url="https://twiki.cern.ch/twiki/bin/view/Atlas/DataVector">https://twiki.cern.ch/twiki/bin/view/Atlas/DataVector</ulink>&gt;</para></simplesect>
<ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput>DataList&lt;T&gt;</computeroutput> acts like a <computeroutput>std::list&lt;T*&gt;</computeroutput>, except that it can optionally manage the memory that it contains. The constructors take an (optional) extra argument, which can be either <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member">SG::OWN_ELEMENTS</ref></computeroutput> or <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> (defaulting to <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member">SG::OWN_ELEMENTS</ref></computeroutput> except for a copy constructor). This tells whether the <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> owns its contained elements or not.</para><para>If a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> owns its elements, then they are deleted when the container itself is. Further, they are deleted by actions which erase elements from the container (i.e.: <computeroutput>erase()</computeroutput>, <computeroutput>pop_back()</computeroutput> ). <ref refid="d4/dc4/structA" kindref="compound">A</ref> replacement (such as <computeroutput> (*l.front()) = new <ref refid="d1/def/classT" kindref="compound">T</ref>; </computeroutput>) will result in the old element being deleted and the container taking ownership of the new element. It is an error to assign directly between two owning containers (<computeroutput> (*list1.front()) = (*list2.front());</computeroutput>).</para><para>Beware of ownership issues when modify a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> . Obviously you should not delete explicitly a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> element (because this is already taken care of by this object). <ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> should never have two elements pointing to the same object. This may seem obvious but certain STL algorithms (eg: <computeroutput>remove_if</computeroutput> ) may leave a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> with two copies of the same element in the &quot;left-over&quot; range. To avoid a crash when clearing the list (eg: in the destructor we have introduced a <formula id="0">$ n\log n $</formula> helper function that searches and removes duplicates in the <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> . This is used by the destructor by <computeroutput>clear()</computeroutput> and by <computeroutput>erase(first, last)</computeroutput>. As this may change in the future to improve performance, do not rely on this functionality and do avoid introducing duplicated elements in a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> .</para><para>All these cautions do not apply when a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> it is created with the flag <computeroutput><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member">SG::VIEW_ELEMENTS</ref></computeroutput> (see <computeroutput>enum OwnershipPolicy</computeroutput>) and hence does not own its elements. This is typically used to have <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> elements allocated by <computeroutput>DataPool</computeroutput>. Otherwise consider the cleaner alternative of using a <computeroutput>list&lt;T*&gt;</computeroutput>.</para><para>The interface for <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> should be mostly compatible with that of <computeroutput>std::list</computeroutput>. There are a few differences which should not make much difference in practice. For example, methods which would return a reference return a proxy object instead. Also <computeroutput>value_type</computeroutput> is used instead of <computeroutput>const_reference</computeroutput>; this is justified by the fact that the elements are always pointers.</para><para>Note that algorithms which modify their range may not work correctly if the container owns its contents. Specializations that work properly for <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> are available for some algorithms. These include:<itemizedlist>
<listitem><para><computeroutput>std::remove</computeroutput> </para></listitem><listitem><para><computeroutput>std::remove_if</computeroutput> </para></listitem><listitem><para><computeroutput>std::unique</computeroutput> </para></listitem><listitem><para><computeroutput>std::reverse</computeroutput> </para></listitem><listitem><para><computeroutput>std::rotate</computeroutput> </para></listitem><listitem><para><computeroutput>std::partition</computeroutput> </para></listitem><listitem><para><computeroutput>std::stable_partition</computeroutput> </para></listitem></itemizedlist>
</para><para>There are a few other additions to the standard <computeroutput>std::list</computeroutput> interface.<itemizedlist>
<listitem><para>The method <computeroutput>stdcont</computeroutput> may be used to get access to the underlying <computeroutput>std::list</computeroutput> representation.</para></listitem><listitem><para>The type <computeroutput>PtrList</computeroutput> is the type of the underlying <computeroutput>std::List</computeroutput>. <computeroutput>BaseContainer</computeroutput> is a synonym for this.</para></listitem><listitem><para>The method <computeroutput>ownPolicy</computeroutput> returns the ownership policy of the container.</para></listitem><listitem><para>An additional overload of <computeroutput>clear()</computeroutput> is provided that takes as an argument a new ownership policy for the container. This is the only way to change the ownership policy.</para></listitem></itemizedlist>
</para><para>Note that since <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput> has an element type of <computeroutput>T*</computeroutput>, it is not possible to directly insert a <computeroutput>const T*</computeroutput>. If you want to do that, see <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput>. (In some cases, such as if the destination container is not being recorded in StoreGate, it may be more appropriate to simply use a <computeroutput>std::list&lt;const T*&gt;</computeroutput>.) Don&apos;t just use a <computeroutput>const_cast!</computeroutput> </para><para>Finally, <computeroutput>DataList&apos;s</computeroutput> may inherit from one another. If you have class <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput> which derives from class <computeroutput><ref refid="d9/db3/structB" kindref="compound">B</ref></computeroutput>, you can set things up so that <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;</computeroutput> derives from <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;</computeroutput>. This allows you do to the same sort of conversions on the <computeroutput>DataList&apos;s</computeroutput> as on the element pointers themselves. The key to doing this is to add the declaration</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member" tooltip="Declare base class info to DataList. Single, non-virtual derivation.">DATALIST_BASE</ref><sp/>(<ref refid="d7/db3/structD" kindref="compound">D</ref>,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>);</highlight></codeline>
</programlisting></para><para>before using <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;</computeroutput>. <ref refid="d4/dc4/structA" kindref="compound">A</ref> few caveats about doing this. The pointers are actually stored in the base <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> instance, and the type that <computeroutput>stdcont</computeroutput> returns will reflect this. For example, in the example given above, <computeroutput><ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member">DataList&lt;D&gt;::stdcont()</ref></computeroutput> will return a reference to std::list&lt;B*&gt;. Second, in order to preserve the invariant that a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;</computeroutput> contains only elements that actually derive from <computeroutput><ref refid="d7/db3/structD" kindref="compound">D</ref></computeroutput>, while at the same time not requiring that the contained objects be polymorphic, there is a restriction that you cannot insert into a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> if you&apos;re not referring to it as the most derived type (even if such an insertion would not actually break the invariant). This is implemented as a runtime check.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>ld;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>ld.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>ok.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>ld.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>give<sp/>a<sp/>compilation<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it<sp/>would<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"><sp/>the<sp/>invariant).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref>&amp;<sp/>lb<sp/>=<sp/>ld;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>lb.<ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>give<sp/>a<sp/>run-time<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it<sp/>breaks<sp/>the<sp/>invariant).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>lb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>also<sp/>give<sp/>a<sp/>run-time<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(It</highlight><highlight class="stringliteral">&apos;s<sp/>actually<sp/>ok,<sp/>but<sp/>there&apos;</highlight><highlight class="normal">s<sp/>no<sp/>good<sp/>way</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>distinguish<sp/>it<sp/>from<sp/>the<sp/>previous<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal">.)</highlight></codeline>
</programlisting></para><para>Note also this (related to a common atlas idiom). If we have the above, and also:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">B_List<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;B&gt;<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">D_List<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;D&gt;<sp/>{<sp/>...<sp/>};</highlight></codeline>
</programlisting></para><para>Then a <computeroutput>D_List</computeroutput> will be convertible to a <ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;, but _not_ to a <computeroutput>B_List</computeroutput>.</para><para>Multiple and virtual inheritance are also supported. In this case, use <computeroutput>DATALIST_VIRTBASES</computeroutput><emphasis>n</emphasis> (where <emphasis>n</emphasis> is 1, 2, or 3) instead of <computeroutput>DATALIST_BASE</computeroutput>. Example: Given:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
</programlisting></para><para>declare this with</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" kindref="member" tooltip="Declare base class info to DataList. Multiple derivation.">DATALIST_VIRTBASES2</ref>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>);</highlight></codeline>
</programlisting></para><para>There is a restriction that there must be a unique base class that does not derive from anything else. For example, the diamond configuration above is ok, but this would not be:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">L<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>L<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" kindref="member" tooltip="Declare base class info to DataList. Multiple derivation.">DATALIST_VIRTBASES2</ref>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>,<sp/>L);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" kindref="member" tooltip="Declare base class info to DataList. Single, virtual derivation.">DATALIST_VIRTBASES1</ref>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><ref refid="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" kindref="member" tooltip="Declare base class info to DataList. Multiple derivation.">DATALIST_VIRTBASES2</ref>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>);</highlight></codeline>
</programlisting></para><para>Note, however, that you don&apos;t have to tell <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> about the complete hierarchy; leaving the <computeroutput>L</computeroutput> out of <computeroutput>DATALIST_VIRTBASES</computeroutput> would work (you just wouldn&apos;t be able to convert to <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;L&gt;</computeroutput> ).</para><para>If you use <computeroutput>DATALIST_VIRTBASES</computeroutput>, there is an additional time penalty to retrieve elements from the collection. This does not apply for <computeroutput>DATALIST_BASES</computeroutput>.</para><para>All applicable <computeroutput>DATALIST_*</computeroutput> macros must be visible at the point at which a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> is instantiated. <ref refid="d4/dc4/structA" kindref="compound">A</ref> confusing compilation error is likely to result otherwise. Note that this means that if you have the <computeroutput>DATALIST_*</computeroutput> macros within a container header file, then the header for the derived container must include the header for the base container. Be alert to this when converting existing code to use the inheritance scheme. For example, if class D2 derives from <ref refid="d7/db3/structD" kindref="compound">D</ref> which derives from <ref refid="d9/db3/structB" kindref="compound">B</ref>:</para><para>BList.h: <programlisting><codeline><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;B.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;<ref refid="d1/d43/DataList_8h" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements.">DataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;B&gt;</ref><sp/>BVec;</highlight></codeline>
</programlisting></para><para>DList.h: <programlisting><codeline><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;D.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;<ref refid="d1/d43/DataList_8h" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements.">DataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member" tooltip="Declare base class info to DataList. Single, non-virtual derivation.">DATALIST_BASE</ref>(<ref refid="d7/db3/structD" kindref="compound">D</ref>,<ref refid="d9/db3/structB" kindref="compound">B</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D&gt;</ref><sp/>DVec;</highlight></codeline>
</programlisting></para><para>D2List.h: <programlisting><codeline><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;D2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;<ref refid="d1/d43/DataList_8h" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements.">DataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;DList.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" kindref="member" tooltip="Declare base class info to DataList. Single, non-virtual derivation.">DATALIST_BASE</ref>(D2,<ref refid="d7/db3/structD" kindref="compound">D</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;D2&gt;</ref><sp/>DVec;</highlight></codeline>
</programlisting></para><para>Using <computeroutput>DATALIST_BASE</computeroutput> will also set up the corresponding <computeroutput>SG::BaseInfo</computeroutput> definitions, both for the vectors themselves and for the contained objects. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file&apos;s<sp/>extension<sp/>implies<sp/>that<sp/>it&apos;s<sp/>C,<sp/>but<sp/>it&apos;s<sp/>really<sp/>-*-<sp/>C++<sp/>-*-.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>$Id:<sp/>DataList.h<sp/>616510<sp/>2014-09-12<sp/>15:31:07Z<sp/>ssnyder<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor">#ifndef<sp/>ATHCONTAINERS_DATALIST_H</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_DATALIST_H</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>this<sp/>header<sp/>is<sp/>not<sp/>used<sp/>outside<sp/>of<sp/>Athena:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;DataList<sp/>is<sp/>not<sp/>supported<sp/>outside<sp/>of<sp/>Athena!&quot;</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>feature<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAVE_CONSTDATAVECTOR</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STL<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::swap,<sp/>find,<sp/>find_if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boost<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/static_assert.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/type_traits.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator/iterator_adaptor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kernel<sp/>and<sp/>StoreGate<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/BaseInfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/DataBucketTraitFwd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/ClassName.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/OwnershipPolicy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d92/DVLNoBase_8h" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">AthContainers/tools/DVLNoBase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d2e/DVLInfo_8h" kindref="compound" tooltip="Holder to implement conversion copies for DataVector/DataList. ">AthContainers/tools/DVLInfo.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d16/DVLDataBucket_8h" kindref="compound" tooltip="A DataBucket specialized for DataVector/DataList. ">AthContainers/tools/DVLDataBucket.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d5c/DVLCast_8h" kindref="compound" tooltip="casting operations for DataVector/DataList. ">AthContainers/tools/DVLCast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthContainers/tools/DVLIterator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d6/ddb/DVL__iter__swap_8h" kindref="compound" tooltip="Specializations of iter_swap for DataVector/DataList. ">AthContainers/tools/DVL_iter_swap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/d7a/DVL__algorithms_8h" kindref="compound" tooltip="Specializations of STL algorithms to work with DataVector/List.">AthContainers/tools/DVL_algorithms.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d26/ElementProxy_8h" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">AthContainers/tools/ElementProxy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/dfa/IsMostDerivedFlag_8h" kindref="compound" tooltip="Holder for the is-most-derived flag.">AthContainers/tools/IsMostDerivedFlag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dec/selection__ns_8h" kindref="compound" tooltip="Root changed the name of the selection namespace in 5.19 and 5.99. Define macros...">AthLinks/tools/selection_ns.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">ENTER_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">EXIT_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">DataList_detail<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>intermediate<sp/>classes<sp/>from<sp/>which<sp/>@c<sp/>DataList<sp/>derives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>case<sp/>of<sp/>multiple<sp/>or<sp/>virtual<sp/>derivation.<sp/><sp/>The<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definitions<sp/>are<sp/>in<sp/>the<sp/>@c<sp/>icc<sp/>file.<sp/><sp/>They<sp/>have<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>properties:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>They<sp/>derive<sp/>from<sp/>those<sp/>of<sp/>@c<sp/>B1,<sp/>@c<sp/>B2,<sp/>and<sp/>@c<sp/>B3<sp/>that<sp/>are<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>@c<sp/>NoBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>They<sp/>perform<sp/>(static)<sp/>checking<sp/>to<sp/>ensure<sp/>that<sp/>there&apos;s<sp/>a<sp/>unique</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>base<sp/>class<sp/>in<sp/>the<sp/>hierarchy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>They<sp/>make<sp/>the<sp/>following<sp/>types<sp/>available<sp/>from<sp/>the<sp/>base<sp/>classes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>@c<sp/>PtrList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>@c<sp/>BaseContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>@c<sp/>size_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>@c<sp/>difference_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>@c<sp/>allocator_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>@c<sp/>has_virtual<sp/>is<sp/>defined<sp/>as<sp/>@c<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>An<sp/>override<sp/>of<sp/>@c<sp/>dl_typeid<sp/>is<sp/>defined,<sp/>to<sp/>prevent<sp/>ambiguities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">B1,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">B2=<ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">B3=<ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VirtBases;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>DataList_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="298" refid="d2/de9/structDataListBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/de9/structDataListBase" kindref="compound" tooltip="Derivation information for DataList.">DataListBase</ref></highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">Base</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="d1/d43/DataList_8h_1a9051b45fea61ed235640253b4efdb86b" refkind="member"><highlight class="preprocessor">#define<sp/>DATALIST_BASE(T,<sp/>BASE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>DataListBase&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor">{<sp/>typedef<sp/>DataList&lt;BASE&gt;<sp/>Base;<sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor">SG_BASE(DataList&lt;T&gt;,<sp/>DataList&lt;BASE&gt;);<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor">template<sp/>struct<sp/>DataList_detail::DVLEltBaseInit&lt;T&gt;</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="d1/d43/DataList_8h_1abfa1a94e27e2aa31a9e5de856c459b41" refkind="member"><highlight class="preprocessor">#define<sp/>DATALIST_VIRTBASES1(T,<sp/>B1)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>DataListBase&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor">{<sp/>typedef<sp/>DataList_detail::VirtBases&lt;B1&gt;<sp/>Base;<sp/>};<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor">SG_BASES1(DataList&lt;T&gt;,<sp/>SG_VIRTUAL(DataList&lt;B1&gt;));<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor">template<sp/>struct<sp/>DataList_detail::DVLEltBaseInit&lt;T&gt;</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="d1/d43/DataList_8h_1ad7ad3d1a23e99411007da14017fad6c8" refkind="member"><highlight class="preprocessor">#define<sp/>DATALIST_VIRTBASES2(T,<sp/>B1,<sp/>B2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>DataListBase&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor">{<sp/>typedef<sp/>DataList_detail::VirtBases&lt;B1,<sp/>B2&gt;<sp/>Base;<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor">SG_BASES2(DataList&lt;T&gt;,<sp/>SG_VIRTUAL(DataList&lt;B1&gt;),<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG_VIRTUAL(DataList&lt;B2&gt;));<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor">template<sp/>struct<sp/>DataList_detail::DVLEltBaseInit&lt;T&gt;</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="d1/d43/DataList_8h_1a3c2f8a00c08d0ffcb32fc1592a4a52d3" refkind="member"><highlight class="preprocessor">#define<sp/>DATALIST_VIRTBASES3(T,<sp/>B1,<sp/>B2,<sp/>B3)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>DataListBase&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor">{<sp/>typedef<sp/>DataList_detail::VirtBases&lt;B1,<sp/>B2,<sp/>B3&gt;<sp/>Base;<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor">SG_BASES3(DataList&lt;T&gt;,<sp/>SG_VIRTUAL(DataList&lt;B1&gt;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG_VIRTUAL(DataList&lt;B2&gt;),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG_VIRTUAL(DataList&lt;B3&gt;));<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor">template<sp/>struct<sp/>DataList_detail::DVLEltBaseInit&lt;T&gt;</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">template<sp/>&lt;class<sp/>T,<sp/>class<sp/>BASE<sp/>=<sp/>typename<sp/>DataListBase&lt;T&gt;::Base&gt;</highlight></codeline>
<codeline lineno="385" refid="d9/dfb/classDataList" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>BASE</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BASE<sp/>DataList_BASE;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BASE<sp/>DVL_BASE;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="d9/dfb/classDataList_1a4683c01cf3a39afea9900019341e9862" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a4683c01cf3a39afea9900019341e9862" kindref="member">has_virtual</ref><sp/>=<sp/>BASE::has_virtual;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE::PtrList<sp/><ref refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" kindref="member">PtrList</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE::PtrList<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>types<sp/>required<sp/>for<sp/>the<sp/>container<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*&amp;<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">reference</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE::size_type<sp/>size_type;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE::difference_type<sp/>difference_type;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE::allocator_type<sp/>allocator_type;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>**<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_pointer;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="d9/dfb/classDataList_1a65b55ce2451420f2b0912ff5e26ba42a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="d9/dfb/classDataList_1a1b6d12f288b6623ce6f7bf748ad472cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;DataList&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataModel_detail::const_iterator&lt;DataList&gt;</ref></highlight></codeline>
<codeline lineno="425" refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="d9/dfb/classDataList_1abfba3c85b905733dd3f3e668fa667f5b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;DataList&gt;</ref><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;const_iterator&gt;</highlight></codeline>
<codeline lineno="434" refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;</highlight></codeline>
<codeline lineno="439" refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="445"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/>size_type<sp/>n,<sp/></highlight><highlight class="comment">/*<sp/>value_type<sp/>pElem<sp/>=<sp/>0,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>copy<sp/>constructor<sp/>for<sp/>derived<sp/>classes<sp/>is<sp/>deliberately<sp/>omitted,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>otherwise<sp/>we<sp/>get<sp/>warnings<sp/>about<sp/>not<sp/>calling<sp/>the<sp/>copy<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>base<sp/>classes,<sp/>which<sp/>are<sp/>problematic<sp/>when<sp/>we<sp/>have<sp/>virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inheritance.<sp/><sp/>Most<sp/>of<sp/>what<sp/>needs<sp/>doing<sp/>is<sp/>done<sp/>in<sp/>the<sp/>base<sp/>class<sp/>anyway,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>except<sp/>for<sp/>setting<sp/>@c<sp/>m_isMostDerived.<sp/><sp/>We<sp/>arrange<sp/>for<sp/>these<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>all<sp/>get<sp/>set<sp/>to<sp/>false;<sp/>they&apos;ll<sp/>get<sp/>set<sp/>correctly<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@c<sp/>testInsert<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1aafaa714722c8e45855ce9ccfa3cfa316" kindref="member" tooltip="Assignment operator.">operator=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1af379aa172cd773f12e088af187aa809e" kindref="member" tooltip="Assign from iterators.">assign</ref>(<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructor<sp/>is<sp/>inherited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="578"><highlight class="comment"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref><sp/>();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref><sp/>();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="625"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">const_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a8e1f7911eb19dab9166a4946351d330f" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a8e1f7911eb19dab9166a4946351d330f" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>();</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="723"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref>(<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="786"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="848"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">swap</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a36d2905b9453ebc3a385881d22b7417b" kindref="member" tooltip="Swap the referents of two DataVector iterators.">iter_swap</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>a,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>b);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26d1f6ce406a0b00a538b8c05af44348" kindref="member" tooltip="Sort the container.">sort</ref>();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26d1f6ce406a0b00a538b8c05af44348" kindref="member" tooltip="Sort the container.">sort</ref>(COMPARE<sp/>comp);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="891"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>i<sp/>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last<sp/>);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref>&amp;<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PREDICATE&gt;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a9ea7272ffac866605851732218d45835" kindref="member" tooltip="Remove all elements satisfying a predicate.">remove_if</ref>(<sp/>PREDICATE<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ac1d80934264168e06b20b50421cac53c" kindref="member" tooltip="Remove consecutive duplicate elements.">unique</ref>();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BINARY_PREDICATE&gt;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ac1d80934264168e06b20b50421cac53c" kindref="member" tooltip="Remove consecutive duplicate elements.">unique</ref>(<sp/>BINARY_PREDICATE<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>COMPARE<sp/>predicate<sp/>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a66abd193aa2a8288a5af7ac8029ff96d" kindref="member" tooltip="Reverse the elements in list.">reverse</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ae5896490fc3152b261de439f0a8b1509" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>pos,<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref><sp/>newElem,<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">reference</ref><sp/>oldElem);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>inherited<sp/>from<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo</ref>();</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1aed939a5ff1537cd97fc82af6f4cb5def" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo_v</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Doxygen<sp/>trick.<sp/><sp/>We<sp/>want<sp/>DataList&lt;T&gt;<sp/>to<sp/>show<sp/>the<sp/>complete<sp/>interface,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>inherited<sp/>methods.<sp/><sp/>Normally,<sp/>doxygen<sp/>would<sp/>do<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>it&apos;s<sp/>not<sp/>smart<sp/>to<sp/>figure<sp/>out<sp/>our<sp/>inheritance<sp/>relationships.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>add<sp/>a<sp/>function<sp/>with<sp/>`fn&apos;,<sp/>but<sp/>doxygen<sp/>won&apos;t<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>the<sp/>documentation<sp/>unless<sp/>it<sp/>also<sp/>sees<sp/>the<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>here<sp/>are<sp/>declarations<sp/>which<sp/>should<sp/>be<sp/>visible<sp/>to<sp/>doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>to<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="d9/dfb/classDataList_1a69b1d38eb59472300a71263f9e68d10e" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a76db98827e4484094bdf0fdf5920823c" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(size_type<sp/>sz);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5f27928c9002f4a377de9ff9390c8327" kindref="member" tooltip="Returns true if the collection is empty.">empty</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a0a7ebfb71211b4684237d1254415fd0c" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1aa171bd65a86a7e490b48abc9e79fbb81" kindref="member" tooltip="Remove the first element from the collection.">pop_front</ref>();</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref>();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" kindref="member">PtrList</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26cfa870b6af84ae2b822ae4f100a86a" kindref="member" tooltip="Reset indices / reorder aux data after elements have been permuted.">resortAux</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>beg,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ae606c7332aeefc4ef0fa354ed8bce0fb" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsertOol</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a6dfa66a1192d780c3d0efb6a75bf0139" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a3209aeb4e4baa194a65535c2602106a0" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&gt;;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&gt;;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1&lt;DataList&gt;();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>dl_typeid()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,<sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">value_type</ref><sp/>newElem);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignBaseElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::value_type<sp/>newElem);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>do_cast<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::value_type<sp/>p);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><ref refid="df/d76/classSG_1_1IsMostDerivedFlag" kindref="compound" tooltip="Holder for the is-most-derived flag.">SG::IsMostDerivedFlag</ref><sp/>m_isMostDerived;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/>s_info;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>ROOT_SELECTION_NS::DataList&lt;T,<sp/>DataList_BASE&gt;::self<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;::has_virtual</ref>;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1255" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>,<sp/>DataModel_detail::NoBase&gt;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataList_BASE</ref>;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DVL_BASE</ref>;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1ac4f7baf956209ef4cfcff4a68887a392" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::true_type<sp/>isSequence;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1abd17c4641bc563342e90f0cacb64af97" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;T*&gt;<sp/><ref refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" kindref="member">PtrList</ref>;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;T*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a904290e6b3a3dc730b98b1866b160827" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a4683c01cf3a39afea9900019341e9862" kindref="member">has_virtual</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Standard<sp/>types<sp/>required<sp/>for<sp/>the<sp/>container<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*&amp;<sp/><ref refid="d1/def/classT" kindref="compound">reference</ref>;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::size_type<sp/>size_type;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::difference_type<sp/>difference_type;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::allocator_type<sp/>allocator_type;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>**<sp/><ref refid="d1/def/classT" kindref="compound">pointer</ref>;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_pointer;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d1/def/classT" kindref="compound">const_value_type</ref>;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2b4d44e14e15d8c836d3af43e45cae85" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/><ref refid="d1/def/classT" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a7a43f3105d5ac0011046690b54cbefdf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;DataList&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a9b4ed8201c8530d85d7155410f5178e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::const_iterator<sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref>;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a2005081b262f1e63a17d7ccc0615249d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;DataList&gt;</ref><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref>;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;const_iterator&gt;</highlight></codeline>
<codeline lineno="1309" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a835adbeac6f6308e227b0ebbb601d40e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;</highlight></codeline>
<codeline lineno="1314" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1add2a33702a069332966fb7369c33da52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/>size_type<sp/>n,<sp/></highlight><highlight class="comment">/*<sp/>value_type<sp/>pElem<sp/>=<sp/>0,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1afa13fa1dab24a79286696eb6bd170e25" kindref="member" tooltip="Default constructor.">DataList</ref>(<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref><sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref><sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1aafaa714722c8e45855ce9ccfa3cfa316" kindref="member" tooltip="Assignment operator.">operator=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1af379aa172cd773f12e088af187aa809e" kindref="member" tooltip="Assign from iterators.">assign</ref>(<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="d9/dfb/classDataList_1a217d9ddec8baf20f34ca0884a08e1c3a" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>size_type<sp/><ref refid="d9/dfb/classDataList_1a69b1d38eb59472300a71263f9e68d10e" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a76db98827e4484094bdf0fdf5920823c" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(<sp/>size_type<sp/>sz<sp/>);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5f27928c9002f4a377de9ff9390c8327" kindref="member" tooltip="Returns true if the collection is empty.">empty</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/><ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d9/dfb/classDataList_1a79e1ec33c315d4c2d89c4fc52da88ab8" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d9/dfb/classDataList_1a439ea3688eab256ec2a59f44cd89c36a" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>();</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a36666a33cbaf6ec217564c9938678150" kindref="member" tooltip="Standard const_iterator.">const_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a713f3407472e1037f810289aa1e4e77a" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>();</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a2d0fe4a74f2853aa38cabdad1dad79a5" kindref="member" tooltip="Standard const_reverse_iterator.">const_reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a8e1f7911eb19dab9166a4946351d330f" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a0fe79dcf1702a22d3a2b9ae231a753d1" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>();</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1a5576c32c1307ef704d73dcc993a5cbe9" kindref="member">reverse_iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a8e1f7911eb19dab9166a4946351d330f" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad6b682b8e89e1d716b2f78005ac4cc0b" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref>(<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a87c05187af67b866631aba4d5dab7f1e" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref><sp/>pElem<sp/>);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a9328706e2ebf33cde9a2cc4baba91c0e" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1660"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position<sp/>);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aea3404502bbed9f4f299409b5f808268" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1aa171bd65a86a7e490b48abc9e79fbb81" kindref="member" tooltip="Remove the first element from the collection.">pop_front</ref>();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a0a7ebfb71211b4684237d1254415fd0c" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref>();</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ade7bb968baf47988e3e1abf5c346fe7b" kindref="member" tooltip="Swap this collection with another.">swap</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a36d2905b9453ebc3a385881d22b7417b" kindref="member" tooltip="Swap the referents of two DataVector iterators.">iter_swap</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>a,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>b);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26d1f6ce406a0b00a538b8c05af44348" kindref="member" tooltip="Sort the container.">sort</ref>();</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26d1f6ce406a0b00a538b8c05af44348" kindref="member" tooltip="Sort the container.">sort</ref>(<sp/>COMPARE<sp/>comp<sp/>);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>i<sp/>);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a8442049991bf8ea5abf1f0e8e0af6e4b" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last<sp/>);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref>&amp;<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PREDICATE&gt;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a9ea7272ffac866605851732218d45835" kindref="member" tooltip="Remove all elements satisfying a predicate.">remove_if</ref>(<sp/>PREDICATE<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ac1d80934264168e06b20b50421cac53c" kindref="member" tooltip="Remove consecutive duplicate elements.">unique</ref>();</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryPredicate&gt;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ac1d80934264168e06b20b50421cac53c" kindref="member" tooltip="Remove consecutive duplicate elements.">unique</ref>(<sp/>BinaryPredicate<sp/>pred<sp/>);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a5468698e7d84adc3af09573eb3c546bc" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&amp;<sp/>l,<sp/>COMPARE<sp/>predicate<sp/>);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a66abd193aa2a8288a5af7ac8029ff96d" kindref="member" tooltip="Reverse the elements in list.">reverse</ref>();</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ae5896490fc3152b261de439f0a8b1509" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>pos,<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref><sp/>newElem,<sp/><ref refid="d1/def/classT" kindref="compound">reference</ref><sp/>oldElem);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" kindref="member">PtrList</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1a4f0cca5ce1808d7e1c95a9c00b694007" kindref="member" tooltip="Return the underlying std::list of the container.">stdcont</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ad46d13b4cdef421ab786cf1853a47990" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/><ref refid="d9/dfb/classDataList_1aeb3e70ccf796a027c6a5335ba8db0d6e" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1a3ece8bf1e54f6c622a81dfedebcfc6f4" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo</ref>();</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/><ref refid="d9/dfb/classDataList_1aed939a5ff1537cd97fc82af6f4cb5def" kindref="member" tooltip="Return the DV/DL info struct for this class.">dvlinfo_v</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a26cfa870b6af84ae2b822ae4f100a86a" kindref="member" tooltip="Reset indices / reorder aux data after elements have been permuted.">resortAux</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>beg,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d9/dfb/classDataList_1aabf113bd81d675de3eaaaa46e4fc38aa" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a161fca87769e0b0fba562c9233f9500c" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsert</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1ae606c7332aeefc4ef0fa354ed8bce0fb" kindref="member" tooltip="Test if we can insert; raise an exception if not.">testInsertOol</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&gt;;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&gt;;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1&lt;DataList&gt;();</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,<sp/><ref refid="d1/def/classT" kindref="compound">value_type</ref><sp/>newElem);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignBaseElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::value_type<sp/>newElem);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>erase_base(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>position<sp/>);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>erase_base(<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>first,<sp/></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PtrList::iterator<sp/>last<sp/>);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2064" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a58d4eab21e401f540614780a4bbe5c4f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>m_ownPolicy;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067" refid="d0/d3c/classDataList_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1adccdf67214a3ae7e0bf5c627f7773fb1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="d9/dfb/classDataList_1ab384350a05e8dd7ebf15e72bd8436437" kindref="member">PtrList</ref><sp/>m_pCont;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a6dfa66a1192d780c3d0efb6a75bf0139" kindref="member" tooltip="Clear m_isMostDerived for this instance and for all bases.">clearMostDerived</ref>();</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList_1a3209aeb4e4baa194a65535c2602106a0" kindref="member" tooltip="Set m_isMostDerived for this instance and clear it for all bases.">setMostDerived</ref>();</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>dl_typeid()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><ref refid="df/d76/classSG_1_1IsMostDerivedFlag" kindref="compound" tooltip="Holder for the is-most-derived flag.">SG::IsMostDerivedFlag</ref><sp/>m_isMostDerived;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="df/d12/classDataModel__detail_1_1DVLInfo" kindref="compound">DataModel_detail::DVLInfo&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/>s_info;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>ROOT_SELECTION_NS::DataList&lt;T,<sp/>DataList_BASE&gt;::self<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, DataModel_detail::NoBase&gt;::has_virtual</ref>;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a2f4af3db6bca5dc8d962d673635f0865" kindref="member" tooltip="List equality comparison.">operator==</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1aa7a25d1b36f44af915a534c124985c2b" kindref="member" tooltip="Based on operator==.">operator!=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(<sp/>const<sp/>DataList&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a4292484069a07bf3057169565d175df1" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt; </ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(<sp/>const<sp/>DataList&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a9cd772f232193f4545efb136406153d5" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt;=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref>(<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2183" refid="df/d9d/classClassName_3_01DataList_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ClassName&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>name();</highlight></codeline>
<codeline lineno="2187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal">ENTER_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ROOT_VERSION_CODE<sp/>&lt;<sp/>ROOT_VERSION(<sp/>5,<sp/>99,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2193"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref></highlight></codeline>
<codeline lineno="2196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T, BASE&gt;</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::TEMPLATE_DEFAULTS&lt;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/>ROOT_SELECTION_NS::NODEFAULT,</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>::DataList&lt;T&gt;::DataList_BASE&gt;<sp/>dum1;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::NO_SELF_AUTOSELECT<sp/>dum2;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/>ROOT_SELECTION_NS::TRANSIENT<sp/>m_isMostDerived;</highlight></codeline>
<codeline lineno="2205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2208"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE<sp/>&gt;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref><sp/>:<sp/><ref refid="d6/de5/classKeepFirstTemplateArguments" kindref="compound">KeepFirstTemplateArguments</ref>&lt;<sp/>1<sp/>&gt;,<sp/><ref refid="d9/dec/classSelectNoInstance" kindref="compound">SelectNoInstance</ref><sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2214" refid="d9/dfb/classDataList_1a6f3deaf9282eb42f6ba28c58c9864e4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt; T, BASE &gt;</ref><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217" refid="d9/dfb/classDataList_1a333fcba9f47a901c0087547b667e5120" refkind="member"><highlight class="normal"><sp/><sp/><sp/>ROOT_SELECTION_NS::MemberAttributes&lt;<sp/>kTransient<sp/>&gt;<sp/>m_isMostDerived;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ROOT_VERSION</highlight></codeline>
<codeline lineno="2222"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal">EXIT_ROOT_SELECTION_NS</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="2236" refid="dc/d34/structSG_1_1DataBucketTrait_3_01DataList_3_01T_01_4_00_01U_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DataBucketTrait&lt;<ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;,<sp/>U&gt;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d6/d33/classSG_1_1DVLDataBucket" kindref="compound" tooltip="A DataBucket specialized for DataVector/DataList. ">SG::DVLDataBucket&lt;U&gt;</ref><sp/><ref refid="d6/d33/classSG_1_1DVLDataBucket" kindref="compound" tooltip="A DataBucket specialized for DataVector/DataList. ">type</ref>;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init()<sp/>{<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;::dvlinfo</ref>();<sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/ddf/DataList_8icc" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements. Implementation...">AthContainers/DataList.icc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="2248"><highlight class="preprocessor"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Code<sp/>to<sp/>try<sp/>to<sp/>make<sp/>the<sp/>DATALIST_BASES<sp/>definitions<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>SG_BASES.<sp/><sp/>Still<sp/>have<sp/>to<sp/>use<sp/>one<sp/>macro,<sp/>DATALIST_BASES_FROM_SG.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently<sp/>missing<sp/>the<sp/>part<sp/>that<sp/>would<sp/>declare<sp/>the<sp/>DataList<sp/>relations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>SG.<sp/><sp/>Not<sp/>sure<sp/>how<sp/>useful<sp/>this<sp/>will<sp/>be;<sp/>don&apos;t<sp/>bother<sp/>trying<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>finish<sp/>it<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/mpl/if.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/mpl/and.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/mpl/equal_to.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>if_<sp/><sp/>boost::mpl::if_</highlight></codeline>
<codeline lineno="2258"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>and_<sp/>boost::mpl::and_</highlight></codeline>
<codeline lineno="2259"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>equal_to<sp/>boost::mpl::equal_to</highlight></codeline>
<codeline lineno="2260"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>true_<sp/><sp/>boost::mpl::true_</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>false_<sp/>boost::mpl::false_</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_virtual<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>true_<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">not_virtual&lt;SG::Virtual&lt;U&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>false_<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">clean_type<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>U<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">clean_type&lt;SG::NoBase&gt;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal">{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref><sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">clean_type&lt;SG::Virtual&lt;U&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>clean_type&lt;U&gt;::type<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bases_from_sg</highlight></codeline>
<codeline lineno="2271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if_&lt;equal_to&lt;typename<sp/>SG::Bases&lt;T&gt;::Base1,<sp/>SG::NoBase&gt;,</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound" tooltip="Marker for the base of the inheritance hierarchy.">DataModel_detail::NoBase</ref>,</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if_&lt;and_&lt;equal_to&lt;typename<sp/>SG::Bases&lt;T&gt;::Base1,<sp/>SG::NoBase&gt;,</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not_virtual&lt;typename<sp/>SG::Bases&lt;T&gt;::Base2&gt;<sp/>&gt;,</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SG::Bases&lt;T&gt;::Base1,</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/dec/structDataList__detail_1_1VirtBases" kindref="compound" tooltip="VirtBases for three classes.">DataList_detail::VirtBases</ref></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;clean_type&lt;typename<sp/>SG::Bases&lt;T&gt;::Base1&gt;,</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clean_type&lt;typename<sp/>SG::Bases&lt;T&gt;::Base2&gt;,</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clean_type&lt;typename<sp/>SG::Bases&lt;T&gt;::Base3&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>if_</highlight></codeline>
<codeline lineno="2285"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>and_</highlight></codeline>
<codeline lineno="2286"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>equal_to</highlight></codeline>
<codeline lineno="2287"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>true_</highlight></codeline>
<codeline lineno="2288"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>false_</highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATALIST_BASES_FROM_SG(T)<sp/>\</highlight></codeline>
<codeline lineno="2291"><highlight class="preprocessor">template<sp/>&lt;&gt;<sp/>struct<sp/>DataListBase&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2292"><highlight class="preprocessor">{<sp/>typedef<sp/>bases_from_sg&lt;T&gt;::type<sp/>Base;<sp/>};</highlight></codeline>
<codeline lineno="2293"><highlight class="preprocessor"></highlight><highlight class="comment">//===================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2295"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ATHCONTAINERS_DATALIST_H</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataList.h"/>
  </compounddef>
</doxygen>
