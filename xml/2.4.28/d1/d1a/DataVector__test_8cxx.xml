<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d1/d1a/DataVector__test_8cxx" kind="file">
    <compoundname>DataVector_test.cxx</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">math.h</includes>
    <includes local="no">boost/iterator_adaptors.hpp</includes>
    <includes local="no">boost/iterator/indirect_iterator.hpp</includes>
    <includes local="no">boost/assign/list_of.hpp</includes>
    <includes local="yes">SGTools/CLASS_DEF.h</includes>
    <includes local="yes">SGTools/ClassName.h</includes>
    <includes refid="d2/db8/DataVector__test_8icc" local="yes">DataVector_test.icc</includes>
    <includes refid="d7/dd6/DataVector_8h" local="yes">AthContainers/DataVector.h</includes>
    <includes refid="d2/d0d/ConstDataVector_8h" local="yes">AthContainers/ConstDataVector.h</includes>
    <includes refid="d3/d0f/AuxStoreInternal_8h" local="yes">AthContainers/AuxStoreInternal.h</includes>
    <includes refid="db/d5c/AuxElementComplete_8h" local="yes">AthContainers/AuxElementComplete.h</includes>
    <incdepgraph>
      <node id="73524">
        <label>list</label>
      </node>
      <node id="73533">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="73518" relation="include">
        </childnode>
        <childnode refid="73525" relation="include">
        </childnode>
        <childnode refid="73510" relation="include">
        </childnode>
        <childnode refid="73514" relation="include">
        </childnode>
        <childnode refid="73451" relation="include">
        </childnode>
      </node>
      <node id="73518">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="73489">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="73538">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="73539" relation="include">
        </childnode>
        <childnode refid="73519" relation="include">
        </childnode>
        <childnode refid="73458" relation="include">
        </childnode>
        <childnode refid="73540" relation="include">
        </childnode>
      </node>
      <node id="73506">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="73450" relation="include">
        </childnode>
        <childnode refid="73452" relation="include">
        </childnode>
        <childnode refid="73458" relation="include">
        </childnode>
        <childnode refid="73459" relation="include">
        </childnode>
      </node>
      <node id="73508">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="73470" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73509" relation="include">
        </childnode>
        <childnode refid="73443" relation="include">
        </childnode>
      </node>
      <node id="73507">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="73457">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="73459">
        <label>functional</label>
      </node>
      <node id="73436">
        <label>iomanip</label>
      </node>
      <node id="73515">
        <label>boost/version.hpp</label>
      </node>
      <node id="73456">
        <label>limits</label>
      </node>
      <node id="73509">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="73487">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="73555">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="73475" relation="include">
        </childnode>
      </node>
      <node id="73453">
        <label>iterator</label>
      </node>
      <node id="73471">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="73434" relation="include">
        </childnode>
        <childnode refid="73472" relation="include">
        </childnode>
      </node>
      <node id="73547">
        <label>SGTools/ClassID_traits.h</label>
      </node>
      <node id="73444">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="73543">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="73544" relation="include">
        </childnode>
        <childnode refid="73513" relation="include">
        </childnode>
        <childnode refid="73456" relation="include">
        </childnode>
        <childnode refid="73459" relation="include">
        </childnode>
        <childnode refid="73545" relation="include">
        </childnode>
      </node>
      <node id="73446">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="73447" relation="include">
        </childnode>
        <childnode refid="73460" relation="include">
        </childnode>
        <childnode refid="73433" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
      </node>
      <node id="73473">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
      </node>
      <node id="73548">
        <label>AthContainers/ConstDataVector.icc</label>
        <link refid="d2/d61/ConstDataVector_8icc"/>
        <childnode refid="73549" relation="include">
        </childnode>
        <childnode refid="73459" relation="include">
        </childnode>
      </node>
      <node id="73475">
        <label>stdint.h</label>
      </node>
      <node id="73525">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="73456" relation="include">
        </childnode>
        <childnode refid="73526" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
      </node>
      <node id="73494">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
      </node>
      <node id="73467">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="73463">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="73551">
        <label>AthContainersInterfaces/IAuxStoreIO.h</label>
        <link refid="d9/db5/IAuxStoreIO_8h"/>
        <childnode refid="73447" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73552" relation="include">
        </childnode>
        <childnode refid="73443" relation="include">
        </childnode>
      </node>
      <node id="73557">
        <label>AthContainers/AuxElementComplete.icc</label>
        <link refid="d2/d26/AuxElementComplete_8icc"/>
      </node>
      <node id="73478">
        <label>RVersion.h</label>
      </node>
      <node id="73449">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="73450" relation="include">
        </childnode>
        <childnode refid="73458" relation="include">
        </childnode>
        <childnode refid="73459" relation="include">
        </childnode>
      </node>
      <node id="73455">
        <label>cmath</label>
      </node>
      <node id="73432">
        <label>cassert</label>
      </node>
      <node id="73516">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="73535">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="73549">
        <label>boost/iterator/transform_iterator.hpp</label>
      </node>
      <node id="73433">
        <label>stdexcept</label>
      </node>
      <node id="73490">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="73522">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="73553">
        <label>CxxUtils/unused.h</label>
        <link refid="d8/d4b/unused_8h"/>
      </node>
      <node id="73530">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="73434">
        <label>string</label>
      </node>
      <node id="73469">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="73447" relation="include">
        </childnode>
        <childnode refid="73470" relation="include">
        </childnode>
        <childnode refid="73471" relation="include">
        </childnode>
        <childnode refid="73473" relation="include">
        </childnode>
        <childnode refid="73474" relation="include">
        </childnode>
        <childnode refid="73480" relation="include">
        </childnode>
        <childnode refid="73481" relation="include">
        </childnode>
        <childnode refid="73482" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73452" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
        <childnode refid="73483" relation="include">
        </childnode>
        <childnode refid="73484" relation="include">
        </childnode>
        <childnode refid="73485" relation="include">
        </childnode>
        <childnode refid="73491" relation="include">
        </childnode>
      </node>
      <node id="73493">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
      </node>
      <node id="73554">
        <label>CxxUtils/make_unique.h</label>
        <link refid="d3/d77/make__unique_8h"/>
      </node>
      <node id="73483">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="73527">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="73466" relation="include">
        </childnode>
        <childnode refid="73525" relation="include">
        </childnode>
        <childnode refid="73528" relation="include">
        </childnode>
        <childnode refid="73530" relation="include">
        </childnode>
        <childnode refid="73515" relation="include">
        </childnode>
        <childnode refid="73453" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
      </node>
      <node id="73539">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="73540">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="73541" relation="include">
        </childnode>
      </node>
      <node id="73541">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="73479">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="73503">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="73532">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="73527" relation="include">
        </childnode>
        <childnode refid="73453" relation="include">
        </childnode>
        <childnode refid="73451" relation="include">
        </childnode>
        <childnode refid="73533" relation="include">
        </childnode>
      </node>
      <node id="73556">
        <label>AthContainers/AuxElementComplete.h</label>
        <link refid="db/d5c/AuxElementComplete_8h"/>
        <childnode refid="73510" relation="include">
        </childnode>
        <childnode refid="73557" relation="include">
        </childnode>
      </node>
      <node id="73484">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="73500">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="73528">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="73466" relation="include">
        </childnode>
        <childnode refid="73477" relation="include">
        </childnode>
        <childnode refid="73458" relation="include">
        </childnode>
        <childnode refid="73529" relation="include">
        </childnode>
      </node>
      <node id="73511">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="73477">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="73478" relation="include">
        </childnode>
        <childnode refid="73479" relation="include">
        </childnode>
      </node>
      <node id="73481">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="73488">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="73462">
        <label>AthContainers/tools/foreach.h</label>
        <link refid="da/d8e/foreach_8h"/>
        <childnode refid="73463" relation="include">
        </childnode>
      </node>
      <node id="73441">
        <label>boost/iterator/indirect_iterator.hpp</label>
      </node>
      <node id="73526">
        <label>limits.h</label>
      </node>
      <node id="73520">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="73521" relation="include">
        </childnode>
      </node>
      <node id="73442">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="73498">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="73471" relation="include">
        </childnode>
        <childnode refid="73456" relation="include">
        </childnode>
        <childnode refid="73475" relation="include">
        </childnode>
        <childnode refid="73499" relation="include">
        </childnode>
      </node>
      <node id="73447">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73449" relation="include">
        </childnode>
      </node>
      <node id="73450">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="73451" relation="include">
        </childnode>
        <childnode refid="73452" relation="include">
        </childnode>
        <childnode refid="73453" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
        <childnode refid="73455" relation="include">
        </childnode>
        <childnode refid="73456" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
        <childnode refid="73457" relation="include">
        </childnode>
      </node>
      <node id="73513">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="73432" relation="include">
        </childnode>
      </node>
      <node id="73445">
        <label>DataVector_test.icc</label>
        <link refid="d2/db8/DataVector__test_8icc"/>
        <childnode refid="73446" relation="include">
        </childnode>
        <childnode refid="73462" relation="include">
        </childnode>
        <childnode refid="73464" relation="include">
        </childnode>
        <childnode refid="73433" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
        <childnode refid="73435" relation="include">
        </childnode>
        <childnode refid="73465" relation="include">
        </childnode>
        <childnode refid="73546" relation="include">
        </childnode>
        <childnode refid="73550" relation="include">
        </childnode>
        <childnode refid="73553" relation="include">
        </childnode>
        <childnode refid="73554" relation="include">
        </childnode>
        <childnode refid="73555" relation="include">
        </childnode>
      </node>
      <node id="73529">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="73525" relation="include">
        </childnode>
        <childnode refid="73513" relation="include">
        </childnode>
      </node>
      <node id="73461">
        <label>typeinfo</label>
      </node>
      <node id="73512">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="73483" relation="include">
        </childnode>
        <childnode refid="73432" relation="include">
        </childnode>
      </node>
      <node id="73465">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="73446" relation="include">
        </childnode>
        <childnode refid="73466" relation="include">
        </childnode>
        <childnode refid="73467" relation="include">
        </childnode>
        <childnode refid="73468" relation="include">
        </childnode>
        <childnode refid="73518" relation="include">
        </childnode>
        <childnode refid="73519" relation="include">
        </childnode>
        <childnode refid="73525" relation="include">
        </childnode>
        <childnode refid="73527" relation="include">
        </childnode>
        <childnode refid="73531" relation="include">
        </childnode>
        <childnode refid="73532" relation="include">
        </childnode>
        <childnode refid="73528" relation="include">
        </childnode>
        <childnode refid="73534" relation="include">
        </childnode>
        <childnode refid="73477" relation="include">
        </childnode>
        <childnode refid="73535" relation="include">
        </childnode>
        <childnode refid="73536" relation="include">
        </childnode>
        <childnode refid="73530" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73459" relation="include">
        </childnode>
        <childnode refid="73437" relation="include">
        </childnode>
        <childnode refid="73451" relation="include">
        </childnode>
        <childnode refid="73433" relation="include">
        </childnode>
        <childnode refid="73453" relation="include">
        </childnode>
        <childnode refid="73509" relation="include">
        </childnode>
        <childnode refid="73537" relation="include">
        </childnode>
        <childnode refid="73538" relation="include">
        </childnode>
        <childnode refid="73542" relation="include">
        </childnode>
        <childnode refid="73543" relation="include">
        </childnode>
      </node>
      <node id="73499">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="73480">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="73476">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="73475" relation="include">
        </childnode>
      </node>
      <node id="73472">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="73502">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="73519">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="73520" relation="include">
        </childnode>
        <childnode refid="73468" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73457" relation="include">
        </childnode>
        <childnode refid="73522" relation="include">
        </childnode>
        <childnode refid="73501" relation="include">
        </childnode>
        <childnode refid="73523" relation="include">
        </childnode>
      </node>
      <node id="73443">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="73537">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="73444" relation="include">
        </childnode>
      </node>
      <node id="73492">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="73447" relation="include">
        </childnode>
        <childnode refid="73493" relation="include">
        </childnode>
        <childnode refid="73494" relation="include">
        </childnode>
        <childnode refid="73495" relation="include">
        </childnode>
        <childnode refid="73504" relation="include">
        </childnode>
        <childnode refid="73485" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73506" relation="include">
        </childnode>
        <childnode refid="73507" relation="include">
        </childnode>
      </node>
      <node id="73438">
        <label>vector</label>
      </node>
      <node id="73544">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="73451" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
      </node>
      <node id="73546">
        <label>AthContainers/ConstDataVector.h</label>
        <link refid="d2/d0d/ConstDataVector_8h"/>
        <childnode refid="73465" relation="include">
        </childnode>
        <childnode refid="73547" relation="include">
        </childnode>
        <childnode refid="73548" relation="include">
        </childnode>
      </node>
      <node id="73545">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="73452">
        <label>utility</label>
      </node>
      <node id="73542">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="73482">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="73435">
        <label>sstream</label>
      </node>
      <node id="73517">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="73486">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="73440">
        <label>boost/iterator_adaptors.hpp</label>
      </node>
      <node id="73496">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="73485">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="73486" relation="include">
        </childnode>
        <childnode refid="73487" relation="include">
        </childnode>
        <childnode refid="73488" relation="include">
        </childnode>
        <childnode refid="73489" relation="include">
        </childnode>
        <childnode refid="73490" relation="include">
        </childnode>
      </node>
      <node id="73439">
        <label>math.h</label>
      </node>
      <node id="73454">
        <label>cstdlib</label>
      </node>
      <node id="73460">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="73437">
        <label>iostream</label>
      </node>
      <node id="73470">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="73447" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73443" relation="include">
        </childnode>
      </node>
      <node id="73448">
        <label>cstddef</label>
      </node>
      <node id="73491">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="73492" relation="include">
        </childnode>
        <childnode refid="73508" relation="include">
        </childnode>
        <childnode refid="73470" relation="include">
        </childnode>
        <childnode refid="73483" relation="include">
        </childnode>
        <childnode refid="73484" relation="include">
        </childnode>
      </node>
      <node id="73523">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="73466" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73524" relation="include">
        </childnode>
        <childnode refid="73432" relation="include">
        </childnode>
        <childnode refid="73454" relation="include">
        </childnode>
        <childnode refid="73509" relation="include">
        </childnode>
      </node>
      <node id="73495">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="73493" relation="include">
        </childnode>
        <childnode refid="73496" relation="include">
        </childnode>
        <childnode refid="73473" relation="include">
        </childnode>
        <childnode refid="73497" relation="include">
        </childnode>
        <childnode refid="73482" relation="include">
        </childnode>
        <childnode refid="73461" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73451" relation="include">
        </childnode>
        <childnode refid="73475" relation="include">
        </childnode>
        <childnode refid="73501" relation="include">
        </childnode>
        <childnode refid="73502" relation="include">
        </childnode>
        <childnode refid="73503" relation="include">
        </childnode>
      </node>
      <node id="73431">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx</label>
        <link refid="DataVector_test.cxx"/>
        <childnode refid="73432" relation="include">
        </childnode>
        <childnode refid="73433" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
        <childnode refid="73435" relation="include">
        </childnode>
        <childnode refid="73436" relation="include">
        </childnode>
        <childnode refid="73437" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73439" relation="include">
        </childnode>
        <childnode refid="73440" relation="include">
        </childnode>
        <childnode refid="73441" relation="include">
        </childnode>
        <childnode refid="73442" relation="include">
        </childnode>
        <childnode refid="73443" relation="include">
        </childnode>
        <childnode refid="73444" relation="include">
        </childnode>
        <childnode refid="73445" relation="include">
        </childnode>
        <childnode refid="73465" relation="include">
        </childnode>
        <childnode refid="73546" relation="include">
        </childnode>
        <childnode refid="73550" relation="include">
        </childnode>
        <childnode refid="73556" relation="include">
        </childnode>
      </node>
      <node id="73501">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="73468">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="73469" relation="include">
        </childnode>
        <childnode refid="73466" relation="include">
        </childnode>
        <childnode refid="73467" relation="include">
        </childnode>
        <childnode refid="73510" relation="include">
        </childnode>
        <childnode refid="73492" relation="include">
        </childnode>
        <childnode refid="73446" relation="include">
        </childnode>
        <childnode refid="73513" relation="include">
        </childnode>
        <childnode refid="73508" relation="include">
        </childnode>
        <childnode refid="73514" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73517" relation="include">
        </childnode>
      </node>
      <node id="73552">
        <label>set</label>
      </node>
      <node id="73505">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="73497">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="73496" relation="include">
        </childnode>
        <childnode refid="73498" relation="include">
        </childnode>
        <childnode refid="73482" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73500" relation="include">
        </childnode>
      </node>
      <node id="73451">
        <label>algorithm</label>
      </node>
      <node id="73534">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="73464">
        <label>TestTools/expect_exception.h</label>
        <link refid="d2/d67/expect__exception_8h"/>
        <childnode refid="73432" relation="include">
        </childnode>
      </node>
      <node id="73550">
        <label>AthContainers/AuxStoreInternal.h</label>
        <link refid="d3/d0f/AuxStoreInternal_8h"/>
        <childnode refid="73508" relation="include">
        </childnode>
        <childnode refid="73551" relation="include">
        </childnode>
        <childnode refid="73485" relation="include">
        </childnode>
        <childnode refid="73482" relation="include">
        </childnode>
        <childnode refid="73438" relation="include">
        </childnode>
        <childnode refid="73509" relation="include">
        </childnode>
        <childnode refid="73443" relation="include">
        </childnode>
      </node>
      <node id="73510">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="73511" relation="include">
        </childnode>
        <childnode refid="73470" relation="include">
        </childnode>
        <childnode refid="73508" relation="include">
        </childnode>
        <childnode refid="73474" relation="include">
        </childnode>
        <childnode refid="73492" relation="include">
        </childnode>
        <childnode refid="73469" relation="include">
        </childnode>
        <childnode refid="73473" relation="include">
        </childnode>
        <childnode refid="73446" relation="include">
        </childnode>
        <childnode refid="73483" relation="include">
        </childnode>
        <childnode refid="73448" relation="include">
        </childnode>
        <childnode refid="73512" relation="include">
        </childnode>
      </node>
      <node id="73474">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="73475" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
        <childnode refid="73476" relation="include">
        </childnode>
        <childnode refid="73477" relation="include">
        </childnode>
      </node>
      <node id="73531">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="73527" relation="include">
        </childnode>
        <childnode refid="73513" relation="include">
        </childnode>
        <childnode refid="73453" relation="include">
        </childnode>
      </node>
      <node id="73466">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="73521">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="73536">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="73458">
        <label>memory</label>
      </node>
      <node id="73504">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="73494" relation="include">
        </childnode>
        <childnode refid="73495" relation="include">
        </childnode>
        <childnode refid="73505" relation="include">
        </childnode>
      </node>
      <node id="73514">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="73511" relation="include">
        </childnode>
        <childnode refid="73508" relation="include">
        </childnode>
        <childnode refid="73470" relation="include">
        </childnode>
        <childnode refid="73501" relation="include">
        </childnode>
        <childnode refid="73515" relation="include">
        </childnode>
        <childnode refid="73516" relation="include">
        </childnode>
        <childnode refid="73434" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="df/d17/structAbsFluff" prot="public">AbsFluff</innerclass>
    <innerclass refid="d3/d3b/structDerivedFluff" prot="public">DerivedFluff</innerclass>
    <innerclass refid="de/d7a/classFluffContainer" prot="public">FluffContainer</innerclass>
    <innerclass refid="d1/d73/structAuxR" prot="public">AuxR</innerclass>
    <innerclass refid="d1/d0f/classTestEmptyStore" prot="public">TestEmptyStore</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="78" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a4bac8cb89147b5abe78cb08753b9269e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2_myassert</definition>
        <argsstring>()</argsstring>
        <name>test2_myassert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="343" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="342" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1ae70134e2138c259c020b2d512d5fc7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2_check_indices</definition>
        <argsstring>()</argsstring>
        <name>test2_check_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="357" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="356" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="415" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="414" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a7f831c3579586194450eb2ca7c994340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_baseinfo</definition>
        <argsstring>()</argsstring>
        <name>test_baseinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="443" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="442" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a06c2be16e422a4a99bcda7da0bc0fce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_eltbaseinfo</definition>
        <argsstring>()</argsstring>
        <name>test_eltbaseinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="477" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="476" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a7d8331ebb1bcfdba3eaaee713f4497d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copyconvert</definition>
        <argsstring>()</argsstring>
        <name>test_copyconvert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="508" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="507" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a3035697779d5080e5f5938de739cfc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_iterate</definition>
        <argsstring>()</argsstring>
        <name>test_iterate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="547" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="546" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a7d165e13da160fa77c9ca15f9a276a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cmpfloat</definition>
        <argsstring>(float x1, float x2)</argsstring>
        <name>cmpfloat</name>
        <param>
          <type>float</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="576" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="575" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a238c3e1eecfbd93c92adc019dc6c6a9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_auxdata1</definition>
        <argsstring>()</argsstring>
        <name>test_auxdata1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="593" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="592" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1a1095fed95330307f8d8834c5fdf4f63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_auxdata</definition>
        <argsstring>()</argsstring>
        <name>test_auxdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="736" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="735" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1ac2948227986df6c823356883e8429b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_emptysort</definition>
        <argsstring>()</argsstring>
        <name>test_emptysort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="766" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="765" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="d1/d1a/DataVector__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" line="778" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx" bodystart="777" bodyend="788"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>this<sp/>test<sp/>in<sp/>standalone<sp/>mode:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator_adaptors.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iterator/indirect_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/list_of.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/CLASS_DEF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/ClassName.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/db8/DataVector__test_8icc" kindref="compound" tooltip="Regression tests for DataVector.">DataVector_test.icc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//*************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>boost::assign::list_of;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/dd6/DataVector_8h" kindref="compound" tooltip="An STL vector of pointers that by default owns its pointed-to elements.">AthContainers/DataVector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d0d/ConstDataVector_8h" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">AthContainers/ConstDataVector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d0f/AuxStoreInternal_8h" kindref="compound" tooltip="An auxiliary data store that holds data internally.">AthContainers/AuxStoreInternal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d5c/AuxElementComplete_8h" kindref="compound" tooltip="Wrapper to automatically create a private store for an element.">AthContainers/AuxElementComplete.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_alive;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>()<sp/>{<sp/>++s_alive;<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>----&gt;<sp/>Destructor<sp/>of<sp/>AbsFluff<sp/>called<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>After<sp/>return,<sp/>left<sp/>alive<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>--s_alive<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foo()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cfoo()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AbsFluff::s_alive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_int;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_float;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>std::string<sp/>m_string;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;<sp/>----&gt;<sp/>Destructor<sp/>of<sp/>DerivedFluff<sp/>called<sp/>for<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::string<sp/>m_anotherString;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()<sp/>:<sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>(),<sp/>m_int(1),<sp/>m_float(-379.456f),<sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_string(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>Fluff<sp/>struct&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_anotherString(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>DerivedFluff<sp/>struct&quot;</highlight><highlight class="normal">)<sp/>{<sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>&amp;<sp/>rhs)<sp/>:<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d17/structAbsFluff" kindref="compound">AbsFluff</ref>(),<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m_int(rhs.m_int),<sp/>m_float(-379.456f),<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>m_string(</highlight><highlight class="stringliteral">&quot;this<sp/>is<sp/>the<sp/>Fluff<sp/>struct&quot;</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foo()<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>cout<sp/>&lt;&lt;<sp/>&quot;foo<sp/>called&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cfoo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">/*<sp/>cout<sp/>&lt;&lt;<sp/>&quot;foo<sp/>called&quot;<sp/>&lt;&lt;<sp/>std::endl;<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="de/d7a/classFluffContainer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;DerivedFluff&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref>()<sp/>:<sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>()<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1<sp/>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataVector_test<sp/>test1<sp/>BEGIN<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref><sp/>IntVector;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>IntVector<sp/>intV;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>myassert(intV.empty());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>intV.reserve(10);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>myassert(intV.capacity()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>myassert(intV.capacity_v()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IFILL(3);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;IFILL;<sp/>++i)<sp/><sp/>intV.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(i));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>myassert<sp/>(IFILL<sp/>==<sp/>intV.size());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>myassert<sp/>(IFILL<sp/>==<sp/>intV.size_v());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>myassert(std::distance(intV.begin(),<sp/>intV.end())<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)IFILL);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>myassert(*(intV.front())<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>*(intV.back()));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>intV.front()<sp/>=<sp/>new<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(7);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>myassert(7<sp/>==<sp/>*(intV.front()));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>*(intV.back())<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>myassert(3<sp/>==<sp/>*(intV.back()));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;intV:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intV.begin(),<sp/>intV.end(),<sp/>os);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int&gt;<sp/>intos(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*1.30<sp/><sp/><sp/><sp/>boost::indirect_iterator_generator&lt;DataVector&lt;int&gt;::iterator,<sp/>int&gt;::type</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>intVF(intV.begin()),<sp/>intVL(intV.end());<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataVector&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intVF(intV.begin());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataVector&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intVL(intV.end());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intVF,<sp/>intVL,<sp/>intos);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>does<sp/>not<sp/>work<sp/><sp/>DataVector&lt;int&gt;<sp/>intV2(5,<sp/>new<sp/>int(5));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref><sp/>intV2(5);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>++i)<sp/>intV2[i]=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(5);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>intV2.size());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>*intV2[3]);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>intV2[4]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>int(6);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>myassert<sp/>(6<sp/>==<sp/>*intV2[4]);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;intV2:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intV2.begin(),<sp/>intV2.end(),<sp/>os);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;int&gt;<sp/>intos(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*1.30<sp/><sp/><sp/><sp/>boost::indirect_iterator_generator&lt;DataVector&lt;int&gt;::iterator,<sp/>int&gt;::type</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>intV2F(intV2.begin()),<sp/>intV2L(intV2.end());<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataVector&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intV2F(intV2.begin());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::indirect_iterator&lt;DataVector&lt;int&gt;::iterator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>intV2L(intV2.end());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(intV2F,<sp/>intV2L,<sp/>intos);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref>*<sp/>pintVZeros(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref>(10));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pintVZeros;<sp/>pintVZeros=0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref><sp/>testConst;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>testConst.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(-1));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>testConst.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(-2));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">DataVector&lt;int&gt;::const_iterator</ref><sp/>ci(testConst.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()),<sp/>ce(testConst.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ci<sp/>!=<sp/>ce)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>UNUSED(cp)<sp/>=<sp/>*ci;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//remove<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>bad<sp/>but<sp/>unfortunately<sp/>correct:<sp/>a<sp/>DataVector&lt;int&gt;<sp/>is<sp/>like<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vector&lt;int*&gt;.<sp/>vector&lt;int*&gt;::const_iterator<sp/>has<sp/>type<sp/>(int*<sp/>const)*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>not<sp/>(const<sp/>int*)*.<sp/>It<sp/>is<sp/>hence<sp/>legal<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>*ci;<sp/><sp/></highlight><highlight class="comment">//assign<sp/>a<sp/>int*<sp/>const<sp/>to<sp/>a<sp/>int*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>77;<sp/></highlight><highlight class="comment">//OUCH!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>++ci;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;int&gt;</ref><sp/>intV3(intV2.begin(),<sp/>intV2.end());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>intV3.size());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>myassert<sp/>(5<sp/>==<sp/>*intV3[3]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>myassert<sp/>(6<sp/>==<sp/>*intV3[4]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*oldInt(0),<sp/>*newInt(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(345));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>intV3.swapElement(3,<sp/>newInt,<sp/>oldInt);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>myassert(*oldInt<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>myassert(345<sp/>==<sp/>*intV3[3]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>do<sp/>this<sp/>---<sp/>we<sp/>don&apos;t<sp/>own<sp/>it,<sp/>since<sp/>intV3<sp/>is<sp/>a<sp/>view<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>oldInt<sp/>is<sp/>still<sp/>owned<sp/>by<sp/>intV2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//delete<sp/>oldInt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>*<sp/>dfluff<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream_iterator&lt;DerivedFluff*&gt;<sp/>os(std::cout,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dfluff:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>(),<sp/>os);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;DerivedFluff&gt;::iterator</ref><sp/>iter<sp/>=<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>iter<sp/>!=<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>();<sp/>iter++)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>(*iter)-&gt;foo();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>myassert<sp/>(2<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>((*dfluff)[0])-&gt;cfoo();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>(*dfluff-&gt;<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()).foo();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>dfluff-&gt;back()-&gt;foo();<sp/>DNC:<sp/>side<sp/>effect<sp/>of<sp/>ElementProxy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>*<sp/>fluff2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>(*dfluff);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>fluff2-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>using<sp/>iterators:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>*<sp/>fluff3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>(dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>myassert(2<sp/>==<sp/>fluff3-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>copy:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>copied<sp/>vector,<sp/>but<sp/>it<sp/>should<sp/>not<sp/>delete<sp/>elements<sp/>as<sp/>it<sp/>does<sp/>not<sp/>own<sp/>them.<sp/>You<sp/>should<sp/>not<sp/>see<sp/>message<sp/>of<sp/>Element<sp/>Destructor&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fluff2;<sp/>fluff2=0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>vector<sp/>copied<sp/>via<sp/>iterator.<sp/>You<sp/>should<sp/>NOT<sp/>see<sp/>the<sp/>elements<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fluff3;<sp/>fluff3=0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>resizing<sp/>DataVector&lt;DerivedFluff&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>You<sp/>should<sp/>see<sp/>one<sp/>DerivedFluff<sp/>object<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(dfluff-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()-1);<sp/></highlight><highlight class="comment">//reduce<sp/>dfluff<sp/>by<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>resize<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>DataVector&lt;DerivedFluff&gt;.<sp/>You<sp/>should<sp/>see<sp/>all<sp/>remaining<sp/>DerivedFluff<sp/>objects<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>dfluff-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dfluff;<sp/>dfluff=0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>Working<sp/>with<sp/>a<sp/>subclass<sp/>of<sp/>DataVector<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref><sp/>fc;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>*<sp/>f4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>fc.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>fc.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f2);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>fc.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f3);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>fc.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(f4);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>erasing<sp/>one<sp/>element<sp/>of<sp/>the<sp/>DerivedFluff<sp/>container.<sp/>You<sp/>should<sp/>see<sp/>one<sp/>instance<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>fc.<ref refid="d0/d4d/classDataVector_1a249b08ecb8260e288fe9087e3db48950" kindref="member" tooltip="Remove element at a given position.">erase</ref>(fc.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>fc.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>erase<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>myassert(fc.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>myassert(count<sp/>-<sp/>1<sp/><sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref><sp/>copyFluff,<sp/>*pcopy;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>copyFluff<sp/>=<sp/>fc;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//op<sp/>=<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>pcopy<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d7a/classFluffContainer" kindref="compound">FluffContainer</ref>(fc);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//copy<sp/>constr<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pcopy;<sp/>pcopy=0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);<sp/></highlight><highlight class="comment">//copy<sp/>constr<sp/>makes<sp/>pcopy<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DataVector<sp/>with<sp/>ownership:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref><sp/>dfluff5;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>*pdf(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>+<sp/>9;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff5.assign(10,<sp/>pdf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>dfluff5.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(pdf);<sp/></highlight><highlight class="comment">//take<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;10;<sp/>++i)<sp/>dfluff5.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>(*pdf));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>myassert(dfluff5.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff5.insert(dfluff5.begin(),<sp/>10,<sp/>(DerivedFluff*)0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;DerivedFluff&gt;::iterator</ref><sp/>it5(dfluff5.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>it5<sp/>=<sp/>dfluff5.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(it5,<sp/>0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>myassert(dfluff5.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DataVector<sp/>without<sp/>ownership:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>*<sp/>dfluff4<sp/>=</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector&lt;DerivedFluff&gt;</ref>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref><sp/>*p1(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>()),<sp/>*p2(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>dfluff4-&gt;push_back(p1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>dfluff4-&gt;push_back(p2);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>resizing<sp/>view<sp/>container.<sp/>You<sp/>should<sp/>NOT<sp/>see<sp/>the<sp/>elements<sp/>being<sp/>deleted&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>dfluff4-&gt;resize(0);<sp/></highlight><highlight class="comment">//empties<sp/>dfluff4;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>resize<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>myassert(0<sp/>==<sp/>dfluff4-&gt;size());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&gt;<sp/>Now<sp/>deleting<sp/>two<sp/>DerivedFluff<sp/>instances&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p2;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;--<sp/>delete<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff4-&gt;assign(10,<sp/>pdf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//whatever<sp/>this<sp/>means...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>dfluff4-&gt;push_back(pdf);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>myassert(dfluff4-&gt;size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>dfluff4-&gt;insert(dfluff4-&gt;begin(),<sp/>10,<sp/>(DerivedFluff*)0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;DerivedFluff&gt;::iterator</ref><sp/>it(dfluff4-&gt;begin());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>++i)<sp/>it<sp/>=<sp/>dfluff4-&gt;insert(it,<sp/>0);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>myassert(dfluff4-&gt;size()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dfluff4;<sp/>dfluff4=0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//FIXME<sp/>what<sp/>is<sp/>the<sp/>right<sp/>thing<sp/>to<sp/>do?<sp/>Put<sp/>in<sp/>5<sp/>NULLs<sp/>or<sp/>give<sp/>a<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>error?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AbsFluff&gt;</ref><sp/>absFluff(5);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>absFluff.resize(10);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>absFluff.resize(15,<sp/>new<sp/>DerivedFluff);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>absFluff.resize(15);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=10;<sp/>i&lt;15;<sp/>++i)<sp/>absFluff[i]=</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d3b/structDerivedFluff" kindref="compound">DerivedFluff</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>AbsFluff::s_alive<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize(absFluff.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>absFluff.pop_back();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>absFluff.pop_back();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>myassert(count<sp/>==<sp/>AbsFluff::s_alive);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>myassert(absFluff.size()<sp/>==<sp/>dsize);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>DataVector_test<sp/>OK<sp/>***&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>myassert<sp/>is<sp/>working.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_myassert()</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!caught)<sp/>abort();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>check_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_check_indices()</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;</ref><sp/>vbb;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;::PtrVector</ref>&amp;<sp/>pbb<sp/>=</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">typename<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;::PtrVector</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(vbb.<ref refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" kindref="member" tooltip="Return the underlying std::vector of the container.">stdcont</ref>());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>pbb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(1));</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>pbb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(2));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vbb);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BAux&gt;</ref><sp/>vba;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BAux&gt;::PtrVector</ref>&amp;<sp/>pba<sp/>=</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">typename<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BAux&gt;::PtrVector</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(vba.<ref refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" kindref="member" tooltip="Return the underlying std::vector of the container.">stdcont</ref>());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>pba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(1));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>pba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(2));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vba);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref>();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(1));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(2));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vba);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>*<sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(1);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>*<sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(2);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b2);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>vbb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(b1);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(b2);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b1);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(b2);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//myassert<sp/>(caught);<sp/>//xxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>vbb.<ref refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>b1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>b2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref>(2);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b2);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>vbb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(b1);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>vba.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(b2);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b1);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(b2);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b1;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>b2;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>test2_myassert();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>test2_check_indices();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calls<sp/>to<sp/>do_test2<sp/>for<sp/>specific<sp/>classes<sp/>are<sp/>split<sp/>out<sp/>into<sp/>separate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unit<sp/>tests<sp/>DataVector_X_test,<sp/>in<sp/>order<sp/>to<sp/>keep<sp/>the<sp/>amount<sp/>of<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>compilation<sp/>down<sp/>to<sp/>something<sp/>reasonable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AA&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;AA&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;BB&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;CC&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;CC&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;M&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;M&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;P&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;P&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>myassert<sp/>(ClassName&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;R&gt;</ref><sp/>&gt;::name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;R&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>dump_classid&lt;AA&gt;<sp/>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>dump_classid&lt;BB&gt;<sp/>();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>dump_classid&lt;CC&gt;<sp/>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="432"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>ClassID_traits&lt;DataVector&lt;AA&gt;<sp/>&gt;::packageInfo();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>myassert<sp/>(os.str().substr(0,7)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>||<sp/>os.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Package-00-00-00&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>os.str<sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>ClassID_traits&lt;DataVector&lt;CC&gt;<sp/>&gt;::packageInfo();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>myassert<sp/>(os.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Package-00-00-00&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_baseinfo()</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>clids;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>clids<sp/>=<sp/>SG::BaseInfo&lt;DataVector&lt;CC&gt;<sp/>&gt;::get_bases();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>exp1<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AA&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;BB&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;CC&gt;</ref><sp/>&gt;::ID());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>std::sort<sp/>(clids.begin(),<sp/>clids.end());</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp1.begin(),<sp/>exp1.end());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>myassert<sp/>(clids<sp/>==<sp/>exp1);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>clids<sp/>=<sp/>SG::BaseInfo&lt;DataVector&lt;R&gt;<sp/>&gt;::get_bases();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>std::vector&lt;CLID&gt;<sp/>exp2<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;R&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;N&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;O&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;Q&gt;</ref><sp/>&gt;::ID())</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;M&gt;</ref><sp/>&gt;::ID());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>std::sort<sp/>(clids.begin(),<sp/>clids.end());</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp2.begin(),<sp/>exp2.end());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>myassert<sp/>(clids<sp/>==<sp/>exp2);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;CC&gt;</ref><sp/>&gt;::is_base</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;CC&gt;</ref><sp/>&gt;::is_virtual</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;BB&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;R&gt;</ref><sp/>&gt;::is_base</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;M&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;R&gt;</ref><sp/>&gt;::is_virtual</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;M&gt;</ref><sp/>&gt;::ID()));</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_eltbaseinfo()</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>tinfos;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>tinfos<sp/>=<sp/>SG::BaseInfo&lt;CC&gt;::get_ti_bases();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>exp1<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/df1/structAA" kindref="compound">AA</ref>))</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>))</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d4/d95/structCC" kindref="compound">CC</ref>));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tinfos.begin(),<sp/>tinfos.end());</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp1.begin(),<sp/>exp1.end());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>myassert<sp/>(tinfos<sp/>==<sp/>exp1);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>tinfos<sp/>=<sp/>SG::BaseInfo&lt;R&gt;::get_ti_bases();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::type_info*&gt;<sp/>exp2<sp/>=<sp/>list_of</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/df7/structR" kindref="compound">R</ref>))</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="da/deb/structN" kindref="compound">N</ref>))</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/d78/structO" kindref="compound">O</ref>))</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d1/dbc/structQ" kindref="compound">Q</ref>))</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/d55/structM" kindref="compound">M</ref>))</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>(&amp;</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="dc/d7e/structMM" kindref="compound">MM</ref>));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tinfos.begin(),<sp/>tinfos.end());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>std::sort<sp/>(exp2.begin(),<sp/>exp2.end());</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>myassert<sp/>(tinfos<sp/>==<sp/>exp2);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;CC&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>)));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>SG::BaseInfo&lt;CC&gt;::is_virtual<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>)));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;R&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/d55/structM" kindref="compound">M</ref>)));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;R&gt;::is_virtual<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="d8/d55/structM" kindref="compound">M</ref>)));</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copyconvert()</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;P&gt;</ref><sp/>vec;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>myassert<sp/>(SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;P&gt;</ref><sp/>&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;M&gt;</ref>)));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>SG::BaseInfo&lt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;P&gt;</ref><sp/>&gt;::is_base<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;MM&gt;</ref>)));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>*<sp/>info;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>contp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(vec,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AA&gt;</ref>),<sp/>info);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>myassert<sp/>(contp<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector_1a4831de47c79708079d0c1e1e1c9e4363" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataVector&lt;MM&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>contp<sp/>=<sp/>DataModel_detail::dvl_convert<sp/>(vec,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal"><sp/>(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;MM&gt;</ref>),<sp/>info);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;MM&gt;</ref>&amp;<sp/>mmvec<sp/>=<sp/>*(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;MM&gt;</ref>*)contp;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>myassert<sp/>(mmvec.<ref refid="d0/d4d/classDataVector_1a23689a65fe5243d0bd00c3aa79640f98" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>myassert<sp/>(mmvec.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(mmvec[i]-&gt;mm<sp/>==<sp/>i<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>*<sp/>mm<sp/>=<sp/>mmvec[i];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(mm);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(pp-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=10;<sp/>i&lt;20;<sp/>i++)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>DataModel_detail::dvl_update<sp/>(vec,<sp/>contp,<sp/>info);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>myassert<sp/>(mmvec.<ref refid="d0/d4d/classDataVector_1a23689a65fe5243d0bd00c3aa79640f98" kindref="member" tooltip="Return the ownership policy setting for this container.">ownPolicy</ref>()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>myassert<sp/>(mmvec.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;20;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(mmvec[i]-&gt;mm<sp/>==<sp/>i<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>*<sp/>mm<sp/>=<sp/>mmvec[i];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(mm);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(pp-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_iterate()</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;P&gt;</ref><sp/>vp;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>(i));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>vp.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(0);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>info1<sp/>=<sp/><ref refid="d0/d4d/classDataVector_1a4831de47c79708079d0c1e1e1c9e4363" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataVector&lt;P&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase" kindref="compound" tooltip="Helper to iterate over a DV container.">DataModel_detail::DVLIteratorBase</ref>*<sp/>iterator<sp/>=<sp/>info1.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(&amp;vp);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>iterator-&gt;<ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase_1a9e74fe1d375806b4958e024bb9a6171e" kindref="member" tooltip="Return the next element from the container.">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(pp-&gt;x<sp/>==<sp/>ii++);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iterator;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;M&gt;</ref>&amp;<sp/>vm<sp/>=<sp/>vp;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref>&amp;<sp/>info2<sp/>=<sp/><ref refid="d0/d4d/classDataVector_1a4831de47c79708079d0c1e1e1c9e4363" kindref="member" tooltip="Return the DV/DL info struct for this class.">DataVector&lt;M&gt;::dvlinfo</ref>();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>iterator<sp/>=<sp/>info2.<ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase_1a731fb6aedc901978f6a92fb9fb009a52" kindref="member" tooltip="Return a new iterator object.">iterator</ref><sp/>(&amp;vm);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>ii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>iterator-&gt;<ref refid="d1/d1d/classDataModel__detail_1_1DVLIteratorBase_1a9e74fe1d375806b4958e024bb9a6171e" kindref="member" tooltip="Return the next element from the container.">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>*<sp/>pp<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="d8/d55/structM" kindref="compound">M</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(p);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(pp-&gt;x<sp/>==<sp/>ii++);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iterator;</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cmpfloat<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>den<sp/>=<sp/>std::abs(x1)<sp/>+<sp/>std::abs(x2);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(den<sp/>==<sp/>0)<sp/>den<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(x1-x2)/den<sp/>&lt;<sp/>1e-6;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="d1/d73/structAuxR" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d73/structAuxR" kindref="compound">AuxR</ref></highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hypot<sp/>(x,<sp/>y);<sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_auxdata1()</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>v.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::template<sp/>Accessor&lt;AuxR&gt;<sp/>auxr<sp/>(</highlight><highlight class="stringliteral">&quot;auxr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::template<sp/>Accessor&lt;bool&gt;<sp/>auxb<sp/>(</highlight><highlight class="stringliteral">&quot;auxb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(1));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(2));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(3));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>v[0]-&gt;setaux();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>v[1]-&gt;setaux();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>v[2]-&gt;setaux();</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>auxr(*v[2]).x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>auxr(*v[2]).y<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>assert<sp/>(cmpfloat<sp/>(auxr(*v[2]).r(),<sp/>5));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>auxb(*v[0])<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>auxb(*v[2])<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>assert<sp/>(auxb(*v[0])<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>assert<sp/>(auxb(*v[1])<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>assert<sp/>(auxb(*v[2])<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/dbd/classSG_1_1AuxElementComplete" kindref="compound" tooltip="Wrapper to automatically create a private store for an element.">SG::AuxElementComplete&lt;T&gt;</ref><sp/>Tcomp;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>Tcomp*<sp/>t4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tcomp(4);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>t4-&gt;setaux();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>auxr(*t4).x<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>auxr(*t4).y<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(t4);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>v[3]-&gt;checkaux();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>assert<sp/>(cmpfloat<sp/>(auxr(*v[3]).r(),<sp/>5));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>t4-&gt;releasePrivateStore();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>v[3]-&gt;checkaux();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>assert<sp/>(cmpfloat<sp/>(auxr(*v[3]).r(),<sp/>5));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a249b08ecb8260e288fe9087e3db48950" kindref="member" tooltip="Remove element at a given position.">erase</ref><sp/>(v.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>assert<sp/>(v[2]-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(5));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>v[3]-&gt;setaux();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(6));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>v[4]-&gt;setaux();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>3<sp/>4<sp/>5<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a249b08ecb8260e288fe9087e3db48950" kindref="member" tooltip="Remove element at a given position.">erase</ref><sp/>(v.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+2,<sp/>v.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+4);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>assert<sp/>(v[2]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref><sp/>v2;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>v2.setStore<sp/>(&amp;store2);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>v2.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(7));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>v2[0]-&gt;setaux();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>v2.<ref refid="d0/d4d/classDataVector_1a53d2dcc591d07cc817b06d2523442432" kindref="member" tooltip="Swap this collection with another.">swap</ref><sp/>(v);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>assert<sp/>(v2.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[2]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>Tcomp*<sp/>t8<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tcomp(8);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>t8-&gt;setaux();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>v2.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(v2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>t8);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>t8-&gt;releasePrivateStore();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>Tcomp*<sp/>tmp[2]<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tcomp(9),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tcomp(10)<sp/>};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>tmp[0]-&gt;setaux();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>tmp[1]-&gt;setaux();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>v2.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(v2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>tmp,<sp/>tmp+2);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>tmp[0]-&gt;releasePrivateStore();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>tmp[1]-&gt;releasePrivateStore();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>assert<sp/>(v2.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[2]-&gt;x<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[3]-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[4]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[5]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a3827d1fa4f134ba36346893715dd5bc1" kindref="member" tooltip="Attempt to preallocate enough memory for a specified number of elements.">reserve</ref>(6);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(6);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref>();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//**************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(1));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(2));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(3));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>v[0]-&gt;setaux();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>v[1]-&gt;setaux();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>v[2]-&gt;setaux();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>std::vector&lt;Tcomp&gt;<sp/>vc;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>vc.push_back<sp/>(Tcomp<sp/>(*v[i]));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>std::reverse<sp/>(vc.begin(),<sp/>vc.end());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>*v[i]<sp/>=<sp/>vc[i];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>assert<sp/>(v[2]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>Tcomp*<sp/>t9<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Tcomp<sp/>(9);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>t9-&gt;setaux();</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>checkaux(t9);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t9);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>checkaux(t9);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>assert<sp/>(!t9-&gt;usingPrivateStore());</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>t10<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(3,<sp/>0,<sp/>t10);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>assert<sp/>(t9<sp/>==<sp/>t10);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>assert<sp/>(t10-&gt;usingPrivateStore());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>checkaux(t10);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_auxdata()</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_auxdata\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>test_auxdata1&lt;AAux&gt;();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>test_auxdata1&lt;BAux&gt;();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>test_auxdata1&lt;CAux&gt;();</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>xAOD<sp/>base<sp/>classes<sp/>are<sp/>used,<sp/>they<sp/>will<sp/>always<sp/>report<sp/>that<sp/>the<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>auxids<sp/>are<sp/>present.<sp/><sp/>But<sp/>if<sp/>the<sp/>container<sp/>is<sp/>empty,<sp/>they<sp/>are<sp/>not<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>retrievable.<sp/><sp/>We<sp/>need<sp/>to<sp/>work<sp/>around<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="d1/d0f/classTestEmptyStore" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d0f/classTestEmptyStore" kindref="compound">TestEmptyStore</ref></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::IAuxStore</highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d1/d0f/classTestEmptyStore_1a66c0996c2fc6849c19dd5f266079c73c" kindref="member" tooltip="Return the data vector for one aux data item.">getData</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d1/d0f/classTestEmptyStore_1a9d637432779e0c4d1f33ef8143ac57c7" kindref="member" tooltip="Return the data vector for one aux data decoration item.">getDecoration</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref>&amp;<sp/><ref refid="d1/d0f/classTestEmptyStore_1a30ec3f81ff34bb4e3db3424c9719c591" kindref="member" tooltip="Return a set of identifiers for existing data items in this store.">getAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_auxids;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1a7801a170c4b92105581753b0176fc9de" kindref="member" tooltip="Lock the container.">lock</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1aa966b40662b284bc258331edc2be5ba8" kindref="member" tooltip="Clear all decorations.">clearDecorations</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1a70b2f566f498e504b6b8ca6c76a87bd7" kindref="member" tooltip="Return the number of elements in the store.">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d1/d0f/classTestEmptyStore_1a66c0996c2fc6849c19dd5f266079c73c" kindref="member" tooltip="Return the data vector for one aux data item.">getData</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref>&amp;<sp/><ref refid="d1/d0f/classTestEmptyStore_1a1daf47ea888d25a210a4f9234f1bc650" kindref="member" tooltip="Return a set of identifiers for writable data items in this store.">getWritableAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_auxids;<sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1a76d3a092324ff765e87ced2a065f9203" kindref="member" tooltip="Change the size of all aux data vectors.">resize</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1a7c98785390583874eedefd503347c7b7" kindref="member" tooltip="Change the capacity of all aux data vectors.">reserve</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/d0f/classTestEmptyStore_1abf62bded965c2656c3f0850c92ec09fe" kindref="member" tooltip="Shift the elements of the container.">shift</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/>ptrdiff_t)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref><sp/>m_auxids;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">};</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_emptysort()</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_emptysort\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AAux&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><ref refid="d1/d0f/classTestEmptyStore" kindref="compound">TestEmptyStore</ref><sp/>store;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>v.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>store.m_auxids.insert<sp/>(ityp);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>v.<ref refid="d0/d4d/classDataVector_1a33ee222cacf6bcdf7a561a8505ec09c1" kindref="member" tooltip="Sort the container.">sort</ref>();</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>test_baseinfo();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>test_eltbaseinfo();</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>test_copyconvert();</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>test_iterate();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>test_auxdata();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>test_emptysort();</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>xxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>per-object<sp/>flagging<sp/>of<sp/>aux<sp/>data<sp/>presence?</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx"/>
  </compounddef>
</doxygen>
