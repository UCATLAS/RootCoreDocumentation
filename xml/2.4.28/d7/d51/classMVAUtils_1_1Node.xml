<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d7/d51/classMVAUtils_1_1Node" kind="class" prot="public">
    <compoundname>MVAUtils::Node</compoundname>
    <includes refid="db/d92/Node_8h" local="no">Node.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t MVAUtils::Node::index_t</definition>
        <argsstring></argsstring>
        <name>index_t</name>
        <briefdescription>
<para>The index type of the node in the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="21" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d51/classMVAUtils_1_1Node_1aa0a8046e2683afe87bd430a6734a0029" prot="public" static="no">
        <type>int8_t</type>
        <definition>typedef int8_t MVAUtils::Node::var_t</definition>
        <argsstring></argsstring>
        <name>var_t</name>
        <briefdescription>
<para>The variable type (i.e., the index of the variable to cut). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/d51/classMVAUtils_1_1Node_1ab7e1cdcfbb78fb918189d66ffd4ff26b" prot="private" static="no" mutable="no">
        <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa0a8046e2683afe87bd430a6734a0029" kindref="member">var_t</ref></type>
        <definition>var_t MVAUtils::Node::m_var</definition>
        <argsstring></argsstring>
        <name>m_var</name>
        <briefdescription>
<para>index of the variable to cut for internal nodes, -1 for leaf nodes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d51/classMVAUtils_1_1Node_1ac0bbb7d0d1fef8d4c31157f673966b1d" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MVAUtils::Node::m_right</definition>
        <argsstring></argsstring>
        <name>m_right</name>
        <briefdescription>
<para>right relative index (to be added to current) (left is always current + 1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d51/classMVAUtils_1_1Node_1af6b46f307bdaf1ce2aad2ad44f52e273" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float MVAUtils::Node::m_val</definition>
        <argsstring></argsstring>
        <name>m_val</name>
        <briefdescription>
<para>cut value for internal nodes or response for leaf nodes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1ade222815e59576377b4b5f4d9dc19994" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MVAUtils::Node::Node</definition>
        <argsstring>(const int ivar, const float val, const index_t right)</argsstring>
        <name>Node</name>
        <param>
          <type>const int</type>
          <declname>ivar</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The constructor gets the index of the variable to cut on (-1 if leaf), the index of the right child (value not used if a leaf), and the value to cut on (if not leaf) or the respons (if leaf). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="29" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1a073abfe276a5eccb87dab872e897db01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MVAUtils::Node::IsLeaf</definition>
        <argsstring>() const </argsstring>
        <name>IsLeaf</name>
        <briefdescription>
<para>is the current node a leaf node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1aab7f95c2071a601de40746d9eb837a42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
        <definition>Node::index_t Node::GetNext</definition>
        <argsstring>(const float value, index_t index) const </argsstring>
        <name>GetNext</name>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Based on the value of the variable that&apos;s passed in, return the index of the appropriate child. Assumes the node is not a leaf (i.e., there is no check). Must also pass the current node index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/Root/Node.cxx" bodystart="7" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1a4ea22bd7e161bc225f6b037f8525e02d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa0a8046e2683afe87bd430a6734a0029" kindref="member">var_t</ref></type>
        <definition>var_t MVAUtils::Node::GetVar</definition>
        <argsstring>() const </argsstring>
        <name>GetVar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The variable index to cut on (or -1 if leaf, but use IsLeaf instead if checking for leaf) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1ab32c8b8505b5e937480c359670acb8a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float MVAUtils::Node::GetVal</definition>
        <argsstring>() const </argsstring>
        <name>GetVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The value to cut on (if not leaf), or the response (if leaf). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1a3df52755116f748541b9434b8e65e9e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
        <definition>index_t MVAUtils::Node::GetLeft</definition>
        <argsstring>(index_t index) const </argsstring>
        <name>GetLeft</name>
        <param>
          <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For debugging: returns the index of the left node; is passed the current node index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1a28a0e4aa0ccbfc7fceff76f4cdb2fda2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
        <definition>index_t MVAUtils::Node::GetRight</definition>
        <argsstring>(index_t index) const </argsstring>
        <name>GetRight</name>
        <param>
          <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For debugging: returns the index of the right node; is passed the current node index. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d7/d51/classMVAUtils_1_1Node_1a021c31f1f4a9e285a6eb486ec90576b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Node::Print</definition>
        <argsstring>(index_t index) const </argsstring>
        <name>Print</name>
        <param>
          <type><ref refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" kindref="member">index_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For debugging only: print the node values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/Root/Node.cxx" bodystart="11" bodyend="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="d7/d51/classMVAUtils_1_1Node" kindref="compound">Node</ref> of a binary tree, defined by the index of the variable (m_var, set to -1 for leaf nodes), the cut value or the response (m_val) and ways to access the left and right children.</para><para>NOTE: This class should not be used directly by any class other than <ref refid="d2/daa/classMVAUtils_1_1BDT" kindref="compound">BDT</ref>. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" line="18" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/MVAUtils/MVAUtils/Node.h" bodystart="17" bodyend="65"/>
    <listofallmembers>
      <member refid="d7/d51/classMVAUtils_1_1Node_1a3df52755116f748541b9434b8e65e9e1" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>GetLeft</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1aab7f95c2071a601de40746d9eb837a42" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>GetNext</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1a28a0e4aa0ccbfc7fceff76f4cdb2fda2" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>GetRight</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1ab32c8b8505b5e937480c359670acb8a8" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>GetVal</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1a4ea22bd7e161bc225f6b037f8525e02d" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>GetVar</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1aa6cdea609f3ee50ef6b1951a9d094f67" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>index_t</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1a073abfe276a5eccb87dab872e897db01" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>IsLeaf</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1ac0bbb7d0d1fef8d4c31157f673966b1d" prot="private" virt="non-virtual"><scope>MVAUtils::Node</scope><name>m_right</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1af6b46f307bdaf1ce2aad2ad44f52e273" prot="private" virt="non-virtual"><scope>MVAUtils::Node</scope><name>m_val</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1ab7e1cdcfbb78fb918189d66ffd4ff26b" prot="private" virt="non-virtual"><scope>MVAUtils::Node</scope><name>m_var</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1ade222815e59576377b4b5f4d9dc19994" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>Node</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1a021c31f1f4a9e285a6eb486ec90576b6" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>Print</name></member>
      <member refid="d7/d51/classMVAUtils_1_1Node_1aa0a8046e2683afe87bd430a6734a0029" prot="public" virt="non-virtual"><scope>MVAUtils::Node</scope><name>var_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
