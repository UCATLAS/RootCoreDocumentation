<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d7/d07/PackedArray_8cxx" kind="file">
    <compoundname>PackedArray.cxx</compoundname>
    <includes refid="de/d5f/PackedArray_8h" local="yes">CxxUtils/PackedArray.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">climits</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="113454">
        <label>cassert</label>
      </node>
      <node id="113452">
        <label>stdexcept</label>
      </node>
      <node id="113450">
        <label>vector</label>
      </node>
      <node id="113451">
        <label>cstddef</label>
      </node>
      <node id="113453">
        <label>climits</label>
      </node>
      <node id="113448">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx</label>
        <link refid="PackedArray.cxx"/>
        <childnode refid="113449" relation="include">
        </childnode>
        <childnode refid="113452" relation="include">
        </childnode>
        <childnode refid="113453" relation="include">
        </childnode>
        <childnode refid="113454" relation="include">
        </childnode>
      </node>
      <node id="113449">
        <label>CxxUtils/PackedArray.h</label>
        <link refid="de/d5f/PackedArray_8h"/>
        <childnode refid="113450" relation="include">
        </childnode>
        <childnode refid="113451" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="de/d12/namespaceCxxUtils">CxxUtils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>PackedArray.cxx,v<sp/>1.2<sp/>2008-12-12<sp/>04:26:19<sp/>ssnyder<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d5f/PackedArray_8h" kindref="compound" tooltip="An array of unsigned values of some bit size, packed tightly.">CxxUtils/PackedArray.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nper<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>*<sp/>CHAR_BIT;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">CxxUtils::PackedArray::value_type<sp/>mask<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1&lt;&lt;sz)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CxxUtils<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">PackedArray::size_type<sp/>PackedArray::nbase<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="47"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>*<sp/>m_bitsize<sp/>+<sp/>nper-1)<sp/>/<sp/>nper;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">PackedArray::size_type<sp/>PackedArray::tondx<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="58"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>*<sp/>m_bitsize)<sp/>/<sp/>nper;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PackedArray::tooff<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="69"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>*<sp/>m_bitsize)<sp/>%<sp/>nper;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::doget<sp/>(size_type<sp/>ndx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="82"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>bits<sp/>from<sp/>the<sp/>first<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>value_type<sp/>v<sp/>=<sp/>m_vec[ndx]<sp/>&gt;&gt;<sp/>off;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>packed<sp/>entry<sp/>wraps<sp/>between<sp/>two<sp/>base<sp/>entries,<sp/>collect<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>next<sp/>base<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bitsize<sp/>&gt;<sp/>nper<sp/>-<sp/>off)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits<sp/>=<sp/>m_bitsize<sp/>-<sp/>(nper<sp/>-<sp/>off);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>|=<sp/>((m_vec[ndx+1]<sp/>&amp;<sp/>mask(bits))<sp/>&lt;&lt;<sp/>(nper<sp/>-<sp/>off));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mask<sp/>down<sp/>to<sp/>the<sp/>proper<sp/>number<sp/>of<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v<sp/>&amp;<sp/>m_mask;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::doset<sp/>(size_type<sp/>ndx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off,<sp/>value_type<sp/>v)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>in<sp/>the<sp/>first<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>m_vec[ndx]<sp/>=<sp/>(m_vec[ndx]<sp/>&amp;<sp/>~(m_mask&lt;&lt;off))<sp/>|<sp/>((v&amp;m_mask)<sp/>&lt;&lt;<sp/>off);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>packed<sp/>entry<sp/>wraps<sp/>between<sp/>two<sp/>base<sp/>entries,<sp/>set<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>next<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bitsize<sp/>&gt;<sp/>nper<sp/>-<sp/>off)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>mask2<sp/>=<sp/>mask<sp/>(m_bitsize<sp/>-<sp/>(nper<sp/>-<sp/>off));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vec[ndx+1]<sp/>=<sp/>(m_vec[ndx+1]<sp/>&amp;<sp/>~mask2)<sp/>|<sp/>((v<sp/>&gt;&gt;<sp/>(nper<sp/>-<sp/>off))<sp/>&amp;<sp/>mask2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::range_check<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>m_size)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range<sp/>(</highlight><highlight class="stringliteral">&quot;PackedArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a8635baf7ca8b369dc589dd676a99ada8" kindref="member" tooltip="Constructor.">PackedArray::PackedArray</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight><highlight class="comment">/*=allocator_type()*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>:<sp/>m_bitsize<sp/>(bitsize),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size<sp/>(0),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mask<sp/><sp/>(mask<sp/>(bitsize)),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vec<sp/>(allocator)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>assert<sp/>(m_bitsize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_bitsize<sp/>&lt;=<sp/>nper);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">PackedArray::PackedArray<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>n,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>val<sp/></highlight><highlight class="comment">/*=<sp/>0*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight><highlight class="comment">/*=allocator_type()*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>:<sp/>m_bitsize<sp/>(bitsize),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>m_size<sp/>(n),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mask<sp/><sp/>(mask<sp/>(bitsize)),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vec<sp/>(nbase(n),<sp/>0,<sp/>allocator)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert<sp/>(m_bitsize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>m_bitsize<sp/>&lt;=<sp/>nper);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal"><sp/>(i,<sp/>val);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::assign<sp/>(size_type<sp/>n,<sp/>value_type<sp/>u<sp/></highlight><highlight class="comment">/*=<sp/>0*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>m_vec.clear();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>m_vec.resize<sp/>(nbase(n));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal"><sp/>(i,<sp/>u);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">PackedArray::allocator_type<sp/>PackedArray::get_allocator()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vec.get_allocator();</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">PackedArray::size_type<sp/>PackedArray::size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="206"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">PackedArray::size_type<sp/>PackedArray::max_size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="215"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vec.max_size();</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">PackedArray::size_type<sp/>PackedArray::capacity()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="225"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_vec.capacity()<sp/>*<sp/>nper<sp/>/<sp/>m_bitsize;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::resize<sp/>(size_type<sp/>sz,<sp/>value_type<sp/>c<sp/></highlight><highlight class="comment">/*=<sp/>0*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>m_vec.resize<sp/>(nbase<sp/>(sz));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/>m_size)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Making<sp/>the<sp/>container<sp/>bigger.<sp/><sp/>Need<sp/>to<sp/>fill<sp/>the<sp/>remaining<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>them<sp/>to<sp/>something<sp/>non-zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>m_size;<sp/>i<sp/>&lt;<sp/>sz;<sp/>i++)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal"><sp/>(i,<sp/>c);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filling<sp/>the<sp/>new<sp/>entries<sp/>with<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>elements<sp/>in<sp/>the<sp/>base<sp/>vector<sp/>will<sp/>have<sp/>been<sp/>set<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>also<sp/>need<sp/>to<sp/>zero<sp/>out<sp/>any<sp/>remaining<sp/>packed<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(or<sp/>piece<sp/>thereof)<sp/>in<sp/>the<sp/>last<sp/>base<sp/>element<sp/>that<sp/>was<sp/>occupied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>resize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>off<sp/>=<sp/>tooff<sp/>(m_size);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything<sp/>if<sp/>packed<sp/>entries<sp/>exactly<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>allocated<sp/>base<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(off<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ndx<sp/>=<sp/>tondx<sp/>(m_size);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vec[ndx]<sp/>&amp;=<sp/>mask<sp/>(off);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PackedArray::empty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="268"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::reserve<sp/>(size_type<sp/>n)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>m_vec.reserve<sp/>(nbase<sp/>(n));</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::get<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="289"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doget<sp/>(tondx<sp/>(n),<sp/>tooff<sp/>(n));</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::set<sp/>(size_type<sp/>n,<sp/>value_type<sp/>val)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doset<sp/>(tondx<sp/>(n),<sp/>tooff<sp/>(n),<sp/>val);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::operator[]<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="314"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doget<sp/>(tondx<sp/>(n),<sp/>tooff<sp/>(n));</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">PackedArray::proxy<sp/>PackedArray::operator[]<sp/>(size_type<sp/>n)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::at<sp/>(size_type<sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="342"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>range_check<sp/>(n);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doget<sp/>(tondx<sp/>(n),<sp/>tooff<sp/>(n));</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">PackedArray::proxy<sp/>PackedArray::at<sp/>(size_type<sp/>n)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>range_check<sp/>(n);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::front<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="371"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doget<sp/>(0,<sp/>0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">PackedArray::value_type<sp/>PackedArray::back<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="384"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doget<sp/>(tondx<sp/>(m_size-1),<sp/>tooff<sp/>(m_size-1));</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">PackedArray::proxy<sp/>PackedArray::front<sp/>()</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">PackedArray::proxy<sp/>PackedArray::back<sp/>()</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_size-1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::push_back<sp/>(value_type<sp/>x)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>++m_size;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>nbase<sp/>(m_size);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>!=<sp/>m_vec.size())</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vec.resize<sp/>(nb);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>doset<sp/>(tondx<sp/>(m_size-1),<sp/>tooff<sp/>(m_size-1),<sp/>x);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::pop_back<sp/>()</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>--m_size;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>nbase<sp/>(m_size);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>!=<sp/>m_vec.size())</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vec.resize<sp/>(nb);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">PackedArray::swap</ref><sp/>(PackedArray&amp;<sp/>other)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">std::swap</ref><sp/>(m_bitsize,<sp/>other.m_bitsize);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">std::swap</ref><sp/>(m_size,<sp/><sp/><sp/><sp/>other.m_size);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">std::swap</ref><sp/>(m_mask,<sp/><sp/><sp/><sp/>other.m_mask);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">std::swap</ref><sp/>(m_vec,<sp/><sp/><sp/><sp/><sp/>other.m_vec);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::clear<sp/>()</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>m_vec.clear();</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PackedArray::set_bitsize<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitsize)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>assert<sp/>(m_size<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>assert<sp/>(bitsize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bitsize<sp/>&lt;=<sp/>nper);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>m_bitsize<sp/>=<sp/>bitsize;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>m_mask<sp/>=<sp/>mask<sp/>(bitsize);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PackedArray::bitsize<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="483"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bitsize;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CxxUtils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx"/>
  </compounddef>
</doxygen>
