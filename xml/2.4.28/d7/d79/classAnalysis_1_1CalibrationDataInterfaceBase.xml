<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase" kind="class" prot="public">
    <compoundname>Analysis::CalibrationDataInterfaceBase</compoundname>
    <derivedcompoundref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" prot="public" virt="non-virtual">Analysis::CalibrationDataInterfaceROOT</derivedcompoundref>
    <derivedcompoundref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool" prot="public" virt="non-virtual">Analysis::CalibrationDataInterfaceTool</derivedcompoundref>
    <includes refid="d8/d11/CalibrationDataInterfaceBase_8h" local="no">CalibrationDataInterfaceBase.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964" prot="public" static="no">
        <name>variableType</name>
        <enumvalue id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964acef1d0b513512fa006035041054871a6" prot="public">
          <name>kEta</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964a07dd427b027dc6b695916706dbf5d54d" prot="public">
          <name>kAbsEta</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964ab86e922891732b2421e7edbf6c220309" prot="public">
          <name>kPt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>known variable types that can be used as function arguments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" bodystart="63" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a4b77cb4c17fd0e19a194e53728970455" prot="private" static="no" mutable="yes">
        <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::vector&lt;std::string&gt; &gt; Analysis::CalibrationDataInterfaceBase::m_calibrationEffNames</definition>
        <argsstring></argsstring>
        <name>m_calibrationEffNames</name>
        <briefdescription>
<para>this simply collects the per-flavour properties. NB there ought to be no need for the &apos;mutable&apos; qualifier here... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="69" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1ac98d5f9001c1f3fb6f6c8b6628c8c24f" prot="private" static="no" mutable="yes">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; Analysis::CalibrationDataInterfaceBase::m_calibrationSFNames</definition>
        <argsstring></argsstring>
        <name>m_calibrationSFNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a18a603e78a1044c40db2ed183a7bd868" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Analysis::CalibrationDataInterfaceBase::m_taggerName</definition>
        <argsstring></argsstring>
        <name>m_taggerName</name>
        <briefdescription>
<para>tagging algorithm name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="91" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a33272c3494e5adc11721f102874ba8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataInterfaceBase::CalibrationDataInterfaceBase</definition>
        <argsstring>()</argsstring>
        <name>CalibrationDataInterfaceBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="45"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a9c18fe9b169bb9a3f48c6e1d4f848dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type></type>
        <definition>Analysis::CalibrationDataInterfaceBase::~CalibrationDataInterfaceBase</definition>
        <argsstring>()=0</argsstring>
        <name>~CalibrationDataInterfaceBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>default destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="37" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a2f2161524ad7e30fcff74229ffa04eb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; Analysis::CalibrationDataInterfaceBase::EffCalibrationName</definition>
        <argsstring>(const std::string &amp;flavour, unsigned int mapIndex=0) const </argsstring>
        <name>EffCalibrationName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>flavour</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mapIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main interface methods accessing the flavour tagging performance information. Note that for both of the following, the label is assumed to adhere to the TruthInfo conventions (see package PhysicsAnalysis/JetTagging/JetTagInfo). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a5a1d2fe79737698442b37445d06a5d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Analysis::CalibrationDataInterfaceBase::setEffCalibrationNames</definition>
        <argsstring>(const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;names)</argsstring>
        <name>setEffCalibrationNames</name>
        <param>
          <type>const std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a6175313f3e363300ae28338a02a1dee0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; Analysis::CalibrationDataInterfaceBase::SFCalibrationName</definition>
        <argsstring>(const std::string &amp;flavour) const </argsstring>
        <name>SFCalibrationName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>flavour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a7791fe6577f7f1f03f72aaf2da573f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Analysis::CalibrationDataInterfaceBase::setSFCalibrationNames</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; &amp;names)</argsstring>
        <name>setSFCalibrationNames</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="73" bodyend="78"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1af746489cfc49e99bffe6841dfa44795d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Analysis::CalibrationDataInterfaceBase::getContainername</definition>
        <argsstring>(const std::string &amp;flavour, bool SF, unsigned int mapIndex=0) const </argsstring>
        <name>getContainername</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>flavour</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>SF</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mapIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>auxiliary function for string concatenation </para>        </briefdescription>
        <detaileddescription>
<para>auxiliary function for retrieval of container name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="104" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a176c1cc5a166749bdd34070a2312ec45" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Analysis::CalibrationDataInterfaceBase::getBasename</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getBasename</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>auxiliary function for retrieval of name within the directory </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="123" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a1de0612917be0100595b95023747aff4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Analysis::CalibrationDataInterfaceBase::combinedUncertainty</definition>
        <argsstring>(double stat, const std::pair&lt; double, double &gt; &amp;syst) const </argsstring>
        <name>combinedUncertainty</name>
        <param>
          <type>double</type>
          <declname>stat</declname>
        </param>
        <param>
          <type>const std::pair&lt; double, double &gt; &amp;</type>
          <declname>syst</declname>
        </param>
        <briefdescription>
<para>utility function for combination of statistical and (a priori asymmetric) systematic uncertainty. NB perhaps this should be in its own </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataInterfaceBase.cxx" bodystart="132" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class provides some common functionality for other classes wishing to access Flavour Tagging performance estimates.</para><para><simplesect kind="author"><para>Frank Filthaut &lt;<ulink url="mailto:F.Filthaut@science.ru.nl">F.Filthaut@science.ru.nl</ulink>&gt; </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2925">
        <label>Analysis::CalibrationDataInterfaceTool</label>
        <link refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool"/>
        <childnode refid="2923" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2923">
        <label>Analysis::CalibrationDataInterfaceBase</label>
        <link refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase"/>
      </node>
      <node id="2924">
        <label>Analysis::CalibrationDataInterfaceROOT</label>
        <link refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT"/>
        <childnode refid="2923" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2927">
        <label>string</label>
      </node>
      <node id="2926">
        <label>Analysis::CalibrationDataInterfaceBase</label>
        <link refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase"/>
        <childnode refid="2927" relation="usage">
          <edgelabel>m_taggerName</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/CalibrationDataInterface/CalibrationDataInterfaceBase.h" bodystart="43" bodyend="95"/>
    <listofallmembers>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a33272c3494e5adc11721f102874ba8a7" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>CalibrationDataInterfaceBase</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a1de0612917be0100595b95023747aff4" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>combinedUncertainty</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a2f2161524ad7e30fcff74229ffa04eb9" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>EffCalibrationName</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a176c1cc5a166749bdd34070a2312ec45" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>getBasename</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1af746489cfc49e99bffe6841dfa44795d" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>getContainername</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964a07dd427b027dc6b695916706dbf5d54d" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>kAbsEta</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964acef1d0b513512fa006035041054871a6" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>kEta</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964ab86e922891732b2421e7edbf6c220309" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>kPt</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a4b77cb4c17fd0e19a194e53728970455" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>m_calibrationEffNames</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1ac98d5f9001c1f3fb6f6c8b6628c8c24f" prot="private" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>m_calibrationSFNames</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a18a603e78a1044c40db2ed183a7bd868" prot="protected" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>m_taggerName</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a5a1d2fe79737698442b37445d06a5d7c" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>setEffCalibrationNames</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a7791fe6577f7f1f03f72aaf2da573f38" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>setSFCalibrationNames</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a6175313f3e363300ae28338a02a1dee0" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>SFCalibrationName</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1aa50dccfee6a2d14d929f693642540964" prot="public" virt="non-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>variableType</name></member>
      <member refid="d7/d79/classAnalysis_1_1CalibrationDataInterfaceBase_1a9c18fe9b169bb9a3f48c6e1d4f848dfe" prot="public" virt="pure-virtual"><scope>Analysis::CalibrationDataInterfaceBase</scope><name>~CalibrationDataInterfaceBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
