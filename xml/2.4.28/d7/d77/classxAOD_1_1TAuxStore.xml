<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d7/d77/classxAOD_1_1TAuxStore" kind="class" prot="public">
    <compoundname>xAOD::TAuxStore</compoundname>
    <basecompoundref refid="dc/d05/classSG_1_1IAuxStore" prot="public" virt="non-virtual">SG::IAuxStore</basecompoundref>
    <basecompoundref refid="db/d37/classSG_1_1IAuxStoreIO" prot="public" virt="non-virtual">SG::IAuxStoreIO</basecompoundref>
    <includes refid="dc/dd6/TAuxStore_8h" local="no">TAuxStore.h</includes>
    <innerclass refid="d6/d59/classxAOD_1_1TAuxStore_1_1TBranchHandle" prot="private">xAOD::TAuxStore::TBranchHandle</innerclass>
    <innerclass refid="db/d83/structxAOD_1_1TAuxStore_1_1TSAuxidSet" prot="private">xAOD::TAuxStore::TSAuxidSet</innerclass>
      <sectiondef kind="user-defined">
      <header>Functions implementing the SG::IConstAuxStore interface</header>
      <description><para><anchor id="_1amgrp923490749c1bddf7b538181b97b1ea70"/> </para></description>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a1122528f8528e1042d1581029b3c930f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const void *</type>
        <definition>const void * xAOD::TAuxStore::getData</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>getData</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Get a pointer to a given array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="277" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1ae0d420f97f8cd76805cf7b8445c2a85e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">auxid_set_t</ref> &amp;</type>
        <definition>const TAuxStore::auxid_set_t &amp; xAOD::TAuxStore::getAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getAuxIDs</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1a3be9ddcb2b1198c3cab03c7b94764a3d">getAuxIDs</reimplements>
        <briefdescription>
<para>Get the types(names) of variables handled by this container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="312" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a4deb553e290dad77b6f5c2e84e26560d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * xAOD::TAuxStore::getDecoration</definition>
        <argsstring>(auxid_t auxid, size_t size, size_t capacity)</argsstring>
        <name>getDecoration</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Get a pointer to a given array, creating the array if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="331" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a00986f58a4b03c8fd383f67bcaffb417" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1a6bf19cb8961665a0d4672e2d4f719aa5">lock</reimplements>
        <briefdescription>
<para>Lock the object, and don&apos;t let decorations be added. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="404" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1aa54c325574f8010e131e5f36d64ac639" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::clearDecorations</definition>
        <argsstring>()</argsstring>
        <name>clearDecorations</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1ab3dec2e6bc75789344ec9d31c8b8a3c3">clearDecorations</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the decorations added so far. Only works for transient decorations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="122" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="417" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1af4ca8c9d4c674a087cc201401889e7b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t xAOD::TAuxStore::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1af71be6076fcf09fd0f8c1d53e704548d">size</reimplements>
        <briefdescription>
<para>Return the number of elements in the store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="125" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="445" bodyend="470"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions implementing the SG::IAuxStore interface</header>
      <description><para><anchor id="_1amgrp44b120bee999133a29277c27a0f31e6d"/> </para></description>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1adc37316e5f43b9f27ce51259bf02691a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void *</type>
        <definition>void * xAOD::TAuxStore::getData</definition>
        <argsstring>(auxid_t auxid, size_t size, size_t capacity)</argsstring>
        <name>getData</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Get a pointer to a given array, creating the array if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="472" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a09182a6ecf681b029fc136e954e6220a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">auxid_set_t</ref> &amp;</type>
        <definition>const TAuxStore::auxid_set_t &amp; xAOD::TAuxStore::getWritableAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getWritableAuxIDs</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a691e17d3a91d2733af73a4c5ae17e625">getWritableAuxIDs</reimplements>
        <briefdescription>
<para>Return a set of writable data identifiers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="137" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a0ae2b8968e98d214a873d9ba71396aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::resize</definition>
        <argsstring>(size_t size)</argsstring>
        <name>resize</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a3e35266b4688361e2c804b68b73892e0">resize</reimplements>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Resize the arrays to a given size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="547" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a374f9c52c985144de4e2489a71a599d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::reserve</definition>
        <argsstring>(size_t size)</argsstring>
        <name>reserve</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a76c099cf5b1e88b8bdfebf4c014e4d1b">reserve</reimplements>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reserve a given size for the arrays. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="575" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a3cc2ab29e748776999478fc1c9aed89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::shift</definition>
        <argsstring>(size_t pos, ptrdiff_t offs)</argsstring>
        <name>shift</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1abd4ea23e3b5eb58f8e747daaf2279068">shift</reimplements>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Shift the contents of the stored arrays. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="144" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="600" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions implementing the SG::IAuxStoreIO interface</header>
      <description><para><anchor id="_1amgrp88b4583fe2141202fa4506158a6ce938"/> </para></description>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a6c53c19802435b7512a58ecd193aad8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const void *</type>
        <definition>const void * xAOD::TAuxStore::getIOData</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>getIOData</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the data being stored for one aux data item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="152" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="633" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a456132ea9c9d352ac102f79b428db9a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::type_info *</type>
        <definition>const std::type_info * xAOD::TAuxStore::getIOType</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>getIOType</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return the type of the data to be stored for one aux data item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="155" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="679" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1af25aa5f7c49ebf12cfe1efce13366647" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">auxid_set_t</ref> &amp;</type>
        <definition>const TAuxStore::auxid_set_t &amp; xAOD::TAuxStore::getDynamicAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getDynamicAuxIDs</name>
        <reimplements refid="db/d37/classSG_1_1IAuxStoreIO_1a09fa260bc3e6871d748d3342c602af69">getDynamicAuxIDs</reimplements>
        <briefdescription>
<para>Get the types(names) of variables created dynamically. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="158" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="715" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a315008cfc1331acd2639b78722ecb3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::selectAux</definition>
        <argsstring>(const std::set&lt; std::string &gt; &amp;attributes)</argsstring>
        <name>selectAux</name>
        <reimplements refid="db/d37/classSG_1_1IAuxStoreIO_1a0ddbdecb0f824866d4dd51b666264a67">selectAux</reimplements>
        <param>
          <type>const std::set&lt; std::string &gt; &amp;</type>
          <declname>attributes</declname>
        </param>
        <briefdescription>
<para>Select dynamic auxiliary attributes for writing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="722" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a8bba42e8001df5a3f99ef3f4cd453b08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">auxid_set_t</ref> &amp;</type>
        <definition>const TAuxStore::auxid_set_t &amp; xAOD::TAuxStore::getSelectedAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getSelectedAuxIDs</name>
        <reimplements refid="db/d37/classSG_1_1IAuxStoreIO_1ad902a6d9ee41b239fbca73870cebe237">getSelectedAuxIDs</reimplements>
        <briefdescription>
<para>Get the IDs of the selected aux variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="164" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="731" bodyend="738"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" prot="public" static="no">
        <name>EStructMode</name>
        <enumvalue id="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852ae0c432fa7f19ca9ce01c79176bd6580b" prot="public">
          <name>kUndefinedStore</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>The structure mode is not defined. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852aa213f44ce9479342d2a394a2a3b124d9" prot="public">
          <name>kContainerStore</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>The object describes an entire container. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852ad7da9cfb3a909ac0ff8756ede9947587" prot="public">
          <name>kObjectStore</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>The object describes a single object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&quot;Structural&quot; modes of the object </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="52" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" prot="public" static="no">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>typedef SG::auxid_t xAOD::TAuxStore::auxid_t</definition>
        <argsstring></argsstring>
        <name>auxid_t</name>
        <briefdescription>
<para>Convenience type declaration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" prot="public" static="no">
        <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref></type>
        <definition>typedef SG::auxid_set_t xAOD::TAuxStore::auxid_set_t</definition>
        <argsstring></argsstring>
        <name>auxid_set_t</name>
        <briefdescription>
<para>Convenience type declaration. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d7/d77/classxAOD_1_1TAuxStore_1ad939a043f32f07902a289e974c8c7d15" prot="private" static="no">
        <type>AthContainers_detail::mutex</type>
        <definition>typedef AthContainers_detail::mutex xAOD::TAuxStore::mutex_t</definition>
        <argsstring></argsstring>
        <name>mutex_t</name>
        <briefdescription>
<para>Mutex type for multithread synchronization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="236" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/d77/classxAOD_1_1TAuxStore_1abfaee53691d7e713f623ca23230ccc73" prot="private" static="no">
        <type>AthContainers_detail::lock_guard&lt; mutex_t &gt;</type>
        <definition>typedef AthContainers_detail::lock_guard&lt; mutex_t &gt; xAOD::TAuxStore::guard_t</definition>
        <argsstring></argsstring>
        <name>guard_t</name>
        <briefdescription>
<para>Guard type for multithreaded synchronisation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d7/d77/classxAOD_1_1TAuxStore_1a8c623db1a717712c7c4b6fa671f5f345" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TEvent</definition>
        <argsstring></argsstring>
        <name>TEvent</name>
        <briefdescription>
<para>Make <ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">TEvent</ref> a friend of this class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1af76f9497d7b6704d49894791226b3d4b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string xAOD::TAuxStore::m_prefix</definition>
        <argsstring></argsstring>
        <name>m_prefix</name>
        <briefdescription>
<para>Static prefix for the branch names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="190" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a42895d627f356aed75accbd3ec66f867" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string xAOD::TAuxStore::m_dynPrefix</definition>
        <argsstring></argsstring>
        <name>m_dynPrefix</name>
        <briefdescription>
<para>Dynamic prefix for the branch names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="192" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a0afb5ac8a0a27e764bf993bc7cc303bc" prot="private" static="no" mutable="no">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::TAuxStore::m_topStore</definition>
        <argsstring></argsstring>
        <name>m_topStore</name>
        <briefdescription>
<para>Flag stating whether this is a &quot;top store&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="195" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a36c66dea24cb253f982e8a0e434f7953" prot="private" static="no" mutable="yes">
        <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" kindref="member">EStructMode</ref></type>
        <definition>EStructMode xAOD::TAuxStore::m_structMode</definition>
        <argsstring></argsstring>
        <name>m_structMode</name>
        <briefdescription>
<para>The &quot;structural&quot; mode of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="198" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a642cafa42b67d63aa837ae27b8bd009c" prot="private" static="no" mutable="no">
        <type>::Int_t</type>
        <definition>::Int_t xAOD::TAuxStore::m_basketSize</definition>
        <argsstring></argsstring>
        <name>m_basketSize</name>
        <briefdescription>
<para>The basket size for the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="200" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a37c9827176ab2f142455ee69b5ce9472" prot="private" static="no" mutable="no">
        <type>::Int_t</type>
        <definition>::Int_t xAOD::TAuxStore::m_splitLevel</definition>
        <argsstring></argsstring>
        <name>m_splitLevel</name>
        <briefdescription>
<para>The split level for the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="202" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1aaea115765b8b3457c7173983c4ec7a8e" prot="private" static="no" mutable="no">
        <type>::Long64_t</type>
        <definition>::Long64_t xAOD::TAuxStore::m_entry</definition>
        <argsstring></argsstring>
        <name>m_entry</name>
        <briefdescription>
<para>Current entry being read from an input tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="205" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a8323aef98b22619745cde1b7fbc63d68" prot="private" static="no" mutable="no">
        <type>::TTree *</type>
        <definition>::TTree* xAOD::TAuxStore::m_inTree</definition>
        <argsstring></argsstring>
        <name>m_inTree</name>
        <briefdescription>
<para>The TTree being read from. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="208" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a189d0649e5fd1b366b7f226472c2a668" prot="private" static="no" mutable="no">
        <type>::TTree *</type>
        <definition>::TTree* xAOD::TAuxStore::m_outTree</definition>
        <argsstring></argsstring>
        <name>m_outTree</name>
        <briefdescription>
<para>The TTree being written to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="210" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1aca14c888216b9ffaeaf6427941f59cd3" prot="private" static="no" mutable="no">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::TAuxStore::m_inputScanned</definition>
        <argsstring></argsstring>
        <name>m_inputScanned</name>
        <briefdescription>
<para>&quot;Scan status&quot; of the input TTree </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="213" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a72b1e0f38c6de973dc77032ed665def4" prot="private" static="no" mutable="no">
        <type><ref refid="d6/dd6/classxAOD_1_1AuxSelection" kindref="compound">AuxSelection</ref></type>
        <definition>AuxSelection xAOD::TAuxStore::m_selection</definition>
        <argsstring></argsstring>
        <name>m_selection</name>
        <briefdescription>
<para>Object helping to select which auxiliary variables to write. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="216" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1add10470a013f8a9ceb0afacc3511414a" prot="private" static="no" mutable="no">
        <type><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound">SG::AuxStoreInternal</ref> *</type>
        <definition>SG::AuxStoreInternal* xAOD::TAuxStore::m_transientStore</definition>
        <argsstring></argsstring>
        <name>m_transientStore</name>
        <briefdescription>
<para>Store for the in-memory-only variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="218" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a5378501b2ab8d53e2585b88cd509e263" prot="private" static="no" mutable="yes">
        <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">auxid_set_t</ref></type>
        <definition>auxid_set_t xAOD::TAuxStore::m_auxIDs</definition>
        <argsstring></argsstring>
        <name>m_auxIDs</name>
        <briefdescription>
<para>Internal list of variable IDs handled currently by the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="221" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1aa129befe2ca466e76bd4597839af6be6" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; <ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">SG::IAuxTypeVector</ref> * &gt;</type>
        <definition>std::vector&lt; SG::IAuxTypeVector* &gt; xAOD::TAuxStore::m_vecs</definition>
        <argsstring></argsstring>
        <name>m_vecs</name>
        <briefdescription>
<para>Variables handled currently by the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="223" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1aa68bc5db3eb35898dca0e37725ce949d" prot="private" static="no" mutable="yes">
        <type>std::size_t</type>
        <definition>std::size_t xAOD::TAuxStore::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
<para>The current size of the container being described. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="225" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1af2224cfa8642813d688cdea875d1c609" prot="private" static="no" mutable="no">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::TAuxStore::m_locked</definition>
        <argsstring></argsstring>
        <name>m_locked</name>
        <briefdescription>
<para>Is this container locked? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="228" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1ab47933b176c836a66daf1a25e99a7e95" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; ::Bool_t &gt;</type>
        <definition>std::vector&lt; ::Bool_t &gt; xAOD::TAuxStore::m_isDecoration</definition>
        <argsstring></argsstring>
        <name>m_isDecoration</name>
        <briefdescription>
<para>Flags items as decorations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="230" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a5d0ce4cdf6347678236ba873525a2179" prot="private" static="no" mutable="yes">
        <type>size_t</type>
        <definition>size_t xAOD::TAuxStore::m_tick</definition>
        <argsstring></argsstring>
        <name>m_tick</name>
        <briefdescription>
<para>Count changes to <computeroutput>m_auxIDs</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="233" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a6b8f8ef0c3e722fe216e434745a4c49b" prot="private" static="no" mutable="yes">
        <type>mutex_t</type>
        <definition>mutex_t xAOD::TAuxStore::m_mutex1</definition>
        <argsstring></argsstring>
        <name>m_mutex1</name>
        <briefdescription>
<para>Mutexes object used for multithreaded synchronisation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="240" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a81c341e4ed57e6aff2287dea64554892" prot="private" static="no" mutable="yes">
        <type>mutex_t</type>
        <definition>mutex_t xAOD::TAuxStore::m_mutex2</definition>
        <argsstring></argsstring>
        <name>m_mutex2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="240" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a485e9dcd204c934c8fbd94a5ba70f736" prot="private" static="no" mutable="yes">
        <type>AthContainers_detail::thread_specific_ptr&lt; TSAuxidSet &gt;</type>
        <definition>AthContainers_detail::thread_specific_ptr&lt; TSAuxidSet &gt; xAOD::TAuxStore::m_tsAuxids</definition>
        <argsstring></argsstring>
        <name>m_tsAuxids</name>
        <briefdescription>
<para>Thread-local versions of the auxid set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a889d8e4fc7368f74a18899763300f782" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; TBranchHandle * &gt;</type>
        <definition>std::vector&lt; TBranchHandle* &gt; xAOD::TAuxStore::m_branches</definition>
        <argsstring></argsstring>
        <name>m_branches</name>
        <briefdescription>
<para>Branches reading the various auxiliary variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="304" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a47ae280284b902554b91503bfa1fb9a2" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt; bool &gt; xAOD::TAuxStore::m_branchesWritten</definition>
        <argsstring></argsstring>
        <name>m_branchesWritten</name>
        <briefdescription>
<para>&quot;Write status&quot; of the different variables </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="306" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/d77/classxAOD_1_1TAuxStore_1a82a12855bbe773e3382c736c57d1f51e" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt; bool &gt; xAOD::TAuxStore::m_missingBranches</definition>
        <argsstring></argsstring>
        <name>m_missingBranches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark branches we&apos;ve found to be missing. (Because TTree::GetBranch is very expensive.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="309" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a69485ce535311511c97f51d299ba9ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::TAuxStore::TAuxStore</definition>
        <argsstring>(const char *prefix=&quot;&quot;, Bool_t topStore=kTRUE, EStructMode mode=kUndefinedStore, Int_t basketSize=2048, Int_t splitLevel=0)</argsstring>
        <name>TAuxStore</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>Bool_t</type>
          <declname>topStore</declname>
          <defval>kTRUE</defval>
        </param>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" kindref="member">EStructMode</ref></type>
          <declname>mode</declname>
          <defval>kUndefinedStore</defval>
        </param>
        <param>
          <type>Int_t</type>
          <declname>basketSize</declname>
          <defval>2048</defval>
        </param>
        <param>
          <type>Int_t</type>
          <declname>splitLevel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="34" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a05268b7e9dfb501d79b3d6fa4eaefc63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::TAuxStore::~TAuxStore</definition>
        <argsstring>()</argsstring>
        <name>~TAuxStore</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="48" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a38c18c1dc291e16364490bcf7848563c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" kindref="member">EStructMode</ref></type>
        <definition>TAuxStore::EStructMode xAOD::TAuxStore::structMode</definition>
        <argsstring>() const </argsstring>
        <name>structMode</name>
        <briefdescription>
<para>Get what structure mode the object was constructed with. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a55b35fac4c7388272f88ff235c89fc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::setStructMode</definition>
        <argsstring>(EStructMode mode)</argsstring>
        <name>setStructMode</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" kindref="member">EStructMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the structure mode of the object to a new value. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be used with great care. It makes it possible for the <ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">TEvent</ref> code to set the type of the object once the type is known. But user code should probably not fiddle with this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure mode to set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The usual <ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref> values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="77" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1acb4c520a27c77a913012c1172904799d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * xAOD::TAuxStore::prefix</definition>
        <argsstring>() const </argsstring>
        <name>prefix</name>
        <briefdescription>
<para>Get the currently configured branch name prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="75" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a2a7cee99018cc29536d29e20a0319b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::setPrefix</definition>
        <argsstring>(const char *prefix)</argsstring>
        <name>setPrefix</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Set the branch name prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a13ec10837d3aaee4a63169d710012300" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Bool_t</type>
        <definition>Bool_t xAOD::TAuxStore::isTopStore</definition>
        <argsstring>() const </argsstring>
        <name>isTopStore</name>
        <briefdescription>
<para>Check if the object is a &quot;top store&quot;, or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a5a3da4966ebff5a8301b4bdd9b04a80d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::setTopStore</definition>
        <argsstring>(Bool_t value=kTRUE)</argsstring>
        <name>setTopStore</name>
        <param>
          <type>Bool_t</type>
          <declname>value</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Set whether the object should behave as a &quot;top store&quot; or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="82"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a021d57869900ef910f011d0efda3ca34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Int_t</type>
        <definition>Int_t xAOD::TAuxStore::basketSize</definition>
        <argsstring>() const </argsstring>
        <name>basketSize</name>
        <briefdescription>
<para>Get the size of the baskets created for the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1af8073cde9f00990b6e0de662aefafb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::setBasketSize</definition>
        <argsstring>(Int_t value)</argsstring>
        <name>setBasketSize</name>
        <param>
          <type>Int_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the size of the baskets created for the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="87"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a624f848a82bc260507ade5417777cb64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Int_t</type>
        <definition>Int_t xAOD::TAuxStore::splitLevel</definition>
        <argsstring>() const </argsstring>
        <name>splitLevel</name>
        <briefdescription>
<para>Get the split level of the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a4470d35f873363e154cd8a7980fa591f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::setSplitLevel</definition>
        <argsstring>(Int_t value)</argsstring>
        <name>setSplitLevel</name>
        <param>
          <type>Int_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the split level of the output branches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="92"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a939bf0938bbddd31e71c393a7f8c1476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::readFrom</definition>
        <argsstring>(::TTree *tree,::Bool_t printWarnings=kTRUE)</argsstring>
        <name>readFrom</name>
        <param>
          <type>::TTree *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>printWarnings</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Connect the object to an input TTree. </para>        </briefdescription>
        <detaileddescription>
<para>This function is called by the infrastructure to connect the object to an input TTree whenever a new input file is opened.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TTree that is being read from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="144" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1aebc16a6c3c0c0f2918c07bf402c3faa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::writeTo</definition>
        <argsstring>(::TTree *tree)</argsstring>
        <name>writeTo</name>
        <param>
          <type>::TTree *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Connect the object to an output TTree. </para>        </briefdescription>
        <detaileddescription>
<para>This function is called by the infrastructure to connect the object to an output TTree.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TTree that is being written to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="97" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="185" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1ada32c6310920afbf3adf1c202c13b9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Int_t</type>
        <definition>Int_t xAOD::TAuxStore::getEntry</definition>
        <argsstring>(Long64_t entry, Int_t getall=0)</argsstring>
        <name>getEntry</name>
        <param>
          <type>Long64_t</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>Int_t</type>
          <declname>getall</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read the values from the specified TTree entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="100"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a58ea6131b64e73b49ea31bc75ec69731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TAuxStore::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Tell the object that all branches will need to be re-read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="262" bodyend="275"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a9c570f541aee5e42c696e2dc84991ac6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::initStats</definition>
        <argsstring>(::TTree *tree)</argsstring>
        <name>initStats</name>
        <param>
          <type>::TTree *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Function used for setting up the statistics info about the managed branches. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used to initialise the statistics registry with information about the branches managed by this object. It is used by <ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">TEvent</ref> when connecting to new input files/chains.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to collect the information from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">TReturnCode::kSuccess</ref></computeroutput> if the function was successful, something else otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="170" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="748" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a9d37d4447b873c7b58cddfc80e20b218" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::setupInputData</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>setupInputData</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Connect a variable to the input tree. </para>        </briefdescription>
        <detaileddescription>
<para>This internal function takes care of connecting to an individual (sub-)branch in the input file for a given auxiliary variable. It needs to handle a number of different use cases, so it&apos;s a bit long.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the variable to connect to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the operation was successful, <computeroutput>kFALSE</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="172" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="778" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1ae5e1123231c0256d13c9086fdf0fa0d8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::setupOutputData</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>setupOutputData</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Connect a variable to the output tree. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used internally to create a &quot;simple&quot; output branch with the contents of a single auxiliary variable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the variable to create an output branch for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the operation was successful, <computeroutput>kFALSE</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="174" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="1019" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a3a80915aef01312fba010c99177274ea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::scanInputTree</definition>
        <argsstring>()</argsstring>
        <name>scanInputTree</name>
        <briefdescription>
<para>Scan the input TTree for auxiliary branches. </para>        </briefdescription>
        <detaileddescription>
<para>When writing an output tree, while reading information from an input tree, it can often happen that we want to copy the contents of some variables that we don&apos;t actually need during the event processing of this particular job. Since the user doesn&apos;t ask for all the possible input variables, this function needs to look at the input TTree, and try to figure out which of the branches in the tree belong to this object.</para><para>The function creates a &quot;proper&quot; or &quot;virtual&quot; auxiliary ID for each of the branches found, so they can be referenced in the &quot;usual way&quot; in the other parts of the code later on.</para><para><simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the operation was successful, <computeroutput>kFALSE</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="176" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="1264" bodyend="1363"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a4b5296513921f184b648230557d3b4d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TAuxStore::setupAuxBranch</definition>
        <argsstring>(::TBranch *br, const char *auxName,::Bool_t staticBranch)</argsstring>
        <name>setupAuxBranch</name>
        <param>
          <type>::TBranch *</type>
          <declname>br</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>auxName</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>staticBranch</declname>
        </param>
        <briefdescription>
<para>Register one input branch as an available auxiliary variable. </para>        </briefdescription>
        <detaileddescription>
<para>This function takes care of assigning an auxiliary ID to a given branch. It tries its best to find an auxiliary vector factory for the branch&apos;s type, but if it fails, it still falls back to using <computeroutput><ref refid="d4/d24/classSG_1_1AuxTypePlaceholder" kindref="compound">SG::AuxTypePlaceholder</ref></computeroutput> as the type. In which case of course only dumb copying will be possible for the given branch. (And no vector operations on the branch&apos;s payload until the variable of the branch is accessed explicitly.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>br</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the branch under investigation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auxName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the auxiliary property, extracted from the branch&apos;s name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>staticBranch</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>kTRUE</computeroutput> if this is a &quot;static branch&quot;, and <computeroutput>kFALSE</computeroutput> if it&apos;s a dynamic one </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if successful, <computeroutput>kFALSE</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="179" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="1380" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a3d3d46f1d0bfee12247c192304681a70" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TAuxStore::isAuxIDSelected</definition>
        <argsstring>(auxid_t auxid) const </argsstring>
        <name>isAuxIDSelected</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Check if this auxiliary variable needs to go to the output. </para>        </briefdescription>
        <detaileddescription>
<para>This is a tricky one. The function can&apos;t just rely on getSelectedAuxIDs, as the aux ID received here may be a new ID that the object doesn&apos;t yet know about. So we have no other choice but to check this ID explicitly.</para><para>auxid The auxiliary ID that should be checked <simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the variable needs to be written out, <computeroutput>kFALSE</computeroutput> if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="181" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="1536" bodyend="1543"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a84e33765d9ec2dbda0255436f75190a8" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::TAuxStore::isPrimitiveBranch</definition>
        <argsstring>(TBranch *br)</argsstring>
        <name>isPrimitiveBranch</name>
        <param>
          <type>TBranch *</type>
          <declname>br</declname>
        </param>
        <briefdescription>
<para>Check if a branch holds a primitive variable or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="183"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a7d9bc8e0aa065b27ef9e200658105913" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>::Bool_t xAOD::TAuxStore::isContainerBranch</definition>
        <argsstring>(TBranch *br, auxid_t auxid)</argsstring>
        <name>isContainerBranch</name>
        <param>
          <type>TBranch *</type>
          <declname>br</declname>
        </param>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Check if a branch describes a container or a single object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="d7/d77/classxAOD_1_1TAuxStore_1a595de2538d843d14c0c2e44072f8c846" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TAuxStore::isRegisteredType</definition>
        <argsstring>(auxid_t auxid)</argsstring>
        <name>isRegisteredType</name>
        <param>
          <type><ref refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" kindref="member">auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Check if the auxiliary variable has a registered type. </para>        </briefdescription>
        <detaileddescription>
<para>This function is used to test if a given auxiliary variable is known in the registry with a proper type.</para><para><simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the full type of the auxiliary property is known, <computeroutput>kFALSE</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TAuxStore.cxx" bodystart="1694" bodyend="1705"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&quot;ROOT implementation&quot; of IAuxStore </para>    </briefdescription>
    <detaileddescription>
<para>This is a &quot;D3PDReader-like&quot; implementation for the auxiliary store interface. It is meant to provide very efficient access to a relatively small number of auxiliary variables.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>718392 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2016-01-19 11:41:32 +0100 (Tue, 19 Jan 2016) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="19401">
        <label>xAOD::TAuxStore</label>
        <link refid="d7/d77/classxAOD_1_1TAuxStore"/>
        <childnode refid="19402" relation="public-inheritance">
        </childnode>
        <childnode refid="19404" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19403">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="19404">
        <label>SG::IAuxStoreIO</label>
        <link refid="db/d37/classSG_1_1IAuxStoreIO"/>
      </node>
      <node id="19402">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="19403" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19420">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="19421">
        <label>Internal::hash_code_base&lt;Value , Value , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="19413">
        <label>Internal::hash_code_base&lt;size_t , size_t , Internal::identity&lt; size_t &gt; , std::equal_to&lt; size_t &gt; , hash&lt; size_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="19405">
        <label>xAOD::TAuxStore</label>
        <link refid="d7/d77/classxAOD_1_1TAuxStore"/>
        <childnode refid="19406" relation="public-inheritance">
        </childnode>
        <childnode refid="19408" relation="public-inheritance">
        </childnode>
        <childnode refid="19409" relation="usage">
          <edgelabel>m_selection</edgelabel>
        </childnode>
        <childnode refid="19415" relation="usage">
          <edgelabel>m_mutex1</edgelabel>
          <edgelabel>m_mutex2</edgelabel>
        </childnode>
        <childnode refid="19416" relation="usage">
          <edgelabel>m_dynPrefix</edgelabel>
          <edgelabel>m_prefix</edgelabel>
        </childnode>
        <childnode refid="19417" relation="usage">
          <edgelabel>m_transientStore</edgelabel>
        </childnode>
        <childnode refid="19418" relation="usage">
          <edgelabel>m_auxIDs</edgelabel>
        </childnode>
      </node>
      <node id="19419">
        <label>SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="19420" relation="public-inheritance">
        </childnode>
        <childnode refid="19421" relation="public-inheritance">
        </childnode>
        <childnode refid="19422" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19416">
        <label>string</label>
      </node>
      <node id="19414">
        <label>Internal::map_base&lt;size_t , size_t , Internal::identity&lt; size_t &gt; , unique_keys, hashtable&lt;size_t , size_t , std::allocator&lt; size_t &gt; , Internal::identity&lt; size_t &gt; , std::equal_to&lt; size_t &gt; , hash&lt; size_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="19409">
        <label>xAOD::AuxSelection</label>
        <link refid="d6/dd6/classxAOD_1_1AuxSelection"/>
        <childnode refid="19410" relation="usage">
          <edgelabel>m_auxids</edgelabel>
        </childnode>
      </node>
      <node id="19407">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="19408">
        <label>SG::IAuxStoreIO</label>
        <link refid="db/d37/classSG_1_1IAuxStoreIO"/>
      </node>
      <node id="19411">
        <label>SG::hashtable&lt; size_t, size_t, std::allocator&lt; size_t &gt;, Internal::identity&lt; size_t &gt;, std::equal_to&lt; size_t &gt;, hash&lt; size_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="19412" relation="public-inheritance">
        </childnode>
        <childnode refid="19413" relation="public-inheritance">
        </childnode>
        <childnode refid="19414" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19406">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="19407" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19418">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="19419" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19422">
        <label>Internal::map_base&lt;Value , Value , Internal::identity&lt; Value &gt; , unique_keys, hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="19417">
        <label>SG::AuxStoreInternal</label>
        <link refid="d1/d1c/classSG_1_1AuxStoreInternal"/>
        <childnode refid="19406" relation="public-inheritance">
        </childnode>
        <childnode refid="19408" relation="public-inheritance">
        </childnode>
        <childnode refid="19410" relation="usage">
          <edgelabel>m_auxids</edgelabel>
        </childnode>
        <childnode refid="19415" relation="usage">
          <edgelabel>m_mutex</edgelabel>
        </childnode>
      </node>
      <node id="19412">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;size_t , size_t , std::allocator&lt; size_t &gt; , Internal::identity&lt; size_t &gt; , std::equal_to&lt; size_t &gt; , hash&lt; size_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="19415">
        <label>mutex</label>
      </node>
      <node id="19410">
        <label>SG::unordered_set&lt; size_t &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="19411" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TAuxStore.h" bodystart="44" bodyend="311"/>
    <listofallmembers>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aa1c1e392ec813c633b1162641f619743" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>auxid_set_t</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a020e470c65dc93dfebfb6b710a78a5ac" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>auxid_t</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a021d57869900ef910f011d0efda3ca34" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>basketSize</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aa54c325574f8010e131e5f36d64ac639" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>clearDecorations</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>EStructMode</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ae0d420f97f8cd76805cf7b8445c2a85e" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getAuxIDs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a1122528f8528e1042d1581029b3c930f" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getData</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1adc37316e5f43b9f27ce51259bf02691a" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getData</name></member>
      <member refid="dc/d05/classSG_1_1IAuxStore_1a0a6b90ed812993712727c76b64953c48" prot="public" virt="pure-virtual" ambiguityscope="SG::IAuxStore::"><scope>xAOD::TAuxStore</scope><name>getData</name></member>
      <member refid="d3/dd5/classSG_1_1IConstAuxStore_1aa73e6e5474cdc0d38fe3367740876c59" prot="public" virt="pure-virtual" ambiguityscope="SG::IConstAuxStore::"><scope>xAOD::TAuxStore</scope><name>getData</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a4deb553e290dad77b6f5c2e84e26560d" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getDecoration</name></member>
      <member refid="d3/dd5/classSG_1_1IConstAuxStore_1a96728593e3bc1da60d3bdd28291969f0" prot="public" virt="pure-virtual" ambiguityscope="SG::IAuxStore::"><scope>xAOD::TAuxStore</scope><name>getDecoration</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1af25aa5f7c49ebf12cfe1efce13366647" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getDynamicAuxIDs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ada32c6310920afbf3adf1c202c13b9d1" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>getEntry</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a6c53c19802435b7512a58ecd193aad8b" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getIOData</name></member>
      <member refid="db/d37/classSG_1_1IAuxStoreIO_1a55ba7c049509f9b6a8b5c57e9322bcc9" prot="public" virt="pure-virtual" ambiguityscope="SG::IAuxStoreIO::"><scope>xAOD::TAuxStore</scope><name>getIOData</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a456132ea9c9d352ac102f79b428db9a6" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getIOType</name></member>
      <member refid="db/d37/classSG_1_1IAuxStoreIO_1a25c3d7891a19f3881f932c3484031df2" prot="public" virt="pure-virtual" ambiguityscope="SG::IAuxStoreIO::"><scope>xAOD::TAuxStore</scope><name>getIOType</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a8bba42e8001df5a3f99ef3f4cd453b08" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getSelectedAuxIDs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a09182a6ecf681b029fc136e954e6220a" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>getWritableAuxIDs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1abfaee53691d7e713f623ca23230ccc73" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>guard_t</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a9c570f541aee5e42c696e2dc84991ac6" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>initStats</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a3d3d46f1d0bfee12247c192304681a70" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>isAuxIDSelected</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a7d9bc8e0aa065b27ef9e200658105913" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>isContainerBranch</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a84e33765d9ec2dbda0255436f75190a8" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>isPrimitiveBranch</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a595de2538d843d14c0c2e44072f8c846" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>isRegisteredType</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a13ec10837d3aaee4a63169d710012300" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>isTopStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852aa213f44ce9479342d2a394a2a3b124d9" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>kContainerStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852ad7da9cfb3a909ac0ff8756ede9947587" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>kObjectStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ad7cf952b0de5a1b959a31ff655efe852ae0c432fa7f19ca9ce01c79176bd6580b" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>kUndefinedStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a00986f58a4b03c8fd383f67bcaffb417" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>lock</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a5378501b2ab8d53e2585b88cd509e263" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_auxIDs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a642cafa42b67d63aa837ae27b8bd009c" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_basketSize</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a889d8e4fc7368f74a18899763300f782" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_branches</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a47ae280284b902554b91503bfa1fb9a2" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_branchesWritten</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a42895d627f356aed75accbd3ec66f867" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_dynPrefix</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aaea115765b8b3457c7173983c4ec7a8e" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_entry</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aca14c888216b9ffaeaf6427941f59cd3" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_inputScanned</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a8323aef98b22619745cde1b7fbc63d68" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_inTree</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ab47933b176c836a66daf1a25e99a7e95" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_isDecoration</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1af2224cfa8642813d688cdea875d1c609" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_locked</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a82a12855bbe773e3382c736c57d1f51e" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_missingBranches</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a6b8f8ef0c3e722fe216e434745a4c49b" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_mutex1</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a81c341e4ed57e6aff2287dea64554892" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_mutex2</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a189d0649e5fd1b366b7f226472c2a668" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_outTree</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1af76f9497d7b6704d49894791226b3d4b" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_prefix</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a72b1e0f38c6de973dc77032ed665def4" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_selection</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aa68bc5db3eb35898dca0e37725ce949d" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_size</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a37c9827176ab2f142455ee69b5ce9472" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_splitLevel</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a36c66dea24cb253f982e8a0e434f7953" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_structMode</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a5d0ce4cdf6347678236ba873525a2179" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_tick</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a0afb5ac8a0a27e764bf993bc7cc303bc" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_topStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1add10470a013f8a9ceb0afacc3511414a" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_transientStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a485e9dcd204c934c8fbd94a5ba70f736" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_tsAuxids</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aa129befe2ca466e76bd4597839af6be6" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>m_vecs</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ad939a043f32f07902a289e974c8c7d15" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>mutex_t</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1acb4c520a27c77a913012c1172904799d" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>prefix</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a939bf0938bbddd31e71c393a7f8c1476" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>readFrom</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a374f9c52c985144de4e2489a71a599d6" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>reserve</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a58ea6131b64e73b49ea31bc75ec69731" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>reset</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a0ae2b8968e98d214a873d9ba71396aea" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>resize</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a3a80915aef01312fba010c99177274ea" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>scanInputTree</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a315008cfc1331acd2639b78722ecb3c9" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>selectAux</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1af8073cde9f00990b6e0de662aefafb02" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setBasketSize</name></member>
      <member refid="dc/d05/classSG_1_1IAuxStore_1a371646fff1258a9f81b35d26eca3ac45" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>setOption</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a2a7cee99018cc29536d29e20a0319b18" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setPrefix</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a4470d35f873363e154cd8a7980fa591f" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setSplitLevel</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a55b35fac4c7388272f88ff235c89fc38" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setStructMode</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a5a3da4966ebff5a8301b4bdd9b04a80d" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setTopStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a4b5296513921f184b648230557d3b4d4" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setupAuxBranch</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a9d37d4447b873c7b58cddfc80e20b218" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setupInputData</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1ae5e1123231c0256d13c9086fdf0fa0d8" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>setupOutputData</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a3cc2ab29e748776999478fc1c9aed89d" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>shift</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1af4ca8c9d4c674a087cc201401889e7b7" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>size</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a624f848a82bc260507ade5417777cb64" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>splitLevel</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a38c18c1dc291e16364490bcf7848563c" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>structMode</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a69485ce535311511c97f51d299ba9ac3" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>TAuxStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a8c623db1a717712c7c4b6fa671f5f345" prot="private" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>TEvent</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1aebc16a6c3c0c0f2918c07bf402c3faa9" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>writeTo</name></member>
      <member refid="db/d37/classSG_1_1IAuxStoreIO_1a78166aac5abe83f66eef9946a23ced75" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>~IAuxStoreIO</name></member>
      <member refid="d3/dd5/classSG_1_1IConstAuxStore_1a2acc9ded5fe9a64c8f508d3c0d7431a5" prot="public" virt="virtual"><scope>xAOD::TAuxStore</scope><name>~IConstAuxStore</name></member>
      <member refid="d7/d77/classxAOD_1_1TAuxStore_1a05268b7e9dfb501d79b3d6fa4eaefc63" prot="public" virt="non-virtual"><scope>xAOD::TAuxStore</scope><name>~TAuxStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
