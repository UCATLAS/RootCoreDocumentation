<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d7/d3f/JetAccessors_8h" kind="file">
    <compoundname>JetAccessors.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="d1/d6f/AuxElement_8h" local="yes">AthContainers/AuxElement.h</includes>
    <includes refid="d5/dac/IParticle_8h" local="yes">xAODBase/IParticle.h</includes>
    <includes refid="d6/d2a/JetTypes_8h" local="yes">xAODJet/JetTypes.h</includes>
    <includedby refid="dc/d18/JetUncertainties_2JetUncertainties_2Helpers_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetUncertainties/JetUncertainties/Helpers.h</includedby>
    <includedby refid="d9/db5/Root_2Jet__v1_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/Root/Jet_v1.cxx</includedby>
    <includedby refid="dd/dbe/JetAccessorMap__v1_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/versions/JetAccessorMap_v1.h</includedby>
    <incdepgraph>
      <node id="384145">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="384147">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="384102" relation="include">
        </childnode>
        <childnode refid="384104" relation="include">
        </childnode>
        <childnode refid="384110" relation="include">
        </childnode>
        <childnode refid="384111" relation="include">
        </childnode>
      </node>
      <node id="384148">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="384113">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="384098" relation="include">
        </childnode>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384114" relation="include">
        </childnode>
        <childnode refid="384112" relation="include">
        </childnode>
      </node>
      <node id="384109">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="384111">
        <label>functional</label>
      </node>
      <node id="384108">
        <label>limits</label>
      </node>
      <node id="384114">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="384143">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="384105">
        <label>iterator</label>
      </node>
      <node id="384131">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="384095" relation="include">
        </childnode>
        <childnode refid="384132" relation="include">
        </childnode>
      </node>
      <node id="384155">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="384099" relation="include">
        </childnode>
        <childnode refid="384156" relation="include">
        </childnode>
        <childnode refid="384157" relation="include">
        </childnode>
        <childnode refid="384123" relation="include">
        </childnode>
        <childnode refid="384095" relation="include">
        </childnode>
      </node>
      <node id="384127">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="384128" relation="include">
        </childnode>
        <childnode refid="384106" relation="include">
        </childnode>
      </node>
      <node id="384116">
        <label>stdint.h</label>
      </node>
      <node id="384124">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384123" relation="include">
        </childnode>
      </node>
      <node id="384119">
        <label>RVersion.h</label>
      </node>
      <node id="384101">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="384102" relation="include">
        </childnode>
        <childnode refid="384110" relation="include">
        </childnode>
        <childnode refid="384111" relation="include">
        </childnode>
      </node>
      <node id="384107">
        <label>cmath</label>
      </node>
      <node id="384159">
        <label>cassert</label>
      </node>
      <node id="384157">
        <label>stdexcept</label>
      </node>
      <node id="384146">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="384161">
        <label>TLorentzVector.h</label>
      </node>
      <node id="384095">
        <label>string</label>
      </node>
      <node id="384149">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="384099" relation="include">
        </childnode>
        <childnode refid="384098" relation="include">
        </childnode>
        <childnode refid="384131" relation="include">
        </childnode>
        <childnode refid="384127" relation="include">
        </childnode>
        <childnode refid="384115" relation="include">
        </childnode>
        <childnode refid="384150" relation="include">
        </childnode>
        <childnode refid="384151" relation="include">
        </childnode>
        <childnode refid="384134" relation="include">
        </childnode>
        <childnode refid="384128" relation="include">
        </childnode>
        <childnode refid="384104" relation="include">
        </childnode>
        <childnode refid="384106" relation="include">
        </childnode>
        <childnode refid="384152" relation="include">
        </childnode>
        <childnode refid="384153" relation="include">
        </childnode>
        <childnode refid="384141" relation="include">
        </childnode>
        <childnode refid="384154" relation="include">
        </childnode>
      </node>
      <node id="384122">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384123" relation="include">
        </childnode>
      </node>
      <node id="384152">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="384120">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="384138">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="384153">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="384165">
        <label>Math/Vector4D.h</label>
      </node>
      <node id="384094">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessors.h</label>
        <link refid="JetAccessors.h"/>
        <childnode refid="384095" relation="include">
        </childnode>
        <childnode refid="384096" relation="include">
        </childnode>
        <childnode refid="384160" relation="include">
        </childnode>
        <childnode refid="384164" relation="include">
        </childnode>
      </node>
      <node id="384135">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="384097">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="384118">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="384119" relation="include">
        </childnode>
        <childnode refid="384120" relation="include">
        </childnode>
      </node>
      <node id="384151">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="384144">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="384130">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="384131" relation="include">
        </childnode>
        <childnode refid="384108" relation="include">
        </childnode>
        <childnode refid="384116" relation="include">
        </childnode>
        <childnode refid="384133" relation="include">
        </childnode>
      </node>
      <node id="384099">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384101" relation="include">
        </childnode>
      </node>
      <node id="384102">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="384103" relation="include">
        </childnode>
        <childnode refid="384104" relation="include">
        </childnode>
        <childnode refid="384105" relation="include">
        </childnode>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384106" relation="include">
        </childnode>
        <childnode refid="384107" relation="include">
        </childnode>
        <childnode refid="384108" relation="include">
        </childnode>
        <childnode refid="384095" relation="include">
        </childnode>
        <childnode refid="384109" relation="include">
        </childnode>
      </node>
      <node id="384160">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="384161" relation="include">
        </childnode>
        <childnode refid="384096" relation="include">
        </childnode>
        <childnode refid="384162" relation="include">
        </childnode>
        <childnode refid="384114" relation="include">
        </childnode>
      </node>
      <node id="384162">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="384163" relation="include">
        </childnode>
      </node>
      <node id="384123">
        <label>typeinfo</label>
      </node>
      <node id="384158">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="384152" relation="include">
        </childnode>
        <childnode refid="384159" relation="include">
        </childnode>
      </node>
      <node id="384133">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="384150">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="384117">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="384116" relation="include">
        </childnode>
      </node>
      <node id="384132">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="384137">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="384112">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="384121">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="384099" relation="include">
        </childnode>
        <childnode refid="384122" relation="include">
        </childnode>
        <childnode refid="384124" relation="include">
        </childnode>
        <childnode refid="384125" relation="include">
        </childnode>
        <childnode refid="384139" relation="include">
        </childnode>
        <childnode refid="384141" relation="include">
        </childnode>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384123" relation="include">
        </childnode>
        <childnode refid="384128" relation="include">
        </childnode>
        <childnode refid="384147" relation="include">
        </childnode>
        <childnode refid="384148" relation="include">
        </childnode>
      </node>
      <node id="384128">
        <label>vector</label>
      </node>
      <node id="384104">
        <label>utility</label>
      </node>
      <node id="384134">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="384142">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="384126">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="384141">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="384142" relation="include">
        </childnode>
        <childnode refid="384143" relation="include">
        </childnode>
        <childnode refid="384144" relation="include">
        </childnode>
        <childnode refid="384145" relation="include">
        </childnode>
        <childnode refid="384146" relation="include">
        </childnode>
      </node>
      <node id="384163">
        <label>iosfwd</label>
      </node>
      <node id="384106">
        <label>cstdlib</label>
      </node>
      <node id="384156">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="384098">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="384099" relation="include">
        </childnode>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384112" relation="include">
        </childnode>
      </node>
      <node id="384100">
        <label>cstddef</label>
      </node>
      <node id="384154">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="384121" relation="include">
        </childnode>
        <childnode refid="384113" relation="include">
        </childnode>
        <childnode refid="384098" relation="include">
        </childnode>
        <childnode refid="384152" relation="include">
        </childnode>
        <childnode refid="384153" relation="include">
        </childnode>
      </node>
      <node id="384164">
        <label>xAODJet/JetTypes.h</label>
        <link refid="d6/d2a/JetTypes_8h_source"/>
        <childnode refid="384165" relation="include">
        </childnode>
      </node>
      <node id="384125">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="384122" relation="include">
        </childnode>
        <childnode refid="384126" relation="include">
        </childnode>
        <childnode refid="384127" relation="include">
        </childnode>
        <childnode refid="384129" relation="include">
        </childnode>
        <childnode refid="384134" relation="include">
        </childnode>
        <childnode refid="384123" relation="include">
        </childnode>
        <childnode refid="384128" relation="include">
        </childnode>
        <childnode refid="384103" relation="include">
        </childnode>
        <childnode refid="384116" relation="include">
        </childnode>
        <childnode refid="384136" relation="include">
        </childnode>
        <childnode refid="384137" relation="include">
        </childnode>
        <childnode refid="384138" relation="include">
        </childnode>
      </node>
      <node id="384136">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="384140">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="384129">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="384126" relation="include">
        </childnode>
        <childnode refid="384130" relation="include">
        </childnode>
        <childnode refid="384134" relation="include">
        </childnode>
        <childnode refid="384128" relation="include">
        </childnode>
        <childnode refid="384135" relation="include">
        </childnode>
      </node>
      <node id="384103">
        <label>algorithm</label>
      </node>
      <node id="384096">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="384097" relation="include">
        </childnode>
        <childnode refid="384098" relation="include">
        </childnode>
        <childnode refid="384113" relation="include">
        </childnode>
        <childnode refid="384115" relation="include">
        </childnode>
        <childnode refid="384121" relation="include">
        </childnode>
        <childnode refid="384149" relation="include">
        </childnode>
        <childnode refid="384127" relation="include">
        </childnode>
        <childnode refid="384155" relation="include">
        </childnode>
        <childnode refid="384152" relation="include">
        </childnode>
        <childnode refid="384100" relation="include">
        </childnode>
        <childnode refid="384158" relation="include">
        </childnode>
      </node>
      <node id="384115">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="384116" relation="include">
        </childnode>
        <childnode refid="384095" relation="include">
        </childnode>
        <childnode refid="384117" relation="include">
        </childnode>
        <childnode refid="384118" relation="include">
        </childnode>
      </node>
      <node id="384110">
        <label>memory</label>
      </node>
      <node id="384139">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="384124" relation="include">
        </childnode>
        <childnode refid="384125" relation="include">
        </childnode>
        <childnode refid="384140" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="384168">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetUncertainties/JetUncertainties/CombinedMassUncertaintyComponent.h</label>
        <link refid="db/d8a/CombinedMassUncertaintyComponent_8h_source"/>
      </node>
      <node id="384170">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/versions/JetAccessorMap_v1.h</label>
        <link refid="dd/dbe/JetAccessorMap__v1_8h_source"/>
        <childnode refid="384171" relation="include">
        </childnode>
      </node>
      <node id="384166">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessors.h</label>
        <link refid="JetAccessors.h"/>
        <childnode refid="384167" relation="include">
        </childnode>
        <childnode refid="384170" relation="include">
        </childnode>
      </node>
      <node id="384169">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetUncertainties/util/OptionHelper.h</label>
        <link refid="d3/d27/OptionHelper_8h_source"/>
      </node>
      <node id="384167">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetUncertainties/JetUncertainties/Helpers.h</label>
        <link refid="dc/d18/JetUncertainties_2JetUncertainties_2Helpers_8h_source"/>
        <childnode refid="384168" relation="include">
        </childnode>
        <childnode refid="384169" relation="include">
        </childnode>
      </node>
      <node id="384171">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessorMap.h</label>
        <link refid="d4/d5f/JetAccessorMap_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" prot="public">xAOD::JetAttributeAccessor::Named</innerclass>
    <innerclass refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" prot="public">xAOD::JetAttributeAccessor::AccessorWrapper</innerclass>
    <innerclass refid="dc/da8/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01double_01_4" prot="public">xAOD::JetAttributeAccessor::AccessorWrapper&lt; double &gt;</innerclass>
    <innerclass refid="da/d07/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01std_1_1vector_3_01double_01_4_01_4" prot="public">xAOD::JetAttributeAccessor::AccessorWrapper&lt; std::vector&lt; double &gt; &gt;</innerclass>
    <innerclass refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" prot="public">xAOD::JetAttributeAccessor::FourMomAccessor</innerclass>
    <innerclass refid="de/d4f/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01JetFourMom__t_01_4" prot="public">xAOD::JetAttributeAccessor::AccessorWrapper&lt; JetFourMom_t &gt;</innerclass>
    <innerclass refid="d9/da6/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01IParticle_1_1FourMom__t_01_4" prot="public">xAOD::JetAttributeAccessor::AccessorWrapper&lt; IParticle::FourMom_t &gt;</innerclass>
    <innerclass refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" prot="public">xAOD::JetAttributeAccessor::ObjectAccessorWrapper</innerclass>
    <innerclass refid="db/dbe/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper_3_01std_1_1vector_3_01const_01TYPE_01_5_01_4_01_4" prot="public">xAOD::JetAttributeAccessor::ObjectAccessorWrapper&lt; std::vector&lt; const TYPE * &gt; &gt;</innerclass>
    <innernamespace refid="dd/d44/namespacexAOD">xAOD</innernamespace>
    <innernamespace refid="d6/d06/namespacexAOD_1_1JetAttributeAccessor">xAOD::JetAttributeAccessor</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d7/d3f/JetAccessors_8h_1aef4591bc58230e8a29b158718ba60dba" prot="public" static="no" mutable="no">
        <type>No</type>
        <definition>No no[3]</definition>
        <argsstring>[3]</argsstring>
        <name>no</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessors.h" line="234" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessors.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This header defines wrapper classes around <ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor</ref> used internally in the Jet EDM. </para>    </briefdescription>
    <detaileddescription>
<para>By default the wrappers add no functionality to this class. Their intent is to act as converter between types exposed in the Jet interface and the types stored in the Aux. Store. For example :<itemizedlist>
<listitem><para>double -&gt; float</para></listitem><listitem><para>vector&lt;double&gt; -&gt; vector&lt;float&gt;</para></listitem><listitem><para>JetFourMom_t -&gt; 4 separated floats</para></listitem><listitem><para>IParticle and any class inheriting it -&gt; <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink&lt;IParticleContainer&gt;</ref></para></listitem><listitem><para>Object inheriting AuxElement -&gt; <ref refid="d6/d6e/classElementLink" kindref="compound">ElementLink</ref>&lt; DataVector&lt;Object&gt; &gt;</para></listitem></itemizedlist>
</para><para>These wrappers can then be used directly in the implementation of Jet::get/setAttribute methods which are thus much simpler. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Dear<sp/>emacs,<sp/>this<sp/>is<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAODJET_JETACCESSORS_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>XAODJET_JETACCESSORS_H</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d6f/AuxElement_8h" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">AthContainers/AuxElement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODBase/IParticle.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODJet/JetTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xAOD<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">JetAttributeAccessor<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/>m_name(n){}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_name;}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_name;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="43" refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; TYPE &gt;</ref><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(n),<sp/>m_a(n)<sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE&amp;<sp/>v){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_a(p)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/>TYPE&amp;<sp/>v){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>m_a(p);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE<sp/>&amp;<sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a(p);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(p);}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>calls<sp/>to<sp/>internal<sp/>accessor.<sp/>useful<sp/>for<sp/>performance<sp/>critical<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE&amp;<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a(p);}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TYPE&amp;<sp/>operator()(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a(p);}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref><sp/>m_a;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="72" refid="dc/da8/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01double_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>&lt;double&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; float &gt;</ref><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(n)<sp/>,<sp/>m_a(n)<sp/>{}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>v){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_a(p)<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>v){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>m_a(p);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>return<sp/>a<sp/>reference,<sp/>since<sp/>the<sp/>internal<sp/>is<sp/>a<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>m_a(p);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(p);}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref><sp/>m_a;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="100" refid="da/d07/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01std_1_1vector_3_01double_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>&lt;<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Accessor&lt; std::vector&lt;float&gt;</ref><sp/><sp/>&gt;<sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(n),<sp/>m_a(n)<sp/>{}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>v){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_a(p).assign(<sp/>v.begin()<sp/>,<sp/>v.end()<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>v){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;<sp/>&amp;<sp/>vecF<sp/>=<sp/>m_a(p);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.assign(<sp/>vecF.begin()<sp/>,<sp/>vecF.end()<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>return<sp/>a<sp/>reference,<sp/>since<sp/>the<sp/>internal<sp/>is<sp/>a<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>v;<sp/>getAttribute(p,v);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(p);}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AccessorType</ref><sp/>m_a;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>n0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>n1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>n2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>n3)<sp/>:<ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(name)<sp/>,<sp/>m_p0(n0),<sp/>m_p1(n1),<sp/>m_p2(n2),<sp/>m_p3(n3)<sp/>{}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_p0.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(e);}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; float &gt;</ref><sp/>m_p0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; float &gt;</ref><sp/>m_p1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; float &gt;</ref><sp/>m_p2;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt; float &gt;</ref><sp/>m_p3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="149" refid="de/d4f/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01JetFourMom__t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>&lt;<ref refid="dd/d44/namespacexAOD_1afd4eec03bc44b101a3c8b2b1429f3072" kindref="member" tooltip="Base 4 Momentum type for Jet.">JetFourMom_t</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>()<sp/>:<sp/><sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref>(</highlight><highlight class="stringliteral">&quot;_unnamed_&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;phi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>:<sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref>(name,<sp/>name+</highlight><highlight class="stringliteral">&quot;_pt&quot;</highlight><highlight class="normal">,<sp/>name+</highlight><highlight class="stringliteral">&quot;_eta&quot;</highlight><highlight class="normal">,name+</highlight><highlight class="stringliteral">&quot;_phi&quot;</highlight><highlight class="normal">,<sp/>name+</highlight><highlight class="stringliteral">&quot;_m&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>pt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_p0(p);}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eta(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_p1(p);}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>phi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_p2(p);}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>m(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_p3(p);}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d44/namespacexAOD_1afd4eec03bc44b101a3c8b2b1429f3072" kindref="member" tooltip="Base 4 Momentum type for Jet.">JetFourMom_t</ref>&amp;<sp/>v){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p0(p)<sp/>=<sp/>v.Pt();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p1(p)<sp/>=<sp/>v.Eta();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p2(p)<sp/>=<sp/>v.Phi();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p3(p)<sp/>=<sp/>v.M();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/><ref refid="dd/d44/namespacexAOD_1afd4eec03bc44b101a3c8b2b1429f3072" kindref="member" tooltip="Base 4 Momentum type for Jet.">JetFourMom_t</ref>&amp;<sp/>v){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetPt(<sp/><sp/>m_p0(p)<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetEta(<sp/><sp/>m_p1(p)<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetPhi(<sp/><sp/>m_p2(p)<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetM(<sp/><sp/>m_p3(p)<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1afd4eec03bc44b101a3c8b2b1429f3072" kindref="member" tooltip="Base 4 Momentum type for Jet.">JetFourMom_t</ref><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>&amp;p){</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1afd4eec03bc44b101a3c8b2b1429f3072" kindref="member" tooltip="Base 4 Momentum type for Jet.">JetFourMom_t</ref><sp/>v;<sp/>getAttribute(p,v);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>convenience<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPtEtaPhiM(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m<sp/>){</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p0(p)<sp/>=<sp/>pt<sp/>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p1(p)<sp/>=<sp/>eta<sp/>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p2(p)<sp/>=<sp/>phi<sp/>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p3(p)<sp/>=<sp/>m<sp/>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="194" refid="d9/da6/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper_3_01IParticle_1_1FourMom__t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>&lt;<ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">IParticle</ref>::FourMom_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dbe/classxAOD_1_1JetAttributeAccessor_1_1AccessorWrapper" kindref="compound">AccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name)<sp/>:<sp/><ref refid="da/da9/classxAOD_1_1JetAttributeAccessor_1_1FourMomAccessor" kindref="compound">FourMomAccessor</ref>(name,<sp/>name+</highlight><highlight class="stringliteral">&quot;_px&quot;</highlight><highlight class="normal">,<sp/>name+</highlight><highlight class="stringliteral">&quot;_py&quot;</highlight><highlight class="normal">,name+</highlight><highlight class="stringliteral">&quot;_pz&quot;</highlight><highlight class="normal">,<sp/>name+</highlight><highlight class="stringliteral">&quot;_e&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle_1ab10b2abb617a3e1a745de3a4a9d8721e" kindref="member" tooltip="Definition of the 4-momentum type.">IParticle::FourMom_t</ref>&amp;<sp/>v){</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p0(p)<sp/>=<sp/>v.Px();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p1(p)<sp/>=<sp/>v.Py();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p2(p)<sp/>=<sp/>v.Pz();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_p3(p)<sp/>=<sp/>v.E();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle_1ab10b2abb617a3e1a745de3a4a9d8721e" kindref="member" tooltip="Definition of the 4-momentum type.">IParticle::FourMom_t</ref>&amp;<sp/>v){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetPx(<sp/>m_p0(p)<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetPy(<sp/>m_p1(p)<sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetPz(<sp/>m_p2(p)<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.SetE(<sp/>m_p3(p)<sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle_1ab10b2abb617a3e1a745de3a4a9d8721e" kindref="member" tooltip="Definition of the 4-momentum type.">IParticle::FourMom_t</ref><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>&amp;p){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle_1ab10b2abb617a3e1a745de3a4a9d8721e" kindref="member" tooltip="Definition of the 4-momentum type.">IParticle::FourMom_t</ref><sp/>v;<sp/>getAttribute(p,v);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InheritsIParticle</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">No<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Yes<sp/>{<sp/>No<sp/>no[3];<sp/>};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Yes<sp/>testFunc(<sp/>IParticle*<sp/>);<sp/></highlight><highlight class="comment">//<sp/>declared,<sp/>but<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>No<sp/>testFunc(<sp/>...<sp/>);<sp/></highlight><highlight class="comment">//<sp/>declared,<sp/>but<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>Test<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(testFunc(static_cast&lt;Obj*&gt;(0)))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Yes)<sp/>};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsIP&gt;<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InternalTypes<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Obj&gt;</ref><sp/>ContainerType;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt; ContainerType &gt;</ref><sp/>LinkType;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Accessor&lt; LinkType &gt;</ref><sp/>AccessorType;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj*<sp/>fromEL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LinkType&amp;el){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(el.isValid())</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*el;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj&gt;<sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InternalTypes&lt;Obj,true&gt;<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/d44/namespacexAOD_1af9180607c834ca3623ad4eb67d8bb273" kindref="member">IParticleContainer</ref><sp/>ContainerType;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt; ContainerType &gt;</ref><sp/><sp/>LinkType;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Accessor&lt; LinkType &gt;</ref><sp/>AccessorType;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Obj*<sp/>fromEL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LinkType&amp;el){</highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(el.isValid())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dynamic_cast&lt;const<sp/>Obj*&gt;(*el);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsIP&gt;<sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InternalVectorTypes<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>InternalTypes&lt;Obj,IsIP&gt;<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InternalTypes&lt;Obj,IsIP&gt;::LinkType<sp/>LinkType;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Accessor&lt; std::vector&lt;LinkType&gt;</ref><sp/>&gt;<sp/>AccessorType;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="273" refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" kindref="compound">ObjectAccessorWrapper</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>InternalTypes&lt;TYPE,<sp/>InheritsIParticle&lt;TYPE&gt;::Test&gt;<sp/>InternalType;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">InternalType::ContainerType</ref><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">ContainerType</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">InternalType::LinkType</ref><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">LinkType</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">InternalType::AccessorType</ref><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">AccessorType</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" kindref="compound">ObjectAccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(n),<sp/>m_a(n)<sp/>{}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE*<sp/>o){</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">LinkType</ref><sp/>&amp;el<sp/>=<sp/>m_a(p);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el.<ref refid="d6/d6e/classElementLink_1a8684035f6e2b67c7fdf5ff9d241f45a6" kindref="member" tooltip="Set link to point to given index (slower).">toIndexedElement</ref>(<sp/>*(<sp/>dynamic_cast&lt;<sp/>const<sp/>ContainerType*<sp/>&gt;(<sp/>o-&gt;container()<sp/>)<sp/>),<sp/>o-&gt;index()<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el.<ref refid="d6/d6e/classElementLink_1a5e5d608091e6c4524bd5ffc69d83466d" kindref="member" tooltip="Dummy function provinding the offline interface.">toPersistent</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE<sp/>*<sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalType::fromEL(<sp/><sp/>m_a(p)<sp/>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE<sp/>*&amp;<sp/>att){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>att=<sp/>InternalType::fromEL(<sp/><sp/>m_a(p)<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(p);}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>forward<sp/>calls<sp/>to<sp/>internal<sp/>accessor.<sp/>useful<sp/>for<sp/>performance<sp/>critical<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TYPE*<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p)<sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getAttribute(p);<sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TYPE&amp;<sp/>operator()(SG::AuxElement&amp;<sp/>p)<sp/><sp/>{<sp/>LinkType<sp/>&amp;el=m_a(p);<sp/>return<sp/>*el;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">AccessorType</ref><sp/>m_a;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="317" refid="db/dbe/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper_3_01std_1_1vector_3_01const_01TYPE_01_5_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" kindref="compound">ObjectAccessorWrapper</ref>&lt;std::vector&lt;const<sp/>TYPE*&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>InternalVectorTypes&lt;TYPE,<sp/>InheritsIParticle&lt;TYPE&gt;::Test&gt;<sp/>InternalType;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InternalType::ContainerType<sp/>ContainerType;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">InternalType::LinkType</ref><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">LinkType</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">InternalType::AccessorType</ref><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">AccessorType</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d0a/classxAOD_1_1JetAttributeAccessor_1_1ObjectAccessorWrapper" kindref="compound">ObjectAccessorWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>n)<sp/>:<sp/><ref refid="d2/de6/structxAOD_1_1JetAttributeAccessor_1_1Named" kindref="compound">Named</ref>(n),<sp/>m_a(n)<sp/>{}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vector2vectorEL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>TYPE*&gt;<sp/>&amp;<sp/>vec,<sp/>std::vector&lt;<sp/>LinkType<sp/>&gt;<sp/>&amp;<sp/>elv)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<sp/>vec.size()<sp/>;<sp/>i++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">LinkType</ref><sp/>el;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el.<ref refid="d6/d6e/classElementLink_1a8684035f6e2b67c7fdf5ff9d241f45a6" kindref="member" tooltip="Set link to point to given index (slower).">toIndexedElement</ref>(<sp/>*(<sp/>dynamic_cast&lt;<sp/>const<sp/>ContainerType*<sp/>&gt;(<sp/>vec[i]-&gt;container()<sp/>)<sp/>),<sp/>vec[i]-&gt;index()<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elv.push_back(el);<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elv.back().toPersistent();<sp/></highlight><highlight class="comment">//<sp/>The<sp/>EL<sp/>will<sp/>not<sp/>change<sp/>anymore<sp/>since<sp/>it<sp/>is<sp/>purely<sp/>internal.<sp/>We<sp/>can<sp/>call<sp/>toPersistent()<sp/>to<sp/>be<sp/>sure<sp/>it<sp/>will<sp/>be<sp/>saved<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAttribute(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>TYPE*&gt;<sp/>&amp;vec){</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;LinkType&gt;<sp/>&amp;elv<sp/>=<sp/>m_a(p);<sp/>elv.clear();elv.reserve(vec.size());</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;vector2vectorEL(vec,<sp/>elv);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p,<sp/><sp/>std::vector&lt;const<sp/>TYPE*&gt;&amp;<sp/>v){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;LinkType&gt;<sp/>&amp;elv<sp/>=<sp/>m_a(p);<sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.resize(elv.size());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;i&lt;elv.size();<sp/>i++)<sp/>{v[i]<sp/>=<sp/>InternalType::fromEL(elv[i])<sp/>;<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>TYPE<sp/>*&gt;<sp/>getAttribute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;LinkType&gt;<sp/>&amp;elv<sp/>=<sp/>m_a(p);<sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>TYPE*&gt;<sp/><sp/>ipvec(elv.size()<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;i&lt;elv.size();<sp/>i++)<sp/>ipvec[i]<sp/>=<sp/>InternalType::fromEL(elv[i])<sp/>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ipvec;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAvailable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>p){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_a.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(p);}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>forward<sp/>calls<sp/>to<sp/>internal<sp/>accessor.<sp/>useful<sp/>for<sp/>performance<sp/>critical<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>TYPE*<sp/>operator()(const<sp/>AuxElement&amp;<sp/>p)<sp/><sp/>{<sp/>const<sp/>LinkType<sp/>&amp;el<sp/>=<sp/>m_a(p)<sp/>;return<sp/>*el;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TYPE&amp;<sp/>operator()(AuxElement&amp;<sp/>p)<sp/><sp/>{<sp/>LinkType<sp/>&amp;el=m_a(p);<sp/>return<sp/>*el;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">AccessorType</ref><sp/>m_a;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//<sp/>namespace<sp/>JetAttributeAccessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/xAODJet/JetAccessors.h"/>
  </compounddef>
</doxygen>
