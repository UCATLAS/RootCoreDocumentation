<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/df7/Array__test_8cxx" kind="file">
    <compoundname>Array_test.cxx</compoundname>
    <includes refid="df/dd0/Array_8h" local="yes">CxxUtils/Array.h</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="113597">
        <label>iterator</label>
      </node>
      <node id="113600">
        <label>cassert</label>
      </node>
      <node id="113599">
        <label>CxxUtils/unused.h</label>
        <link refid="d8/d4b/unused_8h"/>
      </node>
      <node id="113595">
        <label>string</label>
      </node>
      <node id="113594">
        <label>CxxUtils/Arrayrep.h</label>
        <link refid="dd/de3/Arrayrep_8h"/>
        <childnode refid="113595" relation="include">
        </childnode>
        <childnode refid="113596" relation="include">
        </childnode>
      </node>
      <node id="113592">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx</label>
        <link refid="Array_test.cxx"/>
        <childnode refid="113593" relation="include">
        </childnode>
        <childnode refid="113600" relation="include">
        </childnode>
      </node>
      <node id="113596">
        <label>vector</label>
      </node>
      <node id="113598">
        <label>CxxUtils/Array.icc</label>
        <link refid="d1/de6/Array_8icc"/>
        <childnode refid="113599" relation="include">
        </childnode>
        <childnode refid="113600" relation="include">
        </childnode>
      </node>
      <node id="113593">
        <label>CxxUtils/Array.h</label>
        <link refid="df/dd0/Array_8h"/>
        <childnode refid="113594" relation="include">
        </childnode>
        <childnode refid="113597" relation="include">
        </childnode>
        <childnode refid="113598" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="df/df7/Array__test_8cxx_1ab8df3fda72b17a3de0e1f063009fcf12" prot="public" static="no">
        <name>ARSZ</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(x)/sizeof(x[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="24" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="df/df7/Array__test_8cxx_1a5800806d1b7cda1f48d4e5c605d69651" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int shape[]</definition>
        <argsstring>[]</argsstring>
        <name>shape</name>
        <initializer> {2, 4, 3}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="20" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/df7/Array__test_8cxx_1a2f4508025d167895cdca320316334543" prot="public" static="no" mutable="no">
        <type>Arrayelt</type>
        <definition>Arrayelt data[]</definition>
        <argsstring>[]</argsstring>
        <name>data</name>
        <initializer> { 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
                   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="27" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="88" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="115" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1a327d8cef466a7560ead5eb3995c0cbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test4</definition>
        <argsstring>()</argsstring>
        <name>test4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="128" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1a8e1be3038bbc558f32a409f076126c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test5</definition>
        <argsstring>()</argsstring>
        <name>test5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="149" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="df/df7/Array__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" line="221" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx" bodystart="220" bodyend="228"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for the Array class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>June, 2004 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>Array_test.cxx,v<sp/>1.2<sp/>2009-04-08<sp/>21:12:45<sp/>ssnyder<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/dd0/Array_8h" kindref="compound" tooltip="Simple multidimensional arrays.">CxxUtils/Array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CxxUtils;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape[]<sp/>=<sp/>{2,<sp/>4,<sp/>3};</highlight></codeline>
<codeline lineno="21"><highlight class="normal">Arrayelt<sp/>data[]<sp/>=<sp/>{<sp/>1,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARSZ(x)<sp/>(sizeof(x)/sizeof(x[0]))</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;2&gt;</ref><sp/>a2x;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>assert<sp/>(!a2x.<ref refid="d5/dd9/classCxxUtils_1_1Array_1abd36844e529259b2b764ef2b9a50e644" kindref="member" tooltip="Test for validity.">valid</ref>());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>assert<sp/>(a2x.<ref refid="d5/dd9/classCxxUtils_1_1Array_1a682d671307b58eb66a706a2af76cfb84" kindref="member" tooltip="Return the size of the array along one dimension.">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="df/d88/classCxxUtils_1_1Array_3_010_01_4" kindref="compound">Array&lt;0&gt;</ref><sp/>a0x;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>assert<sp/>(!a0x.valid());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>rep.m_shape.assign<sp/>(shape,<sp/>shape<sp/>+<sp/>ARSZ(shape));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>rep.m_data.assign<sp/>(data,<sp/>data<sp/>+<sp/>ARSZ(data));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>rep.init_sizes();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;3&gt;</ref><sp/>a3<sp/>(rep);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>assert<sp/>(a3.valid());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>assert<sp/>(a3.NDIM<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>shape<sp/>(a3.shape());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert<sp/>(shape.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[0]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[1]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[2]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert<sp/>(a3.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert<sp/>(a3.size(1)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert<sp/>(*a3.ptr()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;2&gt;</ref><sp/>a2<sp/>(a3[1]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>assert<sp/>(a2.NDIM<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>a2.shape();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>assert<sp/>(shape.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[1]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>assert<sp/>(a2.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>assert<sp/>(a2.size(1)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>assert<sp/>(*a2.ptr()<sp/>==<sp/>13);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;1&gt;</ref><sp/>a1<sp/>(a2[1]);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>assert<sp/>(a1.NDIM<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>a1.shape();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>assert<sp/>(shape.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>assert<sp/>(shape[0]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert<sp/>(a1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert<sp/>(*a1.ptr()<sp/>==<sp/>16);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="df/d88/classCxxUtils_1_1Array_3_010_01_4" kindref="compound">Array&lt;0&gt;</ref><sp/>a0<sp/>(a1[1]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert<sp/>(a0.valid());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert<sp/>(a0.NDIM<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>shape<sp/>=<sp/>a0.shape();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>assert<sp/>(shape.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>assert<sp/>(a0.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>assert<sp/>(a0<sp/>==<sp/>17);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>assert<sp/>(a3[1][1][1]<sp/>==<sp/>17);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>assert<sp/>(*a3[1][1].ptr()<sp/>==<sp/>16);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>rep0.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" kindref="member" tooltip="The array data, stored using the C array ordering.">m_data</ref>.push_back<sp/>(101);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="df/d88/classCxxUtils_1_1Array_3_010_01_4" kindref="compound">Array&lt;0&gt;</ref><sp/>a0a<sp/>(rep0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert<sp/>(a0a<sp/>==<sp/>101);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1aeea9324049b2aaf8693a41a3eae55481" kindref="member">m_shape</ref>.assign<sp/>(shape,<sp/>shape<sp/>+<sp/>ARSZ(shape));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" kindref="member" tooltip="The array data, stored using the C array ordering.">m_data</ref>.assign<sp/>(data,<sp/>data<sp/>+<sp/>ARSZ(data));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" kindref="member" tooltip="Initialize the m_sizes vector from the m_shape vector.">init_sizes</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="dc/dcc/classCxxUtils_1_1WritableArray" kindref="compound" tooltip="Read-write multidimensional array.">WritableArray&lt;3&gt;</ref><sp/>w3<sp/>(rep);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>assert<sp/>(w3[1][1][1]<sp/>==<sp/>17);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>w3[1][1][1]<sp/>=<sp/>99;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>assert<sp/>(w3[1][1][1]<sp/>==<sp/>99);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>*w3[1][1].ptr()<sp/>=<sp/>98;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>assert<sp/>(w3[1][1][0]<sp/>==<sp/>98);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;3&gt;</ref><sp/>a3<sp/>=<sp/>w3;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(a3[1][1][0]<sp/>==<sp/>98);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>rep0.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" kindref="member" tooltip="The array data, stored using the C array ordering.">m_data</ref>.push_back<sp/>(101);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="d0/da2/classCxxUtils_1_1WritableArray_3_010_01_4" kindref="compound">WritableArray&lt;0&gt;</ref><sp/>w0<sp/>(rep0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>assert<sp/>(w0<sp/>==<sp/>101);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>w0<sp/>=<sp/>102;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>assert<sp/>(w0<sp/>==<sp/>102);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test3()</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>ar1<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>[[<sp/>1.5,<sp/>2.5],<sp/>[3.5,<sp/>4.5]]<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;2&gt;</ref><sp/>a1<sp/>(ar1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert<sp/>(a1.size<sp/>(0)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>assert<sp/>(a1.size<sp/>(1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert<sp/>(a1[0][0]<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert<sp/>(a1[0][1]<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(a1[1][0]<sp/>==<sp/>3.5);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>assert<sp/>(a1[1][1]<sp/>==<sp/>4.5);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test4()</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shape1[]<sp/>=<sp/>{2,<sp/>3};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="d3/dd4/classCxxUtils_1_1WritableArrayData" kindref="compound">WritableArrayData&lt;2&gt;</ref><sp/>w1<sp/>(shape1);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>w1[1][2]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>w1[0][0]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>assert<sp/>(w1[0][0]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>assert<sp/>(w1[1][2]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>shape2;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>shape2.push_back<sp/>(3);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>shape2.push_back<sp/>(2);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="d3/dd4/classCxxUtils_1_1WritableArrayData" kindref="compound">WritableArrayData&lt;2&gt;</ref><sp/>w2<sp/>(shape2);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>w2[2][1]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>w2[0][0]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>assert<sp/>(w2[0][0]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>assert<sp/>(w2[2][1]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test5()</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound" tooltip="Representation class for Array&amp;#39;s.">Arrayrep</ref><sp/>rep;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1aeea9324049b2aaf8693a41a3eae55481" kindref="member">m_shape</ref>.assign<sp/>(shape,<sp/>shape<sp/>+<sp/>ARSZ(shape));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" kindref="member" tooltip="The array data, stored using the C array ordering.">m_data</ref>.assign<sp/>(data,<sp/>data<sp/>+<sp/>ARSZ(data));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>rep.<ref refid="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" kindref="member" tooltip="Initialize the m_sizes vector from the m_shape vector.">init_sizes</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound" tooltip="Read-only multidimensional array.">Array&lt;3&gt;</ref><sp/>a3<sp/>(rep);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;3&gt;::const_iterator</ref><sp/>i1<sp/>=<sp/>a3.<ref refid="d5/dd9/classCxxUtils_1_1Array_1adafacdf32bab04c6eec523a1a82d50a3" kindref="member" tooltip="Return an iterator pointing at the beginning of the container.">begin</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;3&gt;::const_iterator</ref><sp/>i2<sp/>=<sp/>a3.<ref refid="d5/dd9/classCxxUtils_1_1Array_1a5b1a3899473201e02c71188267ab6afe" kindref="member" tooltip="Return an iterator pointing past the end of the container.">end</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;3&gt;::const_iterator</ref><sp/>i3;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>==<sp/>i1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>!=<sp/>i2);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;<sp/>i2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>i2);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&lt;=<sp/>i1);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;<sp/>i1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>assert<sp/>(i1<sp/>&gt;=<sp/>i1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>assert<sp/>(i2<sp/>-<sp/>i1<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>assert<sp/>(i3<sp/>!=<sp/>i1);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>i3<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>assert<sp/>(i3<sp/>==<sp/>i1);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>assert<sp/>((*i1)[0][0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>assert<sp/>(i1-&gt;size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;2&gt;::const_iterator</ref><sp/>i11<sp/>=<sp/>i1-&gt;begin();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;2&gt;::const_iterator</ref><sp/>i12<sp/>=<sp/>i1-&gt;end();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>assert<sp/>(i11<sp/>!=<sp/>i12);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>assert<sp/>(i12<sp/>-<sp/>i11<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[1][0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>++i11;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>i11++;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>--i11;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>i11--;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>i11<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>i11<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>assert<sp/>(i11[0][0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;2&gt;::const_iterator</ref><sp/>i13<sp/>=<sp/>i11<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>assert<sp/>(i13[0][0]<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>i13<sp/>=<sp/>i11<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>assert<sp/>(i13[0][0]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>i13<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>assert<sp/>(i13<sp/>==<sp/>i12);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;1&gt;::const_iterator</ref><sp/>j1<sp/>=<sp/>i11-&gt;begin();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound" tooltip="Iterator class for Array&amp;lt;N&amp;gt;.">Array&lt;1&gt;::const_iterator</ref><sp/>j2<sp/>=<sp/>i11-&gt;end();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>assert<sp/>(j1<sp/>+<sp/>3<sp/>==<sp/>j2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>assert<sp/>(j1[0]<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>assert<sp/>(j1[1]<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>assert<sp/>(j1[2]<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>assert<sp/>(j2<sp/>-<sp/>j1<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>test3();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>test4();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>test5();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/Array_test.cxx"/>
  </compounddef>
</doxygen>
