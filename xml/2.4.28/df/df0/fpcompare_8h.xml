<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/df0/fpcompare_8h" kind="file">
    <compoundname>fpcompare.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">functional</includes>
    <includedby refid="d9/d2f/fpcompare__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx</includedby>
    <includedby refid="d9/d77/P4AscendingSorters_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4AscendingSorters.h</includedby>
    <includedby refid="d7/dbe/P4DescendingSorters_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4DescendingSorters.h</includedby>
    <includedby refid="dd/d96/P4Helpers_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4Helpers.h</includedby>
    <includedby refid="d4/d4b/xAODP4Helpers_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/xAODP4Helpers.h</includedby>
    <includedby refid="d1/d38/CaloClusterVariables_8h" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/tauRecTools/tauRecTools/CaloClusterVariables.h</includedby>
    <incdepgraph>
      <node id="106755">
        <label>functional</label>
      </node>
      <node id="106754">
        <label>cmath</label>
      </node>
      <node id="106753">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/fpcompare.h</label>
        <link refid="fpcompare.h"/>
        <childnode refid="106754" relation="include">
        </childnode>
        <childnode refid="106755" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="106759">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4Sorters.h</label>
        <link refid="db/daa/P4Sorters_8h_source"/>
        <childnode refid="106760" relation="include">
        </childnode>
      </node>
      <node id="106756">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/fpcompare.h</label>
        <link refid="fpcompare.h"/>
        <childnode refid="106757" relation="include">
        </childnode>
        <childnode refid="106758" relation="include">
        </childnode>
        <childnode refid="106761" relation="include">
        </childnode>
        <childnode refid="106762" relation="include">
        </childnode>
        <childnode refid="106763" relation="include">
        </childnode>
        <childnode refid="106764" relation="include">
        </childnode>
      </node>
      <node id="106760">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/FourMomUtilsDict.h</label>
        <link refid="df/dfa/FourMomUtilsDict_8h_source"/>
      </node>
      <node id="106762">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4Helpers.h</label>
        <link refid="dd/d96/P4Helpers_8h_source"/>
        <childnode refid="106760" relation="include">
        </childnode>
      </node>
      <node id="106757">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/fpcompare_test.cxx</label>
        <link refid="d9/d2f/fpcompare__test_8cxx"/>
      </node>
      <node id="106763">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/xAODP4Helpers.h</label>
        <link refid="d4/d4b/xAODP4Helpers_8h_source"/>
        <childnode refid="106760" relation="include">
        </childnode>
      </node>
      <node id="106761">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4DescendingSorters.h</label>
        <link refid="d7/dbe/P4DescendingSorters_8h_source"/>
        <childnode refid="106759" relation="include">
        </childnode>
      </node>
      <node id="106764">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/tauRecTools/tauRecTools/CaloClusterVariables.h</label>
        <link refid="d1/d38/CaloClusterVariables_8h_source"/>
      </node>
      <node id="106758">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/FourMomUtils/FourMomUtils/P4AscendingSorters.h</label>
        <link refid="d9/d77/P4AscendingSorters_8h_source"/>
        <childnode refid="106759" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="dd/d29/structCxxUtils_1_1fpcompare__fn_1_1equal" prot="public">CxxUtils::fpcompare_fn::equal</innerclass>
    <innerclass refid="d4/d7a/structCxxUtils_1_1fpcompare__fn_1_1equalf" prot="public">CxxUtils::fpcompare_fn::equalf</innerclass>
    <innerclass refid="d4/d03/structCxxUtils_1_1fpcompare__fn_1_1greater" prot="public">CxxUtils::fpcompare_fn::greater</innerclass>
    <innerclass refid="d3/ddd/structCxxUtils_1_1fpcompare__fn_1_1greaterf" prot="public">CxxUtils::fpcompare_fn::greaterf</innerclass>
    <innerclass refid="dc/ded/structCxxUtils_1_1fpcompare__fn_1_1less" prot="public">CxxUtils::fpcompare_fn::less</innerclass>
    <innerclass refid="d2/d91/structCxxUtils_1_1fpcompare__fn_1_1lessf" prot="public">CxxUtils::fpcompare_fn::lessf</innerclass>
    <innerclass refid="d7/db2/structCxxUtils_1_1fpcompare__fn_1_1greater__equal" prot="public">CxxUtils::fpcompare_fn::greater_equal</innerclass>
    <innerclass refid="d1/dc0/structCxxUtils_1_1fpcompare__fn_1_1greater__equalf" prot="public">CxxUtils::fpcompare_fn::greater_equalf</innerclass>
    <innerclass refid="d5/dbd/structCxxUtils_1_1fpcompare__fn_1_1less__equal" prot="public">CxxUtils::fpcompare_fn::less_equal</innerclass>
    <innerclass refid="d1/d11/structCxxUtils_1_1fpcompare__fn_1_1less__equalf" prot="public">CxxUtils::fpcompare_fn::less_equalf</innerclass>
    <innernamespace refid="de/d12/namespaceCxxUtils">CxxUtils</innernamespace>
    <innernamespace refid="d3/de9/namespaceCxxUtils_1_1fpcompare">CxxUtils::fpcompare</innernamespace>
    <innernamespace refid="d5/d12/namespaceCxxUtils_1_1fpcompare__fn">CxxUtils::fpcompare_fn</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="df/df0/fpcompare_8h_1a4cde6ffa378f21bd82d844ff6d1b3c8f" prot="public" static="no">
        <name>CXXUTILS_FPCOMPARE_VOLATILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/fpcompare.h" line="99" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/fpcompare.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Workaround x86 precision issues for FP inequality comparisons. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder </para></simplesect>
<simplesect kind="date"><para>Sep 2008 The functions contained here can be used to work around one of the effects of the brain-damage of the x87 FPU.</para></simplesect>
Brief summary: If you&apos;re writing a comparison function for sort, where the comparison depends on computed floating-point values, eg:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare<sp/>(IParticle*<sp/>a,<sp/>IParticle*<sp/>b)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;pt()<sp/>&gt;<sp/>b-&gt;pt();<sp/>}</highlight></codeline>
</programlisting></para><para>then you should replace the comparison with a call to one of the functions in this file:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare<sp/>(IParticle*<sp/>a,<sp/>IParticle*<sp/>b)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CxxUtils::fpcompare::greater<sp/>(a-&gt;pt(),<sp/>b-&gt;pt());<sp/>}</highlight></codeline>
</programlisting></para><para>Longer explanation:</para><para>An expression like this (where pt() returns a double):</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;pt()<sp/>&gt;<sp/>b-&gt;pt()</highlight></codeline>
</programlisting></para><para>is compiled (on x86) into a sequence like this:</para><para>call a-&gt;pt() save result from FPU to a double stack temporary call b-&gt;pt() load the temporary back into the FPU do the comparison</para><para>If pt() returns a result with the extra precision bits used (so that the value changes when rounded to a double), then it is possible for this comparison to return true for the case where a==b. This violates the assumptions that std::sort makes of the comparison function, and can cause a crash (possibly even silently wrong results!).</para><para>As a fix, we force both parameters into something that has been declared <computeroutput>volatile</computeroutput>. That forces them to be spilled to memory, ensuring that they are both correctly rounded for the declared data type. The comparison is then done on these rounded values.</para><para>We condition this on the parameter <computeroutput>__FLT_EVAL_METHOD__</computeroutput> being 2. This is defined in the <ref refid="db/db2/structC" kindref="compound">C</ref> standard; a value of 2 means that all FP calculations are done as long double. For other cases, we leave out the <computeroutput>volatile</computeroutput> qualifiers; this should result in the functions being inlined completely away.</para><para>In addition to the free functions in the <computeroutput>CxxUtils::fpcompare</computeroutput> namespace. we define corresponding functionals in the <computeroutput>CxxUtils::fpcompare_fn</computeroutput> namespace.</para><para>It&apos;s also worth pointing out that exactly the same issue arises if one uses a floating-point value as the key for a STL associative container. In that case, this comparison instability may cause the container to become corrupted. While it&apos;s probably best to avoid using floats for associative container keys in the first place, if you do have to do that, you can work around this problem by using one of the above functionals as the container&apos;s comparison type. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file&apos;s<sp/>extension<sp/>implies<sp/>that<sp/>it&apos;s<sp/>C,<sp/>but<sp/>it&apos;s<sp/>really<sp/>-*-<sp/>C++<sp/>-*-.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>$Id:<sp/>fpcompare.h,v<sp/>1.4<sp/>2009-04-07<sp/>04:26:22<sp/>ssnyder<sp/>Exp<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CXXUTILS_FPCOMPARE_H</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CXXUTILS_FPCOMPARE_H</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decide<sp/>whether<sp/>we<sp/>need<sp/>to<sp/>use<sp/>volatile<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__FLT_EVAL_METHOD__)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/>(__FLT_EVAL_METHOD__<sp/>==<sp/>2<sp/>||<sp/>__FLT_EVAL_METHOD__<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>__FLT_EVAL_METHOD__<sp/>&lt;<sp/>0<sp/>means<sp/>unspecified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Be<sp/>pessimistic<sp/>in<sp/>that<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/>volatile</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(__i386__)<sp/>&amp;&amp;<sp/>!defined(__SSE2__)</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>x86,<sp/>gcc<sp/>-msse<sp/>-mfpmath=sse<sp/>is<sp/>observed<sp/>to<sp/>_not_<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sse<sp/>fp<sp/>instructions,<sp/>but<sp/>does<sp/>set<sp/>__FLT_EVAL_METHOD__<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-msse2<sp/>-mfpmath=sse<sp/>does<sp/>seem<sp/>to<sp/>work<sp/>as<sp/>expected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Special-case<sp/>this<sp/>for<sp/>now;<sp/>should<sp/>follow<sp/>up<sp/>with<sp/>a<sp/>gcc<sp/>bug<sp/>report</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>still<sp/>happens<sp/>in<sp/>current<sp/>releases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/>volatile</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>CXXUTILS_FPCOMPARE_VOLATILE</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CxxUtils<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fpcompare<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>==<sp/>vb;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>==<sp/>vb;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>greater<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&gt;<sp/>vb;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>greater<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&gt;<sp/>vb;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>less<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&lt;<sp/>vb;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>less<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&lt;<sp/>vb;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>greater_equal<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&gt;=<sp/>vb;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>greater_equal<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&gt;=<sp/>vb;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>less_equal<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&lt;=<sp/>vb;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>less_equal<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>va<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>CXXUTILS_FPCOMPARE_VOLATILE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>vb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>va<sp/>&lt;=<sp/>vb;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fpcompare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fpcompare_fn<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="dd/d29/structCxxUtils_1_1fpcompare__fn_1_1equal" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dd/d29/structCxxUtils_1_1fpcompare__fn_1_1equal" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">equal</ref></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;double,<sp/>double,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="251"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">};</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="d4/d7a/structCxxUtils_1_1fpcompare__fn_1_1equalf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d7a/structCxxUtils_1_1fpcompare__fn_1_1equalf" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">equalf</ref></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;float,<sp/>float,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="263"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="d4/d03/structCxxUtils_1_1fpcompare__fn_1_1greater" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d03/structCxxUtils_1_1fpcompare__fn_1_1greater" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">greater</ref></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;double,<sp/>double,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="275"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::greater<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal">};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="d3/ddd/structCxxUtils_1_1fpcompare__fn_1_1greaterf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/ddd/structCxxUtils_1_1fpcompare__fn_1_1greaterf" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">greaterf</ref></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;float,<sp/>float,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="287"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::greater<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal">};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="dc/ded/structCxxUtils_1_1fpcompare__fn_1_1less" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/ded/structCxxUtils_1_1fpcompare__fn_1_1less" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">less</ref></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;double,<sp/>double,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="299"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::less<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="d2/d91/structCxxUtils_1_1fpcompare__fn_1_1lessf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d91/structCxxUtils_1_1fpcompare__fn_1_1lessf" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">lessf</ref></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;float,<sp/>float,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="311"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::less<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="d7/db2/structCxxUtils_1_1fpcompare__fn_1_1greater__equal" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/db2/structCxxUtils_1_1fpcompare__fn_1_1greater__equal" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">greater_equal</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;double,<sp/>double,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="323"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::greater_equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="d1/dc0/structCxxUtils_1_1fpcompare__fn_1_1greater__equalf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/dc0/structCxxUtils_1_1fpcompare__fn_1_1greater__equalf" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">greater_equalf</ref></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;float,<sp/>float,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="335"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::greater_equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="d5/dbd/structCxxUtils_1_1fpcompare__fn_1_1less__equal" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/dbd/structCxxUtils_1_1fpcompare__fn_1_1less__equal" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">less_equal</ref></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;double,<sp/>double,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="347"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::less_equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal">};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="d1/d11/structCxxUtils_1_1fpcompare__fn_1_1less__equalf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d11/structCxxUtils_1_1fpcompare__fn_1_1less__equalf" kindref="compound" tooltip="Compare two FP numbers, working around x87 precision issues.">less_equalf</ref></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::binary_function&lt;float,<sp/>float,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>operator()(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="359"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpcompare::less_equal<sp/>(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal">};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fpcompare_fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>CxxUtils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>CXXUTILS_FPCOMPARE_H</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/fpcompare.h"/>
  </compounddef>
</doxygen>
