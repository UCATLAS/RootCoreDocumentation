<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/d6e/classIRegSelSvc" kind="class" prot="public">
    <compoundname>IRegSelSvc</compoundname>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1aa3064caa83c37ccce6c9f60814e0e8b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual IRegSelSvc::~IRegSelSvc</definition>
        <argsstring>()</argsstring>
        <name>~IRegSelSvc</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a0e0c90a3c68e30be7657ef694a8b15e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetHashIDList</definition>
        <argsstring>(DETID detectorID, const IRoiDescriptor &amp;roi, std::vector&lt; IdentifierHash &gt; &amp;IDList)=0</argsstring>
        <name>DetHashIDList</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>const <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <param>
          <type>std::vector&lt; IdentifierHash &gt; &amp;</type>
          <declname>IDList</declname>
        </param>
        <briefdescription>
<para>IdentifierHash methods. </para>        </briefdescription>
        <detaileddescription>
<para>DetHashIDList interface declaration. A list of non-repeated IdentifierHash is returned</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>roi</bold>,</computeroutput> the <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> for the roi, all enabled elements in the roi are found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IdentifierHash&gt; which is a list of non-repeated Offline Identifier Hash numbers. </para></simplesect>
<simplesect kind="see"><para>DetROBIDList(), <ref refid="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" kindref="member">DetROBIDListUint()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="47"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a2fea50bb5192451f2cc0481f79146c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetHashIDList</definition>
        <argsstring>(DETID detectorID, long layer, const IRoiDescriptor &amp;roi, std::vector&lt; IdentifierHash &gt; &amp;IDList)=0</argsstring>
        <name>DetHashIDList</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>long</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <param>
          <type>std::vector&lt; IdentifierHash &gt; &amp;</type>
          <declname>IDList</declname>
        </param>
        <briefdescription>
<para>DetHashIDList interface declaration. A list of non-repeated IdentifierHash is returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>layer</bold>,</computeroutput> long int to decide which layer within the detector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>roi</bold>,</computeroutput> the <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> for the roi, all enabled elements in the roi are found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IdentifierHash&gt; which is a list of non-repeated Offline Identifier Hash numbers. </para></simplesect>
<simplesect kind="see"><para>DetROBIDList(), <ref refid="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" kindref="member">DetROBIDListUint()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="62"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a912b1193605d553417c4718e410c76e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetHashIDList</definition>
        <argsstring>(DETID detectorID, std::vector&lt; IdentifierHash &gt; &amp;IDList)=0</argsstring>
        <name>DetHashIDList</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>std::vector&lt; IdentifierHash &gt; &amp;</type>
          <declname>IDList</declname>
        </param>
        <briefdescription>
<para>DetHashIDList interface declaration. A list of non-repeated IdentifierHash is returned. </para>        </briefdescription>
        <detaileddescription>
<para>Fullscan methods - when not specifying RoI Technically, these should be made private, sinec the roidescriptor now has a Fullscan flag, so the normal RoI descriptors should be used to flag this, and then call the full scan methods internally</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IdentifierHash&gt; which is a list of non-repeated Offline Identifier Hash numbers for the complete subdetector. </para></simplesect>
<simplesect kind="see"><para>DetROBIDList(), <ref refid="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" kindref="member">DetROBIDListUint()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="78"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1ace087f80437c76755ddc660b1a48fc4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetHashIDList</definition>
        <argsstring>(DETID detectorID, long layer, std::vector&lt; IdentifierHash &gt; &amp;IDList)=0</argsstring>
        <name>DetHashIDList</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>long</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>std::vector&lt; IdentifierHash &gt; &amp;</type>
          <declname>IDList</declname>
        </param>
        <briefdescription>
<para>DetHashIDList interface declaration. A list of non-repeated IdentifierHash is returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>layer</bold>,</computeroutput> long int to decide which layer within the detector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IdentifierHash&gt; which is a list of non-repeated Offline Identifier Hash numbers for the complete subdetector. </para></simplesect>
<simplesect kind="see"><para>DetROBIDList(), <ref refid="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" kindref="member">DetROBIDListUint()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="90"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetROBIDListUint</definition>
        <argsstring>(DETID detectorID, const IRoiDescriptor &amp;roi, std::vector&lt; uint32_t &gt; &amp;outputROBIDList)=0</argsstring>
        <name>DetROBIDListUint</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>const <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>outputROBIDList</declname>
        </param>
        <briefdescription>
<para>Rob identifier methods methods. </para>        </briefdescription>
        <detaileddescription>
<para>DetROBIDListUint interface declaration. This interface can be used by the ID subdetectors. A list of non-repeated ROBIDs (uint_32_t) is returned by a reference.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>the</bold> <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></computeroutput> for the roi, all enabled elements in the roi are found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; which is a list of non-repeated ROBID numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="108"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a2dc8ead4afa164cbe96f2ade99da8500" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetROBIDListUint</definition>
        <argsstring>(DETID detectorID, long layer, const IRoiDescriptor &amp;roi, std::vector&lt; uint32_t &gt; &amp;outputROBIDList)=0</argsstring>
        <name>DetROBIDListUint</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>long</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>const <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>outputROBIDList</declname>
        </param>
        <briefdescription>
<para>DetROBIDListUint interface declaration. This interface can be used by the ID subdetectors. A list of non-repeated ROBIDs (uint_32_t) is returned by a reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>layer</bold>,</computeroutput> long int to decide which layer within the detector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>the</bold> <ref refid="d4/da4/classIRoiDescriptor" kindref="compound">IRoiDescriptor</ref></computeroutput> for the roi, all enabled elements in the roi are found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; which is a list of non-repeated ROBID numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a37e18da80eae41b25f1d0bee2bb5420a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetROBIDListUint</definition>
        <argsstring>(DETID detectorID, std::vector&lt; uint32_t &gt; &amp;outputROBIDList)=0</argsstring>
        <name>DetROBIDListUint</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>outputROBIDList</declname>
        </param>
        <briefdescription>
<para>DetROBIDListUint interface declaration. This interface can be used by the ID subdetectors. A list of non-repeated ROBIDs (uint_32_t) is returned by a reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; which is a list of non-repeated ROBID numbers for the complete subdetector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="132"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a79a4ecde04d2ec079d3f3e656049485f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DetROBIDListUint</definition>
        <argsstring>(DETID detectorID, long layer, std::vector&lt; uint32_t &gt; &amp;outputROBIDList)=0</argsstring>
        <name>DetROBIDListUint</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>long</type>
          <declname>layer</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>outputROBIDList</declname>
        </param>
        <briefdescription>
<para>DetROBIDListUint interface declaration. This interface can be used by the ID subdetectors. A list of non-repeated ROBIDs (uint_32_t) is returned by a reference. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>long</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>layer</bold>,</computeroutput> long int to decide which layer within the detector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; which is a list of non-repeated ROBID numbers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1aae3b0914d393134109d8a4c6712e1499" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>StatusCode</type>
        <definition>virtual StatusCode IRegSelSvc::handle</definition>
        <argsstring>(IOVSVC_CALLBACK_ARGS)=0</argsstring>
        <name>handle</name>
        <param>
          <type>IOVSVC_CALLBACK_ARGS</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>beginRun is when all the tables are initialized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="149"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1aa653733b50adfca8e1fc8fa0cfc2f0eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::GetEtaPhi</definition>
        <argsstring>(DETID detectorID, IdentifierHash hashId, double *etaMin, double *etaMax, double *phiMin, double *phiMax)=0</argsstring>
        <name>GetEtaPhi</name>
        <param>
          <type>DETID</type>
          <declname>detectorID</declname>
        </param>
        <param>
          <type>IdentifierHash</type>
          <declname>hashId</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>etaMin</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>etaMax</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phiMin</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>phiMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>NB: This should be removed GetEtaPhi interface declaration. This interface can be used by all subdetectors. Given a IdentifierHash number eta and phi ranges are returned</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DETID</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>detectorID</bold>,</computeroutput> an enum to define subdetectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IdentifierHash</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><bold>hashId</bold>,</computeroutput> Offline Identifier Hash number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double <computeroutput><bold>etaMin</bold>,</computeroutput> a double argument that represents eta minimum value in a range. </para><simplesectsep/><para>double <computeroutput><bold>etaMax</bold>,</computeroutput> a double argument that represents eta maximum value in a range. </para><simplesectsep/><para>double <computeroutput><bold>phiMin</bold>,</computeroutput> a double argument that represents phi minimum value in a range. </para><simplesectsep/><para>double <computeroutput><bold>phiMax</bold>,</computeroutput> a double argument that represents phi maximum value in a range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="166"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1a13667b5292de74f5311913272d5672d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double IRegSelSvc::getDeltaZ</definition>
        <argsstring>() const =0</argsstring>
        <name>getDeltaZ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the stored roi extend in z at the beamline </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="169"/>
      </memberdef>
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1ac7395c3c96e296b3505efe570210eae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void IRegSelSvc::DisableMissingROBs</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec)=0</argsstring>
        <name>DisableMissingROBs</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method to Disable LAr ROBs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="df/d6e/classIRegSelSvc_1abf727b65ef031646fd8b7ad6e396437c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const InterfaceID &amp;</type>
        <definition>static const InterfaceID&amp; IRegSelSvc::interfaceID</definition>
        <argsstring>()</argsstring>
        <name>interfaceID</name>
        <briefdescription>
<para>Retrieve interface ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" bodystart="28" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/IRegionSelector/IRegionSelector/IRegSelSvc.h" bodystart="23" bodyend="175"/>
    <listofallmembers>
      <member refid="df/d6e/classIRegSelSvc_1a0e0c90a3c68e30be7657ef694a8b15e7" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetHashIDList</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a2fea50bb5192451f2cc0481f79146c7e" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetHashIDList</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a912b1193605d553417c4718e410c76e9" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetHashIDList</name></member>
      <member refid="df/d6e/classIRegSelSvc_1ace087f80437c76755ddc660b1a48fc4b" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetHashIDList</name></member>
      <member refid="df/d6e/classIRegSelSvc_1abae26953d96bb73b497d0431c2c15e18" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetROBIDListUint</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a2dc8ead4afa164cbe96f2ade99da8500" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetROBIDListUint</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a37e18da80eae41b25f1d0bee2bb5420a" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetROBIDListUint</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a79a4ecde04d2ec079d3f3e656049485f" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DetROBIDListUint</name></member>
      <member refid="df/d6e/classIRegSelSvc_1ac7395c3c96e296b3505efe570210eae1" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>DisableMissingROBs</name></member>
      <member refid="df/d6e/classIRegSelSvc_1a13667b5292de74f5311913272d5672d2" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>getDeltaZ</name></member>
      <member refid="df/d6e/classIRegSelSvc_1aa653733b50adfca8e1fc8fa0cfc2f0eb" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>GetEtaPhi</name></member>
      <member refid="df/d6e/classIRegSelSvc_1aae3b0914d393134109d8a4c6712e1499" prot="public" virt="pure-virtual"><scope>IRegSelSvc</scope><name>handle</name></member>
      <member refid="df/d6e/classIRegSelSvc_1abf727b65ef031646fd8b7ad6e396437c" prot="public" virt="non-virtual"><scope>IRegSelSvc</scope><name>interfaceID</name></member>
      <member refid="df/d6e/classIRegSelSvc_1aa3064caa83c37ccce6c9f60814e0e8b1" prot="public" virt="virtual"><scope>IRegSelSvc</scope><name>~IRegSelSvc</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
