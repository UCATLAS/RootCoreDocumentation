<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/de0/egammaLayerRecalibTool_8cxx" kind="file">
    <compoundname>egammaLayerRecalibTool.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes local="no">map</includes>
    <includes local="no">sstream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">limits</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TH1F.h</includes>
    <includes local="no">TObjString.h</includes>
    <includes refid="d3/d32/PathResolver_8h" local="yes">PathResolver/PathResolver.h</includes>
    <includes refid="d3/da0/egammaLayerRecalibTool_8h" local="yes">egammaLayerRecalibTool/egammaLayerRecalibTool.h</includes>
    <incdepgraph>
      <node id="115345">
        <label>list</label>
      </node>
      <node id="115354">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="115339" relation="include">
        </childnode>
        <childnode refid="115346" relation="include">
        </childnode>
        <childnode refid="115260" relation="include">
        </childnode>
        <childnode refid="115335" relation="include">
        </childnode>
        <childnode refid="115226" relation="include">
        </childnode>
      </node>
      <node id="115339">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="115300">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="115386">
        <label>TProfile2D.h</label>
      </node>
      <node id="115360">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="115361" relation="include">
        </childnode>
        <childnode refid="115340" relation="include">
        </childnode>
        <childnode refid="115246" relation="include">
        </childnode>
        <childnode refid="115362" relation="include">
        </childnode>
      </node>
      <node id="115302">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="115266" relation="include">
        </childnode>
        <childnode refid="115267" relation="include">
        </childnode>
        <childnode refid="115246" relation="include">
        </childnode>
        <childnode refid="115271" relation="include">
        </childnode>
      </node>
      <node id="115238">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115239" relation="include">
        </childnode>
        <childnode refid="115240" relation="include">
        </childnode>
      </node>
      <node id="115377">
        <label>xAODEventInfo/EventInfo.h</label>
        <link refid="d9/d60/EventInfo_8h_source"/>
        <childnode refid="115378" relation="include">
        </childnode>
        <childnode refid="115327" relation="include">
        </childnode>
      </node>
      <node id="115303">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="115273">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="115262" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115274" relation="include">
        </childnode>
        <childnode refid="115272" relation="include">
        </childnode>
      </node>
      <node id="115372">
        <label>EventPrimitives/EventPrimitives.h</label>
        <link refid="d1/d54/EventPrimitives_8h_source"/>
        <childnode refid="115373" relation="include">
        </childnode>
        <childnode refid="115374" relation="include">
        </childnode>
        <childnode refid="115375" relation="include">
        </childnode>
      </node>
      <node id="115270">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="115271">
        <label>functional</label>
      </node>
      <node id="115336">
        <label>boost/version.hpp</label>
      </node>
      <node id="115228">
        <label>limits</label>
      </node>
      <node id="115274">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="115298">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="115240">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="115268">
        <label>iterator</label>
      </node>
      <node id="115324">
        <label>xAODCaloEvent/versions/CaloClusterBadChannelData_v1.h</label>
        <link refid="d5/d3a/CaloClusterBadChannelData__v1_8h_source"/>
        <childnode refid="115321" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
      </node>
      <node id="115286">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115287" relation="include">
        </childnode>
      </node>
      <node id="115326">
        <label>CaloEvent/CaloRecoStatus.h</label>
      </node>
      <node id="115376">
        <label>CxxUtils/final.h</label>
        <link refid="da/d9b/final_8h"/>
      </node>
      <node id="115359">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="115365">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="115366" relation="include">
        </childnode>
        <childnode refid="115334" relation="include">
        </childnode>
        <childnode refid="115228" relation="include">
        </childnode>
        <childnode refid="115271" relation="include">
        </childnode>
        <childnode refid="115367" relation="include">
        </childnode>
      </node>
      <node id="115310">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="115263" relation="include">
        </childnode>
        <childnode refid="115311" relation="include">
        </childnode>
        <childnode refid="115312" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
      </node>
      <node id="115283">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
      </node>
      <node id="115252">
        <label>stdint.h</label>
      </node>
      <node id="115346">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="115228" relation="include">
        </childnode>
        <childnode refid="115347" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
      </node>
      <node id="115332">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="115280">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
      </node>
      <node id="115255">
        <label>RVersion.h</label>
      </node>
      <node id="115265">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="115266" relation="include">
        </childnode>
        <childnode refid="115246" relation="include">
        </childnode>
        <childnode refid="115271" relation="include">
        </childnode>
      </node>
      <node id="115243">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="115329">
        <label>xAODCaloEvent/versions/CaloClusterContainer_v1.h</label>
        <link refid="d8/dda/CaloClusterContainer__v1_8h_source"/>
        <childnode refid="115330" relation="include">
        </childnode>
        <childnode refid="115368" relation="include">
        </childnode>
        <childnode refid="115319" relation="include">
        </childnode>
      </node>
      <node id="115227">
        <label>cmath</label>
      </node>
      <node id="115222">
        <label>cassert</label>
      </node>
      <node id="115337">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="115356">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="115312">
        <label>stdexcept</label>
      </node>
      <node id="115236">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115237" relation="include">
        </childnode>
      </node>
      <node id="115301">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="115374">
        <label>Eigen/Core</label>
      </node>
      <node id="115343">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="115351">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="115259">
        <label>TLorentzVector.h</label>
      </node>
      <node id="115234">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="115321">
        <label>CaloGeoHelpers/CaloSampling.h</label>
        <link refid="d7/d85/CaloSampling_8h_source"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115322" relation="include">
        </childnode>
      </node>
      <node id="115223">
        <label>string</label>
      </node>
      <node id="115304">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="115263" relation="include">
        </childnode>
        <childnode refid="115262" relation="include">
        </childnode>
        <childnode refid="115286" relation="include">
        </childnode>
        <childnode refid="115283" relation="include">
        </childnode>
        <childnode refid="115275" relation="include">
        </childnode>
        <childnode refid="115305" relation="include">
        </childnode>
        <childnode refid="115306" relation="include">
        </childnode>
        <childnode refid="115289" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115267" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
        <childnode refid="115307" relation="include">
        </childnode>
        <childnode refid="115308" relation="include">
        </childnode>
        <childnode refid="115296" relation="include">
        </childnode>
        <childnode refid="115309" relation="include">
        </childnode>
      </node>
      <node id="115278">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
      </node>
      <node id="115307">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="115348">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="115331" relation="include">
        </childnode>
        <childnode refid="115346" relation="include">
        </childnode>
        <childnode refid="115349" relation="include">
        </childnode>
        <childnode refid="115351" relation="include">
        </childnode>
        <childnode refid="115336" relation="include">
        </childnode>
        <childnode refid="115268" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
      </node>
      <node id="115361">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="115370">
        <label>xAODPrimitives/IsolationType.h</label>
        <link refid="d2/d36/IsolationType_8h_source"/>
      </node>
      <node id="115224">
        <label>map</label>
      </node>
      <node id="115362">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="115363" relation="include">
        </childnode>
      </node>
      <node id="115369">
        <label>xAODPrimitives/IsolationCorrection.h</label>
        <link refid="d3/de5/xAODPrimitives_2xAODPrimitives_2IsolationCorrection_8h_source"/>
        <childnode refid="115320" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
      </node>
      <node id="115363">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="115256">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="115293">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="115353">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="115348" relation="include">
        </childnode>
        <childnode refid="115268" relation="include">
        </childnode>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115354" relation="include">
        </childnode>
      </node>
      <node id="115231">
        <label>TObjString.h</label>
      </node>
      <node id="115308">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="115290">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="115349">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="115331" relation="include">
        </childnode>
        <childnode refid="115254" relation="include">
        </childnode>
        <childnode refid="115246" relation="include">
        </childnode>
        <childnode refid="115350" relation="include">
        </childnode>
      </node>
      <node id="115261">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="115237">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="115254">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="115255" relation="include">
        </childnode>
        <childnode refid="115256" relation="include">
        </childnode>
      </node>
      <node id="115306">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="115299">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="115347">
        <label>limits.h</label>
      </node>
      <node id="115341">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="115342" relation="include">
        </childnode>
      </node>
      <node id="115382">
        <label>TH1.h</label>
      </node>
      <node id="115285">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="115286" relation="include">
        </childnode>
        <childnode refid="115228" relation="include">
        </childnode>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115288" relation="include">
        </childnode>
      </node>
      <node id="115263">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115265" relation="include">
        </childnode>
      </node>
      <node id="115253">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
      </node>
      <node id="115375">
        <label>Eigen/Dense</label>
      </node>
      <node id="115266">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115267" relation="include">
        </childnode>
        <childnode refid="115268" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
        <childnode refid="115227" relation="include">
        </childnode>
        <childnode refid="115228" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115270" relation="include">
        </childnode>
      </node>
      <node id="115334">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="115222" relation="include">
        </childnode>
      </node>
      <node id="115258">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="115259" relation="include">
        </childnode>
        <childnode refid="115260" relation="include">
        </childnode>
        <childnode refid="115314" relation="include">
        </childnode>
        <childnode refid="115274" relation="include">
        </childnode>
      </node>
      <node id="115314">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="115315" relation="include">
        </childnode>
      </node>
      <node id="115378">
        <label>xAODEventInfo/versions/EventInfo_v1.h</label>
        <link refid="d4/da0/EventInfo__v1_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115379" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115315" relation="include">
        </childnode>
        <childnode refid="115260" relation="include">
        </childnode>
        <childnode refid="115330" relation="include">
        </childnode>
        <childnode refid="115251" relation="include">
        </childnode>
        <childnode refid="115380" relation="include">
        </childnode>
      </node>
      <node id="115319">
        <label>xAODCaloEvent/versions/CaloCluster_v1.h</label>
        <link refid="dc/d4b/CaloCluster__v1_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115320" relation="include">
        </childnode>
        <childnode refid="115258" relation="include">
        </childnode>
        <childnode refid="115321" relation="include">
        </childnode>
        <childnode refid="115323" relation="include">
        </childnode>
        <childnode refid="115251" relation="include">
        </childnode>
        <childnode refid="115325" relation="include">
        </childnode>
        <childnode refid="115326" relation="include">
        </childnode>
      </node>
      <node id="115381">
        <label>PATInterfaces/CorrectionCode.h</label>
        <link refid="d8/dab/CorrectionCode_8h_source"/>
      </node>
      <node id="115350">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="115346" relation="include">
        </childnode>
        <childnode refid="115334" relation="include">
        </childnode>
      </node>
      <node id="115244">
        <label>egammaLayerRecalibTool/egammaLayerRecalibTool.h</label>
        <link refid="d3/da0/egammaLayerRecalibTool_8h_source"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115246" relation="include">
        </childnode>
        <childnode refid="115247" relation="include">
        </childnode>
        <childnode refid="115233" relation="include">
        </childnode>
        <childnode refid="115249" relation="include">
        </childnode>
        <childnode refid="115318" relation="include">
        </childnode>
        <childnode refid="115377" relation="include">
        </childnode>
        <childnode refid="115381" relation="include">
        </childnode>
        <childnode refid="115382" relation="include">
        </childnode>
        <childnode refid="115383" relation="include">
        </childnode>
        <childnode refid="115384" relation="include">
        </childnode>
        <childnode refid="115385" relation="include">
        </childnode>
      </node>
      <node id="115279">
        <label>typeinfo</label>
      </node>
      <node id="115313">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="115307" relation="include">
        </childnode>
        <childnode refid="115222" relation="include">
        </childnode>
      </node>
      <node id="115318">
        <label>xAODCaloEvent/CaloCluster.h</label>
        <link refid="db/d88/CaloCluster_8h_source"/>
        <childnode refid="115319" relation="include">
        </childnode>
        <childnode refid="115327" relation="include">
        </childnode>
      </node>
      <node id="115330">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="115310" relation="include">
        </childnode>
        <childnode refid="115331" relation="include">
        </childnode>
        <childnode refid="115332" relation="include">
        </childnode>
        <childnode refid="115333" relation="include">
        </childnode>
        <childnode refid="115339" relation="include">
        </childnode>
        <childnode refid="115340" relation="include">
        </childnode>
        <childnode refid="115346" relation="include">
        </childnode>
        <childnode refid="115348" relation="include">
        </childnode>
        <childnode refid="115352" relation="include">
        </childnode>
        <childnode refid="115353" relation="include">
        </childnode>
        <childnode refid="115349" relation="include">
        </childnode>
        <childnode refid="115355" relation="include">
        </childnode>
        <childnode refid="115254" relation="include">
        </childnode>
        <childnode refid="115356" relation="include">
        </childnode>
        <childnode refid="115357" relation="include">
        </childnode>
        <childnode refid="115351" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115271" relation="include">
        </childnode>
        <childnode refid="115221" relation="include">
        </childnode>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115312" relation="include">
        </childnode>
        <childnode refid="115268" relation="include">
        </childnode>
        <childnode refid="115274" relation="include">
        </childnode>
        <childnode refid="115358" relation="include">
        </childnode>
        <childnode refid="115360" relation="include">
        </childnode>
        <childnode refid="115364" relation="include">
        </childnode>
        <childnode refid="115365" relation="include">
        </childnode>
      </node>
      <node id="115320">
        <label>bitset</label>
      </node>
      <node id="115288">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="115257">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="115305">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="115242">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115236" relation="include">
        </childnode>
        <childnode refid="115243" relation="include">
        </childnode>
      </node>
      <node id="115276">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
      </node>
      <node id="115287">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="115292">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="115340">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="115341" relation="include">
        </childnode>
        <childnode refid="115333" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115270" relation="include">
        </childnode>
        <childnode refid="115343" relation="include">
        </childnode>
        <childnode refid="115291" relation="include">
        </childnode>
        <childnode refid="115344" relation="include">
        </childnode>
      </node>
      <node id="115272">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="115373">
        <label>unistd.h</label>
      </node>
      <node id="115358">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="115359" relation="include">
        </childnode>
      </node>
      <node id="115277">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="115263" relation="include">
        </childnode>
        <childnode refid="115278" relation="include">
        </childnode>
        <childnode refid="115280" relation="include">
        </childnode>
        <childnode refid="115281" relation="include">
        </childnode>
        <childnode refid="115294" relation="include">
        </childnode>
        <childnode refid="115296" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115302" relation="include">
        </childnode>
        <childnode refid="115303" relation="include">
        </childnode>
      </node>
      <node id="115245">
        <label>vector</label>
      </node>
      <node id="115368">
        <label>xAODBase/IParticleContainer.h</label>
        <link refid="dd/d2d/IParticleContainer_8h_source"/>
        <childnode refid="115330" relation="include">
        </childnode>
        <childnode refid="115258" relation="include">
        </childnode>
        <childnode refid="115272" relation="include">
        </childnode>
      </node>
      <node id="115366">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
      </node>
      <node id="115229">
        <label>TFile.h</label>
      </node>
      <node id="115367">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="115323">
        <label>xAODCaloEvent/CaloClusterBadChannelData.h</label>
        <link refid="d1/d93/CaloClusterBadChannelData_8h_source"/>
        <childnode refid="115324" relation="include">
        </childnode>
      </node>
      <node id="115267">
        <label>utility</label>
      </node>
      <node id="115364">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="115289">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="115250">
        <label>xAODEgamma/versions/Egamma_v1.h</label>
        <link refid="d9/d42/Egamma__v1_8h_source"/>
        <childnode refid="115251" relation="include">
        </childnode>
        <childnode refid="115258" relation="include">
        </childnode>
        <childnode refid="115316" relation="include">
        </childnode>
        <childnode refid="115317" relation="include">
        </childnode>
        <childnode refid="115318" relation="include">
        </childnode>
        <childnode refid="115328" relation="include">
        </childnode>
        <childnode refid="115369" relation="include">
        </childnode>
        <childnode refid="115370" relation="include">
        </childnode>
        <childnode refid="115371" relation="include">
        </childnode>
        <childnode refid="115372" relation="include">
        </childnode>
        <childnode refid="115376" relation="include">
        </childnode>
        <childnode refid="115289" relation="include">
        </childnode>
        <childnode refid="115252" relation="include">
        </childnode>
      </node>
      <node id="115225">
        <label>sstream</label>
      </node>
      <node id="115328">
        <label>xAODCaloEvent/CaloClusterContainer.h</label>
        <link refid="da/dc3/CaloClusterContainer_8h_source"/>
        <childnode refid="115318" relation="include">
        </childnode>
        <childnode refid="115329" relation="include">
        </childnode>
        <childnode refid="115327" relation="include">
        </childnode>
      </node>
      <node id="115338">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="115297">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="115282">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="115296">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="115297" relation="include">
        </childnode>
        <childnode refid="115298" relation="include">
        </childnode>
        <childnode refid="115299" relation="include">
        </childnode>
        <childnode refid="115300" relation="include">
        </childnode>
        <childnode refid="115301" relation="include">
        </childnode>
      </node>
      <node id="115384">
        <label>TFormula.h</label>
      </node>
      <node id="115383">
        <label>TH2.h</label>
      </node>
      <node id="115322">
        <label>CaloGeoHelpers/CaloSampling.def</label>
      </node>
      <node id="115315">
        <label>iosfwd</label>
      </node>
      <node id="115269">
        <label>cstdlib</label>
      </node>
      <node id="115220">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx</label>
        <link refid="egammaLayerRecalibTool.cxx"/>
        <childnode refid="115221" relation="include">
        </childnode>
        <childnode refid="115222" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115224" relation="include">
        </childnode>
        <childnode refid="115225" relation="include">
        </childnode>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115227" relation="include">
        </childnode>
        <childnode refid="115228" relation="include">
        </childnode>
        <childnode refid="115229" relation="include">
        </childnode>
        <childnode refid="115230" relation="include">
        </childnode>
        <childnode refid="115231" relation="include">
        </childnode>
        <childnode refid="115232" relation="include">
        </childnode>
        <childnode refid="115244" relation="include">
        </childnode>
      </node>
      <node id="115230">
        <label>TH1F.h</label>
      </node>
      <node id="115311">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="115221">
        <label>iostream</label>
      </node>
      <node id="115262">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="115263" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115272" relation="include">
        </childnode>
      </node>
      <node id="115264">
        <label>cstddef</label>
      </node>
      <node id="115241">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="115235">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115225" relation="include">
        </childnode>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115236" relation="include">
        </childnode>
        <childnode refid="115238" relation="include">
        </childnode>
        <childnode refid="115241" relation="include">
        </childnode>
      </node>
      <node id="115309">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="115277" relation="include">
        </childnode>
        <childnode refid="115273" relation="include">
        </childnode>
        <childnode refid="115262" relation="include">
        </childnode>
        <childnode refid="115307" relation="include">
        </childnode>
        <childnode refid="115308" relation="include">
        </childnode>
      </node>
      <node id="115239">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="115380">
        <label>xAODCore/BaseInfo.h</label>
        <link refid="d3/d17/BaseInfo_8h_source"/>
        <childnode refid="115274" relation="include">
        </childnode>
      </node>
      <node id="115317">
        <label>xAODEgamma/EgammaEnums.h</label>
        <link refid="d4/d8f/EgammaEnums_8h_source"/>
      </node>
      <node id="115344">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="115331" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115345" relation="include">
        </childnode>
        <childnode refid="115222" relation="include">
        </childnode>
        <childnode refid="115269" relation="include">
        </childnode>
        <childnode refid="115274" relation="include">
        </childnode>
      </node>
      <node id="115281">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="115278" relation="include">
        </childnode>
        <childnode refid="115282" relation="include">
        </childnode>
        <childnode refid="115283" relation="include">
        </childnode>
        <childnode refid="115284" relation="include">
        </childnode>
        <childnode refid="115289" relation="include">
        </childnode>
        <childnode refid="115279" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115226" relation="include">
        </childnode>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115291" relation="include">
        </childnode>
        <childnode refid="115292" relation="include">
        </childnode>
        <childnode refid="115293" relation="include">
        </childnode>
      </node>
      <node id="115232">
        <label>PathResolver/PathResolver.h</label>
        <link refid="d3/d32/PathResolver_8h_source"/>
        <childnode refid="115233" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
      </node>
      <node id="115249">
        <label>xAODEgamma/Egamma.h</label>
        <link refid="d6/d1c/Egamma_8h_source"/>
        <childnode refid="115250" relation="include">
        </childnode>
      </node>
      <node id="115316">
        <label>xAODEgamma/EgammaDefs.h</label>
        <link refid="dd/d34/EgammaDefs_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
      </node>
      <node id="115233">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115235" relation="include">
        </childnode>
        <childnode refid="115242" relation="include">
        </childnode>
      </node>
      <node id="115291">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="115333">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="115304" relation="include">
        </childnode>
        <childnode refid="115331" relation="include">
        </childnode>
        <childnode refid="115332" relation="include">
        </childnode>
        <childnode refid="115260" relation="include">
        </childnode>
        <childnode refid="115277" relation="include">
        </childnode>
        <childnode refid="115310" relation="include">
        </childnode>
        <childnode refid="115334" relation="include">
        </childnode>
        <childnode refid="115273" relation="include">
        </childnode>
        <childnode refid="115335" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115338" relation="include">
        </childnode>
      </node>
      <node id="115379">
        <label>set</label>
      </node>
      <node id="115371">
        <label>xAODPrimitives/IsolationFlavour.h</label>
        <link refid="da/d23/IsolationFlavour_8h_source"/>
      </node>
      <node id="115327">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="115272" relation="include">
        </childnode>
      </node>
      <node id="115295">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="115385">
        <label>egammaLayerRecalibTool/corr_HV_EMBPS.h</label>
        <link refid="d7/d6a/corr__HV__EMBPS_8h_source"/>
        <childnode refid="115386" relation="include">
        </childnode>
        <childnode refid="115229" relation="include">
        </childnode>
      </node>
      <node id="115284">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="115282" relation="include">
        </childnode>
        <childnode refid="115285" relation="include">
        </childnode>
        <childnode refid="115289" relation="include">
        </childnode>
        <childnode refid="115245" relation="include">
        </childnode>
        <childnode refid="115290" relation="include">
        </childnode>
      </node>
      <node id="115226">
        <label>algorithm</label>
      </node>
      <node id="115325">
        <label>CaloEvent/CaloClusterCellLinkContainer.h</label>
      </node>
      <node id="115355">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="115260">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="115261" relation="include">
        </childnode>
        <childnode refid="115262" relation="include">
        </childnode>
        <childnode refid="115273" relation="include">
        </childnode>
        <childnode refid="115275" relation="include">
        </childnode>
        <childnode refid="115277" relation="include">
        </childnode>
        <childnode refid="115304" relation="include">
        </childnode>
        <childnode refid="115283" relation="include">
        </childnode>
        <childnode refid="115310" relation="include">
        </childnode>
        <childnode refid="115307" relation="include">
        </childnode>
        <childnode refid="115264" relation="include">
        </childnode>
        <childnode refid="115313" relation="include">
        </childnode>
      </node>
      <node id="115247">
        <label>AsgTools/AsgTool.h</label>
        <link refid="d4/d29/AsgTool_8h_source"/>
        <childnode refid="115234" relation="include">
        </childnode>
        <childnode refid="115238" relation="include">
        </childnode>
        <childnode refid="115236" relation="include">
        </childnode>
        <childnode refid="115248" relation="include">
        </childnode>
      </node>
      <node id="115275">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115276" relation="include">
        </childnode>
        <childnode refid="115254" relation="include">
        </childnode>
      </node>
      <node id="115352">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="115348" relation="include">
        </childnode>
        <childnode refid="115334" relation="include">
        </childnode>
        <childnode refid="115268" relation="include">
        </childnode>
      </node>
      <node id="115331">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="115251">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="115252" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
        <childnode refid="115253" relation="include">
        </childnode>
        <childnode refid="115254" relation="include">
        </childnode>
        <childnode refid="115257" relation="include">
        </childnode>
      </node>
      <node id="115248">
        <label>AsgTools/SetProperty.h</label>
        <link refid="df/db0/SetProperty_8h_source"/>
      </node>
      <node id="115342">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="115357">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="115246">
        <label>memory</label>
      </node>
      <node id="115294">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="115280" relation="include">
        </childnode>
        <childnode refid="115281" relation="include">
        </childnode>
        <childnode refid="115295" relation="include">
        </childnode>
      </node>
      <node id="115335">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="115261" relation="include">
        </childnode>
        <childnode refid="115273" relation="include">
        </childnode>
        <childnode refid="115262" relation="include">
        </childnode>
        <childnode refid="115291" relation="include">
        </childnode>
        <childnode refid="115336" relation="include">
        </childnode>
        <childnode refid="115337" relation="include">
        </childnode>
        <childnode refid="115223" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="df/de0/egammaLayerRecalibTool_8cxx_1a385c374eb0864ba7a324a630478fec69" prot="public" static="no" mutable="no">
        <type>const float</type>
        <definition>const float VALUE_OVERFLOW</definition>
        <argsstring></argsstring>
        <name>VALUE_OVERFLOW</name>
        <initializer> std::numeric_limits&lt;float&gt;::max()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx" line="18" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/de0/egammaLayerRecalibTool_8cxx_1adab1a6bfec54f943290e37caed75717f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; parse</definition>
        <argsstring>(const std::string &amp;list)</argsstring>
        <name>parse</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx" line="876" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx" bodystart="875" bodyend="904"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1F.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TObjString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PathResolver/PathResolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;egammaLayerRecalibTool/egammaLayerRecalibTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW<sp/>=<sp/>std::numeric_limits&lt;float&gt;::max();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto1D::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo-&gt;FindFixBin(input.eta);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo-&gt;IsBinUnderflow(bin)<sp/>or<sp/>m_histo-&gt;IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_histo-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto1DUp::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo-&gt;FindFixBin(input.eta);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo-&gt;IsBinUnderflow(bin)<sp/>or<sp/>m_histo-&gt;IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_histo-&gt;GetBinContent(bin)<sp/>+<sp/>m_histo-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto1DDown::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo-&gt;FindFixBin(input.eta);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo-&gt;IsBinUnderflow(bin)<sp/>or<sp/>m_histo-&gt;IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_histo-&gt;GetBinContent(bin)<sp/>-<sp/>m_histo-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto1DErrorUp::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo-&gt;FindFixBin(input.eta);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo-&gt;IsBinUnderflow(bin)<sp/>or<sp/>m_histo-&gt;IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_histo-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto1DErrorDown::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo-&gt;FindFixBin(input.eta);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo-&gt;IsBinUnderflow(bin)<sp/>or<sp/>m_histo-&gt;IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-m_histo-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHisto2D::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo.FindFixBin(input.eta,<sp/>input.phi);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo.IsBinUnderflow(bin)<sp/>or<sp/>m_histo.IsBinOverflow(bin))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VALUE_OVERFLOW;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_histo.GetBinContent(bin);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountFixed::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/></highlight><highlight class="comment">/*input*/</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_amount;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountFormula::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_formula.Eval(input.eta,<sp/>input.phi,<sp/>input.RunNumber);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetAmountHVPSGuillaume::operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tool.<ref refid="de/dc7/classcorr__HV__EMBPS_1ac9533bd109740cf5fdc6008acc99167d" kindref="member" tooltip="get correction factor to apply to raw EMBPS energy : corrected raw EMBPS energy =...">getCorr</ref>(input.RunNumber,<sp/>input.eta,<sp/>input.phi);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref><sp/>InputModifier::operator()(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="71"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount<sp/>==<sp/>VALUE_OVERFLOW)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aa38a4fce39a52cf6f99b407b8db24d45" kindref="member" tooltip="Input object is out of validity range.">CP::CorrectionCode::OutOfValidityRange</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_base)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SHIFT:<sp/>scale_inputs(inputs,<sp/>amount);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ZEROBASED:<sp/>scale_inputs(inputs,<sp/>1.<sp/>+<sp/>amount);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ONEBASED:<sp/>scale_inputs(inputs,<sp/>amount);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ONEBASED_ALPHA:<sp/>scale_inputs(inputs,<sp/>1.<sp/>/<sp/>amount);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ZEROBASED_ALPHA:<sp/>scale_inputs(inputs,<sp/>1.<sp/>/<sp/>(1.<sp/>+<sp/>amount));<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83a9faf702fadfcc1135b182dd78ec9d718" kindref="member" tooltip="Some error happened during the object correction.">CP::CorrectionCode::Error</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleE0::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="85"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>inputs.E0raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleE1::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>inputs.E1raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleE2::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="95"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>inputs.E2raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleE3::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="100"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>inputs.E3raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleE1overE2::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="105"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Es1<sp/>=<sp/>inputs.E1raw;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Es2<sp/>=<sp/>inputs.E2raw;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Es1<sp/>==<sp/>0<sp/>and<sp/>Es2<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs.E1raw<sp/>=<sp/>-999;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs.E2raw<sp/>=<sp/>-999;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>Es1<sp/>+<sp/>Es2;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>amount;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>den<sp/>=<sp/>(alpha<sp/>*<sp/>Es1<sp/>+<sp/>Es2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>inputs.E1raw<sp/>=<sp/>alpha<sp/>*<sp/>Es1<sp/>*<sp/>sum<sp/>/<sp/>den;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>inputs.E2raw<sp/>=<sp/>Es2<sp/>*<sp/>sum<sp/>/<sp/>den;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleEaccordion::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="121"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>inputs.E1raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>inputs.E2raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>inputs.E3raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ScaleEcalorimeter::scale_inputs(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="128"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>inputs.E0raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>inputs.E1raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>inputs.E2raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>inputs.E3raw<sp/>*=<sp/>amount;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>egammaLayerRecalibTool::resolve_alias(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tune)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>tune;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2012_v5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2012&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_alt_2012_v5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2011_v5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2011&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_alt_2011_v5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2010_v5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2012_v3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2011_v3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2010_v3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2012_v5_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2012_v5_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2012_v5_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2012_v5_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2011_v5_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2011_v5_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2011_v5_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2011_v5_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2010_v5_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2010_v5_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2010_v5_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;layer1_2010_v5_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2012_v3_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2012_v3_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2012_v3_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2012_v3_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2011_v3_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2011_v3_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2011_v3_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2011_v3_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2010_v3_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2010_v3_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2010_v3_errup&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ps_2010_v3_errdown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">egammaLayerRecalibTool::add_scale</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tuneIn)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;using<sp/>scale<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tuneIn);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::string<sp/>tune<sp/>=<sp/>resolve_alias(tuneIn);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tune.empty())<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2012</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2012_with_layer2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_alt&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2012_alt_with_layer2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer2_alt_2012_v5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2010_with_layer2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_layer1_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_layer1_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_layer1_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_layer1_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_ps_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_ps_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_ps_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_ps_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2012_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2012_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2012_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2011_with_layer2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_alt&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2011_alt_with_layer2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer2_alt_2011_v5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_layer1_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_layer1_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_layer1_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_layer1_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_ps_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_ps_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_ps_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_ps_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2011_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2011_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2011_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_layer1_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_layer1_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_layer1_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_layer1_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_ps_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_ps_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_ps_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_ps_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_up&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_down&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_errup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;2010_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;layer1_2010_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="stringliteral">&quot;ps_2010_errdown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_HV1&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/dfc/structGetAmountHVPSGuillaume" kindref="compound">GetAmountHVPSGuillaume</ref>());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;test1&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F<sp/>h_presampler(</highlight><highlight class="stringliteral">&quot;h_presampler&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h_presampler&quot;</highlight><highlight class="normal">,<sp/>10,<sp/>-2.5,<sp/>2.5);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>as<sp/>an<sp/>example,<sp/>correct<sp/>E0<sp/>by<sp/>0.1<sp/>*<sp/>sign(eta)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>E1<sp/>by<sp/>1%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin<sp/>=<sp/>1;<sp/>ibin<sp/>&lt;=<sp/>5;<sp/>++ibin)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_presampler.SetBinContent(ibin,<sp/>-0.1);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h_presampler.SetBinContent(ibin<sp/>+<sp/>5,<sp/>0.1);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(h_presampler));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/dee/structGetAmountFixed" kindref="compound">GetAmountFixed</ref>(0.01));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_1&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>TFormula<sp/>f(</highlight><highlight class="stringliteral">&quot;formula_layer1_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;(abs(x)&lt;1.425)<sp/>?<sp/>0.97<sp/>:<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/da6/structGetAmountFormula" kindref="compound">GetAmountFormula</ref>(f));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>TFormula<sp/>f(</highlight><highlight class="stringliteral">&quot;formula_layer1_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;(abs(x)&lt;1.425)<sp/>?<sp/>0.97<sp/>:<sp/>1.05&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/da6/structGetAmountFormula" kindref="compound">GetAmountFormula</ref>(f));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2012_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_alt_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2012_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_alt_2011_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_alt_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2011_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer1_2010_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_alt_2012_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_alt_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2012_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_alt_2011_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_alt_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2011_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;layer2_2010_v5_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1D*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hE1E2ave_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ONEBASED),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_v3&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_v3_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_v3_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_v3_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2012_v3_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2012&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_v3&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_v3_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_v3_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_v3_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2011_v3_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2011&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_v3&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_v3_down&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/d2e/structGetAmountHisto1DUp" kindref="compound">GetAmountHisto1DUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_v3_up&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ONEBASED_ALPHA),</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/d91/structGetAmountHisto1DDown" kindref="compound">GetAmountHisto1DDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_v3_errdown&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/structGetAmountHisto1DErrorUp" kindref="compound">GetAmountHisto1DErrorUp</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ps_2010_v3_errup&quot;</highlight><highlight class="normal"><sp/>==<sp/>tune){</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>file<sp/>=<sp/>PathResolverFindCalibFile(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool/v1/egammaLayerRecalibTunes.root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>TFile<sp/>f(file.c_str());</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1F*<sp/>histo_ps_tot_error<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(</highlight><highlight class="stringliteral">&quot;hPS_2010&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(histo_ps_tot_error);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED_ALPHA),</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d6/dc1/structGetAmountHisto1DErrorDown" kindref="compound">GetAmountHisto1DErrorDown</ref>(*histo_ps_tot_error));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>tune<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>tune&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><ref refid="d1/dba/classegammaLayerRecalibTool_1ac4dd78c87d615125e32372397da072de" kindref="member">egammaLayerRecalibTool::egammaLayerRecalibTool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tune)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>:<sp/>asg::AsgMessaging(name),<sp/>m_tune(tune)</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(tune);</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><ref refid="d1/dba/classegammaLayerRecalibTool_1ac4dd78c87d615125e32372397da072de" kindref="member">egammaLayerRecalibTool::egammaLayerRecalibTool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>tune)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="d1/dba/classegammaLayerRecalibTool" kindref="compound">egammaLayerRecalibTool</ref>(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool&quot;</highlight><highlight class="normal">,<sp/>tune)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">egammaLayerRecalibTool::add_scale</ref>(<ref refid="dc/d44/structInputModifier" kindref="compound">InputModifier</ref>*<sp/>modifier,<sp/><ref refid="d1/d99/structGetAmountBase" kindref="compound">GetAmountBase</ref>*<sp/>amount)</highlight></codeline>
<codeline lineno="797"><highlight class="normal">{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>m_modifiers.push_back(std::make_pair(modifier,<sp/>amount));</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a59ae581f4f15e2ecd8475fa79e58e69c" kindref="member">egammaLayerRecalibTool::scale_inputs</ref>(<ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>&amp;<sp/>inputs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="802"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref><sp/>status<sp/>=<sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modifier<sp/>:<sp/>m_modifiers)<sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>(*modifier.second)(inputs);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(*modifier.first)(inputs,<sp/>amount);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83a9faf702fadfcc1135b182dd78ec9d718" kindref="member" tooltip="Some error happened during the object correction.">CP::CorrectionCode::Error</ref>)<sp/>{<sp/>status<sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref><sp/>egammaLayerRecalibTool::applyCorrection(<ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound" tooltip="Class describing an e/gamma.">xAOD::Egamma</ref>&amp;<sp/>particle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/df8/classxAOD_1_1EventInfo__v1" kindref="compound">xAOD::EventInfo</ref>&amp;<sp/>event_info)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="815"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>*<sp/>cluster<sp/>=<sp/>particle.caloCluster();</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cluster)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;egamma<sp/>particle<sp/>without<sp/>CaloCluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83a9faf702fadfcc1135b182dd78ec9d718" kindref="member" tooltip="Some error happened during the object correction.">CP::CorrectionCode::Error</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="de/df8/structStdCalibrationInputs" kindref="compound">StdCalibrationInputs</ref><sp/>inputs{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>event_info.<ref refid="df/df8/classxAOD_1_1EventInfo__v1_1a53c034dc7ca12355747c9d2756627254" kindref="member" tooltip="The current event&amp;#39;s run number.">runNumber</ref>(),</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a1d8549783e3ea14d493d843256e4a925" kindref="member" tooltip="The pseudorapidity () of the particle.">eta</ref>(),</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aae8d85d09cb4805e5b9219e03e77da0e" kindref="member" tooltip="The azimuthal angle () of the particle.">phi</ref>(),</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(0),</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(1),</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(2),</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(3),};</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref><sp/>status<sp/>=<sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1a59ae581f4f15e2ecd8475fa79e58e69c" kindref="member">scale_inputs</ref>(inputs);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Decorator&lt;double&gt;</ref><sp/>deco_E0(</highlight><highlight class="stringliteral">&quot;correctedcl_Es0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Decorator&lt;double&gt;</ref><sp/>deco_E1(</highlight><highlight class="stringliteral">&quot;correctedcl_Es1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Decorator&lt;double&gt;</ref><sp/>deco_E2(</highlight><highlight class="stringliteral">&quot;correctedcl_Es2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Decorator&lt;double&gt;</ref><sp/>deco_E3(</highlight><highlight class="stringliteral">&quot;correctedcl_Es3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound" tooltip="Helper class to provide type-safe access to aux data.">SG::AuxElement::Decorator&lt;std::string&gt;</ref><sp/>deco_layer_correction(</highlight><highlight class="stringliteral">&quot;layer_correction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/><ref refid="db/d8a/classCP_1_1CorrectionCode_1a0a040c70626c77bad65a0fbf757d7b83aea8e3d31915633d7faef8f6a6c0bbd9f" kindref="member" tooltip="The correction was done successfully.">CP::CorrectionCode::Ok</ref>)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;decorating<sp/>cluster<sp/>with<sp/>corrected<sp/>layer<sp/>energies&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E0(*cluster)<sp/>=<sp/>inputs.E0raw;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E1(*cluster)<sp/>=<sp/>inputs.E1raw;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E2(*cluster)<sp/>=<sp/>inputs.E2raw;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E3(*cluster)<sp/>=<sp/>inputs.E3raw;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_layer_correction(*cluster)<sp/>=<sp/>m_tune;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;cannot<sp/>correct<sp/>layer<sp/>energies:<sp/>decorating<sp/>particle<sp/>with<sp/>non-corrected<sp/>layer<sp/>energies&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>done<sp/>for<sp/>safety,<sp/>since<sp/>when<sp/>a<sp/>particle<sp/>is<sp/>decorated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>particle<sp/>in<sp/>the<sp/>container<sp/>are<sp/>decorated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>not<sp/>possible<sp/>to<sp/>distinguish<sp/>between<sp/>decorated<sp/>/<sp/>non-decorated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>all<sp/>are<sp/>decorated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E0(*cluster)<sp/>=<sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(0);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E1(*cluster)<sp/>=<sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(1);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E2(*cluster)<sp/>=<sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(2);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_E3(*cluster)<sp/>=<sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a443c16eb7a013ea5abedecc99c3a951e" kindref="member" tooltip="Get the energy in one layer of the EM Calo.">energyBE</ref>(3);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>deco_layer_correction(*cluster)<sp/>=<sp/>m_tune;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1af21ed78a592e4d502254f95d17ea69f6" kindref="member">egammaLayerRecalibTool::clear_corrections</ref>()</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>modifier<sp/>:<sp/><sp/>m_modifiers)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>modifier.first;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>modifier.second;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>m_modifiers.clear();</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal">std::map&lt;std::string,<sp/>std::string&gt;<sp/>parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>list)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;list:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>list<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>result;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>TIter<sp/>next(TString(list).Tokenize(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TObjString*<sp/>sObj<sp/>=<sp/>(TObjString*)<sp/>next())</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>item(sObj-&gt;GetString());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;item:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>item<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObjArray*<sp/>item_list<sp/>=<sp/>TString(item).Tokenize(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key,<sp/>value;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item_list-&gt;GetEntries()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;amount&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item_list-&gt;At(0))-&gt;GetString().Data();</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item_list-&gt;GetEntries()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item_list-&gt;At(0))-&gt;GetString().Data();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(item_list-&gt;At(1))-&gt;GetString().Data();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>string<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>item<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.find(key)<sp/>!=<sp/>result.end())<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;trying<sp/>to<sp/>insert<sp/>two<sp/>times<sp/>key<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.insert(std::make_pair(key,<sp/>value));</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">std::pair&lt;std::string,<sp/>egammaLayerRecalibTool*&gt;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><ref refid="d1/dba/classegammaLayerRecalibTool_1ad274521967671344ecf40a388204b7e8" kindref="member">egammaLayerRecalibTool::create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>args)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>args_map<sp/>=<sp/>parse(args);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><ref refid="d1/dba/classegammaLayerRecalibTool" kindref="compound">egammaLayerRecalibTool</ref>*<sp/>tool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/dba/classegammaLayerRecalibTool_1ac4dd78c87d615125e32372397da072de" kindref="member">egammaLayerRecalibTool</ref>(</highlight><highlight class="stringliteral">&quot;egammaLayerRecalibTool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>std::string<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>std::string<sp/>amount_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>std::string<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><ref refid="d1/d99/structGetAmountBase" kindref="compound">GetAmountBase</ref>*<sp/>amount_getter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><ref refid="dc/d44/structInputModifier" kindref="compound">InputModifier</ref>*<sp/>modifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map.find(</highlight><highlight class="stringliteral">&quot;amount&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>args_map.end())<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>amount_str<sp/>=<sp/>args_map[</highlight><highlight class="stringliteral">&quot;amount&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>perc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::string(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">)<sp/>==<sp/>amount_str.substr(amount_str.size()-1,<sp/>amount_str.size()))<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>amount_str<sp/>=<sp/>amount_str.substr(0,<sp/>amount_str.size()-1);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>TString(amount_str).Atof()<sp/>*<sp/>(perc<sp/>?<sp/>0.01<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>amount_getter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/dee/structGetAmountFixed" kindref="compound">GetAmountFixed</ref>(amount);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>amount_stream;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>amount_stream<sp/>&lt;&lt;<sp/>amount;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>amount_name<sp/>=<sp/>amount_stream.str();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(amount_name.begin(),<sp/>amount_name.end(),<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>std::replace(amount_name.begin(),<sp/>amount_name.end(),<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map.find(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>args_map.end())<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>args_map[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map.find(</highlight><highlight class="stringliteral">&quot;histo&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>args_map.end())<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map.find(</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">)<sp/>==<sp/>args_map.end())<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>histo<sp/>you<sp/>must<sp/>specify<sp/>file&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map.find(</highlight><highlight class="stringliteral">&quot;formulax&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>args_map.end())<sp/>dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>histo<sp/>you<sp/>must<sp/>specify<sp/>formulax&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>f(args_map[</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">].c_str());</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;opening<sp/>histo<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>args_map[</highlight><highlight class="stringliteral">&quot;histo&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>args_map[</highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1F*<sp/>histo<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1F*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f.Get(args_map[</highlight><highlight class="stringliteral">&quot;histo&quot;</highlight><highlight class="normal">].c_str()));</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(histo){</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>histo-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>amount_getter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d2f/structGetAmountHisto1D" kindref="compound">GetAmountHisto1D</ref>(*histo);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>understand<sp/>argument<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>args<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-E0&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d75/structScaleE0" kindref="compound">ScaleE0</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;E0&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-E1&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/d21/structScaleE1" kindref="compound">ScaleE1</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;E1&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-E2&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d2/d22/structScaleE2" kindref="compound">ScaleE2</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;E2&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-E3&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="de/dd3/structScaleE3" kindref="compound">ScaleE3</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;E3&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-E1overE2&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/d7c/structScaleE1overE2" kindref="compound">ScaleE1overE2</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;E1overE2&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-Eaccordion&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/><sp/><sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/da4/structScaleEaccordion" kindref="compound">ScaleEaccordion</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Eaccordion&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;bias-Ecalorimeter&quot;</highlight><highlight class="normal"><sp/>==<sp/>type)<sp/>{<sp/>modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d49/structScaleEcalorimeter" kindref="compound">ScaleEcalorimeter</ref>(InputModifier::ZEROBASED);<sp/>type_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Ecalorimeter&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>type_name.empty()<sp/>and<sp/>not<sp/>amount_name.empty())<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>amount_name;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.empty())<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>need<sp/>to<sp/>specify<sp/>a<sp/>name<sp/>for<sp/>the<sp/>bias<sp/>with<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modifier<sp/>and<sp/>amount_getter)<sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>tool-&gt;<ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(modifier,<sp/>amount_getter);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>tool-&gt;<ref refid="d1/dba/classegammaLayerRecalibTool_1a3cd78e0e718da212667e0dc0126e5314" kindref="member">add_scale</ref>(type);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//release<sp/>resources,<sp/>if<sp/>modifier<sp/>false<sp/>need<sp/>to<sp/>release<sp/>amount_getter<sp/>and<sp/>vice<sp/>versa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//since<sp/>they<sp/>are<sp/>not<sp/>passed<sp/>to<sp/>the<sp/>tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modifier)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>modifier;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(amount_getter)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><sp/>amount_getter;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>egammaLayerRecalibTool*&gt;(name,<sp/>tool);</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/egammaLayerRecalibTool/Root/egammaLayerRecalibTool.cxx"/>
  </compounddef>
</doxygen>
