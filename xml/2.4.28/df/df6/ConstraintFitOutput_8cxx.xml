<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/df6/ConstraintFitOutput_8cxx" kind="file">
    <compoundname>ConstraintFitOutput.cxx</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>A<sp/>C++<sp/>implementation<sp/>of<sp/>Mass<sp/>constraint<sp/>fitting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>23/09/2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>K.<sp/>Nikolopoulos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;ZMassConstraint/ConstraintFitOutput.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>ZMassConstraint::ConstraintFitOutput::setFitOutput(const<sp/>std::vector&lt;TLorentzVector&gt;&amp;<sp/>particleList,<sp/>const<sp/>Amg::MatrixX&amp;<sp/>covariance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_particleList<sp/>=<sp/>particleList;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_covariance<sp/><sp/><sp/>=<sp/>covariance;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>covariancePxPyPzToPhiThetaP();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ZMassConstraint::ConstraintFitOutput::getCompositeFourVector(TLorentzVector&amp;<sp/>lv)<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>lv<sp/>=<sp/>TLorentzVector();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for(<sp/>auto<sp/>lv1<sp/>:<sp/>m_particleList<sp/>)<sp/>lv<sp/>+=<sp/>lv1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>ZMassConstraint::ConstraintFitOutput::covariancePxPyPzToPhiThetaP()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Amg::MatrixX<sp/>Jacobian(5*m_particleList.size(),5*m_particleList.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Jacobian.setZero();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>///<sp/>build<sp/>the<sp/>Jacobian<sp/>of<sp/>the<sp/>phi,theta,P<sp/>--&gt;<sp/>px,py,pz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for(unsigned<sp/>int<sp/>ii=0;ii&lt;m_particleList.size();ii++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>phi<sp/><sp/><sp/>=<sp/>m_particleList.at(ii).Phi();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>theta<sp/>=<sp/>m_particleList.at(ii).Theta();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>P<sp/><sp/><sp/><sp/><sp/>=<sp/>m_particleList.at(ii).P();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(<sp/><sp/><sp/><sp/>5*ii,<sp/><sp/><sp/><sp/><sp/>5*ii)<sp/>=<sp/>1.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(1<sp/>+<sp/>5*ii,<sp/>1<sp/>+<sp/>5*ii)<sp/>=<sp/>1.;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(2<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(2<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>4<sp/>+<sp/>5*ii)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>4<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Cos(theta);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Amg::MatrixX<sp/>Jacobianinverse(5*m_particleList.size(),5*m_particleList.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//bool<sp/>invertible;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//Jacobian.computeInverseWithCheck(Jacobianinverse,invertible);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//if(!invertible)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;matrix<sp/>inversion<sp/>failed<sp/>&quot;<sp/>&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Jacobianinverse=Jacobian.inverse();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_covariancePhiThetaP<sp/>=<sp/>Jacobianinverse.transpose()<sp/>*<sp/>m_covariance<sp/>*<sp/>Jacobianinverse;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;ZMassConstraint::ConstraintFitOutput::covariancePxPyPzToPhiThetaP\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_covariance<sp/>&lt;&lt;<sp/>&quot;\n&quot;<sp/>&lt;&lt;<sp/>m_covariancePhiThetaP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ZMassConstraint/Root/ConstraintFitOutput.cxx"/>
  </compounddef>
</doxygen>
