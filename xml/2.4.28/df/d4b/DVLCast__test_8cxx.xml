<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/d4b/DVLCast__test_8cxx" kind="file">
    <compoundname>DVLCast_test.cxx</compoundname>
    <includes refid="df/d5c/DVLCast_8h" local="yes">AthContainers/tools/DVLCast.h</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="73723">
        <label>limits</label>
      </node>
      <node id="73722">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="73723" relation="include">
        </childnode>
        <childnode refid="73724" relation="include">
        </childnode>
        <childnode refid="73725" relation="include">
        </childnode>
        <childnode refid="73726" relation="include">
        </childnode>
        <childnode refid="73727" relation="include">
        </childnode>
      </node>
      <node id="73728">
        <label>cassert</label>
      </node>
      <node id="73724">
        <label>limits.h</label>
      </node>
      <node id="73725">
        <label>typeinfo</label>
      </node>
      <node id="73721">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx</label>
        <link refid="DVLCast_test.cxx"/>
        <childnode refid="73722" relation="include">
        </childnode>
        <childnode refid="73728" relation="include">
        </childnode>
      </node>
      <node id="73726">
        <label>cstdlib</label>
      </node>
      <node id="73727">
        <label>cstddef</label>
      </node>
    </incdepgraph>
    <innerclass refid="d2/d45/structX1" prot="public">X1</innerclass>
    <innerclass refid="db/d34/structX2" prot="public">X2</innerclass>
    <innerclass refid="d4/d92/structX3" prot="public">X3</innerclass>
    <innerclass refid="d0/dd7/structY1" prot="public">Y1</innerclass>
    <innerclass refid="d5/d2b/structY2" prot="public">Y2</innerclass>
    <innerclass refid="d1/d6b/structY3" prot="public">Y3</innerclass>
    <innerclass refid="d7/d07/structTest1" prot="public">Test1</innerclass>
    <innerclass refid="d7/d38/structTest2" prot="public">Test2</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d4b/DVLCast__test_8cxx_1a1dc6743d2dfcc176e64f04da89f6f7c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tester</definition>
        <argsstring>()</argsstring>
        <name>tester</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx" bodystart="75" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="df/d4b/DVLCast__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx" bodystart="97" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for DVLCast. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2010 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>DVLCast_test.cxx<sp/>470529<sp/>2011-11-24<sp/>23:54:22Z<sp/>ssnyder<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d5c/DVLCast_8h" kindref="compound" tooltip="casting operations for DataVector/DataList. ">AthContainers/tools/DVLCast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d45/structX1" kindref="compound">X1</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/>x<sp/>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="db/d34/structX2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d34/structX2" kindref="compound">X2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_y)<sp/>:<sp/><ref refid="d2/d45/structX1" kindref="compound">X1</ref>(the_y+1),<sp/>y(the_y)<sp/>{}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="d4/d92/structX3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d92/structX3" kindref="compound">X3</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><ref refid="d4/d92/structX3" kindref="compound">X3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_z)<sp/>:<sp/><ref refid="db/d34/structX2" kindref="compound">X2</ref>(the_z+1),<sp/>z(the_z)<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="d0/dd7/structY1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/dd7/structY1" kindref="compound">Y1</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="d0/dd7/structY1" kindref="compound">Y1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/>x<sp/>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d5/d2b/structY2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/d2b/structY2" kindref="compound">Y2</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d0/dd7/structY1" kindref="compound">Y1</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="d5/d2b/structY2" kindref="compound">Y2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_y)<sp/>:<sp/><ref refid="d0/dd7/structY1" kindref="compound">Y1</ref>(the_y+1),<sp/>y(the_y)<sp/>{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="d1/d6b/structY3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d6b/structY3" kindref="compound">Y3</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d5/d2b/structY2" kindref="compound">Y2</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="d1/d6b/structY3" kindref="compound">Y3</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_z)<sp/>:<sp/><ref refid="d0/dd7/structY1" kindref="compound">Y1</ref>(the_z+2),<sp/><ref refid="d5/d2b/structY2" kindref="compound">Y2</ref>(the_z+1),<sp/>z(the_z)<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="d7/d07/structTest1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d07/structTest1" kindref="compound">Test1</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>typedef<sp/>::X1<sp/><ref refid="d2/d45/structX1" kindref="compound">B</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>typedef<sp/>::X2<sp/><ref refid="db/d34/structX2" kindref="compound">D</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>typedef<sp/>::X3<sp/><ref refid="d4/d92/structX3" kindref="compound">DD</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/d34/structX2" kindref="compound">D</ref><sp/><ref refid="db/d34/structX2" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="d7/d38/structTest2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d38/structTest2" kindref="compound">Test2</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>typedef<sp/>::Y1<sp/><ref refid="d0/dd7/structY1" kindref="compound">B</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>typedef<sp/>::Y2<sp/><ref refid="d5/d2b/structY2" kindref="compound">D</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>typedef<sp/>::Y3<sp/><ref refid="d1/d6b/structY3" kindref="compound">DD</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d5/d2b/structY2" kindref="compound">D</ref><sp/><ref refid="d5/d2b/structY2" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester</ref>()</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::B<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::D<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::DD<sp/>DD;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="de/d59/structDataModel__detail_1_1DVLCast" kindref="compound" tooltip="casting operations for DataVector/DataList. ">DataModel_detail::DVLCast&lt;T&gt;</ref><sp/>Cast;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>D*<sp/>d<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>D<sp/>(1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>DD*<sp/>dd<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DD<sp/>(2);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>B*<sp/>b<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert<sp/>(Cast::cast<sp/>(b)<sp/>==<sp/>d);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>B*<sp/>cb<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>assert<sp/>(Cast::cast<sp/>(cb)<sp/>==<sp/>d);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>dd;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>D*<sp/>dd2<sp/>=<sp/>dd;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>assert<sp/>(Cast::cast<sp/>(b)<sp/>==<sp/>dd2);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>cb<sp/>=<sp/>dd;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>assert<sp/>(Cast::cast<sp/>(cb)<sp/>==<sp/>dd2);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/structtester" kindref="compound">tester&lt;Test1&gt;</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLCast_test.cxx"/>
  </compounddef>
</doxygen>
