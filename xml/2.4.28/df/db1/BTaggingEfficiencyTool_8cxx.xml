<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/db1/BTaggingEfficiencyTool_8cxx" kind="file">
    <compoundname>BTaggingEfficiencyTool.cxx</compoundname>
    <includes refid="d9/d1b/BTaggingEfficiencyTool_8h" local="yes">xAODBTaggingEfficiency/BTaggingEfficiencyTool.h</includes>
    <includes refid="d2/d81/BTagging_8h" local="yes">xAODBTagging/BTagging.h</includes>
    <includes refid="d8/d17/CalibrationDataInterfaceROOT_8h" local="yes">CalibrationDataInterface/CalibrationDataInterfaceROOT.h</includes>
    <includes refid="d6/d96/CalibrationDataVariables_8h" local="yes">CalibrationDataInterface/CalibrationDataVariables.h</includes>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="yes">CalibrationDataInterface/CalibrationDataContainer.h</includes>
    <includes refid="de/d22/SystematicRegistry_8h" local="yes">PATInterfaces/SystematicRegistry.h</includes>
    <includes refid="d3/d32/PathResolver_8h" local="yes">PathResolver/PathResolver.h</includes>
    <includes local="yes">TSpline.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="351755">
        <label>list</label>
      </node>
      <node id="351764">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="351749" relation="include">
        </childnode>
        <childnode refid="351756" relation="include">
        </childnode>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351745" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
      </node>
      <node id="351749">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="351723">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="351837">
        <label>TMap.h</label>
      </node>
      <node id="351651">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODBTaggingEfficiency/Root/BTaggingEfficiencyTool.cxx</label>
        <link refid="BTaggingEfficiencyTool.cxx"/>
        <childnode refid="351652" relation="include">
        </childnode>
        <childnode refid="351780" relation="include">
        </childnode>
        <childnode refid="351825" relation="include">
        </childnode>
        <childnode refid="351826" relation="include">
        </childnode>
        <childnode refid="351836" relation="include">
        </childnode>
        <childnode refid="351839" relation="include">
        </childnode>
        <childnode refid="351840" relation="include">
        </childnode>
        <childnode refid="351847" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
      </node>
      <node id="351829">
        <label>TMatrixDSym.h</label>
      </node>
      <node id="351771">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="351772" relation="include">
        </childnode>
        <childnode refid="351750" relation="include">
        </childnode>
        <childnode refid="351694" relation="include">
        </childnode>
        <childnode refid="351773" relation="include">
        </childnode>
      </node>
      <node id="351725">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="351686" relation="include">
        </childnode>
        <childnode refid="351688" relation="include">
        </childnode>
        <childnode refid="351694" relation="include">
        </childnode>
        <childnode refid="351665" relation="include">
        </childnode>
      </node>
      <node id="351654">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351657" relation="include">
        </childnode>
        <childnode refid="351658" relation="include">
        </childnode>
      </node>
      <node id="351726">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="351696">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="351682" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351697" relation="include">
        </childnode>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351838">
        <label>THashList.h</label>
      </node>
      <node id="351788">
        <label>EventPrimitives/EventPrimitives.h</label>
        <link refid="d1/d54/EventPrimitives_8h_source"/>
        <childnode refid="351789" relation="include">
        </childnode>
        <childnode refid="351790" relation="include">
        </childnode>
        <childnode refid="351791" relation="include">
        </childnode>
      </node>
      <node id="351693">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="351665">
        <label>functional</label>
      </node>
      <node id="351835">
        <label>PATInterfaces/ISystematicsTool.h</label>
        <link refid="d6/db3/ISystematicsTool_8h_source"/>
        <childnode refid="351654" relation="include">
        </childnode>
        <childnode refid="351660" relation="include">
        </childnode>
        <childnode refid="351666" relation="include">
        </childnode>
        <childnode refid="351661" relation="include">
        </childnode>
      </node>
      <node id="351746">
        <label>boost/version.hpp</label>
      </node>
      <node id="351692">
        <label>limits</label>
      </node>
      <node id="351697">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="351819">
        <label>xAODBTagging/versions/BTaggingContainer_v1.h</label>
        <link refid="d9/d93/BTaggingContainer__v1_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351781" relation="include">
        </childnode>
      </node>
      <node id="351721">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="351658">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="351689">
        <label>iterator</label>
      </node>
      <node id="351826">
        <label>CalibrationDataInterface/CalibrationDataVariables.h</label>
        <link refid="d6/d96/CalibrationDataVariables_8h_source"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351688" relation="include">
        </childnode>
      </node>
      <node id="351709">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351710" relation="include">
        </childnode>
      </node>
      <node id="351668">
        <label>xAODJet/Jet.h</label>
        <link refid="da/db7/Jet_8h_source"/>
        <childnode refid="351669" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351817">
        <label>xAODBTagging/versions/BTagVertex_v1.h</label>
        <link refid="d6/df4/BTagVertex__v1_8h_source"/>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351739" relation="include">
        </childnode>
        <childnode refid="351783" relation="include">
        </childnode>
        <childnode refid="351801" relation="include">
        </childnode>
        <childnode refid="351800" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351770">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="351776">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="351777" relation="include">
        </childnode>
        <childnode refid="351744" relation="include">
        </childnode>
        <childnode refid="351692" relation="include">
        </childnode>
        <childnode refid="351665" relation="include">
        </childnode>
        <childnode refid="351778" relation="include">
        </childnode>
      </node>
      <node id="351733">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="351683" relation="include">
        </childnode>
        <childnode refid="351734" relation="include">
        </childnode>
        <childnode refid="351735" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
      </node>
      <node id="351706">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
      </node>
      <node id="351672">
        <label>stdint.h</label>
      </node>
      <node id="351756">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="351692" relation="include">
        </childnode>
        <childnode refid="351757" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
      </node>
      <node id="351742">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="351703">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
      </node>
      <node id="351804">
        <label>Eigen/Geometry</label>
      </node>
      <node id="351675">
        <label>RVersion.h</label>
      </node>
      <node id="351685">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="351686" relation="include">
        </childnode>
        <childnode refid="351694" relation="include">
        </childnode>
        <childnode refid="351665" relation="include">
        </childnode>
      </node>
      <node id="351846">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="351691">
        <label>cmath</label>
      </node>
      <node id="351737">
        <label>cassert</label>
      </node>
      <node id="351747">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="351766">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="351735">
        <label>stdexcept</label>
      </node>
      <node id="351832">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351833" relation="include">
        </childnode>
      </node>
      <node id="351724">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="351790">
        <label>Eigen/Core</label>
      </node>
      <node id="351753">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="351792">
        <label>xAODTracking/VertexContainerFwd.h</label>
        <link refid="d0/dc4/VertexContainerFwd_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351793" relation="include">
        </childnode>
      </node>
      <node id="351798">
        <label>xAODTracking/TrackParticleContainerFwd.h</label>
        <link refid="de/dea/TrackParticleContainerFwd_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351739" relation="include">
        </childnode>
        <childnode refid="351799" relation="include">
        </childnode>
      </node>
      <node id="351761">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="351679">
        <label>TLorentzVector.h</label>
      </node>
      <node id="351825">
        <label>CalibrationDataInterface/CalibrationDataInterfaceROOT.h</label>
        <link refid="d8/d17/CalibrationDataInterfaceROOT_8h_source"/>
        <childnode refid="351826" relation="include">
        </childnode>
        <childnode refid="351827" relation="include">
        </childnode>
        <childnode refid="351829" relation="include">
        </childnode>
        <childnode refid="351830" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
      </node>
      <node id="351656">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="351655">
        <label>string</label>
      </node>
      <node id="351727">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="351683" relation="include">
        </childnode>
        <childnode refid="351682" relation="include">
        </childnode>
        <childnode refid="351709" relation="include">
        </childnode>
        <childnode refid="351706" relation="include">
        </childnode>
        <childnode refid="351698" relation="include">
        </childnode>
        <childnode refid="351728" relation="include">
        </childnode>
        <childnode refid="351729" relation="include">
        </childnode>
        <childnode refid="351712" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351688" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
        <childnode refid="351730" relation="include">
        </childnode>
        <childnode refid="351731" relation="include">
        </childnode>
        <childnode refid="351719" relation="include">
        </childnode>
        <childnode refid="351732" relation="include">
        </childnode>
      </node>
      <node id="351652">
        <label>xAODBTaggingEfficiency/BTaggingEfficiencyTool.h</label>
        <link refid="d9/d1b/BTaggingEfficiencyTool_8h_source"/>
        <childnode refid="351653" relation="include">
        </childnode>
        <childnode refid="351780" relation="include">
        </childnode>
        <childnode refid="351831" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351663" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351826" relation="include">
        </childnode>
        <childnode refid="351825" relation="include">
        </childnode>
        <childnode refid="351835" relation="include">
        </childnode>
      </node>
      <node id="351701">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
      </node>
      <node id="351785">
        <label>versions/TrackParticle_v1.h</label>
        <link refid="d2/d7f/TrackParticle__v1_8h_source"/>
        <childnode refid="351786" relation="include">
        </childnode>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351787" relation="include">
        </childnode>
        <childnode refid="351792" relation="include">
        </childnode>
        <childnode refid="351794" relation="include">
        </childnode>
        <childnode refid="351795" relation="include">
        </childnode>
      </node>
      <node id="351730">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="351781">
        <label>xAODBTagging/versions/BTagging_v1.h</label>
        <link refid="dc/da1/BTagging__v1_8h_source"/>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351782" relation="include">
        </childnode>
        <childnode refid="351783" relation="include">
        </childnode>
        <childnode refid="351800" relation="include">
        </childnode>
        <childnode refid="351815" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351768" relation="include">
        </childnode>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351669">
        <label>xAODJet/versions/Jet_v1.h</label>
        <link refid="df/d71/Jet__v1_8h_source"/>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351739" relation="include">
        </childnode>
        <childnode refid="351779" relation="include">
        </childnode>
        <childnode refid="351820" relation="include">
        </childnode>
        <childnode refid="351823" relation="include">
        </childnode>
        <childnode refid="351821" relation="include">
        </childnode>
        <childnode refid="351824" relation="include">
        </childnode>
      </node>
      <node id="351758">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="351741" relation="include">
        </childnode>
        <childnode refid="351756" relation="include">
        </childnode>
        <childnode refid="351759" relation="include">
        </childnode>
        <childnode refid="351761" relation="include">
        </childnode>
        <childnode refid="351746" relation="include">
        </childnode>
        <childnode refid="351689" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
      </node>
      <node id="351772">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="351670">
        <label>map</label>
      </node>
      <node id="351773">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="351774" relation="include">
        </childnode>
      </node>
      <node id="351774">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="351676">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="351716">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="351805">
        <label>VxVertex/VxTrackAtVertex.h</label>
      </node>
      <node id="351763">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="351758" relation="include">
        </childnode>
        <childnode refid="351689" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
        <childnode refid="351764" relation="include">
        </childnode>
      </node>
      <node id="351731">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="351822">
        <label>Math/Vector4D.h</label>
      </node>
      <node id="351713">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="351800">
        <label>xAODTracking/VertexContainer.h</label>
        <link refid="d6/dd8/VertexContainer_8h_source"/>
        <childnode refid="351801" relation="include">
        </childnode>
        <childnode refid="351814" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351759">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="351741" relation="include">
        </childnode>
        <childnode refid="351674" relation="include">
        </childnode>
        <childnode refid="351694" relation="include">
        </childnode>
        <childnode refid="351760" relation="include">
        </childnode>
      </node>
      <node id="351833">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="351681">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="351653">
        <label>xAODBTaggingEfficiency/IBTaggingEfficiencyTool.h</label>
        <link refid="dc/dd3/IBTaggingEfficiencyTool_8h_source"/>
        <childnode refid="351654" relation="include">
        </childnode>
        <childnode refid="351659" relation="include">
        </childnode>
        <childnode refid="351660" relation="include">
        </childnode>
        <childnode refid="351661" relation="include">
        </childnode>
        <childnode refid="351668" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351663" relation="include">
        </childnode>
        <childnode refid="351825" relation="include">
        </childnode>
      </node>
      <node id="351674">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="351675" relation="include">
        </childnode>
        <childnode refid="351676" relation="include">
        </childnode>
      </node>
      <node id="351729">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="351722">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="351799">
        <label>xAODTracking/TrackParticleFwd.h</label>
        <link refid="d1/dc4/TrackParticleFwd_8h_source"/>
      </node>
      <node id="351782">
        <label>xAODBTagging/BTaggingEnums.h</label>
        <link refid="dd/de5/BTaggingEnums_8h_source"/>
      </node>
      <node id="351757">
        <label>limits.h</label>
      </node>
      <node id="351751">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="351752" relation="include">
        </childnode>
      </node>
      <node id="351814">
        <label>xAODTracking/versions/VertexContainer_v1.h</label>
        <link refid="d2/dda/VertexContainer__v1_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351802" relation="include">
        </childnode>
      </node>
      <node id="351830">
        <label>TH1.h</label>
      </node>
      <node id="351708">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="351709" relation="include">
        </childnode>
        <childnode refid="351692" relation="include">
        </childnode>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351711" relation="include">
        </childnode>
      </node>
      <node id="351661">
        <label>PATInterfaces/SystematicSet.h</label>
        <link refid="d4/db8/SystematicSet_8h_source"/>
        <childnode refid="351662" relation="include">
        </childnode>
        <childnode refid="351663" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351665" relation="include">
        </childnode>
        <childnode refid="351660" relation="include">
        </childnode>
        <childnode refid="351666" relation="include">
        </childnode>
      </node>
      <node id="351683">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351685" relation="include">
        </childnode>
      </node>
      <node id="351673">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
      </node>
      <node id="351791">
        <label>Eigen/Dense</label>
      </node>
      <node id="351666">
        <label>PATInterfaces/SystematicVariation.h</label>
        <link refid="d1/def/SystematicVariation_8h_source"/>
        <childnode refid="351662" relation="include">
        </childnode>
        <childnode refid="351667" relation="include">
        </childnode>
        <childnode refid="351663" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
      </node>
      <node id="351686">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="351687" relation="include">
        </childnode>
        <childnode refid="351688" relation="include">
        </childnode>
        <childnode refid="351689" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
        <childnode refid="351691" relation="include">
        </childnode>
        <childnode refid="351692" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351693" relation="include">
        </childnode>
      </node>
      <node id="351744">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="351737" relation="include">
        </childnode>
      </node>
      <node id="351678">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="351679" relation="include">
        </childnode>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351738" relation="include">
        </childnode>
        <childnode refid="351697" relation="include">
        </childnode>
      </node>
      <node id="351738">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="351667" relation="include">
        </childnode>
      </node>
      <node id="351823">
        <label>xAODJet/JetAttributes.h</label>
        <link refid="d3/df8/JetAttributes_8h"/>
      </node>
      <node id="351659">
        <label>PATInterfaces/CorrectionCode.h</label>
        <link refid="d8/dab/CorrectionCode_8h_source"/>
      </node>
      <node id="351760">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="351756" relation="include">
        </childnode>
        <childnode refid="351744" relation="include">
        </childnode>
      </node>
      <node id="351702">
        <label>typeinfo</label>
      </node>
      <node id="351787">
        <label>xAODTracking/TrackingPrimitives.h</label>
        <link refid="d2/d4c/TrackingPrimitives_8h_source"/>
        <childnode refid="351788" relation="include">
        </childnode>
      </node>
      <node id="351736">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="351730" relation="include">
        </childnode>
        <childnode refid="351737" relation="include">
        </childnode>
      </node>
      <node id="351740">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="351733" relation="include">
        </childnode>
        <childnode refid="351741" relation="include">
        </childnode>
        <childnode refid="351742" relation="include">
        </childnode>
        <childnode refid="351743" relation="include">
        </childnode>
        <childnode refid="351749" relation="include">
        </childnode>
        <childnode refid="351750" relation="include">
        </childnode>
        <childnode refid="351756" relation="include">
        </childnode>
        <childnode refid="351758" relation="include">
        </childnode>
        <childnode refid="351762" relation="include">
        </childnode>
        <childnode refid="351763" relation="include">
        </childnode>
        <childnode refid="351759" relation="include">
        </childnode>
        <childnode refid="351765" relation="include">
        </childnode>
        <childnode refid="351674" relation="include">
        </childnode>
        <childnode refid="351766" relation="include">
        </childnode>
        <childnode refid="351767" relation="include">
        </childnode>
        <childnode refid="351761" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351665" relation="include">
        </childnode>
        <childnode refid="351768" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
        <childnode refid="351735" relation="include">
        </childnode>
        <childnode refid="351689" relation="include">
        </childnode>
        <childnode refid="351697" relation="include">
        </childnode>
        <childnode refid="351769" relation="include">
        </childnode>
        <childnode refid="351771" relation="include">
        </childnode>
        <childnode refid="351775" relation="include">
        </childnode>
        <childnode refid="351776" relation="include">
        </childnode>
      </node>
      <node id="351662">
        <label>PATInterfaces/Global.h</label>
        <link refid="dd/d0c/PATInterfaces_2PATInterfaces_2Global_8h_source"/>
      </node>
      <node id="351807">
        <label>xAODTracking/NeutralParticle.h</label>
        <link refid="d4/daa/NeutralParticle_8h_source"/>
        <childnode refid="351808" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351786">
        <label>bitset</label>
      </node>
      <node id="351711">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="351677">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="351728">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="351845">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351832" relation="include">
        </childnode>
        <childnode refid="351846" relation="include">
        </childnode>
      </node>
      <node id="351699">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
      </node>
      <node id="351802">
        <label>xAODTracking/versions/Vertex_v1.h</label>
        <link refid="d7/dcc/Vertex__v1_8h_source"/>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351788" relation="include">
        </childnode>
        <childnode refid="351803" relation="include">
        </childnode>
        <childnode refid="351805" relation="include">
        </childnode>
        <childnode refid="351787" relation="include">
        </childnode>
        <childnode refid="351798" relation="include">
        </childnode>
        <childnode refid="351806" relation="include">
        </childnode>
        <childnode refid="351738" relation="include">
        </childnode>
        <childnode refid="351813" relation="include">
        </childnode>
      </node>
      <node id="351710">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="351715">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="351750">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="351751" relation="include">
        </childnode>
        <childnode refid="351743" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351693" relation="include">
        </childnode>
        <childnode refid="351753" relation="include">
        </childnode>
        <childnode refid="351714" relation="include">
        </childnode>
        <childnode refid="351754" relation="include">
        </childnode>
      </node>
      <node id="351695">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="351789">
        <label>unistd.h</label>
      </node>
      <node id="351769">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="351770" relation="include">
        </childnode>
      </node>
      <node id="351700">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="351683" relation="include">
        </childnode>
        <childnode refid="351701" relation="include">
        </childnode>
        <childnode refid="351703" relation="include">
        </childnode>
        <childnode refid="351704" relation="include">
        </childnode>
        <childnode refid="351717" relation="include">
        </childnode>
        <childnode refid="351719" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351725" relation="include">
        </childnode>
        <childnode refid="351726" relation="include">
        </childnode>
      </node>
      <node id="351664">
        <label>vector</label>
      </node>
      <node id="351739">
        <label>xAODBase/IParticleContainer.h</label>
        <link refid="dd/d2d/IParticleContainer_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351777">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="351687" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
      </node>
      <node id="351839">
        <label>PATInterfaces/SystematicRegistry.h</label>
        <link refid="de/d22/SystematicRegistry_8h_source"/>
        <childnode refid="351662" relation="include">
        </childnode>
        <childnode refid="351661" relation="include">
        </childnode>
      </node>
      <node id="351801">
        <label>xAODTracking/Vertex.h</label>
        <link refid="d9/d2d/Vertex_8h_source"/>
        <childnode refid="351802" relation="include">
        </childnode>
      </node>
      <node id="351810">
        <label>xAODTracking/versions/NeutralParticleContainer_v1.h</label>
        <link refid="d6/d5f/NeutralParticleContainer__v1_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351808" relation="include">
        </childnode>
        <childnode refid="351811" relation="include">
        </childnode>
      </node>
      <node id="351824">
        <label>xAODJet/JetContainerInfo.h</label>
        <link refid="d8/d2a/JetContainerInfo_8h_source"/>
        <childnode refid="351655" relation="include">
        </childnode>
      </node>
      <node id="351778">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="351779">
        <label>xAODBTagging/BTaggingContainer.h</label>
        <link refid="d8/d3b/BTaggingContainer_8h_source"/>
        <childnode refid="351780" relation="include">
        </childnode>
        <childnode refid="351819" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351688">
        <label>utility</label>
      </node>
      <node id="351775">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="351712">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="351843">
        <label>sstream</label>
      </node>
      <node id="351803">
        <label>GeoPrimitives/GeoPrimitives.h</label>
        <link refid="d7/d87/GeoPrimitives_8h_source"/>
        <childnode refid="351789" relation="include">
        </childnode>
        <childnode refid="351804" relation="include">
        </childnode>
      </node>
      <node id="351793">
        <label>xAODTracking/VertexFwd.h</label>
        <link refid="d9/ddd/VertexFwd_8h_source"/>
      </node>
      <node id="351748">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="351720">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="351816">
        <label>xAODBTagging/BTagVertex.h</label>
        <link refid="d4/d51/BTagVertex_8h_source"/>
        <childnode refid="351817" relation="include">
        </childnode>
      </node>
      <node id="351705">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="351719">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="351720" relation="include">
        </childnode>
        <childnode refid="351721" relation="include">
        </childnode>
        <childnode refid="351722" relation="include">
        </childnode>
        <childnode refid="351723" relation="include">
        </childnode>
        <childnode refid="351724" relation="include">
        </childnode>
      </node>
      <node id="351836">
        <label>CalibrationDataInterface/CalibrationDataContainer.h</label>
        <link refid="d2/d74/CalibrationDataContainer_8h_source"/>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351837" relation="include">
        </childnode>
        <childnode refid="351838" relation="include">
        </childnode>
        <childnode refid="351826" relation="include">
        </childnode>
      </node>
      <node id="351667">
        <label>iosfwd</label>
      </node>
      <node id="351690">
        <label>cstdlib</label>
      </node>
      <node id="351847">
        <label>TSpline.h</label>
      </node>
      <node id="351784">
        <label>xAODTracking/TrackParticle.h</label>
        <link refid="d2/d15/TrackParticle_8h_source"/>
        <childnode refid="351785" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351768">
        <label>iostream</label>
      </node>
      <node id="351734">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="351797">
        <label>xAODTracking/versions/TrackParticleContainer_v1.h</label>
        <link refid="d7/d3b/TrackParticleContainer__v1_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351785" relation="include">
        </childnode>
        <childnode refid="351798" relation="include">
        </childnode>
      </node>
      <node id="351682">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="351683" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351684">
        <label>cstddef</label>
      </node>
      <node id="351844">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="351842">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351843" relation="include">
        </childnode>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351832" relation="include">
        </childnode>
        <childnode refid="351654" relation="include">
        </childnode>
        <childnode refid="351844" relation="include">
        </childnode>
      </node>
      <node id="351828">
        <label>TNamed.h</label>
      </node>
      <node id="351732">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="351700" relation="include">
        </childnode>
        <childnode refid="351696" relation="include">
        </childnode>
        <childnode refid="351682" relation="include">
        </childnode>
        <childnode refid="351730" relation="include">
        </childnode>
        <childnode refid="351731" relation="include">
        </childnode>
      </node>
      <node id="351657">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="351813">
        <label>xAODCore/BaseInfo.h</label>
        <link refid="d3/d17/BaseInfo_8h_source"/>
        <childnode refid="351697" relation="include">
        </childnode>
      </node>
      <node id="351780">
        <label>xAODBTagging/BTagging.h</label>
        <link refid="d2/d81/BTagging_8h_source"/>
        <childnode refid="351781" relation="include">
        </childnode>
      </node>
      <node id="351821">
        <label>xAODJet/JetTypes.h</label>
        <link refid="d6/d2a/JetTypes_8h_source"/>
        <childnode refid="351822" relation="include">
        </childnode>
      </node>
      <node id="351820">
        <label>xAODJet/JetConstituentVector.h</label>
        <link refid="de/dd4/JetConstituentVector_8h_source"/>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351739" relation="include">
        </childnode>
        <childnode refid="351821" relation="include">
        </childnode>
      </node>
      <node id="351809">
        <label>TrkNeutralParameters/NeutralParameters.h</label>
      </node>
      <node id="351754">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="351741" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351755" relation="include">
        </childnode>
        <childnode refid="351737" relation="include">
        </childnode>
        <childnode refid="351690" relation="include">
        </childnode>
        <childnode refid="351697" relation="include">
        </childnode>
      </node>
      <node id="351704">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="351701" relation="include">
        </childnode>
        <childnode refid="351705" relation="include">
        </childnode>
        <childnode refid="351706" relation="include">
        </childnode>
        <childnode refid="351707" relation="include">
        </childnode>
        <childnode refid="351712" relation="include">
        </childnode>
        <childnode refid="351702" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351714" relation="include">
        </childnode>
        <childnode refid="351715" relation="include">
        </childnode>
        <childnode refid="351716" relation="include">
        </childnode>
      </node>
      <node id="351794">
        <label>TrkParameters/TrackParameters.h</label>
      </node>
      <node id="351840">
        <label>PathResolver/PathResolver.h</label>
        <link refid="d3/d32/PathResolver_8h_source"/>
        <childnode refid="351841" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
      </node>
      <node id="351808">
        <label>versions/NeutralParticle_v1.h</label>
        <link refid="da/d85/NeutralParticle__v1_8h_source"/>
        <childnode refid="351671" relation="include">
        </childnode>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351678" relation="include">
        </childnode>
        <childnode refid="351787" relation="include">
        </childnode>
        <childnode refid="351792" relation="include">
        </childnode>
        <childnode refid="351786" relation="include">
        </childnode>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351809" relation="include">
        </childnode>
      </node>
      <node id="351841">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351842" relation="include">
        </childnode>
        <childnode refid="351845" relation="include">
        </childnode>
      </node>
      <node id="351812">
        <label>xAODTracking/NeutralParticleFwd.h</label>
        <link refid="d4/d90/NeutralParticleFwd_8h_source"/>
      </node>
      <node id="351714">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="351806">
        <label>xAODTracking/NeutralParticleContainer.h</label>
        <link refid="da/d7f/NeutralParticleContainer_8h_source"/>
        <childnode refid="351807" relation="include">
        </childnode>
        <childnode refid="351810" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351743">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="351727" relation="include">
        </childnode>
        <childnode refid="351741" relation="include">
        </childnode>
        <childnode refid="351742" relation="include">
        </childnode>
        <childnode refid="351680" relation="include">
        </childnode>
        <childnode refid="351700" relation="include">
        </childnode>
        <childnode refid="351733" relation="include">
        </childnode>
        <childnode refid="351744" relation="include">
        </childnode>
        <childnode refid="351696" relation="include">
        </childnode>
        <childnode refid="351745" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351748" relation="include">
        </childnode>
      </node>
      <node id="351663">
        <label>set</label>
      </node>
      <node id="351796">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="351695" relation="include">
        </childnode>
      </node>
      <node id="351718">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="351827">
        <label>CalibrationDataInterface/CalibrationDataInterfaceBase.h</label>
        <link refid="d8/d11/CalibrationDataInterfaceBase_8h_source"/>
        <childnode refid="351828" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351670" relation="include">
        </childnode>
        <childnode refid="351688" relation="include">
        </childnode>
        <childnode refid="351687" relation="include">
        </childnode>
      </node>
      <node id="351707">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="351705" relation="include">
        </childnode>
        <childnode refid="351708" relation="include">
        </childnode>
        <childnode refid="351712" relation="include">
        </childnode>
        <childnode refid="351664" relation="include">
        </childnode>
        <childnode refid="351713" relation="include">
        </childnode>
      </node>
      <node id="351687">
        <label>algorithm</label>
      </node>
      <node id="351765">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="351795">
        <label>TrkTrack/TrackCollection.h</label>
      </node>
      <node id="351680">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="351681" relation="include">
        </childnode>
        <childnode refid="351682" relation="include">
        </childnode>
        <childnode refid="351696" relation="include">
        </childnode>
        <childnode refid="351698" relation="include">
        </childnode>
        <childnode refid="351700" relation="include">
        </childnode>
        <childnode refid="351727" relation="include">
        </childnode>
        <childnode refid="351706" relation="include">
        </childnode>
        <childnode refid="351733" relation="include">
        </childnode>
        <childnode refid="351730" relation="include">
        </childnode>
        <childnode refid="351684" relation="include">
        </childnode>
        <childnode refid="351736" relation="include">
        </childnode>
      </node>
      <node id="351831">
        <label>AsgTools/AsgTool.h</label>
        <link refid="d4/d29/AsgTool_8h_source"/>
        <childnode refid="351656" relation="include">
        </childnode>
        <childnode refid="351654" relation="include">
        </childnode>
        <childnode refid="351832" relation="include">
        </childnode>
        <childnode refid="351834" relation="include">
        </childnode>
      </node>
      <node id="351698">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351699" relation="include">
        </childnode>
        <childnode refid="351674" relation="include">
        </childnode>
      </node>
      <node id="351762">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="351758" relation="include">
        </childnode>
        <childnode refid="351744" relation="include">
        </childnode>
        <childnode refid="351689" relation="include">
        </childnode>
      </node>
      <node id="351741">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="351671">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="351672" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
        <childnode refid="351673" relation="include">
        </childnode>
        <childnode refid="351674" relation="include">
        </childnode>
        <childnode refid="351677" relation="include">
        </childnode>
      </node>
      <node id="351818">
        <label>xAODBTagging/versions/BTagVertexContainer_v1.h</label>
        <link refid="d1/d37/BTagVertexContainer__v1_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351817" relation="include">
        </childnode>
      </node>
      <node id="351834">
        <label>AsgTools/SetProperty.h</label>
        <link refid="df/db0/SetProperty_8h_source"/>
      </node>
      <node id="351783">
        <label>xAODTracking/TrackParticleContainer.h</label>
        <link refid="da/d31/TrackParticleContainer_8h_source"/>
        <childnode refid="351784" relation="include">
        </childnode>
        <childnode refid="351797" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
      <node id="351660">
        <label>PATInterfaces/SystematicCode.h</label>
        <link refid="df/df5/SystematicCode_8h_source"/>
      </node>
      <node id="351752">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="351767">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="351694">
        <label>memory</label>
      </node>
      <node id="351811">
        <label>xAODTracking/NeutralParticleContainerFwd.h</label>
        <link refid="d2/db4/NeutralParticleContainerFwd_8h_source"/>
        <childnode refid="351740" relation="include">
        </childnode>
        <childnode refid="351739" relation="include">
        </childnode>
        <childnode refid="351812" relation="include">
        </childnode>
      </node>
      <node id="351717">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="351703" relation="include">
        </childnode>
        <childnode refid="351704" relation="include">
        </childnode>
        <childnode refid="351718" relation="include">
        </childnode>
      </node>
      <node id="351745">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="351681" relation="include">
        </childnode>
        <childnode refid="351696" relation="include">
        </childnode>
        <childnode refid="351682" relation="include">
        </childnode>
        <childnode refid="351714" relation="include">
        </childnode>
        <childnode refid="351746" relation="include">
        </childnode>
        <childnode refid="351747" relation="include">
        </childnode>
        <childnode refid="351655" relation="include">
        </childnode>
      </node>
      <node id="351815">
        <label>xAODBTagging/BTagVertexContainer.h</label>
        <link refid="d5/da2/BTagVertexContainer_8h_source"/>
        <childnode refid="351816" relation="include">
        </childnode>
        <childnode refid="351818" relation="include">
        </childnode>
        <childnode refid="351796" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;xAODBTaggingEfficiency/BTaggingEfficiencyTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODBTagging/BTagging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataInterfaceROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataVariables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PATInterfaces/SystematicRegistry.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PathResolver/PathResolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TSpline.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CP::CorrectionCode</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">CP::SystematicSet</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">CP::SystematicVariation</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d1/d38/classCP_1_1SystematicCode" kindref="compound">CP::SystematicCode</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/d6e/classCP_1_1SystematicRegistry" kindref="compound">CP::SystematicRegistry</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::Uncertainty;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::CalibResult;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::CalibrationStatus;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::Total;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::SFEigen;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::SFNamed;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::None;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::Extrapolation;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::TauExtrapolation;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">xAOD::IParticle</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>essentially<sp/><sp/>duplicates<sp/>code<sp/>that<sp/>already<sp/>exists<sp/>in<sp/>package<sp/>ParticleJetTools<sp/>(in<sp/>JetFlavourInfo.cxx).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>duplication<sp/>isn&apos;t<sp/>desirable,<sp/>but<sp/>the<sp/>alternative<sp/>(to<sp/>use<sp/>ParticleJetTools<sp/>directly)<sp/>pulls<sp/>in<sp/>a<sp/>lot<sp/>of<sp/>dependencies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GAFinalHadronFlavourLabel<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref>&amp;<sp/>jet)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>labelB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GhostBHadronsFinal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>labelC<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GhostCHadronsFinal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>labelTau<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GhostTausFinal&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>IParticle*&gt;<sp/>ghostB;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ac5e9ae2c2cd771f728f21451fa2791ab" kindref="member">getAssociatedObjects</ref>&lt;<ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">IParticle</ref>&gt;(labelB,<sp/>ghostB)<sp/>&amp;&amp;<sp/>ghostB.size()<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>IParticle*&gt;<sp/>ghostC;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ac5e9ae2c2cd771f728f21451fa2791ab" kindref="member">getAssociatedObjects</ref>&lt;<ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">IParticle</ref>&gt;(labelC,<sp/>ghostC)<sp/>&amp;&amp;<sp/>ghostC.size()<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>IParticle*&gt;<sp/>ghostTau;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ac5e9ae2c2cd771f728f21451fa2791ab" kindref="member">getAssociatedObjects</ref>&lt;<ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">IParticle</ref>&gt;(labelTau,<sp/>ghostTau)<sp/>&amp;&amp;<sp/>ghostTau.size()<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>15;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ConeFinalPartonFlavourLabel<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref>&amp;<sp/>jet)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>label<sp/>means<sp/>&quot;invalid&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>try<sp/>the<sp/>new<sp/>naming<sp/>scheme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ae0f87e665121ac76467f96af9a48b513" kindref="member" tooltip="Retrieve attribute moment by enum.">getAttribute</ref>(</highlight><highlight class="stringliteral">&quot;ConeTruthLabelID&quot;</highlight><highlight class="normal">,label))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>that<sp/>fails,<sp/>revert<sp/>to<sp/>the<sp/>old<sp/>scheme.<sp/>In<sp/>this<sp/>case,<sp/>further<sp/>testing<sp/>is<sp/>not<sp/>very<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ae0f87e665121ac76467f96af9a48b513" kindref="member" tooltip="Retrieve attribute moment by enum.">getAttribute</ref>(</highlight><highlight class="stringliteral">&quot;TruthLabelID&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ExclusiveConeHadronFlavourLabel<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref>&amp;<sp/>jet)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>label<sp/>means<sp/>&quot;invalid&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>label<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>check<sp/>the<sp/>return<sp/>value,<sp/>as<sp/>we<sp/>would<sp/>not<sp/>be<sp/>able<sp/>to<sp/>handle<sp/>it<sp/>gracefully<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1ae0f87e665121ac76467f96af9a48b513" kindref="member" tooltip="Retrieve attribute moment by enum.">getAttribute</ref>(</highlight><highlight class="stringliteral">&quot;HadronConeExclTruthLabelID&quot;</highlight><highlight class="normal">,label);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jetFlavourLabel<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doConeLabelling,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doOldLabelling)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doConeLabelling)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(doOldLabelling)<sp/>?<sp/>ConeFinalPartonFlavourLabel(jet)<sp/>:<sp/>ExclusiveConeHadronFlavourLabel(jet);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GAFinalHadronFlavourLabel(jet);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>utility<sp/>function:<sp/>trim<sp/>leading<sp/>and<sp/>trailing<sp/>whitespace<sp/>in<sp/>the<sp/>property<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::string<sp/>trim(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>whitespace<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strBegin<sp/>=<sp/>str.find_first_not_of(whitespace);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strBegin<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strEnd<sp/>=<sp/>str.find_last_not_of(whitespace);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strRange<sp/>=<sp/>strEnd<sp/>-<sp/>strBegin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.substr(strBegin,<sp/>strRange);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a1b8b8bc455a94c530d2afa834157ffa0" kindref="member" tooltip="Create a proper constructor for Athena.">BTaggingEfficiencyTool::BTaggingEfficiencyTool</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)<sp/>:<sp/>asg::AsgTool(<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;TaggerName&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_taggerName=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tagging<sp/>algorithm<sp/>name<sp/>as<sp/>specified<sp/>in<sp/>CDI<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;OperatingPoint&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_OP=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operating<sp/>point<sp/>as<sp/>specified<sp/>in<sp/>CDI<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;JetAuthor&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_jetAuthor=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;jet<sp/>collection<sp/>&amp;<sp/>JVF/JVT<sp/>specification<sp/>in<sp/>CDI<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ScaleFactorFileName&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_SFFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>the<sp/>official<sp/>scale<sp/>factor<sp/>calibration<sp/>CDI<sp/>file<sp/>(uses<sp/>PathResolver)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;UseDevelopmentFile&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_useDevFile<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;specify<sp/>whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>the<sp/>(PathResolver)<sp/>area<sp/>for<sp/>temporary<sp/>scale<sp/>factor<sp/>calibration<sp/>CDI<sp/>files&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EfficiencyFileName&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EffFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>optional<sp/>user-provided<sp/>MC<sp/>efficiency<sp/>CDI<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ScaleFactorBCalibration&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_SFBName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>b-jet<sp/>scale<sp/>factor<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ScaleFactorCCalibration&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_SFCName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>c-jet<sp/>scale<sp/>factor<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ScaleFactorTCalibration&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_SFTName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>tau-jet<sp/>scale<sp/>factor<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ScaleFactorLightCalibration&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>m_SFLightName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>light-flavour<sp/>jet<sp/>scale<sp/>factor<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EigenvectorReductionB&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EVReductionB<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;b-jet<sp/>scale<sp/>factor<sp/>Eigenvector<sp/>reduction<sp/>strategy;<sp/>choose<sp/>between<sp/>&apos;Loose&apos;,<sp/>&apos;Medium&apos;,<sp/>&apos;Tight&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EigenvectorReductionC&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EVReductionC<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;c-jet<sp/>scale<sp/>factor<sp/>Eigenvector<sp/>reduction<sp/>strategy;<sp/>choose<sp/>between<sp/>&apos;Loose&apos;,<sp/>&apos;Medium&apos;,<sp/>&apos;Tight&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EigenvectorReductionLight&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EVReductionLight<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;light-flavour<sp/>jet<sp/>scale<sp/>factor<sp/>Eigenvector<sp/>reduction<sp/>strategy;<sp/>choose<sp/>between<sp/>&apos;Loose&apos;,<sp/>&apos;Medium&apos;,<sp/>&apos;Tight&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EfficiencyBCalibrations&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EffBName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(semicolon-separated)<sp/>name(s)<sp/>of<sp/>b-jet<sp/>efficiency<sp/>object(s)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EfficiencyCCalibrations&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EffCName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(semicolon-separated)<sp/>name(s)<sp/>of<sp/>c-jet<sp/>efficiency<sp/>object(s)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EfficiencyTCalibrations&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EffTName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(semicolon-separated)<sp/>name(s)<sp/>of<sp/>tau-jet<sp/>efficiency<sp/>object(s)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;EfficiencyLightCalibrations&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>m_EffLightName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;(semicolon-separated)<sp/>name(s)<sp/>of<sp/>light-flavour-jet<sp/>efficiency<sp/>object(s)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ExcludeFromEigenVectorTreatment&quot;</highlight><highlight class="normal">,<sp/>m_excludeFromEV<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(semicolon-separated)<sp/>names<sp/>of<sp/>uncertainties<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>eigenvector<sp/>decomposition<sp/>(if<sp/>used)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>declareProperty(&quot;ExcludeJESFromEVTreatment&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_excludeJESFromEV<sp/>=<sp/>true,<sp/><sp/>&quot;specify<sp/>whether<sp/>or<sp/>not<sp/>to<sp/>exclude<sp/>JES<sp/>uncertainties<sp/>from<sp/>eigenvector<sp/>decomposition<sp/>(if<sp/>used)&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;SystematicsStrategy&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_systStrategy<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SFEigen&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;name<sp/>of<sp/>systematics<sp/>model;<sp/>presently<sp/>choose<sp/>between<sp/>&apos;SFEigen&apos;<sp/>and<sp/>&apos;Envelope&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;ConeFlavourLabel&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_coneFlavourLabel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;specify<sp/>whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>the<sp/>cone-based<sp/>flavour<sp/>labelling<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>ghost<sp/>association<sp/>based<sp/>labelling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;OldConeFlavourLabel&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_oldConeFlavourLabel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;when<sp/>using<sp/>cone-based<sp/>flavour<sp/>labelling,<sp/>specify<sp/>whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>the<sp/>(deprecated)<sp/>Run-1<sp/>legacy<sp/>labelling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialise<sp/>some<sp/>variables<sp/>needed<sp/>for<sp/>caching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>:<sp/>add<sp/>configuration<sp/>of<sp/>the<sp/>mapIndices<sp/>-<sp/>rather<sp/>than<sp/>just<sp/>using<sp/>the<sp/>default<sp/>of<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//m_mapIndices[&quot;Light&quot;]<sp/>=<sp/>m_mapIndices[&quot;T&quot;]<sp/>=<sp/>m_mapIndices[&quot;C&quot;]<sp/>=<sp/>m_mapIndices[&quot;B&quot;]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>m_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>m_getTagWeight<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>m_applySyst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>m_isContinuous<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1ae7d29df6c4ca377fec3d7b7872b119a8" kindref="member" tooltip="Create a constructor for standalone usage.">BTaggingEfficiencyTool::~BTaggingEfficiencyTool</ref>()<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_CDI;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>///<sp/>Silly<sp/>copy<sp/>constructor<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>dictionary<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BTaggingEfficiencyTool::BTaggingEfficiencyTool(const<sp/>BTaggingEfficiencyTool&amp;<sp/>other)<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>IBTaggingEfficiencyTool(other),<sp/>CP::ISystematicsTool(other),<sp/>asg::AsgTool(other.name()+&quot;_copy&quot;),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_path(other.m_path),<sp/>m_SFFile(other.m_SFFile),<sp/>m_EffFile(other.m_EffFile),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_SFBName(other.m_SFBName),<sp/>m_SFCName(other.m_SFCName),<sp/>m_SFTName(other.m_SFTName),<sp/>m_SFLightName(other.m_SFLightName),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_EffBName(other.m_EffBName),<sp/>m_EffCName(other.m_EffCName),<sp/>m_EffTName(other.m_EffTName),<sp/>m_EffLightName(other.m_EffLightName),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_excludeFromEV(other.m_excludeFromEV),<sp/>m_useDevFile(other.m_useDevFile),<sp/>m_coneFlavourLabel(other.m_coneFlavourLabel),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_initialised(other.m_initialised),<sp/>m_applySyst(other.m_applySyst),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_applyThisSyst(other.m_applyThisSyst),<sp/>m_systematicsInfo(other.m_systematicsInfo),<sp/>m_systematics(other.m_systematics),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_OP(other.m_OP),<sp/>m_jetAuthor(other.m_jetAuthor),<sp/>m_isContinuous(other.m_isContinuous),<sp/>m_getTagWeight(other.m_getTagWeight),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_mapIndices(other.m_mapIndices),<sp/>m_SFIndices(other.m_SFIndices),<sp/>m_EffIndices(other.m_EffIndices)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>The<sp/>one<sp/>dynamically<sp/>allocated<sp/>data<sp/>member<sp/>is<sp/>the<sp/>CDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>m_CDI<sp/>=<sp/>new<sp/>Analysis::CalibrationDataInterfaceROOT(*(other.m_CDI));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ATH_MSG_INFO(<sp/>&quot;Instantiated<sp/>copy<sp/>CalibrationDataInterfaceROOT<sp/>object<sp/>at<sp/>&quot;<sp/>&lt;&lt;<sp/>m_CDI);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">StatusCode<sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a25b1fda32dd3c26d3caf8ee643684920" kindref="member">BTaggingEfficiencyTool::initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>BTaggingEfficiencyTool<sp/>user...<sp/>initializing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>TaggerName<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_taggerName);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>OP<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_OP);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_OP<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Continuous&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continuous<sp/>tagging<sp/>is<sp/>special<sp/>in<sp/>two<sp/>respects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/><sp/>the<sp/>tag<sp/>weight<sp/>needs<sp/>to<sp/>be<sp/>retrieved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/><sp/>the<sp/>generator<sp/>dependent<sp/>scale<sp/>factor<sp/>rescaling<sp/>is<sp/>done<sp/>differently,<sp/>and<sp/>therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CalibrationDataInterfaceROOT::getWeightScaleFactor()<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CalibrationDataInterfaceROOT::getScaleFactor()<sp/>must<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>m_isContinuous<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_taggerName<sp/>==<sp/>&quot;MV1&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_getTagWeight<sp/>=<sp/>&amp;xAOD::BTagging::MV1_discriminant;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>ATH_MSG_FATAL(<sp/>&quot;No<sp/>tag<sp/>weight<sp/>retrieval<sp/>function<sp/>defined<sp/>for<sp/>tagger<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>m_taggerName);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>JetAuthor<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_jetAuthor);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;pack&quot;<sp/>the<sp/>scale<sp/>factor<sp/>calibration<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>SFNames;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>SFNames[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(m_SFBName);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>SFNames[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(m_SFCName);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>SFNames[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(m_SFTName);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>SFNames[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>trim(m_SFLightName);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strategies<sp/>for<sp/>eigenvector<sp/>reductions<sp/>(only<sp/>relevant<sp/>if<sp/>eigenvector<sp/>variations<sp/>are<sp/>used,<sp/>of<sp/>course).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now,<sp/>we<sp/>will<sp/>assume<sp/>that<sp/>the<sp/>strategy<sp/>for<sp/>tau<sp/>&quot;jets&quot;<sp/>is<sp/>identical<sp/>to<sp/>that<sp/>for<sp/>c<sp/>jets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>Analysis::EVReductionStrategy&gt;<sp/>EVRedStrategies,<sp/>mappings;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Analysis::Loose;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Medium&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Analysis::Medium;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>mappings[</highlight><highlight class="stringliteral">&quot;Tight&quot;</highlight><highlight class="normal">]<sp/>=<sp/>Analysis::Tight;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EVRedStrategies[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>mappings.find(trim(m_EVReductionB))<sp/>==<sp/>mappings.end()<sp/>?<sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>:<sp/>mappings.find(trim(m_EVReductionB))-&gt;second;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EVRedStrategies[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>mappings.find(trim(m_EVReductionC))<sp/>==<sp/>mappings.end()<sp/>?<sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>:<sp/>mappings.find(trim(m_EVReductionC))-&gt;second;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>EVRedStrategies[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>EVRedStrategies[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>EVRedStrategies[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>mappings.find(trim(m_EVReductionLight))<sp/>==<sp/>mappings.end()<sp/>?<sp/>mappings[</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">]<sp/>:<sp/>mappings.find(trim(m_EVReductionLight))-&gt;second;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;pack&quot;<sp/>the<sp/>efficiency<sp/>map<sp/>names.<sp/>Note<sp/>that<sp/>multiple,<sp/>semicolon<sp/>separated,<sp/>entries<sp/>may<sp/>exist;<sp/>so<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>decoded<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;std::string&gt;<sp/>&gt;<sp/>EffNames;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>effBNames;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::string::size_type<sp/>end;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffBName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffBName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effBNames.push_back(trim(m_EffBName.substr(0,end)));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>m_EffBName<sp/>=<sp/>m_EffBName.substr(end+1);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EffNames[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>effBNames;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>effCNames;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffCName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffCName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effCNames.push_back(trim(m_EffCName.substr(0,end)));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>m_EffCName<sp/>=<sp/>m_EffCName.substr(end+1);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EffNames[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>effCNames;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>effTNames;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffTName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffTName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effTNames.push_back(trim(m_EffTName.substr(0,end)));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>m_EffTName<sp/>=<sp/>m_EffTName.substr(end+1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>EffNames[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>effTNames;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>effLightNames;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffLightName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffLightName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>effLightNames.push_back(trim(m_EffLightName.substr(0,end)));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>m_EffLightName<sp/>=<sp/>m_EffLightName.substr(end+1);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>EffNames[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>effLightNames;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specify<sp/>which<sp/>systematic<sp/>variations<sp/>are<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>the<sp/>eigenvector<sp/>decomposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>excludeFromEVCov;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_excludeFromEV.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_excludeFromEV.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>entry<sp/>=<sp/>trim(m_excludeFromEV.substr(0,end));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>excludeFromEVCov.push_back(entry);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos)<sp/>m_excludeFromEV<sp/>=<sp/>m_excludeFromEV.substr(end+1);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>std::string::npos);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>PathResolver<sp/>to<sp/>find<sp/>the<sp/>full<sp/>pathname<sp/>(behind<sp/>the<sp/>scenes<sp/>this<sp/>can<sp/>also<sp/>be<sp/>used<sp/>to<sp/>download<sp/>the<sp/>file),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>file<sp/>cannot<sp/>be<sp/>found<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>consistency<sp/>with<sp/>the<sp/>PathResolver<sp/>code,<sp/>use<sp/>the<sp/>Boost<sp/>library<sp/>to<sp/>check<sp/>on<sp/>this<sp/>first<sp/>possibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>m_SFFile<sp/>=<sp/>trim(m_SFFile);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>std::string<sp/>location<sp/>=<sp/>PathResolverFindCalibFile(m_SFFile);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>prepend<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useDevFile)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;<sp/>Attempting<sp/>to<sp/>retrieve<sp/>b-tagging<sp/>scale<sp/>factor<sp/>calibration<sp/>file<sp/>from<sp/>development<sp/>area&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prepend<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dev/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>prepend<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;xAODBTaggingEfficiency/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>m_SFFile<sp/>=<sp/>PathResolverFindCalibFile(prepend<sp/>+<sp/>m_SFFile);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_SFFile<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;<sp/>Unable<sp/>to<sp/>retrieve<sp/>b-tagging<sp/>scale<sp/>factor<sp/>calibration<sp/>file!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;<sp/>Retrieving<sp/>b-tagging<sp/>scale<sp/>factor<sp/>calibration<sp/>file<sp/>as<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_SFFile);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>m_SFFile<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>situation<sp/>for<sp/>the<sp/>efficiency<sp/>file<sp/>is<sp/>a<sp/>bit<sp/>simpler<sp/>since<sp/>it<sp/>need<sp/>not<sp/>reside<sp/>under<sp/>&quot;xAODBTaggingEfficiency&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>m_EffFile<sp/>=<sp/>trim(m_EffFile);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffFile<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>m_EffFile<sp/>=<sp/>PathResolverFindCalibFile(m_EffFile);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>instantiation<sp/>below<sp/>does<sp/>not<sp/>leave<sp/>a<sp/>choice:<sp/>the<sp/>Eigenvector<sp/>variations<sp/>and<sp/>generator-specific<sp/>scale<sp/>factors<sp/>are<sp/>always<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>jetAliases;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>m_CDI<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT" kindref="compound">Analysis::CalibrationDataInterfaceROOT</ref>(m_taggerName,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tagger<sp/>name:<sp/>always<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_SFFile.c_str(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>pathname<sp/>of<sp/>the<sp/>SF<sp/>calibration<sp/>file:<sp/>always<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m_EffFile<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>?<sp/>0<sp/>:<sp/>m_EffFile.c_str(),<sp/></highlight><highlight class="comment">//<sp/>full<sp/>pathname<sp/>of<sp/>optional<sp/>efficiency<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jetAliases,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>configure<sp/>the<sp/>jet<sp/>&quot;collection<sp/>name&quot;<sp/>by<sp/>hand,<sp/>we<sp/>don&apos;t<sp/>need<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SFNames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>names<sp/>of<sp/>the<sp/>scale<sp/>factor<sp/>calibrations<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EffNames,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>names<sp/>of<sp/>the<sp/>efficiency<sp/>calibrations<sp/>to<sp/>be<sp/>used<sp/>(can<sp/>be<sp/>multiple<sp/>per<sp/>flavour)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>excludeFromEVCov,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>names<sp/>of<sp/>systematic<sp/>uncertainties<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>the<sp/>EV<sp/>decomposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVRedStrategies,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strategies<sp/>for<sp/>eigenvector<sp/>reductions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_systStrategy<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;Envelope&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>eigenvector<sp/>variations<sp/>will<sp/>be<sp/>used<sp/>unless<sp/>the<sp/>&quot;Envelope&quot;<sp/>model<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a541dfc3ece4820a6fa5f5893de364872" kindref="member" tooltip="Specify the &amp;quot;map index&amp;quot; to be used for the given jet flavour (at initialisation...">setMapIndex</ref>(</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a541dfc3ece4820a6fa5f5893de364872" kindref="member" tooltip="Specify the &amp;quot;map index&amp;quot; to be used for the given jet flavour (at initialisation...">setMapIndex</ref>(</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a541dfc3ece4820a6fa5f5893de364872" kindref="member" tooltip="Specify the &amp;quot;map index&amp;quot; to be used for the given jet flavour (at initialisation...">setMapIndex</ref>(</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a541dfc3ece4820a6fa5f5893de364872" kindref="member" tooltip="Specify the &amp;quot;map index&amp;quot; to be used for the given jet flavour (at initialisation...">setMapIndex</ref>(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">,0);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>systematics<sp/>model<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_systStrategy);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>tool<sp/>has<sp/>not<sp/>already<sp/>been<sp/>initialised<sp/>and<sp/>m_OP<sp/>and<sp/>m_jetAuthor<sp/>have<sp/>been<sp/>set<sp/>-<sp/>ie<sp/>via<sp/>the<sp/>properties<sp/>&quot;OperatingPoint&quot;<sp/>and<sp/>&quot;JetAuthor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>autmatically<sp/>set<sp/>things<sp/>up<sp/>to<sp/>use<sp/>these<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>this<sp/>must<sp/>happen<sp/>before<sp/>registerSystematics<sp/>otherwise<sp/>that<sp/>won&apos;t<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::string<sp/>flavours[4]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavourID<sp/>=<sp/>getFlavourID(flavours[i]);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::const_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapIter<sp/>=<sp/>m_SFIndices.find(flavourID);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mapIter==m_SFIndices.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>flavour<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>entry<sp/>need<sp/>to<sp/>fail<sp/>the<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>entry<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavourID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>SFIndices<sp/>map,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>mapIter-&gt;second;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implement<sp/>the<sp/>different<sp/>strategies<sp/>for<sp/>dealing<sp/>with<sp/>uncertainties<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_systStrategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;SFEigen&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generally<sp/>recommended<sp/>model:<sp/>use<sp/>eigenvector<sp/>variations.<sp/>Notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/><sp/><sp/>The<sp/>list<sp/>of<sp/>systematics<sp/>to<sp/>be<sp/>excluded<sp/>from<sp/>the<sp/>eigenvector<sp/>variation<sp/>approach<sp/>is<sp/>dynamic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/><sp/><sp/>The<sp/>tau<sp/>SF<sp/>are<sp/>identical<sp/>to<sp/>the<sp/>c-jet<sp/>ones,<sp/>with<sp/>merely<sp/>one<sp/>additional<sp/>uncertainty<sp/>assigned<sp/>due<sp/>to<sp/>the<sp/>extrapolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavourIDRef<sp/>=<sp/>(flavourID<sp/>==<sp/>15)<sp/>?<sp/>4<sp/>:<sp/>flavourID;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idRef<sp/>=<sp/>m_SFIndices.find(flavourIDRef)-&gt;second;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>handle<sp/>any<sp/>named<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>systematics<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">listScaleFactorUncertainties</ref>(idRef,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Cosmetic&quot;<sp/>fix:<sp/>the<sp/>outside<sp/>world<sp/>wants<sp/>to<sp/>see<sp/>&quot;FT_EFF_&quot;<sp/>prefixes<sp/>but<sp/>internally<sp/>these<sp/>don&apos;t<sp/>always<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>fix<sp/>this<sp/>generically<sp/>but<sp/>we<sp/>can<sp/>at<sp/>least<sp/>do<sp/>so<sp/>for<sp/>the<sp/>&quot;extrapolation&quot;<sp/>uncertainty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>replace<sp/>any<sp/>spaces<sp/>with<sp/>underscores<sp/>(this<sp/>is<sp/>to<sp/>make<sp/>ROOT<sp/>browsing<sp/>happy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>systematics.size();<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(systematics[i]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>systematics[i]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FT_EFF_extrapolation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::replace_if(systematics[i].begin(),<sp/>systematics[i].end(),<sp/>[]<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/>},<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addSystematics(systematics,<sp/>flavourID,<sp/>SFNamed))<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;SFEigen<sp/>model:<sp/>error<sp/>adding<sp/>named<sp/>systematics<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>then<sp/>the<sp/>eigenvector<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>eigenSysts<sp/>=<sp/>makeEigenSyst(getLabel(flavourIDRef),m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a85f69f76c73608b407b7c879bbb397e1" kindref="member" tooltip="retrieve the number of variations relevant to the calibration object. The Uncertainty...">getNumVariations</ref>(idRef,<sp/>SFEigen));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addSystematics(eigenSysts,<sp/>flavourID,<sp/>SFEigen))<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;SFEigen<sp/>model:<sp/>error<sp/>adding<sp/>eigenvector<sp/>systematics<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>should<sp/>cover<sp/>all<sp/>uncertainties<sp/>except<sp/>the<sp/>charm<sp/>-&gt;<sp/>tau<sp/>extrapolation;<sp/>so<sp/>we<sp/>take<sp/>care<sp/>of<sp/>that<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flavourID<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>extract<sp/>the<sp/>complete<sp/>list<sp/>of<sp/>uncertainties<sp/>for<sp/>taus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>all_systematics<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">listScaleFactorUncertainties</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>from<sp/>this<sp/>list<sp/>extract<sp/>only<sp/>this<sp/>particular<sp/>uncertainty<sp/>(if<sp/>it<sp/>exists)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s_tau_extrap<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;extrapolation<sp/>from<sp/>charm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(all_systematics.begin(),<sp/>all_systematics.end(),<sp/>s_tau_extrap)<sp/>!=<sp/>all_systematics.end())<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>entry<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FT_EFF_extrapolation_from_charm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>extrapSyst;<sp/>extrapSyst.push_back(entry);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>addSystematics(extrapSyst,<sp/>flavourID,<sp/>TauExtrapolation))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;SFEigen<sp/>model:<sp/>error<sp/>adding<sp/>charm-&gt;tau<sp/>systematics<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourID)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_systStrategy<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Envelope&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified<sp/>model:<sp/>use<sp/>uncertainty<sp/>envelopes<sp/>supplemented<sp/>by<sp/>a<sp/>(common)<sp/>extrapolation<sp/>uncertainty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(since<sp/>the<sp/>extrapolation<sp/>uncertainties<sp/>aren&apos;t<sp/>included<sp/>in<sp/>the<sp/>Total<sp/>uncertainty).<sp/>Notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/><sp/><sp/>The<sp/>tau<sp/>SF<sp/>are<sp/>identical<sp/>to<sp/>the<sp/>c-jet<sp/>ones,<sp/>with<sp/>merely<sp/>one<sp/>additional<sp/>uncertainty<sp/>assigned<sp/>due<sp/>to<sp/>the<sp/>extrapolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/><sp/><sp/>The<sp/>&quot;total&quot;<sp/>uncertainty<sp/>is<sp/>always<sp/>expected<sp/>to<sp/>be<sp/>available;<sp/>the<sp/>code<sp/>will<sp/>bomb<sp/>if<sp/>this<sp/>is<sp/>not<sp/>the<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Also,<sp/>the<sp/>&quot;total&quot;<sp/>uncertainties<sp/>for<sp/>different<sp/>flavours<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>uncorrelated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavourIDRef<sp/>=<sp/>(flavourID<sp/>==<sp/>15)<sp/>?<sp/>4<sp/>:<sp/>flavourID;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idRef<sp/>=<sp/>m_SFIndices.find(flavourIDRef)-&gt;second;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>handle<sp/>the<sp/>Total<sp/>variations;<sp/>these<sp/>need<sp/>different<sp/>prefixes<sp/>to<sp/>reflect<sp/>them<sp/>being<sp/>uncorrelated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>all_ref_systematics<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">listScaleFactorUncertainties</ref>(idRef,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;uncertainties<sp/>for<sp/>flavour<sp/>&quot;<sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)<sp/>&lt;&lt;<sp/>&quot;:&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>syst<sp/>:<sp/>all_ref_systematics)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>syst;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s_total<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;systematics&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(all_ref_systematics.begin(),<sp/>all_ref_systematics.end(),<sp/>s_total)<sp/>==<sp/>all_ref_systematics.end())<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Envelope<sp/>model:<sp/>required<sp/>uncertainty<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s_total<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>totalSyst;<sp/>totalSyst.push_back(</highlight><highlight class="stringliteral">&quot;FT_EFF_&quot;</highlight><highlight class="normal"><sp/>+<sp/>getLabel(flavourIDRef)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>s_total);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>addSystematics(totalSyst,<sp/>flavourID,<sp/>Total))<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Envelope<sp/>model:<sp/>error<sp/>adding<sp/>systematics<sp/>uncertainty<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second,<sp/>handle<sp/>the<sp/>extrapolation<sp/>variations;<sp/>these<sp/>are<sp/>shared<sp/>between<sp/>flavours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s_extrap<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(all_ref_systematics.begin(),<sp/>all_ref_systematics.end(),<sp/>s_extrap)<sp/>!=<sp/>all_ref_systematics.end())<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>extrapSyst;<sp/>extrapSyst.push_back(</highlight><highlight class="stringliteral">&quot;FT_EFF_&quot;</highlight><highlight class="normal"><sp/>+<sp/>s_extrap);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>addSystematics(extrapSyst,<sp/>flavourID,<sp/>Extrapolation))<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Envelope<sp/>model:<sp/>error<sp/>adding<sp/>extrapolation<sp/>uncertainty<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourIDRef)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>handle<sp/>the<sp/>charm<sp/>-&gt;<sp/>tau<sp/>extrapolation<sp/>(as<sp/>in<sp/>the<sp/>above)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flavourID<sp/>==<sp/>15)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>extract<sp/>the<sp/>complete<sp/>list<sp/>of<sp/>uncertainties<sp/>for<sp/>taus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>all_systematics<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac2531bb8ce3d7df7e648da677635563d" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; relevant to the calibration object...">listScaleFactorUncertainties</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>from<sp/>this<sp/>list<sp/>extract<sp/>only<sp/>this<sp/>particular<sp/>uncertainty<sp/>(if<sp/>it<sp/>exists)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s_tau_extrap<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;extrapolation<sp/>from<sp/>charm&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(all_systematics.begin(),<sp/>all_systematics.end(),<sp/>s_tau_extrap)<sp/>!=<sp/>all_systematics.end())<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>extrapSyst;<sp/>extrapSyst.push_back(</highlight><highlight class="stringliteral">&quot;FT_EFF_extrapolation_from_charm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>addSystematics(extrapSyst,<sp/>flavourID,<sp/>TauExtrapolation))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Envelope<sp/>model:<sp/>error<sp/>adding<sp/>charm-&gt;tau<sp/>systematics<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourID)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>invalid<sp/>initialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>fill<sp/>the<sp/>SystematicSet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::map&lt;SystematicVariation,SystInfo&gt;::const_iterator<sp/>mapIter<sp/>=<sp/>m_systematicsInfo.begin();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapIter<sp/>!=<sp/>m_systematicsInfo.end();++mapIter)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref><sp/>&amp;<sp/>variation<sp/>=<sp/>mapIter-&gt;first;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>m_systematics.<ref refid="d4/d52/classCP_1_1SystematicSet_1a5c0754cb8a3ab4d64b316ba2ea4497a3" kindref="member" tooltip="description: insert a systematic into the set">insert</ref>(variation);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>systematics<sp/>framework</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="d4/d6e/classCP_1_1SystematicRegistry" kindref="compound">SystematicRegistry</ref><sp/>&amp;<sp/>registry<sp/>=<sp/>SystematicRegistry::getInstance();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>registry.<ref refid="d4/d6e/classCP_1_1SystematicRegistry_1adafd09d699d5cfb10943d4926ec340af" kindref="member" tooltip="effects: register all the systematics from the tool">registerSystematics</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>!=<sp/>SystematicCode::Ok)<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>m_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a4abb53a5ebce7b616f8d5d29dd1e3994" kindref="member">BTaggingEfficiencyTool::getScaleFactor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>sf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="406"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool<sp/>has<sp/>not<sp/>been<sp/>initialised&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>btag<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>jetFlavourLabel(jet,<sp/>m_coneFlavourLabel,<sp/>m_oldConeFlavourLabel);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref><sp/>vars;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>fillVariables(jet,<sp/>vars))<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>fill<sp/>variables<sp/>required<sp/>for<sp/>scale<sp/>factor<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a4abb53a5ebce7b616f8d5d29dd1e3994" kindref="member">getScaleFactor</ref>(flavour,<sp/>vars,<sp/>sf);</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a4abb53a5ebce7b616f8d5d29dd1e3994" kindref="member">BTaggingEfficiencyTool::getScaleFactor</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>&amp;<sp/>v,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>sf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="427"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool<sp/>has<sp/>not<sp/>been<sp/>initialised&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>efindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!getIndices(flavour,sfindex,efindex))<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getScaleFactor<sp/>call<sp/>to<sp/>getIndices<sp/>failed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfindex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>efindex);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>Uncertainty<sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unc_ind=0;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_applySyst)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>m_applyThisSyst.uncType;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_applyThisSyst.getIndex(flavour,unc_ind))<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>requested<sp/>variation<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavour)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>returning<sp/>nominal<sp/>result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>m_isContinuous<sp/>?</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a8db4852e7ea35ef43c1464c4f269d611" kindref="member">getWeightScaleFactor</ref>(v,sfindex,efindex,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,unc_ind,result)<sp/>:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad33fccde418c8c16d7d07cdededed21c" kindref="member">getScaleFactor</ref>(v,sfindex,efindex,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,unc_ind,result);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>what<sp/>has<sp/>been<sp/>retrieved;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>depends<sp/>both<sp/>on<sp/>the<sp/>uncertainty<sp/>type<sp/>and<sp/>on<sp/>the<sp/>up/down<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>sf<sp/>=<sp/>result.first;<sp/></highlight><highlight class="comment">//<sp/>central<sp/>value<sp/>or<sp/>up<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_applySyst<sp/>&amp;&amp;<sp/>unc<sp/>!=<sp/>None)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf<sp/>+=<sp/>m_applyThisSyst.isUp<sp/>?<sp/>result.second<sp/>:<sp/>-result.second<sp/>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_applyThisSyst.isUp)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf<sp/>=<sp/>result.second;<sp/></highlight><highlight class="comment">//<sp/>down<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;CDI<sp/>getScaleFactor:<sp/>&quot;<sp/>&lt;&lt;<sp/>sf<sp/>&lt;&lt;<sp/>&quot;,<sp/>status:<sp/>&quot;<sp/>&lt;&lt;<sp/>status<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kError:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getScaleFactor<sp/>call<sp/>to<sp/>underlying<sp/>code<sp/>returned<sp/>a<sp/>kError!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kExtrapolatedRange:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::OutOfValidityRange;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kSuccess:</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Ok;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1ace00b9947ed285983a259b736f730676" kindref="member">BTaggingEfficiencyTool::getEfficiency</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="489"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>btag<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>jetFlavourLabel(jet,<sp/>m_coneFlavourLabel,<sp/>m_oldConeFlavourLabel);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref><sp/>vars;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>fillVariables(jet,<sp/>vars))<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>fill<sp/>variables<sp/>required<sp/>for<sp/>efficiency<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1ace00b9947ed285983a259b736f730676" kindref="member">getEfficiency</ref>(flavour,<sp/>vars,<sp/>eff);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1ace00b9947ed285983a259b736f730676" kindref="member">BTaggingEfficiencyTool::getEfficiency</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>&amp;<sp/>v,<sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="507"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>efindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!getIndices(flavour,sfindex,efindex))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getEfficiency<sp/>call<sp/>to<sp/>getIndices<sp/>failed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfindex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>efindex);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>Uncertainty<sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unc_ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_applySyst)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>m_applyThisSyst.uncType;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(<sp/>m_applyThisSyst.isNamed)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFNamed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFEigen;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_applyThisSyst.getIndex(flavour,unc_ind))<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;getEfficiency:<sp/>requested<sp/>variation<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavour)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>returning<sp/>nominal<sp/>result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ad55af75d4d11312fb700862bc42224dc" kindref="member">getEfficiency</ref>(v,sfindex,efindex,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,unc_ind,result);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>what<sp/>has<sp/>been<sp/>retrieved;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>depends<sp/>both<sp/>on<sp/>the<sp/>uncertainty<sp/>type<sp/>and<sp/>on<sp/>the<sp/>up/down<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>eff<sp/>=<sp/>result.first;<sp/></highlight><highlight class="comment">//<sp/>central<sp/>value<sp/>or<sp/>up<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_applySyst<sp/>&amp;&amp;<sp/>unc<sp/>!=<sp/>None)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>+=<sp/>m_applyThisSyst.isUp<sp/>?<sp/>result.second<sp/>:<sp/>-result.second<sp/>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_applyThisSyst.isUp)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>result.second;<sp/></highlight><highlight class="comment">//<sp/>down<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kError:</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getEfficiency<sp/>call<sp/>to<sp/>underlying<sp/>code<sp/>returned<sp/>a<sp/>kError!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kExtrapolatedRange:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::OutOfValidityRange;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kSuccess:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Ok;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a49c4d7a9d2111955fde95cf45d9c02f3" kindref="member">BTaggingEfficiencyTool::getInefficiency</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="565"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>btag<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>jetFlavourLabel(jet,<sp/>m_coneFlavourLabel,<sp/>m_oldConeFlavourLabel);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref><sp/>vars;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>fillVariables(jet,<sp/>vars))<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>fill<sp/>variables<sp/>required<sp/>for<sp/>scale<sp/>factor<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a49c4d7a9d2111955fde95cf45d9c02f3" kindref="member">getInefficiency</ref><sp/>(flavour,<sp/>vars,<sp/>eff);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a49c4d7a9d2111955fde95cf45d9c02f3" kindref="member">BTaggingEfficiencyTool::getInefficiency</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>&amp;<sp/>v,<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="583"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>efindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!getIndices(flavour,sfindex,efindex))<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getInefficiency<sp/>call<sp/>to<sp/>getIndices<sp/>failed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfindex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>efindex);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>Uncertainty<sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unc_ind<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_applySyst)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>m_applyThisSyst.uncType;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(<sp/>m_applyThisSyst.isNamed)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFNamed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFEigen;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_applyThisSyst.getIndex(flavour,unc_ind))<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;getInefficiency:<sp/>requested<sp/>variation<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavour)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>returning<sp/>nominal<sp/>result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a60930b42a98d37beb849718f6eaf589f" kindref="member">getInefficiency</ref>(v,<sp/>sfindex,<sp/>efindex,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,<sp/>unc_ind,<sp/>result);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>what<sp/>has<sp/>been<sp/>retrieved;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>depends<sp/>both<sp/>on<sp/>the<sp/>uncertainty<sp/>type<sp/>and<sp/>on<sp/>the<sp/>up/down<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>Total<sp/>uncertainty,<sp/>note<sp/>also<sp/>the<sp/>sign<sp/>change<sp/>compared<sp/>to<sp/>e.g.<sp/>getEfficiency().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>eff<sp/>=<sp/>result.first;<sp/></highlight><highlight class="comment">//<sp/>central<sp/>value<sp/>or<sp/>up<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_applySyst<sp/>&amp;&amp;<sp/>unc<sp/>!=<sp/>None)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>+=<sp/>m_applyThisSyst.isUp<sp/>?<sp/>-result.second<sp/>:<sp/>result.second<sp/>;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_applyThisSyst.isUp)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>result.second;<sp/></highlight><highlight class="comment">//<sp/>down<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kError:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getInefficiency<sp/>call<sp/>to<sp/>underlying<sp/>code<sp/>returned<sp/>a<sp/>kError!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kExtrapolatedRange:</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::OutOfValidityRange;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kSuccess:</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Ok;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1af51fddafb9d9e114c90eeafe8d3b63fa" kindref="member">BTaggingEfficiencyTool::getInefficiencyScaleFactor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>sf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="641"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>btag<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>jetFlavourLabel(jet,<sp/>m_coneFlavourLabel,<sp/>m_oldConeFlavourLabel);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref><sp/>vars;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>fillVariables(jet,<sp/>vars))<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>fill<sp/>variables<sp/>required<sp/>for<sp/>scale<sp/>factor<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1af51fddafb9d9e114c90eeafe8d3b63fa" kindref="member">getInefficiencyScaleFactor</ref>(<sp/>flavour,<sp/>vars,<sp/>sf);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1af51fddafb9d9e114c90eeafe8d3b63fa" kindref="member">BTaggingEfficiencyTool::getInefficiencyScaleFactor</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>&amp;<sp/>v,<sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>sf)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="661"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>efindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!getIndices(flavour,sfindex,efindex))<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getInefficiencyScaleFactor<sp/>call<sp/>to<sp/>getIndices<sp/>failed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfindex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>efindex);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>Uncertainty<sp/>unc=None;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unc_ind=0;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_applySyst)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>m_applyThisSyst.uncType;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if(<sp/>m_applyThisSyst.isNamed)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFNamed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>unc<sp/>=<sp/>SFEigen;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_applyThisSyst.getIndex(flavour,unc_ind))<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;getInefficiencyScaleFactor:<sp/>requested<sp/>variation<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavour)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>returning<sp/>nominal<sp/>result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ab1901622a30f06ddc4d04652f7f592ac" kindref="member">getInefficiencyScaleFactor</ref>(v,sfindex,efindex,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,<sp/>unc_ind,<sp/>result);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>what<sp/>has<sp/>been<sp/>retrieved;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>depends<sp/>both<sp/>on<sp/>the<sp/>uncertainty<sp/>type<sp/>and<sp/>on<sp/>the<sp/>up/down<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>Total<sp/>uncertainty,<sp/>note<sp/>also<sp/>the<sp/>sign<sp/>change<sp/>compared<sp/>to<sp/>e.g.<sp/>getScaleFactor().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>sf<sp/>=<sp/>result.first;<sp/></highlight><highlight class="comment">//<sp/>central<sp/>value<sp/>or<sp/>up<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_applySyst<sp/>&amp;&amp;<sp/>unc<sp/>!=<sp/>None)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(unc<sp/>==<sp/>SFEigen<sp/>||<sp/>unc<sp/>==<sp/>SFNamed))</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf<sp/>+=<sp/>m_applyThisSyst.isUp<sp/>?<sp/>-result.second<sp/>:<sp/>result.second<sp/>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_applyThisSyst.isUp)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sf<sp/>=<sp/>result.second;<sp/></highlight><highlight class="comment">//<sp/>down<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kError:</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getInefficiencyScaleFactor<sp/>call<sp/>to<sp/>underlying<sp/>code<sp/>returned<sp/>a<sp/>kError!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kExtrapolatedRange:</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::OutOfValidityRange;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kSuccess:</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Ok;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3c5855d370cce77950cc7e2053cd58cf" kindref="member">BTaggingEfficiencyTool::getMCEfficiency</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="719"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>btag<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>jetFlavourLabel(jet,<sp/>m_coneFlavourLabel,<sp/>m_oldConeFlavourLabel);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref><sp/>vars;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>fillVariables(jet,<sp/>vars))<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>fill<sp/>variables<sp/>required<sp/>for<sp/>scale<sp/>factor<sp/>evaluation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3c5855d370cce77950cc7e2053cd58cf" kindref="member">getMCEfficiency</ref>(<sp/>flavour,<sp/>vars,<sp/>eff);</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><ref refid="db/d8a/classCP_1_1CorrectionCode" kindref="compound">CorrectionCode</ref></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3c5855d370cce77950cc7e2053cd58cf" kindref="member">BTaggingEfficiencyTool::getMCEfficiency</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>&amp;<sp/>v,<sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;<sp/>eff)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="739"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>CalibResult<sp/>result;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>efindex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!getIndices(flavour,sfindex,efindex))<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getMCEfficiency<sp/>call<sp/>to<sp/>getIndices<sp/>failed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfindex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>efindex);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>Uncertainty<sp/>unc<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>uncertainty<sp/>index<sp/>here<sp/>as<sp/>there<sp/>aren&apos;t<sp/>any<sp/>uncertainties<sp/>associated<sp/>with<sp/>the<sp/>MC<sp/>efficiencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1a79d54d6e6345d190b880ddc0b3f4139f" kindref="member">getMCEfficiency</ref>(v,efindex,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unc,result);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>eff<sp/>=<sp/>result.first;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_applySyst<sp/>&amp;&amp;<sp/>!m_applyThisSyst.isUp)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>eff<sp/>=<sp/>result.second;<sp/></highlight><highlight class="comment">//<sp/>down<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kError:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;BTaggingEfficiencyTool::getMCEfficiency<sp/>call<sp/>to<sp/>underlying<sp/>code<sp/>returned<sp/>a<sp/>kError!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Error;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kExtrapolatedRange:</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::OutOfValidityRange;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Analysis::kSuccess:</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CorrectionCode::Ok;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Systematics<sp/>framework<sp/>-<sp/>modelled<sp/>on<sp/>PhysicsAnalysis/AnalysisCommon/CPAnalysisExamples/Root/JetCalibrationToolExample3.cxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>argument<sp/>systematic<sp/>is<sp/>supported<sp/>by<sp/>this<sp/>tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1aed28685cdb8d254afdb2a0c92515999f" kindref="member" tooltip="Returns whether or not the given systematic variation is supported by this tool.">BTaggingEfficiencyTool::isAffectedBySystematic</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref><sp/>&amp;<sp/>systematic<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="776"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">SystematicSet</ref><sp/>sys<sp/>=<sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3176c95d904b8cdf0646110bd18e8421" kindref="member">affectingSystematics</ref>();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sys.<ref refid="d4/d52/classCP_1_1SystematicSet_1ad2ade5846d7bf837c2679fa2e7628895" kindref="member" tooltip="description: find an element in the set">find</ref>(<sp/>systematic)<sp/>!=<sp/>sys.<ref refid="d4/d52/classCP_1_1SystematicSet_1aa89eea0473b865d52295c272c7b5b944" kindref="member" tooltip="description: const iterator to the end of the set">end</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>returns<sp/>a<sp/>list<sp/>of<sp/>systematics<sp/>supported<sp/>by<sp/>this<sp/>tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">SystematicSet</ref><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3176c95d904b8cdf0646110bd18e8421" kindref="member">BTaggingEfficiencyTool::affectingSystematics</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_systematics;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subset<sp/>of<sp/>systematics<sp/>that<sp/>are<sp/>recommended</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">SystematicSet</ref><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a03b90e8614cd9ab4838020f7d59dfd87" kindref="member">BTaggingEfficiencyTool::recommendedSystematics</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3176c95d904b8cdf0646110bd18e8421" kindref="member">affectingSystematics</ref>();</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;SystematicVariation,<sp/>std::vector&lt;std::string&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="792"><highlight class="normal">BTaggingEfficiencyTool::listSystematics()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>std::map&lt;SystematicVariation,<sp/>std::vector&lt;std::string&gt;<sp/>&gt;<sp/>results;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialised)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;listSystematics()<sp/>cannot<sp/>be<sp/>called<sp/>before<sp/>initialisation<sp/>is<sp/>finished&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>all_flavours[4]<sp/>=<sp/>{<sp/>5,<sp/>4,<sp/>15,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>info<sp/>:<sp/>m_systematicsInfo)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>map<sp/>key<sp/>is<sp/>easy...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref>&amp;<sp/>variation<sp/>=<sp/>info.first;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>see<sp/>for<sp/>which<sp/>flavours<sp/>this<sp/>particular<sp/>key<sp/>is<sp/>relevant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>flavours;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flv<sp/>=<sp/>0;<sp/>flv<sp/>&lt;<sp/>4;<sp/>++flv)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>all_flavours[flv];</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.second.getIndex(flavour,<sp/>idx))</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>flavours.push_back(getLabel(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(flavour)));</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>results[variation]<sp/>=<sp/>flavours;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARNING<sp/>the<sp/>behaviour<sp/>of<sp/>future<sp/>calls<sp/>to<sp/>getEfficiency<sp/>and<sp/>friends<sp/>are<sp/>modified<sp/>by<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>-<sp/>it<sp/>indicates<sp/>which<sp/>systematic<sp/>shifts<sp/>are<sp/>to<sp/>be<sp/>applied<sp/>for<sp/>all<sp/>future<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><ref refid="d1/d38/classCP_1_1SystematicCode" kindref="compound">SystematicCode</ref><sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1ab6efc93b0e2bd997893af097d0617268" kindref="member">BTaggingEfficiencyTool::applySystematicVariation</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">SystematicSet</ref><sp/>&amp;<sp/>systConfig)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>filter<sp/>out<sp/>any<sp/>systematics<sp/>that<sp/>do<sp/>not<sp/>apply<sp/>to<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound" tooltip="Class to wrap a set of SystematicVariations.">SystematicSet</ref><sp/>filteredSysts;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SystematicSet::filterForAffectingSystematics(systConfig,<sp/><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a3176c95d904b8cdf0646110bd18e8421" kindref="member">affectingSystematics</ref>(),<sp/>filteredSysts)<sp/>!=<sp/>SystematicCode::Ok)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;received<sp/>unsupported<sp/>systematics:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>systConfig.<ref refid="d4/d52/classCP_1_1SystematicSet_1af01661875334428bad90eb29174a5ae8" kindref="member">name</ref>());</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SystematicCode::Unsupported;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>the<sp/>size<sp/>of<sp/>the<sp/>remaining<sp/>(filtered)<sp/>SystematicSet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filteredSysts.<ref refid="d4/d52/classCP_1_1SystematicSet_1af9b23731f388242287c0102a00fb4456" kindref="member" tooltip="returns: size of the set">size</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is<sp/>0<sp/>then<sp/>turn<sp/>off<sp/>systematics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;empty<sp/>systematics<sp/>set;<sp/>nothing<sp/>to<sp/>be<sp/>done&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>m_applySyst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SystematicCode::Ok;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filteredSysts.<ref refid="d4/d52/classCP_1_1SystematicSet_1af9b23731f388242287c0102a00fb4456" kindref="member" tooltip="returns: size of the set">size</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restriction:<sp/>we<sp/>allow<sp/>only<sp/>a<sp/>single<sp/>systematic<sp/>variation<sp/>affecting<sp/>b-tagging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>a<sp/>single<sp/>b-tagging<sp/>systematic<sp/>variation<sp/>requested<sp/>but<sp/>not<sp/>(yet)<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SystematicCode::Unsupported;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpret<sp/>the<sp/>(single)<sp/>remaining<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref><sp/>var<sp/>=<sp/>*(filteredSysts.<ref refid="d4/d52/classCP_1_1SystematicSet_1a2bb1825a4d51bbced328ff42ffda8316" kindref="member" tooltip="description: const iterator to the beginning of the set">begin</ref>());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapIter<sp/>=<sp/>m_systematicsInfo.find(var);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapIter<sp/>==<sp/>m_systematicsInfo.end())<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;variation<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var.<ref refid="dd/d2d/classCP_1_1SystematicVariation_1a5d9f8e460b9b300cc47959d1b5866bed" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>not<sp/>found!<sp/>Cannot<sp/>apply&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SystematicCode::Unsupported;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>m_applySyst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>m_applyThisSyst<sp/>=<sp/>mapIter-&gt;second;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;variation<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>var.<ref refid="dd/d2d/classCP_1_1SystematicVariation_1a5d9f8e460b9b300cc47959d1b5866bed" kindref="member">name</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>applied<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SystematicCode::Ok;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal">BTaggingEfficiencyTool::fillVariables(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/d9c/classxAOD_1_1Jet__v1" kindref="compound">xAOD::Jet</ref><sp/>&amp;<sp/>jet,<sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref>&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="855"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>x.jetPt<sp/>=<sp/>jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1a138d731ae5cad7eee14716f6d0716eab" kindref="member" tooltip="The transverse momentum () of the particle.">pt</ref>();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>x.jetEta<sp/>=<sp/>jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1a7bd4f2d30cf4f03bddde891f90358f32" kindref="member" tooltip="The pseudorapidity () of the particle.">eta</ref>();</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>x.jetTagWeight<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>x.jetAuthor<sp/>=<sp/>m_jetAuthor;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>weightOK<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isContinuous)<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/ded/classxAOD_1_1BTagging" kindref="compound" tooltip="Class for xAOD b-tagging information.">xAOD::BTagging</ref>*<sp/>tagInfo<sp/>=<sp/>jet.<ref refid="db/d9c/classxAOD_1_1Jet__v1_1a509653240572fcd400271fcc0ce9f7c9" kindref="member" tooltip="Access to the associated btagging object.">btagging</ref>();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tagInfo)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x.jetTagWeight<sp/>=<sp/>(tagInfo-&gt;*m_getTagWeight)();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tagInfo-&gt;MVx_discriminant(m_taggerName,<sp/>x.jetTagWeight);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">BTaggingEfficiencyTool::fillVariables(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jetPt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jetEta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jetTagWeight,<sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref>&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="872"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>x.jetPt<sp/>=<sp/>jetPt;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>x.jetEta<sp/>=<sp/>jetEta;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>x.jetTagWeight<sp/>=<sp/>jetTagWeight;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>x.jetAuthor<sp/>=<sp/>m_jetAuthor;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>if<sp/>this<sp/>method<sp/>is<sp/>kept<sp/>-<sp/>then<sp/>need<sp/>additional<sp/>version<sp/>that<sp/>lets<sp/>one<sp/>pick<sp/>the<sp/>MapIndex<sp/>by<sp/>name<sp/>-<sp/>but<sp/>this<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>would<sp/>also<sp/>mean<sp/>a<sp/>change<sp/>in<sp/>the<sp/>CDI<sp/>tool<sp/>to<sp/>retrieve<sp/>the<sp/>list<sp/>of<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>this<sp/>method<sp/>might<sp/>screw<sp/>up<sp/>the<sp/>systematics<sp/>framework<sp/>by<sp/>changing<sp/>the<sp/>list<sp/>of<sp/>valid<sp/>systematics???<sp/>needs<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><ref refid="d3/d5c/classBTaggingEfficiencyTool_1a541dfc3ece4820a6fa5f5893de364872" kindref="member" tooltip="Specify the &amp;quot;map index&amp;quot; to be used for the given jet flavour (at initialisation...">BTaggingEfficiencyTool::setMapIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing<sp/>unless<sp/>it&apos;s<sp/>needed!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_initialised<sp/>&amp;&amp;<sp/>index<sp/>==<sp/>m_mapIndices[label])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>to<sp/>integer<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour<sp/>=<sp/>getFlavourID(label);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>new<sp/>calibration<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>effIndex;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac270a987041f673054ff5c1bb4b60b69" kindref="member">retrieveCalibrationIndex</ref>(label,<sp/>m_OP,<sp/>m_jetAuthor,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>effIndex,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>cached<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>m_mapIndices[label]<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>m_EffIndices[flavour]<sp/>=<sp/>effIndex;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sfIndex;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_CDI-&gt;<ref refid="dd/da8/classAnalysis_1_1CalibrationDataInterfaceROOT_1ac270a987041f673054ff5c1bb4b60b69" kindref="member">retrieveCalibrationIndex</ref>(label,<sp/>m_OP,<sp/>m_jetAuthor,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>sfIndex,<sp/>index))<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_SFIndices[flavour]<sp/>=<sp/>sfIndex;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;setMapIndex<sp/>failed<sp/>to<sp/>find<sp/>a<sp/>SF<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>non-existent<sp/>calibration<sp/>object<sp/>&amp;<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;setMapIndex<sp/>failed<sp/>to<sp/>find<sp/>an<sp/>Eff<sp/>calibration<sp/>object&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private<sp/>method<sp/>to<sp/>generate<sp/>the<sp/>list<sp/>of<sp/>eigenvector<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internally<sp/>these<sp/>are<sp/>not<sp/>named,<sp/>they<sp/>are<sp/>just<sp/>numbered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>systematics<sp/>framework<sp/>needs<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>BTaggingEfficiencyTool::makeEigenSyst(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>flav,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>systStrings;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;number;++i)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ost;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>ost<sp/>&lt;&lt;<sp/>flav<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>basename=</highlight><highlight class="stringliteral">&quot;FT_EFF_Eigen_&quot;</highlight><highlight class="normal">+ost.str();</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>systStrings.push_back(basename);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>systStrings;</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">BTaggingEfficiencyTool::getIndices(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavour,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>sf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>ef)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map&lt;unsigned<sp/>int,unsigned<sp/>int&gt;::const_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapIter<sp/>=<sp/>m_SFIndices.find(flavour);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mapIter<sp/>!=<sp/>m_SFIndices.end())<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>sf<sp/>=<sp/>mapIter-&gt;second;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>mapIter<sp/>=<sp/>m_EffIndices.find(flavour);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mapIter<sp/>!=<sp/>m_EffIndices.end())<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>ef<sp/>=<sp/>mapIter-&gt;second;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">BTaggingEfficiencyTool::SystInfo::getIndex(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavourID,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::const_iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapIter<sp/>=<sp/>indexMap.find(flavourID);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapIter==indexMap.end())<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>mapIter-&gt;second;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>helper<sp/>method<sp/>to<sp/>take<sp/>a<sp/>list<sp/>of<sp/>systematic<sp/>names<sp/>and<sp/>a<sp/>flavour<sp/>and<sp/>add<sp/>them<sp/>to<sp/>the<sp/>map<sp/>of<sp/>SystematicVariation<sp/>to<sp/>SystInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>map<sp/>is<sp/>used<sp/>to<sp/>do<sp/>the<sp/>lookup<sp/>of<sp/>which<sp/>systematic<sp/>to<sp/>apply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ie<sp/>it<sp/>is<sp/>used<sp/>to<sp/>map<sp/>the<sp/>systematics<sp/>framework<sp/>on<sp/>the<sp/>systematics<sp/>approach<sp/>of<sp/>the<sp/>CDI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BTaggingEfficiencyTool::addSystematics(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;<sp/>systematicNames,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flavourID,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uncertainty<sp/>uncType)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,<sp/>n=systematicNames.size();<sp/>i&lt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>systName<sp/>=<sp/>systematicNames[i];</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref><sp/>up(systName,1);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref><sp/>down(systName,-1);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;SystematicVariation,SystInfo&gt;::iterator<sp/>iter<sp/>=<sp/>m_systematicsInfo.find(up);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>==<sp/>m_systematicsInfo.end())<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>case:<sp/>new<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SystInfo<sp/>info;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.isUp<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.uncType<sp/>=<sp/>uncType;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.indexMap[flavourID]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_systematicsInfo[up]<sp/>=<sp/>info;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;addSystematics:<sp/>adding<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>systName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourID));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.isUp<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_systematicsInfo[down]=info;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>case:<sp/>already<sp/>known<sp/>variation.<sp/>This<sp/>can<sp/>happen<sp/>if<sp/>a<sp/>variation<sp/>applies<sp/>to<sp/>more<sp/>than<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>jet<sp/>flavour.<sp/>Check<sp/>that<sp/>indeed<sp/>it&apos;s<sp/>not<sp/>registered<sp/>yet<sp/>for<sp/>the<sp/>requested<sp/>flavour.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SystInfo<sp/>info<sp/>=<sp/>iter-&gt;second;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>indIter<sp/>=<sp/>info.indexMap.find(flavourID);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indIter<sp/>!=<sp/>info.indexMap.end())<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;addSystematics<sp/>:<sp/>flavourID<sp/>is<sp/>already<sp/>in<sp/>the<sp/>map!<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavourID);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>info.indexMap[flavourID]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>m_systematicsInfo[up]<sp/>=<sp/>info;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;addSystematics:<sp/>adding<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>systName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>flavour<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>getLabel(flavourID));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>info.isUp<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>m_systematicsInfo[down]<sp/>=<sp/>info;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODBTaggingEfficiency/Root/BTaggingEfficiencyTool.cxx"/>
  </compounddef>
</doxygen>
