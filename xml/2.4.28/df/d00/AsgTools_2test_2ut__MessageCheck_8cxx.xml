<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/d00/AsgTools_2test_2ut__MessageCheck_8cxx" kind="file">
    <compoundname>ut_MessageCheck.cxx</compoundname>
    <includes refid="d6/dab/AsgTools_2AsgTools_2MessageCheck_8h" local="no">AsgTools/MessageCheck.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">functional</includes>
    <incdepgraph>
      <node id="10430">
        <label>functional</label>
      </node>
      <node id="10429">
        <label>assert.h</label>
      </node>
      <node id="10427">
        <label>xAODRootAccess/tools/TReturnCode.h</label>
        <link refid="df/d0a/TReturnCode_8h_source"/>
      </node>
      <node id="10428">
        <label>AthenaBaseComps/AthMessaging.h</label>
      </node>
      <node id="10424">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx</label>
        <link refid="AsgTools/test/ut_MessageCheck.cxx"/>
        <childnode refid="10425" relation="include">
        </childnode>
        <childnode refid="10429" relation="include">
        </childnode>
        <childnode refid="10430" relation="include">
        </childnode>
      </node>
      <node id="10425">
        <label>AsgTools/MessageCheck.h</label>
        <link refid="d6/dab/AsgTools_2AsgTools_2MessageCheck_8h_source"/>
        <childnode refid="10426" relation="include">
        </childnode>
        <childnode refid="10427" relation="include">
        </childnode>
        <childnode refid="10428" relation="include">
        </childnode>
      </node>
      <node id="10426">
        <label>type_traits</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d00/AsgTools_2test_2ut__MessageCheck_8cxx_1af561cef0fa755bae8730fdd6a328d457" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkTypeSingle</definition>
        <argsstring>(const T &amp;scSuccess, const T &amp;scTest, bool expectedSuccess, std::function&lt; bool(T)&gt; successTest)</argsstring>
        <name>checkTypeSingle</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>scSuccess</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>scTest</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expectedSuccess</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="d1/def/classT" kindref="compound">T</ref>)&gt;</type>
          <declname>successTest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" bodystart="25" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="df/d00/AsgTools_2test_2ut__MessageCheck_8cxx_1aa67ae1d339719f6332f68c68906d11ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkType</definition>
        <argsstring>(const T &amp;scSuccess, const T &amp;scFailure1, const T &amp;scFailure2, std::function&lt; bool(T)&gt; successTest)</argsstring>
        <name>checkType</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>scSuccess</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>scFailure1</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>scFailure2</declname>
        </param>
        <param>
          <type>std::function&lt; bool(<ref refid="d1/def/classT" kindref="compound">T</ref>)&gt;</type>
          <declname>successTest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="df/d00/AsgTools_2test_2ut__MessageCheck_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx" bodystart="50" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Iowa<sp/>State<sp/>University<sp/>2015.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>Nils<sp/>Krumnack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(nils.erik.krumnack@cern.ch)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AsgTools/MessageCheck.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unit<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkTypeSingle<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>scSuccess,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>scTest,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expectedSuccess,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>)&gt;<sp/>successTest)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">asg::msgUserCode;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>mySC<sp/>=<sp/>[&amp;]<sp/>()<sp/>-&gt;<sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ANA_CHECK_SET_TYPE<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ANA_CHECK<sp/>(scTest);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scSuccess;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}<sp/>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>assert<sp/>(successTest<sp/>(mySC)<sp/>==<sp/>expectedSuccess);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>assert<sp/>(success<sp/>==<sp/>expectedSuccess);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkType<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>scSuccess,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>scFailure1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>scFailure2,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(<ref refid="d1/def/classT" kindref="compound">T</ref>)&gt;<sp/>successTest)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>checkTypeSingle&lt;T&gt;<sp/>(scSuccess,<sp/>scSuccess,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>successTest);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>checkTypeSingle&lt;T&gt;<sp/>(scSuccess,<sp/>scFailure1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>successTest);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>checkTypeSingle&lt;T&gt;<sp/>(scSuccess,<sp/>scFailure2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>successTest);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>StatusCode::enableFailure<sp/>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a964ddeb467cb17b57874ee27399217e8" kindref="member" tooltip="Enable failure (with a backtrace) on an unchecked return code.">xAOD::TReturnCode::enableFailure</ref><sp/>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>checkType&lt;StatusCode&gt;<sp/>(StatusCode::SUCCESS,<sp/>StatusCode::FAILURE,<sp/>StatusCode::FAILURE,<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StatusCode&amp;<sp/>sc)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc.isSuccess();});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>checkType&lt;xAOD::TReturnCode&gt;<sp/>(<ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aadf30f5028ade4d2f7dce8ab294d8400f" kindref="member">xAOD::TReturnCode::kSuccess</ref>,<sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aa65103d5e226744ccf3bf1f920cac2075" kindref="member" tooltip="The function call failed.">xAOD::TReturnCode::kFailure</ref>,<sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode_1a8f212da971e112f15d8bd5bf49c4ed0aabcd1526349be69a2818959426c1e2914" kindref="member">xAOD::TReturnCode::kRecoverable</ref>,<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">xAOD::TReturnCode</ref>&amp;<sp/>sc)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc.isSuccess();});</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>checkType&lt;bool&gt;<sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>[]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>sc)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/test/ut_MessageCheck.cxx"/>
  </compounddef>
</doxygen>
