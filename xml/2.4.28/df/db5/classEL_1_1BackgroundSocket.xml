<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/db5/classEL_1_1BackgroundSocket" kind="class" prot="public">
    <compoundname>EL::BackgroundSocket</compoundname>
    <includes refid="df/db2/BackgroundSocket_8h" local="no">BackgroundSocket.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5ae4695468cc972b11575d8727fbb2ec75" prot="public">
          <name>T_START_JOB</name>
          <briefdescription>
<para>start the job </para>          </briefdescription>
          <detaileddescription>
<para>the payload indicates a file containing the information about the job. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5aa141ba2ecfe3d0033478d1302badffd4" prot="public">
          <name>T_SET_INPUT_FILE</name>
          <briefdescription>
<para>set the next input file </para>          </briefdescription>
          <detaileddescription>
<para>the payload is the name of the file to open </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a4eb08a852ff6f06e40503492ced29151" prot="public">
          <name>T_SET_ENTRY</name>
          <briefdescription>
<para>set the tree entry </para>          </briefdescription>
          <detaileddescription>
<para>the payload is a Long64_t wrapped into a string that contains the tree entry </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a668fc6c16674c0effdfc52caaad32168" prot="public">
          <name>T_EXECUTE</name>
          <briefdescription>
<para>execute the event </para>          </briefdescription>
          <detaileddescription>
<para>there is no payload for this </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5adb41863807b5f43cd9c2b1da63fdb4d8" prot="public">
          <name>T_EXECUTE_CONFIRM</name>
          <briefdescription>
<para>confirm a <ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a668fc6c16674c0effdfc52caaad32168" kindref="member">T_EXECUTE</ref> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a078788c6fdb1e04547cb42e80f758ad2" prot="public">
          <name>T_END_JOB</name>
          <briefdescription>
<para>end the job </para>          </briefdescription>
          <detaileddescription>
<para>the payload indicates a file to which to save the histogram information. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a7cdc34f223ccab4a54b0558d28233144" prot="public">
          <name>T_END_JOB_CONFIRM</name>
          <briefdescription>
<para>confirm a <ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a078788c6fdb1e04547cb42e80f758ad2" kindref="member">T_END_JOB</ref> </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a99d8c7f280886a77ac2b1a153941fdeb" prot="public">
          <name>T_INVALID</name>
          <briefdescription>
<para>an invalid message </para>          </briefdescription>
          <detaileddescription>
<para>this is guaranteed to be the last entry in the enum, so that it can be used to check that the enum is read correctly </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the type of message we send around </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" bodystart="38" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="df/db5/classEL_1_1BackgroundSocket_1a55f52ad5fc568b2ad8c56647e897a509" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int EL::BackgroundSocket::m_socket</definition>
        <argsstring></argsstring>
        <name>m_socket</name>
        <briefdescription>
<para>the socket we are communicating with </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="152" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/db5/classEL_1_1BackgroundSocket_1a53317fe537b536439716fe5b183cbb5b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::BackgroundSocket::m_inputBuffer</definition>
        <argsstring></argsstring>
        <name>m_inputBuffer</name>
        <briefdescription>
<para>the input buffer we are using </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="df/db5/classEL_1_1BackgroundSocket_1acbcdb9dc451b4e0ca4e9a0176c9af350" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string EL::BackgroundSocket::m_outputBuffer</definition>
        <argsstring></argsstring>
        <name>m_outputBuffer</name>
        <briefdescription>
<para>the output buffer we are using </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="160" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1aadb73a5d0cfe62d9e7a8c63389e27e44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BackgroundSocket::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a5956f6097c201f21890e7b891abf31c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::BackgroundSocket::BackgroundSocket</definition>
        <argsstring>(int val_socket)</argsstring>
        <name>BackgroundSocket</name>
        <param>
          <type>int</type>
          <declname>val_socket</declname>
        </param>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="96" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a5379c77ba2d5efff9bc40bda51d4251c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::BackgroundSocket::~BackgroundSocket</definition>
        <argsstring>()</argsstring>
        <name>~BackgroundSocket</name>
        <briefdescription>
<para>standard destructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a2867145e1f01c3a0549135cd2db5baa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BackgroundSocket::write</definition>
        <argsstring>(Type type, const std::string &amp;payload)</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>write a message to the socket </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="67" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a9b0f5b4299f4a9416b0adbc9913952ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BackgroundSocket::read</definition>
        <argsstring>(Type &amp;type, std::string &amp;payload)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>read a message from the socket </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="121" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="108" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a011cf3d6358efcca7c72ec50b3edc513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::BackgroundSocket::makeSockets</definition>
        <argsstring>(int sockets[2])</argsstring>
        <name>makeSockets</name>
        <param>
          <type>int</type>
          <declname>sockets</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>make a pair of sockets suitable for communication </para>        </briefdescription>
        <detaileddescription>
<para>I rather do this myself instead of leaving it to the user, as this allows me to make sure the settings are correct. <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="133" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="df/db5/classEL_1_1BackgroundSocket_1a2303b1afd2926401a2bbda6a16856b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::auto_ptr&lt; <ref refid="df/db5/classEL_1_1BackgroundSocket" kindref="compound">BackgroundSocket</ref> &gt;</type>
        <definition>std::auto_ptr&lt; BackgroundSocket &gt; EL::BackgroundSocket::startWorker</definition>
        <argsstring>(const BackgroundJob &amp;job)</argsstring>
        <name>startWorker</name>
        <param>
          <type>const <ref refid="d1/d32/structEL_1_1BackgroundJob" kindref="compound">BackgroundJob</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
<para>start a background worker connected by socket </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>low level failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundSocket.cxx" bodystart="176" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class wraps around the socket used for communication to the background worker and implements a simple messaging mechanism. </para>    </briefdescription>
    <detaileddescription>
<para>Messages here just consist of a type and a string as a payload. We do not worry about bringing thinks into a portable format, as this is only meant for communicating between machines employing the same architecture. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2128">
        <label>string</label>
      </node>
      <node id="2127">
        <label>EL::BackgroundSocket</label>
        <link refid="df/db5/classEL_1_1BackgroundSocket"/>
        <childnode refid="2128" relation="usage">
          <edgelabel>m_inputBuffer</edgelabel>
          <edgelabel>m_outputBuffer</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/BackgroundSocket.h" bodystart="30" bodyend="161"/>
    <listofallmembers>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a5956f6097c201f21890e7b891abf31c8" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>BackgroundSocket</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a53317fe537b536439716fe5b183cbb5b" prot="private" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>m_inputBuffer</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1acbcdb9dc451b4e0ca4e9a0176c9af350" prot="private" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>m_outputBuffer</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a55f52ad5fc568b2ad8c56647e897a509" prot="private" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>m_socket</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a011cf3d6358efcca7c72ec50b3edc513" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>makeSockets</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a9b0f5b4299f4a9416b0adbc9913952ee" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>read</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a2303b1afd2926401a2bbda6a16856b16" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>startWorker</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a078788c6fdb1e04547cb42e80f758ad2" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_END_JOB</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a7cdc34f223ccab4a54b0558d28233144" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_END_JOB_CONFIRM</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a668fc6c16674c0effdfc52caaad32168" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_EXECUTE</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5adb41863807b5f43cd9c2b1da63fdb4d8" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_EXECUTE_CONFIRM</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a99d8c7f280886a77ac2b1a153941fdeb" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_INVALID</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a4eb08a852ff6f06e40503492ced29151" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_SET_ENTRY</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5aa141ba2ecfe3d0033478d1302badffd4" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_SET_INPUT_FILE</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5ae4695468cc972b11575d8727fbb2ec75" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>T_START_JOB</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1aadb73a5d0cfe62d9e7a8c63389e27e44" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>testInvariant</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>Type</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a2867145e1f01c3a0549135cd2db5baa8" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>write</name></member>
      <member refid="df/db5/classEL_1_1BackgroundSocket_1a5379c77ba2d5efff9bc40bda51d4251c" prot="public" virt="non-virtual"><scope>EL::BackgroundSocket</scope><name>~BackgroundSocket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
