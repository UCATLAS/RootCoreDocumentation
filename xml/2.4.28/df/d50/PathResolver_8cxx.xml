<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/d50/PathResolver_8cxx" kind="file">
    <compoundname>PathResolver.cxx</compoundname>
    <includes refid="d3/d32/PathResolver_8h" local="yes">PathResolver/PathResolver.h</includes>
    <includes local="yes">GaudiKernel/System.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">boost/algorithm/string/split.hpp</includes>
    <includes local="no">boost/algorithm/string.hpp</includes>
    <includes local="no">boost/algorithm/string/classification.hpp</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="yes">TFile.h</includes>
    <includes local="yes">TSystem.h</includes>
    <includes local="yes">TError.h</includes>
    <incdepgraph>
      <node id="224949">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="224943" relation="include">
        </childnode>
        <childnode refid="224944" relation="include">
        </childnode>
        <childnode refid="224950" relation="include">
        </childnode>
        <childnode refid="224951" relation="include">
        </childnode>
      </node>
      <node id="224961">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="224951">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="224959">
        <label>stdlib.h</label>
      </node>
      <node id="224962">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="224954">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="224940">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx</label>
        <link refid="PathResolver.cxx"/>
        <childnode refid="224941" relation="include">
        </childnode>
        <childnode refid="224955" relation="include">
        </childnode>
        <childnode refid="224956" relation="include">
        </childnode>
        <childnode refid="224957" relation="include">
        </childnode>
        <childnode refid="224958" relation="include">
        </childnode>
        <childnode refid="224959" relation="include">
        </childnode>
        <childnode refid="224960" relation="include">
        </childnode>
        <childnode refid="224961" relation="include">
        </childnode>
        <childnode refid="224962" relation="include">
        </childnode>
        <childnode refid="224963" relation="include">
        </childnode>
        <childnode refid="224964" relation="include">
        </childnode>
        <childnode refid="224965" relation="include">
        </childnode>
        <childnode refid="224966" relation="include">
        </childnode>
      </node>
      <node id="224958">
        <label>stdexcept</label>
      </node>
      <node id="224947">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="224943" relation="include">
        </childnode>
        <childnode refid="224944" relation="include">
        </childnode>
        <childnode refid="224948" relation="include">
        </childnode>
      </node>
      <node id="224944">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="224943">
        <label>string</label>
      </node>
      <node id="224948">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="224966">
        <label>TError.h</label>
      </node>
      <node id="224960">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="224953">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="224944" relation="include">
        </childnode>
        <childnode refid="224947" relation="include">
        </childnode>
        <childnode refid="224954" relation="include">
        </childnode>
      </node>
      <node id="224965">
        <label>TSystem.h</label>
      </node>
      <node id="224957">
        <label>vector</label>
      </node>
      <node id="224964">
        <label>TFile.h</label>
      </node>
      <node id="224963">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="224946">
        <label>sstream</label>
      </node>
      <node id="224955">
        <label>GaudiKernel/System.h</label>
      </node>
      <node id="224956">
        <label>iostream</label>
      </node>
      <node id="224952">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="224945">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="224943" relation="include">
        </childnode>
        <childnode refid="224946" relation="include">
        </childnode>
        <childnode refid="224944" relation="include">
        </childnode>
        <childnode refid="224947" relation="include">
        </childnode>
        <childnode refid="224949" relation="include">
        </childnode>
        <childnode refid="224952" relation="include">
        </childnode>
      </node>
      <node id="224950">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="224941">
        <label>PathResolver/PathResolver.h</label>
        <link refid="d3/d32/PathResolver_8h_source"/>
        <childnode refid="224942" relation="include">
        </childnode>
        <childnode refid="224943" relation="include">
        </childnode>
      </node>
      <node id="224942">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="224943" relation="include">
        </childnode>
        <childnode refid="224944" relation="include">
        </childnode>
        <childnode refid="224945" relation="include">
        </childnode>
        <childnode refid="224953" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="df/d50/PathResolver_8cxx_1ad3d609d7c9d56bd6d582a96bba3b8841" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* path_separator</definition>
        <argsstring></argsstring>
        <name>path_separator</name>
        <initializer> &quot;,:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="29" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="df/d50/PathResolver_8cxx_1a39f9251e4a7071fae28d13c6b7e072e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PathResolverFindXMLFile</definition>
        <argsstring>(const std::string &amp;logical_file_name)</argsstring>
        <name>PathResolverFindXMLFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="297" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="df/d50/PathResolver_8cxx_1a690b4149f3ab044afec526820c3b2de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PathResolverFindDataFile</definition>
        <argsstring>(const std::string &amp;logical_file_name)</argsstring>
        <name>PathResolverFindDataFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="302" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="df/d50/PathResolver_8cxx_1a68a30a63942c53a2f01dcd5e002dbbaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PathResolverFindCalibFile</definition>
        <argsstring>(const std::string &amp;logical_file_name)</argsstring>
        <name>PathResolverFindCalibFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="355" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="df/d50/PathResolver_8cxx_1a4300fb9dbfcb61db0f5363a7dc9be35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PathResolverFindCalibDirectory</definition>
        <argsstring>(const std::string &amp;logical_file_name)</argsstring>
        <name>PathResolverFindCalibDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="356" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="df/d50/PathResolver_8cxx_1a985e5effebd8fe0d1270c36d4d678d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PathResolverSetOutputLevel</definition>
        <argsstring>(int lvl)</argsstring>
        <name>PathResolverSetOutputLevel</name>
        <param>
          <type>int</type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" line="357" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx" bodystart="357" bodyend="357"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;PathResolver/PathResolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;GaudiKernel/System.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/split.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/classification.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TFile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TError.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//needed<sp/>to<sp/>suppress<sp/>errors<sp/>when<sp/>attempting<sp/>file<sp/>downloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bf<sp/>=<sp/>boost::filesystem;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path_separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PathResolver::m_setLevel=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">PathResolver::PathResolver()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref>&amp;<sp/>PathResolver::asgMsg()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_setLevel)<sp/>setOutputLevel(MSG::INFO);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d1/d97/classasg_1_1AsgMessaging" kindref="compound">asg::AsgMessaging</ref><sp/>asgMsg(</highlight><highlight class="stringliteral">&quot;PathResolver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asgMsg;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">PathResolver::PR_find(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>search_list,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PR_file_type<sp/>file_type,<sp/>PathResolver::SearchType<sp/>search_type,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>result<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_setLevel)<sp/>setOutputLevel(MSG::INFO);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>trimmed_logical_file_name<sp/>=<sp/>logical_file_name;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>boost::algorithm::trim(trimmed_logical_file_name);<sp/></highlight><highlight class="comment">//trim<sp/>again<sp/>for<sp/>extra<sp/>safety</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>bf::path<sp/>file(<sp/>trimmed_logical_file_name<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>file<sp/>as<sp/>specified<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>file_type<sp/>==<sp/>PR_regular_file<sp/>&amp;&amp;<sp/>is_regular_file(<sp/>file<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>file_type<sp/>==<sp/>PR_directory<sp/>&amp;&amp;<sp/>is_directory(<sp/>file<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bf::system_complete(file).string();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bf::filesystem_error<sp/></highlight><highlight class="comment">/*err*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>&quot;.&quot;<sp/>is<sp/>always<sp/>part<sp/>of<sp/>the<sp/>search<sp/>path,<sp/>so<sp/>check<sp/>locally<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>bf::path<sp/>local<sp/>=<sp/>bf::initial_path()<sp/>/<sp/>file;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>file_type<sp/>==<sp/>PR_regular_file<sp/>&amp;&amp;<sp/>is_regular_file(<sp/>local<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>file_type<sp/>==<sp/>PR_directory<sp/>&amp;&amp;<sp/>is_directory(<sp/>local<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bf::system_complete(file).string();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bf::filesystem_error<sp/></highlight><highlight class="comment">/*err*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>locationToDownloadTo<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//will<sp/>replace<sp/>with<sp/>first<sp/>search<sp/>location<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>through<sp/>search<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>spv;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>split(spv,<sp/>search_list,<sp/>boost::is_any_of(<sp/>path_separator),<sp/>boost::token_compress_on);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;string&gt;::const_iterator<sp/>itr<sp/>=<sp/>spv.begin();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itr<sp/>!=<sp/>spv.end();<sp/>++itr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>itr-&gt;find(</highlight><highlight class="stringliteral">&quot;http//&quot;</highlight><highlight class="normal">)==0<sp/>&amp;&amp;<sp/>file_type==PR_regular_file<sp/>&amp;&amp;<sp/>gSystem-&gt;Getenv(</highlight><highlight class="stringliteral">&quot;PATHRESOLVER_ALLOWHTTPDOWNLOAD&quot;</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//only<sp/>http<sp/>download<sp/>files,<sp/>not<sp/>directories</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//try<sp/>to<sp/>do<sp/>an<sp/>http<sp/>download<sp/>to<sp/>the<sp/>local<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//restore<sp/>the<sp/>proper<sp/>http<sp/>protocal<sp/>(had<sp/>to<sp/>remove<sp/>for<sp/>sake<sp/>of<sp/>env<sp/>var<sp/>splitting)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>addr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;http://&quot;</highlight><highlight class="normal">;<sp/>addr<sp/>+=<sp/>itr-&gt;substr(6,itr-&gt;length());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bf::path<sp/>lp<sp/>=<sp/>locationToDownloadTo/file;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bf::path<sp/>lpd<sp/>=<sp/>lp;<sp/>lpd.remove_filename();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Attempting<sp/>http<sp/>download<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>addr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>file.string()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lp<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!is_directory(lpd))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Creating<sp/>directory:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lpd<sp/><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!boost::filesystem::create_directories(lpd))<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>create<sp/>directories<sp/>to<sp/>write<sp/>file<sp/>to<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lp<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//throw<sp/>std::runtime_error(&quot;Unable<sp/>to<sp/>download<sp/>calibration<sp/>file&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fileToDownload<sp/>=<sp/>addr<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>file.string();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//disable<sp/>error<sp/>output<sp/>from<sp/>root<sp/>while<sp/>attempting<sp/>to<sp/>download<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>errLevel<sp/>=<sp/>gErrorIgnoreLevel;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gErrorIgnoreLevel<sp/>=<sp/>kError+1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!TFile::Cp(fileToDownload.c_str(),(locationToDownloadTo+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+file.string()).c_str()))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>download<sp/>file<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileToDownload<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::INFO)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Successfully<sp/>downloaded<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fileToDownload<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(locationToDownloadTo+</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">+file.string()).c_str();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gErrorIgnoreLevel=errLevel;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gErrorIgnoreLevel=errLevel;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(locationToDownloadTo==</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>itr-&gt;find(</highlight><highlight class="stringliteral">&quot;/afs/cern.ch/atlas/www/&quot;</highlight><highlight class="normal">)==std::string::npos)<sp/>{<sp/></highlight><highlight class="comment">//don&apos;t<sp/>let<sp/>it<sp/>ever<sp/>download<sp/>back<sp/>to<sp/>the<sp/>www<sp/>area!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//prefer<sp/>first<sp/>non-pwd<sp/>location<sp/>for<sp/>downloading<sp/>to.<sp/>But<sp/>must<sp/>be<sp/>fully<sp/>accessible.<sp/>This<sp/>should<sp/>be<sp/>the<sp/>local<sp/>InstallArea<sp/>in<sp/>cmt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>std::fopen((*itr+</highlight><highlight class="stringliteral">&quot;/._pathresolver_dummy&quot;</highlight><highlight class="normal">).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;a+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fp!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>locationToDownloadTo=*itr;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fclose(fp);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)std::remove((*itr+</highlight><highlight class="stringliteral">&quot;/._pathresolver_dummy&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;searching<sp/>path:<sp/>&quot;<sp/>&lt;&lt;<sp/>*itr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>bf::path<sp/>fp<sp/>=<sp/>*itr<sp/>/<sp/>file;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>file_type<sp/>==<sp/>PR_regular_file<sp/>&amp;&amp;<sp/>is_regular_file(<sp/>fp<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>file_type<sp/>==<sp/>PR_directory<sp/>&amp;&amp;<sp/>is_directory(<sp/>fp<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bf::system_complete(fp).string();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bf::filesystem_error<sp/></highlight><highlight class="comment">/*err*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>recursive<sp/>searching<sp/>requested,<sp/>drill<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_type<sp/>==<sp/>PathResolver::RecursiveSearch<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_directory(<sp/>bf::path(*itr)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bf::recursive_directory_iterator<sp/>end_itr;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>bf::recursive_directory_iterator<sp/>ritr(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ritr<sp/>!=<sp/>end_itr;<sp/>++ritr)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>if<sp/>not<sp/>a<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>is_directory(<sp/>bf::path(*ritr)<sp/>)<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bf::path<sp/>fp2<sp/>=<sp/>bf::path(*ritr)<sp/>/<sp/>file;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<sp/>file_type<sp/>==<sp/>PR_regular_file<sp/>&amp;&amp;<sp/>is_regular_file(<sp/>fp2<sp/>)<sp/>)<sp/>||</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>file_type<sp/>==<sp/>PR_directory<sp/>&amp;&amp;<sp/>is_directory(<sp/>fp2<sp/>)<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>bf::system_complete(<sp/>fp2<sp/>).string();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(bf::filesystem_error<sp/></highlight><highlight class="comment">/*err*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><ref refid="d1/d31/classPathResolver_1a8c14195667dec1081a3955bbc0d0a87b" kindref="member">PathResolver::find_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search_path,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SearchType<sp/>search_type)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;finding<sp/>file:<sp/>&quot;<sp/>&lt;&lt;logical_file_name<sp/>&lt;&lt;<sp/>&quot;<sp/>in<sp/>path=&quot;<sp/>&lt;&lt;<sp/>search_path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::string<sp/>path_list;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>envVarVal<sp/>=<sp/>gSystem-&gt;Getenv(search_path.c_str());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(envVarVal<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::WARNING)<sp/>&lt;&lt;search_path.c_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>environment<sp/>variable<sp/>not<sp/>defined!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path_list<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//this<sp/>will<sp/>allow<sp/>search<sp/>in<sp/>pwd<sp/>...<sp/>maybe<sp/>we<sp/>should<sp/>throw<sp/>exception<sp/>though!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>path_list<sp/>=<sp/>envVarVal;<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>System::getEnv(search_path,<sp/>path_list);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d1/d31/classPathResolver_1a4cae29de199b3df55539307a0ce129e0" kindref="member">find_file_from_list</ref><sp/>(logical_file_name,<sp/>path_list,<sp/>search_type));</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="d1/d31/classPathResolver_1a4cae29de199b3df55539307a0ce129e0" kindref="member">PathResolver::find_file_from_list</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search_list,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SearchType<sp/>search_type)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>std::string<sp/>result(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>bool<sp/>found<sp/>=<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>PR_find<sp/>(logical_file_name,<sp/>search_list,<sp/>PR_regular_file,<sp/>search_type,<sp/>result);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functionality<sp/>was<sp/>in<sp/>the<sp/>original<sp/>PathResolver,<sp/>but<sp/>I<sp/>believe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>it&apos;s<sp/>WRONG.<sp/>It<sp/>extracts<sp/>the<sp/>filename<sp/>of<sp/>the<sp/>requested<sp/>item,<sp/>and<sp/>searches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>that<sp/>if<sp/>the<sp/>preceding<sp/>search<sp/>fails.<sp/>i.e.,<sp/>if<sp/>you&apos;re<sp/>looking<sp/>for<sp/>&quot;B/a.txt&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>that<sp/>fails,<sp/>it<sp/>will<sp/>look<sp/>for<sp/>just<sp/>&quot;a.txt&quot;<sp/>in<sp/>the<sp/>search<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(!<sp/>found<sp/>&amp;&amp;<sp/>lfn.filename()<sp/>!=<sp/>lfn<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>result<sp/>=<sp/>&quot;&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>PR_find<sp/>(lfn.filename(),<sp/>search_list,<sp/>PR_regular_file,<sp/>search_type,<sp/>result);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="d1/d31/classPathResolver_1a56011f58f651155aebe71c020ae3e3df" kindref="member">PathResolver::find_directory</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search_path,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SearchType<sp/>search_type)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::string<sp/>path_list;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>envVarVal<sp/>=<sp/>gSystem-&gt;Getenv(search_path.c_str());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(envVarVal<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg(MSG::WARNING)<sp/>&lt;&lt;search_path.c_str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>environment<sp/>variable<sp/>not<sp/>defined!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path_list<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//this<sp/>will<sp/>allow<sp/>search<sp/>in<sp/>pwd<sp/>...<sp/>maybe<sp/>we<sp/>should<sp/>throw<sp/>exception<sp/>though!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>path_list<sp/>=<sp/>envVarVal;<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>System::getEnv(search_path,<sp/>path_list);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d1/d31/classPathResolver_1a69d69df0f89c10619f9fa37352811b04" kindref="member">find_directory_from_list</ref><sp/>(logical_file_name,<sp/>path_list,<sp/>search_type));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="d1/d31/classPathResolver_1a69d69df0f89c10619f9fa37352811b04" kindref="member">PathResolver::find_directory_from_list</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search_list,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SearchType<sp/>search_type)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PR_find<sp/>(logical_file_name,<sp/>search_list,<sp/>PR_directory,<sp/>search_type,<sp/>result))</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">PathResolver::SearchPathStatus</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="d1/d31/classPathResolver_1ae28c4774cb65f12147decd3969755a65" kindref="member">PathResolver::check_search_path</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>search_path)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>std::string<sp/>path_list<sp/>=<sp/>gSystem-&gt;Getenv(search_path.c_str());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>path_list.empty()<sp/>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(EnvironmentVariableUndefined);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>spv;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>boost::split(<sp/>spv,<sp/>path_list,<sp/>boost::is_any_of(<sp/>path_separator<sp/>),<sp/>boost::token_compress_on);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;::iterator<sp/>itr=spv.begin();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=<sp/>spv.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bf::path<sp/>pp(*itr);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_directory(pp))<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(UnknownDirectory);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(bf::filesystem_error<sp/></highlight><highlight class="comment">/*err*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(UnknownDirectory);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>Ok<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">std::string<sp/>PathResolverFindXMLFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/d31/classPathResolver_1a8c14195667dec1081a3955bbc0d0a87b" kindref="member">PathResolver::find_file</ref><sp/>(logical_file_name,<sp/></highlight><highlight class="stringliteral">&quot;XMLPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">std::string<sp/>PathResolverFindDataFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d1/d31/classPathResolver_1a8c14195667dec1081a3955bbc0d0a87b" kindref="member">PathResolver::find_file</ref><sp/>(logical_file_name,<sp/></highlight><highlight class="stringliteral">&quot;DATAPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">std::string<sp/>PathResolver::find_calib_file<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>locate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logical_file_name.find(</highlight><highlight class="stringliteral">&quot;dev/&quot;</highlight><highlight class="normal">)==0)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg(MSG::WARNING)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg(MSG::ERROR)<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Locating<sp/>dev<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Do<sp/>not<sp/>let<sp/>this<sp/>propagate<sp/>to<sp/>a<sp/>release&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//expand<sp/>filename<sp/>before<sp/>finding<sp/>..<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>TString<sp/>tmpString(logical_file_name);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>gSystem-&gt;ExpandPathName(tmpString);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>std::string<sp/>expandedFileName(tmpString.Data());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//strip<sp/>any<sp/>spaces<sp/>off<sp/>of<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>boost::algorithm::trim(expandedFileName);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>std::string<sp/>out<sp/>=<sp/><ref refid="d1/d31/classPathResolver_1a8c14195667dec1081a3955bbc0d0a87b" kindref="member">PathResolver::find_file</ref><sp/>(expandedFileName,<sp/></highlight><highlight class="stringliteral">&quot;CALIBPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out==</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>msg(MSG::WARNING)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>locate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">std::string<sp/>PathResolver::find_calib_directory<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>msg(MSG::DEBUG)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>locate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logical_file_name.find(</highlight><highlight class="stringliteral">&quot;dev/&quot;</highlight><highlight class="normal">)==0)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg(MSG::WARNING)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>msg(MSG::ERROR)<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Locating<sp/>dev<sp/>directory<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Do<sp/>not<sp/>let<sp/>this<sp/>propagate<sp/>to<sp/>a<sp/>release&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//expand<sp/>filename<sp/>before<sp/>finding<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>TString<sp/>tmpString(logical_file_name);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>gSystem-&gt;ExpandPathName(tmpString);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>std::string<sp/>expandedFileName(tmpString.Data());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>boost::algorithm::trim(expandedFileName);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>std::string<sp/>out<sp/>=<sp/><ref refid="d1/d31/classPathResolver_1a56011f58f651155aebe71c020ae3e3df" kindref="member">PathResolver::find_directory</ref><sp/>(expandedFileName,<sp/></highlight><highlight class="stringliteral">&quot;CALIBPATH&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out==</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>msg(MSG::WARNING)<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>locate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>logical_file_name<sp/>&lt;&lt;<sp/>endmsg;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathResolver::setOutputLevel(MSG::Level<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>m_setLevel=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>asgMsg().<ref refid="d1/d97/classasg_1_1AsgMessaging_1ade3c4b8227d4dd544df9b5aee53363c3" kindref="member">msg</ref>().setLevel(level);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">std::string<sp/>PathResolverFindCalibFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PathResolver::find_calib_file(logical_file_name);<sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">std::string<sp/>PathResolverFindCalibDirectory<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>logical_file_name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PathResolver::find_calib_directory(logical_file_name);<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PathResolverSetOutputLevel(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lvl)<sp/>{<sp/>PathResolver::setOutputLevel(MSG::Level(lvl));<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PathResolver/Root/PathResolver.cxx"/>
  </compounddef>
</doxygen>
