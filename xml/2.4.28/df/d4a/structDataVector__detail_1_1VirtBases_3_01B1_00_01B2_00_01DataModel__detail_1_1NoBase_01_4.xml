<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4" kind="struct" prot="public">
    <compoundname>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</compoundname>
    <basecompoundref refid="d0/d4d/classDataVector" prot="public" virt="virtual">DataVector&lt; B1 &gt;</basecompoundref>
    <basecompoundref refid="d0/d4d/classDataVector" prot="public" virt="virtual">DataVector&lt; B2 &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class B1</type>
      </param>
      <param>
        <type>class B2</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a2a7fd6e5299e874287a2d127a30d425b" prot="public" static="no">
        <type>::boost::is_same&lt; typename <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B1 &gt;::<ref refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ac5ed6bb2de5c9616d9cc5f4a15b3a046" kindref="member">PtrVector</ref>, typename <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B2 &gt;::<ref refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ac5ed6bb2de5c9616d9cc5f4a15b3a046" kindref="member">PtrVector</ref> &gt;</type>
        <definition>typedef ::boost::is_same&lt;typename DataVector&lt;B1&gt;::PtrVector, typename DataVector&lt;B2&gt;::PtrVector&gt; DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::check</definition>
        <argsstring></argsstring>
        <name>check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ac5ed6bb2de5c9616d9cc5f4a15b3a046" prot="public" static="no">
        <type><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B1 &gt;::<ref refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ac5ed6bb2de5c9616d9cc5f4a15b3a046" kindref="member">PtrVector</ref></type>
        <definition>typedef DataVector&lt;B1&gt;::PtrVector DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::PtrVector</definition>
        <argsstring></argsstring>
        <name>PtrVector</name>
        <reimplements refid="d0/d4d/classDataVector_1ac8d41eaf271f444aeacb80705fde49d9">PtrVector</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the type of the underlying <computeroutput>std::vector</computeroutput> (what <computeroutput>stdcont</computeroutput> returns). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="154" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a459d913bb59e87f0601ef05e20b16396" prot="public" static="no">
        <type><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B1 &gt;::size_type</type>
        <definition>typedef DataVector&lt;B1&gt;::size_type DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <reimplements refid="d0/d4d/classDataVector_1a2d11ee2f3a2528ce3ea9f0791dcb58c9">size_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="155" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a73a43f120be22144d4cda42a4445b8b3" prot="public" static="no">
        <type><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B1 &gt;::difference_type</type>
        <definition>typedef DataVector&lt;B1&gt;::difference_type DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <reimplements refid="d0/d4d/classDataVector_1aab17483aa47f11399ccaafb2931de121">difference_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a39eb47544b9dbe05a6c3488e26282b34" prot="public" static="no">
        <type><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; B1 &gt;::allocator_type</type>
        <definition>typedef DataVector&lt;B1&gt;::allocator_type DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <reimplements refid="d0/d4d/classDataVector_1a058fe076dee6b863cedbe61025ebf24e">allocator_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="157" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a1d44f2b15e66cfc93e5e77fc258ca9df" prot="private" static="no">
        <type>ROOT_SELECTION_NS::DataVector_detail::VirtBases&lt; B1, B2, <ref refid="d4/d21/structDataModel__detail_1_1NoBase" kindref="compound">DataModel_detail::NoBase</ref> &gt;::self</type>
        <definition>typedef ROOT_SELECTION_NS:: DataVector_detail::VirtBases&lt;B1, B2, DataModel_detail::NoBase&gt;::self DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::self</definition>
        <argsstring></argsstring>
        <name>self</name>
        <reimplements refid="d0/d4d/classDataVector_1a251be9ad176cb5c3ed2cb316278fa396">self</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="216" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a9e58dabc78f4e08b9fbf5032be91daa3" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::has_virtual</definition>
        <argsstring></argsstring>
        <name>has_virtual</name>
        <reimplements refid="d0/d4d/classDataVector_1a353125037b2c1b2472f49c7e0adeb7f3">has_virtual</reimplements>
        <initializer> true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is true for any <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> class if we need to use virtual derivation to get to the base <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a818c41041554fb1e8d34158b51f22ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::BOOST_STATIC_ASSERT</definition>
        <argsstring>(check::value)</argsstring>
        <name>BOOST_STATIC_ASSERT</name>
        <param>
          <type>check::value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ad24a52ca335bd4c96557d50f0982f59f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::clearMostDerived</definition>
        <argsstring>()</argsstring>
        <name>clearMostDerived</name>
        <reimplements refid="d0/d4d/classDataVector_1a94c4e1b8437edab8296380c7d620faac">clearMostDerived</reimplements>
        <briefdescription>
<para>Clear <computeroutput>m_isMostDerived</computeroutput> for this instance and for all bases. </para>        </briefdescription>
        <detaileddescription>
<para>Called from the constructor after setting <computeroutput>m_isMostDerived</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="180" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a926abef837fa466046f3f77b06d287e3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::type_info &amp;</type>
        <definition>virtual const std::type_info&amp; DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::dv_typeid</definition>
        <argsstring>() const </argsstring>
        <name>dv_typeid</name>
        <reimplements refid="d0/d4d/classDataVector_1a9ffd936a428c6cacdc3547946901a6a9">dv_typeid</reimplements>
        <briefdescription>
<para>Find the most-derived <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> class in the hierarchy. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <computeroutput>type_info</computeroutput> for the class for which this method gets run.</para></simplesect>
This is used to generate a nice error message when the most-derived check for insertions fails. Every <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> defines this virtual method, so when it&apos;s called, the one corresponding to the most-derived <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> gets run. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="188" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a5625b6e17d2eca61ce8c28e5b9358632" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="da/d8a/classDataModel__detail_1_1DVLInfoBase" kindref="compound">DataModel_detail::DVLInfoBase</ref> &amp;</type>
        <definition>virtual const DataModel_detail::DVLInfoBase&amp; DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::dvlinfo_v</definition>
        <argsstring>() const </argsstring>
        <name>dvlinfo_v</name>
        <reimplements refid="d0/d4d/classDataVector_1ac7fb23bf395a0e3894f454fc7f072764">dvlinfo_v</reimplements>
        <briefdescription>
<para>Return the DV/DL info struct for this class. </para>        </briefdescription>
        <detaileddescription>
<para>This can be used to make sure that it&apos;s instantiated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="192" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1aeb62d8dcd8009b28ec03ca524515b146" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::setMostDerived</definition>
        <argsstring>()</argsstring>
        <name>setMostDerived</name>
        <reimplements refid="d0/d4d/classDataVector_1ac4e7932eb52095ae3e88c913a77f4685">setMostDerived</reimplements>
        <briefdescription>
<para>Set <computeroutput>m_isMostDerived</computeroutput> for this instance and clear it for all bases. </para>        </briefdescription>
        <detaileddescription>
<para>Called from <computeroutput>testInsert</computeroutput> if the test fails. The flag may not have been set if this container was made via copy construction, so set it appropriately now so we can test again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="196" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="195" bodyend="198"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a077a9122f0e9b1fe371287d9e284ee09" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;::baseOffset1</definition>
        <argsstring>(const char *p, const VirtBases &amp;dv, const std::type_info &amp;ti)</argsstring>
        <name>baseOffset1</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="df/d07/structDataVector__detail_1_1VirtBases" kindref="compound">VirtBases</ref> &amp;</type>
          <declname>dv</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="202" bodyend="209"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="df/d07/structDataVector__detail_1_1VirtBases" kindref="compound">VirtBases</ref> for two classes. </para>    </briefdescription>
    <detaileddescription>
<para><computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput> derives from this for the case of <computeroutput><ref refid="d1/def/classT" kindref="compound">T</ref></computeroutput> deriving from two classes. It in turn derives from <computeroutput>B1</computeroutput> and <computeroutput>B2</computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="23028">
        <label>typename DataVectorBase&lt;B1 &gt;::Base</label>
        <link refid="d5/dd9/classtypename_01DataVectorBase_1_1Base"/>
      </node>
      <node id="23026">
        <label>DataVector&lt; B1 &gt;</label>
        <link refid="d0/d4d/classDataVector"/>
        <childnode refid="23027" relation="private-inheritance">
        </childnode>
        <childnode refid="23028" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23025">
        <label>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</label>
        <link refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4"/>
        <childnode refid="23026" relation="public-inheritance">
        </childnode>
        <childnode refid="23029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23027">
        <label>KeepFirstTemplateArguments&lt; 1 &gt;</label>
        <link refid="d6/de5/classKeepFirstTemplateArguments"/>
      </node>
      <node id="23030">
        <label>typename DataVectorBase&lt;B2 &gt;::Base</label>
        <link refid="d5/dd9/classtypename_01DataVectorBase_1_1Base"/>
      </node>
      <node id="23029">
        <label>DataVector&lt; B2 &gt;</label>
        <link refid="d0/d4d/classDataVector"/>
        <childnode refid="23027" relation="private-inheritance">
        </childnode>
        <childnode refid="23030" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="23034">
        <label>typename DataVectorBase&lt;B1 &gt;::Base</label>
        <link refid="d5/dd9/classtypename_01DataVectorBase_1_1Base"/>
      </node>
      <node id="23032">
        <label>DataVector&lt; B1 &gt;</label>
        <link refid="d0/d4d/classDataVector"/>
        <childnode refid="23033" relation="private-inheritance">
        </childnode>
        <childnode refid="23034" relation="public-inheritance">
        </childnode>
        <childnode refid="23035" relation="usage">
          <edgelabel>s_info</edgelabel>
        </childnode>
        <childnode refid="23037" relation="usage">
          <edgelabel>m_isMostDerived</edgelabel>
        </childnode>
      </node>
      <node id="23037">
        <label>SG::IsMostDerivedFlag</label>
        <link refid="df/d76/classSG_1_1IsMostDerivedFlag"/>
      </node>
      <node id="23031">
        <label>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</label>
        <link refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4"/>
        <childnode refid="23032" relation="public-inheritance">
        </childnode>
        <childnode refid="23038" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23033">
        <label>KeepFirstTemplateArguments&lt; 1 &gt;</label>
        <link refid="d6/de5/classKeepFirstTemplateArguments"/>
      </node>
      <node id="23040">
        <label>DataModel_detail::DVLInfo&lt; DataVector&lt; B2 &gt; &gt;</label>
        <link refid="df/d12/classDataModel__detail_1_1DVLInfo"/>
        <childnode refid="23036" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23036">
        <label>DataModel_detail::DVLInfoBase</label>
        <link refid="da/d8a/classDataModel__detail_1_1DVLInfoBase"/>
      </node>
      <node id="23039">
        <label>typename DataVectorBase&lt;B2 &gt;::Base</label>
        <link refid="d5/dd9/classtypename_01DataVectorBase_1_1Base"/>
      </node>
      <node id="23035">
        <label>DataModel_detail::DVLInfo&lt; DataVector&lt; B1 &gt; &gt;</label>
        <link refid="df/d12/classDataModel__detail_1_1DVLInfo"/>
        <childnode refid="23036" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23038">
        <label>DataVector&lt; B2 &gt;</label>
        <link refid="d0/d4d/classDataVector"/>
        <childnode refid="23033" relation="private-inheritance">
        </childnode>
        <childnode refid="23039" relation="public-inheritance">
        </childnode>
        <childnode refid="23040" relation="usage">
          <edgelabel>s_info</edgelabel>
        </childnode>
        <childnode refid="23037" relation="usage">
          <edgelabel>m_isMostDerived</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" line="147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/DataVector.icc" bodystart="144" bodyend="217"/>
    <listofallmembers>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a39eb47544b9dbe05a6c3488e26282b34" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>allocator_type</name></member>
      <member refid="d0/d4d/classDataVector_1a39b727c555a667c66094016314050332" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>assign</name></member>
      <member refid="d0/d4d/classDataVector_1a39b727c555a667c66094016314050332" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>assign</name></member>
      <member refid="d0/d4d/classDataVector_1a3f598b345c9b1eb8793fd9cc6c16abe3" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>at</name></member>
      <member refid="d0/d4d/classDataVector_1ac9c3322bdb72e9bc502a578715937807" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>at</name></member>
      <member refid="d0/d4d/classDataVector_1a3f598b345c9b1eb8793fd9cc6c16abe3" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>at</name></member>
      <member refid="d0/d4d/classDataVector_1ac9c3322bdb72e9bc502a578715937807" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>at</name></member>
      <member refid="d0/d4d/classDataVector_1a749ffc30735b0fbd0269df4e750851a7" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>auxbase</name></member>
      <member refid="d0/d4d/classDataVector_1a749ffc30735b0fbd0269df4e750851a7" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>auxbase</name></member>
      <member refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d4d/classDataVector_1a56c7d05bd0d914c446598aab3402e020" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d4d/classDataVector_1a56c7d05bd0d914c446598aab3402e020" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>back</name></member>
      <member refid="d0/d4d/classDataVector_1af41f7b0dcfd7647422459e4386d6cc8e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>base_value_type</name></member>
      <member refid="d0/d4d/classDataVector_1af41f7b0dcfd7647422459e4386d6cc8e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>base_value_type</name></member>
      <member refid="d0/d4d/classDataVector_1a6a6d678ca42e0eee8fec9e17eae6c0a4" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>BaseContainer</name></member>
      <member refid="d0/d4d/classDataVector_1a6a6d678ca42e0eee8fec9e17eae6c0a4" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>BaseContainer</name></member>
      <member refid="d0/d4d/classDataVector_1a3af6f600eec6df2c3652211ba80fc031" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>baseOffset</name></member>
      <member refid="d0/d4d/classDataVector_1a3af6f600eec6df2c3652211ba80fc031" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>baseOffset</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a077a9122f0e9b1fe371287d9e284ee09" prot="protected" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>baseOffset1</name></member>
      <member refid="d0/d4d/classDataVector_1ad1616eb350fff0fc40908c62bb8fd9da" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>baseOffset1</name></member>
      <member refid="d0/d4d/classDataVector_1ad1616eb350fff0fc40908c62bb8fd9da" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>baseOffset1</name></member>
      <member refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="d0/d4d/classDataVector_1a2c42ec99129008304681ddef6b812c15" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="d0/d4d/classDataVector_1a2c42ec99129008304681ddef6b812c15" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>begin</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a818c41041554fb1e8d34158b51f22ab6" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>BOOST_STATIC_ASSERT</name></member>
      <member refid="d0/d4d/classDataVector_1a60c5cb0eab20bb3f2325ca9037ec3b5b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>capacity</name></member>
      <member refid="d0/d4d/classDataVector_1a60c5cb0eab20bb3f2325ca9037ec3b5b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>capacity</name></member>
      <member refid="d0/d4d/classDataVector_1a2ba633ea0a2c1c0a8413ca4897817e4e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>cbegin</name></member>
      <member refid="d0/d4d/classDataVector_1a2ba633ea0a2c1c0a8413ca4897817e4e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>cbegin</name></member>
      <member refid="d0/d4d/classDataVector_1aa42d00ed3a26858f32f25e2e1010ca4f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>cend</name></member>
      <member refid="d0/d4d/classDataVector_1aa42d00ed3a26858f32f25e2e1010ca4f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>cend</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a2a7fd6e5299e874287a2d127a30d425b" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>check</name></member>
      <member refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1ae40a6a2cf044fdeb1defe4889213c5e2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1a70c20dac9bc136ec903ae571a203314f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1a2871d04482709adc5ad14fdd4780e934" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1af2b028c097d741794a59b03c184fb70a" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1ae40a6a2cf044fdeb1defe4889213c5e2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="d0/d4d/classDataVector_1a70c20dac9bc136ec903ae571a203314f" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clear</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ad24a52ca335bd4c96557d50f0982f59f" prot="protected" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>clearMostDerived</name></member>
      <member refid="d0/d4d/classDataVector_1a105a683f8b36d88454de49c757747fde" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_iterator</name></member>
      <member refid="d0/d4d/classDataVector_1a105a683f8b36d88454de49c757747fde" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_iterator</name></member>
      <member refid="d0/d4d/classDataVector_1ad64bda7c082445e7612279b8d8fe45b5" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_pointer</name></member>
      <member refid="d0/d4d/classDataVector_1ad64bda7c082445e7612279b8d8fe45b5" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_pointer</name></member>
      <member refid="d0/d4d/classDataVector_1a00f78b0e29b4b50cea072aaa82800311" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_reference</name></member>
      <member refid="d0/d4d/classDataVector_1a00f78b0e29b4b50cea072aaa82800311" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_reference</name></member>
      <member refid="d0/d4d/classDataVector_1ab289e00e978a3cbcbb642ab9dc28617c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_reverse_iterator</name></member>
      <member refid="d0/d4d/classDataVector_1ab289e00e978a3cbcbb642ab9dc28617c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_reverse_iterator</name></member>
      <member refid="d0/d4d/classDataVector_1a6b0c09ea08315b3675274f96c1c30f0e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_value_type</name></member>
      <member refid="d0/d4d/classDataVector_1a6b0c09ea08315b3675274f96c1c30f0e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>const_value_type</name></member>
      <member refid="d0/d4d/classDataVector_1ade43c536beab58ae6b2e037fd67ff8e2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>crbegin</name></member>
      <member refid="d0/d4d/classDataVector_1ade43c536beab58ae6b2e037fd67ff8e2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>crbegin</name></member>
      <member refid="d0/d4d/classDataVector_1a07fbb4e8bddec66621cc3f78defbc92b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>crend</name></member>
      <member refid="d0/d4d/classDataVector_1a07fbb4e8bddec66621cc3f78defbc92b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>crend</name></member>
      <member refid="d0/d4d/classDataVector_1a2cf6a773e2f312ccade13b686b8f01d6" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataModel_detail::ElementProxy&lt; DataVector &gt;</name></member>
      <member refid="d0/d4d/classDataVector_1a2cf6a773e2f312ccade13b686b8f01d6" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataModel_detail::ElementProxy&lt; DataVector &gt;</name></member>
      <member refid="d0/d4d/classDataVector_1a16bded828caf6b976bd7052d3439b5b6" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1a10e3c4b4b0de95c7fd13ad9a3be5fb58" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1ac113b3ae53f2d1254efc34bbacd25f14" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1a16bded828caf6b976bd7052d3439b5b6" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1a10e3c4b4b0de95c7fd13ad9a3be5fb58" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1ac113b3ae53f2d1254efc34bbacd25f14" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector</name></member>
      <member refid="d0/d4d/classDataVector_1adbb7524fe05522edf000e397dc36a183" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector_BASE</name></member>
      <member refid="d0/d4d/classDataVector_1adbb7524fe05522edf000e397dc36a183" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DataVector_BASE</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a73a43f120be22144d4cda42a4445b8b3" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>difference_type</name></member>
      <member refid="d0/d4d/classDataVector_1abf16cf8a9eb9c1c6a4419be395208ca0" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>do_cast</name></member>
      <member refid="d0/d4d/classDataVector_1abf16cf8a9eb9c1c6a4419be395208ca0" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>do_cast</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a926abef837fa466046f3f77b06d287e3" prot="protected" virt="virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>dv_typeid</name></member>
      <member refid="d0/d4d/classDataVector_1abced550e4bb02a91c1b1c660ddf9071d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DVL_BASE</name></member>
      <member refid="d0/d4d/classDataVector_1abced550e4bb02a91c1b1c660ddf9071d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>DVL_BASE</name></member>
      <member refid="d0/d4d/classDataVector_1a4831de47c79708079d0c1e1e1c9e4363" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>dvlinfo</name></member>
      <member refid="d0/d4d/classDataVector_1a4831de47c79708079d0c1e1e1c9e4363" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>dvlinfo</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a5625b6e17d2eca61ce8c28e5b9358632" prot="protected" virt="virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>dvlinfo_v</name></member>
      <member refid="d0/d4d/classDataVector_1a51e5972e57ba800d8f93b781c7af58e3" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>ElementProxy</name></member>
      <member refid="d0/d4d/classDataVector_1a51e5972e57ba800d8f93b781c7af58e3" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>ElementProxy</name></member>
      <member refid="d0/d4d/classDataVector_1ac6f57a40acf210dfbb95205bb078be3b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>emplace</name></member>
      <member refid="d0/d4d/classDataVector_1ac6f57a40acf210dfbb95205bb078be3b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>emplace</name></member>
      <member refid="d0/d4d/classDataVector_1af6206e99fb0d7d2e2fce1eafe99877f1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>emplace_back</name></member>
      <member refid="d0/d4d/classDataVector_1af6206e99fb0d7d2e2fce1eafe99877f1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>emplace_back</name></member>
      <member refid="d0/d4d/classDataVector_1a85aede44dff3bf86318e9d7ee71f0de5" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>empty</name></member>
      <member refid="d0/d4d/classDataVector_1a85aede44dff3bf86318e9d7ee71f0de5" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>empty</name></member>
      <member refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d4d/classDataVector_1ad7a08d945fb1698fcb3ea07ab1dccbec" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d4d/classDataVector_1ad7a08d945fb1698fcb3ea07ab1dccbec" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>end</name></member>
      <member refid="d0/d4d/classDataVector_1a249b08ecb8260e288fe9087e3db48950" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d4d/classDataVector_1acaf33a6392cb774a35ee362d140fd17c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d4d/classDataVector_1a249b08ecb8260e288fe9087e3db48950" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d4d/classDataVector_1acaf33a6392cb774a35ee362d140fd17c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>erase</name></member>
      <member refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d4d/classDataVector_1a1ad4290a3853f0a10ea79452c4a0b423" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d4d/classDataVector_1a1ad4290a3853f0a10ea79452c4a0b423" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>front</name></member>
      <member refid="d0/d4d/classDataVector_1aee535632a89bd041be90a3fa3058e36b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>get</name></member>
      <member refid="d0/d4d/classDataVector_1aee535632a89bd041be90a3fa3058e36b" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>get</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a9e58dabc78f4e08b9fbf5032be91daa3" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>has_virtual</name></member>
      <member refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d4d/classDataVector_1a173e4fcf883f04507805618118c444a9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d4d/classDataVector_1a173e4fcf883f04507805618118c444a9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>insert</name></member>
      <member refid="d0/d4d/classDataVector_1a309f0e29bcde5ca107c5232cbf6b9d4c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>iter_swap</name></member>
      <member refid="d0/d4d/classDataVector_1a309f0e29bcde5ca107c5232cbf6b9d4c" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>iter_swap</name></member>
      <member refid="d0/d4d/classDataVector_1a720d2b9643ffc12ed1725cec9ecc691e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>iterator</name></member>
      <member refid="d0/d4d/classDataVector_1a720d2b9643ffc12ed1725cec9ecc691e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>iterator</name></member>
      <member refid="d0/d4d/classDataVector_1a731423a95c8a02f9ced02e25b8197cc9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>m_isMostDerived</name></member>
      <member refid="d0/d4d/classDataVector_1a731423a95c8a02f9ced02e25b8197cc9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>m_isMostDerived</name></member>
      <member refid="d0/d4d/classDataVector_1afaa2425da1ced3fa685a37a2a0561b05" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>max_size</name></member>
      <member refid="d0/d4d/classDataVector_1afaa2425da1ced3fa685a37a2a0561b05" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>max_size</name></member>
      <member refid="d0/d4d/classDataVector_1a31f28630872abd2e694534c7cc8fa4ec" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator=</name></member>
      <member refid="d0/d4d/classDataVector_1a31f28630872abd2e694534c7cc8fa4ec" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator=</name></member>
      <member refid="d0/d4d/classDataVector_1ab22de888b8cf10f2b05fe6bc48465381" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator[]</name></member>
      <member refid="d0/d4d/classDataVector_1a9e0e83fd312a9ebdc94666283bf65de9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator[]</name></member>
      <member refid="d0/d4d/classDataVector_1ab22de888b8cf10f2b05fe6bc48465381" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator[]</name></member>
      <member refid="d0/d4d/classDataVector_1a9e0e83fd312a9ebdc94666283bf65de9" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>operator[]</name></member>
      <member refid="d0/d4d/classDataVector_1a23689a65fe5243d0bd00c3aa79640f98" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>ownPolicy</name></member>
      <member refid="d0/d4d/classDataVector_1a23689a65fe5243d0bd00c3aa79640f98" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>ownPolicy</name></member>
      <member refid="d0/d4d/classDataVector_1a27b9433721506dc44069b1b6c91c873e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>pointer</name></member>
      <member refid="d0/d4d/classDataVector_1a27b9433721506dc44069b1b6c91c873e" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>pointer</name></member>
      <member refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>pop_back</name></member>
      <member refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>pop_back</name></member>
      <member refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>pop_back</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1ac5ed6bb2de5c9616d9cc5f4a15b3a046" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>PtrVector</name></member>
      <member refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>push_back</name></member>
      <member refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>push_back</name></member>
      <member refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d4d/classDataVector_1ab216c17baaede1e4a8dd98f53071b354" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d4d/classDataVector_1ab216c17baaede1e4a8dd98f53071b354" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rbegin</name></member>
      <member refid="d0/d4d/classDataVector_1a93d4d960378dca6d5b26597d06247ae7" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reference</name></member>
      <member refid="d0/d4d/classDataVector_1a93d4d960378dca6d5b26597d06247ae7" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reference</name></member>
      <member refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d4d/classDataVector_1a49e6422f38b1483a45b642534c7f83f4" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d4d/classDataVector_1a49e6422f38b1483a45b642534c7f83f4" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>rend</name></member>
      <member refid="d0/d4d/classDataVector_1a3827d1fa4f134ba36346893715dd5bc1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reserve</name></member>
      <member refid="d0/d4d/classDataVector_1a3827d1fa4f134ba36346893715dd5bc1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reserve</name></member>
      <member refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>resize</name></member>
      <member refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>resize</name></member>
      <member refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>resize</name></member>
      <member refid="d0/d4d/classDataVector_1af1d9fb01d514c009d7acefc7ac7b02c1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>resortAux</name></member>
      <member refid="d0/d4d/classDataVector_1af1d9fb01d514c009d7acefc7ac7b02c1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>resortAux</name></member>
      <member refid="d0/d4d/classDataVector_1a48b8aeb52be5374ae659f1c383e6e172" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reverse_iterator</name></member>
      <member refid="d0/d4d/classDataVector_1a48b8aeb52be5374ae659f1c383e6e172" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>reverse_iterator</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a1d44f2b15e66cfc93e5e77fc258ca9df" prot="private" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>self</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1aeb62d8dcd8009b28ec03ca524515b146" prot="protected" virt="virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>setMostDerived</name></member>
      <member refid="d0/d4d/classDataVector_1a8edc54fe5f97284d23ef5e88319c7a86" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>shrink_to_fit</name></member>
      <member refid="d0/d4d/classDataVector_1a8edc54fe5f97284d23ef5e88319c7a86" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>shrink_to_fit</name></member>
      <member refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>size</name></member>
      <member refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>size</name></member>
      <member refid="df/d4a/structDataVector__detail_1_1VirtBases_3_01B1_00_01B2_00_01DataModel__detail_1_1NoBase_01_4_1a459d913bb59e87f0601ef05e20b16396" prot="public" virt="non-virtual"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>size_type</name></member>
      <member refid="d0/d4d/classDataVector_1a33ee222cacf6bcdf7a561a8505ec09c1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d4d/classDataVector_1a81fae208d38453acd5d3aaccafe5c10d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d4d/classDataVector_1a33ee222cacf6bcdf7a561a8505ec09c1" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d4d/classDataVector_1a81fae208d38453acd5d3aaccafe5c10d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>sort</name></member>
      <member refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>stdcont</name></member>
      <member refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>stdcont</name></member>
      <member refid="d0/d4d/classDataVector_1a53d2dcc591d07cc817b06d2523442432" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swap</name></member>
      <member refid="d0/d4d/classDataVector_1a53d2dcc591d07cc817b06d2523442432" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swap</name></member>
      <member refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swapElement</name></member>
      <member refid="d0/d4d/classDataVector_1abe2ea523c0d8d9afc0e2cbfb643b72cc" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swapElement</name></member>
      <member refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swapElement</name></member>
      <member refid="d0/d4d/classDataVector_1abe2ea523c0d8d9afc0e2cbfb643b72cc" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>swapElement</name></member>
      <member refid="d0/d4d/classDataVector_1a3a87c3dae960c19e5108bbacad44b557" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>testInsert</name></member>
      <member refid="d0/d4d/classDataVector_1a3a87c3dae960c19e5108bbacad44b557" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>testInsert</name></member>
      <member refid="d0/d4d/classDataVector_1aebc91510c38d2fd8e413736faa744258" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>testInsertOol</name></member>
      <member refid="d0/d4d/classDataVector_1aebc91510c38d2fd8e413736faa744258" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>testInsertOol</name></member>
      <member refid="d0/d4d/classDataVector_1a1055f8ad9a5f8ed057a4f047a87def97" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B1 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>value_type</name></member>
      <member refid="d0/d4d/classDataVector_1a1055f8ad9a5f8ed057a4f047a87def97" prot="public" virt="non-virtual" ambiguityscope="DataVector&lt; B2 &gt;::"><scope>DataVector_detail::VirtBases&lt; B1, B2, DataModel_detail::NoBase &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
