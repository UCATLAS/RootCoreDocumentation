<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="df/dac/classCxxUtils_1_1ArrayScanner" kind="class" prot="public">
    <compoundname>CxxUtils::ArrayScanner</compoundname>
    <includes refid="da/d1e/ArrayScanner_8h" local="no">ArrayScanner.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="df/dac/classCxxUtils_1_1ArrayScanner_1abbddef29794b383182d78aafd3a0caa4" prot="private" static="no" mutable="no">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; CxxUtils::ArrayScanner::m_is</definition>
        <argsstring></argsstring>
        <name>m_is</name>
        <briefdescription>
<para>The stream from which we&apos;re reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1acdef3230c09e5e938024f4e81b4013fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::ArrayScanner::ArrayScanner</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>ArrayScanner</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream from which to scan.</para></parameterdescription>
</parameteritem>
</parameterlist>
Builds a new scanner reading from stream <emphasis>is</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1aa6bd5d1b8beb6ebd1f6045d515bd3dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayScanner::at_open</definition>
        <argsstring>()</argsstring>
        <name>at_open</name>
        <briefdescription>
<para>Read opening token. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. If we&apos;re then looking at `[&apos;, consume it and return true. Otherwise, return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1a66e8cd1d20153ad03ae1c24bc6ff1a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayScanner::at_close</definition>
        <argsstring>()</argsstring>
        <name>at_close</name>
        <briefdescription>
<para>Read closing token. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. If we&apos;re then looking at `]&apos;, consume it and return true. If there&apos;s a comma following it, consume that too. Otherwise, return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="55" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1ae1572fa31fe87892c1650b6ce519ef54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayScanner::at_end</definition>
        <argsstring>()</argsstring>
        <name>at_end</name>
        <briefdescription>
<para>Test for end-of-stream. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. Return true if we&apos;re then at the end of the stream. Otherwise, return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="74" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1ab56f0afc999ef8e9909c96410057c61d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool CaloRec::ArrayScanner::at_num</definition>
        <argsstring>(T &amp;elt)</argsstring>
        <name>at_num</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>elt</declname>
        </param>
        <briefdescription>
<para>Read number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elt[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>The number read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. If we&apos;re then looking at a number that can be converted to type <computeroutput><ref refid="d1/def/classT" kindref="compound">T</ref></computeroutput>, read it and return true. The value is returned in <emphasis>elt</emphasis>. If there&apos;s a comma following it, consume that too. Otherwise, return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" bodystart="120" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1a0b8bd96e996c87c30e43d1977cf30ada" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayScanner::at_char</definition>
        <argsstring>(char c)</argsstring>
        <name>at_char</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Read a character. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. If we&apos;re then looking at <emphasis>c</emphasis>, consume it and return true. Otherwise, return false.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>character to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if successful.</para></simplesect>
Consume any white space at the head of the stream. If we&apos;re then looking at <emphasis>c</emphasis>, consume it and return true. Otherwise, return false. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="df/dac/classCxxUtils_1_1ArrayScanner_1a815d86318d06d75bb2154372efe61bc1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayScanner::at_num_common</definition>
        <argsstring>()</argsstring>
        <name>at_num_common</name>
        <briefdescription>
<para>The non-template part of reading a number. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if successful.</para></simplesect>
This is called after the attempt to read the number itself. This function checks that the read was in fact successful. If so, then it will also consume any following comma. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="111" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ArrayScanner.cxx" bodystart="112" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class for converting strings to Array&apos;s. </para>    </briefdescription>
    <detaileddescription>
<para>This class is a simple lexical analyzer used in converting strings to multidimensional array representations. We get a stream as input. This stream can contain three types of tokens: an open bracket, a close bracket, or a floating-point number. We provide methods to test if either of these three items is at the head of the stream. If so, the item is consumed. (An optional comma may follow a close bracket or a number; it is consumed when the item in front of it is consumed.) We can also test to see if we&apos;re at the end. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ArrayScanner.h" bodystart="34" bodyend="116"/>
    <listofallmembers>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1acdef3230c09e5e938024f4e81b4013fc" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>ArrayScanner</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1a0b8bd96e996c87c30e43d1977cf30ada" prot="private" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_char</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1a66e8cd1d20153ad03ae1c24bc6ff1a15" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_close</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1ae1572fa31fe87892c1650b6ce519ef54" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_end</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1ab56f0afc999ef8e9909c96410057c61d" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_num</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1a815d86318d06d75bb2154372efe61bc1" prot="private" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_num_common</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1aa6bd5d1b8beb6ebd1f6045d515bd3dec" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>at_open</name></member>
      <member refid="df/dac/classCxxUtils_1_1ArrayScanner_1abbddef29794b383182d78aafd3a0caa4" prot="private" virt="non-virtual"><scope>CxxUtils::ArrayScanner</scope><name>m_is</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
