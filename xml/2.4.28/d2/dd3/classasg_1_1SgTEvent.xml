<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dd3/classasg_1_1SgTEvent" kind="class" prot="public">
    <compoundname>asg::SgTEvent</compoundname>
    <includes refid="d4/d7e/SgTEvent_8h" local="no">SgTEvent.h</includes>
      <sectiondef kind="user-defined">
      <header>Functions providing access to the persistent and transient data</header>
      <description><para><anchor id="_1amgrpc4a7a55960de0e029b2a0b42a014a52b"/> </para></description>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a8cb0a0fc4a08c28becf83866de22d1e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool asg::SgTEvent::contains</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check if an object is available for constant access. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="21" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a7520bbe97bf129c4feb421640eea2a01" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool asg::SgTEvent::transientContains</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>transientContains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check if an object is available for non-constant access. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="40" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a98a371f24b35357706590970fbfaaaf1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T * asg::SgTEvent::retrieve</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>retrieve</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Function retrieving a constant or non-constant object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="59" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a7126400a5ec39a907d0f36ae393b811c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>StatusCode</type>
        <definition>StatusCode asg::SgTEvent::retrieve</definition>
        <argsstring>(T *&amp;pobj, const std::string &amp;name)</argsstring>
        <name>retrieve</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
          <declname>pobj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieve a container from memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="69" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a75691fb1c67d56d3a7362c2f5ed29067" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>StatusCode</type>
        <definition>StatusCode asg::SgTEvent::retrieve</definition>
        <argsstring>(const T *&amp;pobj, const std::string &amp;name) const </argsstring>
        <name>retrieve</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
          <declname>pobj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieve a container from the input file or the memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="100" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1ac6ad472e2bb2f60364767794b58a961c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>StatusCode</type>
        <definition>StatusCode asg::SgTEvent::record</definition>
        <argsstring>(T *pobj, const std::string &amp;cname)</argsstring>
        <name>record</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>pobj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cname</declname>
        </param>
        <briefdescription>
<para>Record an object/container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="112" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1ad0d59db9bca9db8ec3cbd14895ad7483" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>StatusCode</type>
        <definition>StatusCode asg::SgTEvent::overwrite</definition>
        <argsstring>(T *pobj, const std::string &amp;name, bool allowMods, bool resetOnly=true, bool noHist=false)</argsstring>
        <name>overwrite</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>pobj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowMods</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>resetOnly</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>noHist</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Overwrite an object/container in the transient store. </para>        </briefdescription>
        <detaileddescription>
<para>Container overwriting is not allowed in standalone mode. The function is just here to allow the compilation of code that was mainly written for the offline environment. (In case the behaviour of the code is chosen according to its runtime configuration.)</para><para>As it&apos;s a dummy, function parameters are not described here. They are modeled after the <computeroutput>StoreGateSvc::overwrite</computeroutput> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.icc" bodystart="147" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d2/dd3/classasg_1_1SgTEvent_1abf7df35bae4c7d056ef6dc03a6100868" prot="private" static="no" mutable="yes">
        <type><ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">xAOD::TEvent</ref> *</type>
        <definition>xAOD::TEvent* asg::SgTEvent::m_pevm</definition>
        <argsstring></argsstring>
        <name>m_pevm</name>
        <briefdescription>
<para>Pointer to the TEvent that this object interacts with. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="91" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd3/classasg_1_1SgTEvent_1a7a6186bb707f6e5ef3e9cc18283ffcd7" prot="private" static="no" mutable="yes">
        <type><ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref> *</type>
        <definition>xAOD::TStore* asg::SgTEvent::m_ptds</definition>
        <argsstring></argsstring>
        <name>m_ptds</name>
        <briefdescription>
<para>Pointer to the TStore that this object interacts with. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1af559e3703fa50d4983b297a3562a371e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>asg::SgTEvent::SgTEvent</definition>
        <argsstring>(xAOD::TEvent *pevm=0, xAOD::TStore *ptds=0)</argsstring>
        <name>SgTEvent</name>
        <param>
          <type><ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">xAOD::TEvent</ref> *</type>
          <declname>pevm</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref> *</type>
          <declname>ptds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor specifying concrete TEvent and TStore objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/SgTEvent.cxx" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a7758dfd5b81cee951fb5fa8c6e788fc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">xAOD::TEvent</ref> *</type>
        <definition>xAOD::TEvent * asg::SgTEvent::event</definition>
        <argsstring>() const </argsstring>
        <name>event</name>
        <briefdescription>
<para>Return the underlying event manager. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/SgTEvent.cxx" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1ad13edb2e60eee2f5697be6696636f1af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref> *</type>
        <definition>xAOD::TStore * asg::SgTEvent::tds</definition>
        <argsstring>() const </argsstring>
        <name>tds</name>
        <briefdescription>
<para>Return the underlying transient data store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/SgTEvent.cxx" bodystart="31" bodyend="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d2/dd3/classasg_1_1SgTEvent_1a64a25a401022599fd82210c7cbfc7604" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode asg::SgTEvent::initialize</definition>
        <argsstring>() const </argsstring>
        <name>initialize</name>
        <briefdescription>
<para>Function initialising the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/Root/SgTEvent.cxx" bodystart="42" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Wrapper for TEvent to make it look like StoreGate.</para><para>In order to be able to interact with <ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">xAOD::TEvent</ref> using the same sort of code that we use to interact with <ref refid="dd/d95/classStoreGateSvc" kindref="compound">StoreGateSvc</ref> in <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref>, we wrap it into such an object.</para><para>This class also takes care of placing transient objects into <ref refid="dd/dae/classxAOD_1_1TStore" kindref="compound">xAOD::TStore</ref>.</para><para><simplesect kind="author"><para>David Adams &lt;<ulink url="mailto:dladams@bnl.gov">dladams@bnl.gov</ulink>&gt; </para><simplesectsep/><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>669898 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-05-26 15:49:13 +0200 (Tue, 26 May 2015) </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="17491">
        <label>xAOD::TStore</label>
        <link refid="dd/dae/classxAOD_1_1TStore"/>
      </node>
      <node id="17493">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="17492">
        <label>xAOD::TEvent</label>
        <link refid="de/d95/classxAOD_1_1TEvent"/>
        <childnode refid="17493" relation="public-inheritance">
        </childnode>
        <childnode refid="17494" relation="usage">
          <edgelabel>m_inChainTracker</edgelabel>
        </childnode>
        <childnode refid="17495" relation="usage">
          <edgelabel>m_outputEventFormat</edgelabel>
          <edgelabel>m_inputEventFormat</edgelabel>
        </childnode>
      </node>
      <node id="17495">
        <label>xAOD::EventFormat_v1</label>
        <link refid="d8/d1f/classxAOD_1_1EventFormat__v1"/>
      </node>
      <node id="17490">
        <label>asg::SgTEvent</label>
        <link refid="d2/dd3/classasg_1_1SgTEvent"/>
        <childnode refid="17491" relation="usage">
          <edgelabel>m_ptds</edgelabel>
        </childnode>
        <childnode refid="17492" relation="usage">
          <edgelabel>m_pevm</edgelabel>
        </childnode>
      </node>
      <node id="17494">
        <label>xAOD::TChainStateTracker</label>
        <link refid="d1/d3a/classxAOD_1_1TChainStateTracker"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/SgTEvent.h" bodystart="41" bodyend="95"/>
    <listofallmembers>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a8cb0a0fc4a08c28becf83866de22d1e4" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>contains</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a7758dfd5b81cee951fb5fa8c6e788fc6" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>event</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a64a25a401022599fd82210c7cbfc7604" prot="private" virt="non-virtual"><scope>asg::SgTEvent</scope><name>initialize</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1abf7df35bae4c7d056ef6dc03a6100868" prot="private" virt="non-virtual"><scope>asg::SgTEvent</scope><name>m_pevm</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a7a6186bb707f6e5ef3e9cc18283ffcd7" prot="private" virt="non-virtual"><scope>asg::SgTEvent</scope><name>m_ptds</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1ad0d59db9bca9db8ec3cbd14895ad7483" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>overwrite</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1ac6ad472e2bb2f60364767794b58a961c" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>record</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a98a371f24b35357706590970fbfaaaf1" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>retrieve</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a7126400a5ec39a907d0f36ae393b811c" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>retrieve</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a75691fb1c67d56d3a7362c2f5ed29067" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>retrieve</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1af559e3703fa50d4983b297a3562a371e" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>SgTEvent</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1ad13edb2e60eee2f5697be6696636f1af" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>tds</name></member>
      <member refid="d2/dd3/classasg_1_1SgTEvent_1a7520bbe97bf129c4feb421640eea2a01" prot="public" virt="non-virtual"><scope>asg::SgTEvent</scope><name>transientContains</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
