<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dca/ClassName__test_8cxx" kind="file">
    <compoundname>ClassName_test.cxx</compoundname>
    <includes refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" local="yes">CxxUtils/ClassName.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes refid="d4/d2f/expect__exception_8icc" local="yes">expect_exception.icc</includes>
    <incdepgraph>
      <node id="113634">
        <label>cassert</label>
      </node>
      <node id="113632">
        <label>stdexcept</label>
      </node>
      <node id="113629">
        <label>string</label>
      </node>
      <node id="113631">
        <label>map</label>
      </node>
      <node id="113627">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx</label>
        <link refid="ClassName_test.cxx"/>
        <childnode refid="113628" relation="include">
        </childnode>
        <childnode refid="113633" relation="include">
        </childnode>
        <childnode refid="113634" relation="include">
        </childnode>
        <childnode refid="113635" relation="include">
        </childnode>
      </node>
      <node id="113630">
        <label>vector</label>
      </node>
      <node id="113635">
        <label>expect_exception.icc</label>
        <link refid="d4/d2f/expect__exception_8icc"/>
      </node>
      <node id="113633">
        <label>iostream</label>
      </node>
      <node id="113628">
        <label>CxxUtils/ClassName.h</label>
        <link refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h"/>
        <childnode refid="113629" relation="include">
        </childnode>
        <childnode refid="113630" relation="include">
        </childnode>
        <childnode refid="113631" relation="include">
        </childnode>
        <childnode refid="113632" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="22" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1a47dba3b389b3e075f5aa5f28a303a134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_eq</definition>
        <argsstring>()</argsstring>
        <name>test_eq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="94" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1a21688acf4e90270c849391bfd02287b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_match</definition>
        <argsstring>()</argsstring>
        <name>test_match</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="108" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1a7ac15f170bdbf4e0b83c27e0b3b630b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subst</definition>
        <argsstring>()</argsstring>
        <name>test_subst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="144" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="143" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1abe680f16b94961c305d2210813e8f887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_rules</definition>
        <argsstring>()</argsstring>
        <name>test_rules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="176" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="175" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="d2/dca/ClassName__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" line="208" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx" bodystart="207" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for ClassName. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Jun, 2014 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">CxxUtils/ClassName.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d2f/expect__exception_8icc" kindref="compound" tooltip="Helper to check that an exception is thrown.">expect_exception.icc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">CxxUtils::ClassName</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;const<sp/>Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo<sp/>const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo::Bar::Fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo::Bar::Fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo::Bar::Fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;Bar&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;Bar&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;Bar,Fee&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;Bar,Fee&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;Bar<sp/>const,Fee&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>Bar,Fee&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;Bar<sp/>const,Fee&gt;<sp/>const&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>Foo&lt;const<sp/>Bar,Fee&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;C&gt;::Foo&lt;Bar,D&lt;E&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.qualifiedName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A::B&lt;C&gt;::Foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cn.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A::B&lt;C&gt;::Foo&lt;Bar,D&lt;E&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(ClassName::ExcBadClassName,<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn<sp/>(</highlight><highlight class="stringliteral">&quot;A&gt;B&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_eq()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_eq\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;X::B&lt;int&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;i,nt&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;::C&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_match()</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_match\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>pat1<sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>pat2<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>ClassName::match_t<sp/>matches;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>assert<sp/>(pat1.match<sp/>(pat1,<sp/>matches));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(matches.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>assert<sp/>(!<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;float&gt;&quot;</highlight><highlight class="normal">).match<sp/>(pat1,<sp/>matches));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;int,<sp/>std::allocator&lt;int&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">).match</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pat2,<sp/><sp/>matches));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert<sp/>(matches.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">].fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;A::B&lt;C&gt;,<sp/>std::allocator&lt;A::B&lt;C&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">).match</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pat2,<sp/><sp/>matches));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert<sp/>(matches.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>assert<sp/>(matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">].fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;A::B&lt;C&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>pat3<sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>pat4<sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">).match<sp/>(pat3,<sp/>matches));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>assert<sp/>(matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">].fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">).match<sp/>(pat3,<sp/>matches));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>assert<sp/>(matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">].fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;const<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>assert<sp/>(!<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;int&gt;&quot;</highlight><highlight class="normal">).match<sp/>(pat4,<sp/>matches));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>assert<sp/>(<ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;A::B&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">).match<sp/>(pat4,<sp/>matches));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>assert<sp/>(matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">].fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subst()</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_subst\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>pat1<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>rep1<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn1<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;C::A&lt;B&gt;,<sp/>std::allocator&lt;C::A&lt;B&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>ClassName::match_t<sp/>matches;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>assert<sp/>(cn1.match<sp/>(pat1,<sp/>matches));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn1rep<sp/>=<sp/>rep1.substCopy<sp/>(matches);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>assert<sp/>(cn1rep.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;C::A&lt;B&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>matches.clear();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;const<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn2<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>cn2.subst<sp/>(matches);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>assert<sp/>(cn2.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn3<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>cn3.subst<sp/>(matches);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>assert<sp/>(cn3.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn4<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>matches[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>cn4.subst<sp/>(matches);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert<sp/>(cn4.fullName()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Foo&lt;const<sp/>int&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">ClassName</ref><sp/>cn5<sp/>(</highlight><highlight class="stringliteral">&quot;Foo&lt;$U&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(ClassName::ExcMissingVariable,<sp/>cn5.subst<sp/>(matches));</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_rules()</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_rules\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>ClassName::Rules<sp/>rules;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>rules.add<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>rules.add<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;Foo&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Bar&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>rules.add<sp/>(</highlight><highlight class="stringliteral">&quot;std::map&lt;$K,$V,<sp/>std::less&lt;$K&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>$K,$V&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;$K,$V&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>rules.add<sp/>(</highlight><highlight class="stringliteral">&quot;DataVector&lt;$T,<sp/>$B&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>rules.add<sp/>(</highlight><highlight class="stringliteral">&quot;std::__1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;std&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.apply<sp/>(</highlight><highlight class="stringliteral">&quot;std::__1::foo&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.apply<sp/>(</highlight><highlight class="stringliteral">&quot;std::__1::vector&lt;std::__1::vector&lt;int,<sp/>std::__1::allocator&lt;int&gt;<sp/>&gt;,<sp/>std::__1::allocator&lt;std::__1::vector&lt;int,<sp/>std::__1::allocator&lt;int&gt;<sp/>&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;std::vector&lt;int&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.apply<sp/>(</highlight><highlight class="stringliteral">&quot;std::map&lt;int,<sp/>float,<sp/>std::less&lt;int&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>int,<sp/>float&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;int,float&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.apply<sp/>(</highlight><highlight class="stringliteral">&quot;DataVector&lt;Foo,<sp/>DataModel_detail::NoBase&gt;&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;Foo&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>assert<sp/>(rules.apply<sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;Foo,<sp/>std::allocator&lt;Foo&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;Bar&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>test_eq();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>test_match();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>test_subst();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>test_rules();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/ClassName_test.cxx"/>
  </compounddef>
</doxygen>
