<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/d8a/normalizedTypeinfoName_8cxx" kind="file">
    <compoundname>normalizedTypeinfoName.cxx</compoundname>
    <includes refid="de/d1a/normalizedTypeinfoName_8h" local="yes">AthContainers/normalizedTypeinfoName.h</includes>
    <includes refid="d7/d22/threading_8h" local="yes">AthContainers/tools/threading.h</includes>
    <includes refid="da/d41/error_8h" local="yes">AthContainers/tools/error.h</includes>
    <includes refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" local="yes">CxxUtils/ClassName.h</includes>
    <includes refid="db/daa/unordered__map_8h" local="yes">CxxUtils/unordered_map.h</includes>
    <incdepgraph>
      <node id="71732">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="71741">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="71742" relation="include">
        </childnode>
        <childnode refid="71744" relation="include">
        </childnode>
        <childnode refid="71751" relation="include">
        </childnode>
        <childnode refid="71752" relation="include">
        </childnode>
      </node>
      <node id="71725">
        <label>AthContainers/normalizedTypeinfoName.h</label>
        <link refid="de/d1a/normalizedTypeinfoName_8h"/>
        <childnode refid="71726" relation="include">
        </childnode>
        <childnode refid="71727" relation="include">
        </childnode>
      </node>
      <node id="71750">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="71752">
        <label>functional</label>
      </node>
      <node id="71749">
        <label>limits</label>
      </node>
      <node id="71730">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="71745">
        <label>iterator</label>
      </node>
      <node id="71748">
        <label>cmath</label>
      </node>
      <node id="71740">
        <label>stdexcept</label>
      </node>
      <node id="71733">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="71735">
        <label>AthenaKernel/errorcheck.h</label>
      </node>
      <node id="71726">
        <label>string</label>
      </node>
      <node id="71739">
        <label>map</label>
      </node>
      <node id="71724">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/normalizedTypeinfoName.cxx</label>
        <link refid="normalizedTypeinfoName.cxx"/>
        <childnode refid="71725" relation="include">
        </childnode>
        <childnode refid="71728" relation="include">
        </childnode>
        <childnode refid="71734" relation="include">
        </childnode>
        <childnode refid="71737" relation="include">
        </childnode>
        <childnode refid="71741" relation="include">
        </childnode>
      </node>
      <node id="71731">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="71742">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="71743" relation="include">
        </childnode>
        <childnode refid="71744" relation="include">
        </childnode>
        <childnode refid="71745" relation="include">
        </childnode>
        <childnode refid="71746" relation="include">
        </childnode>
        <childnode refid="71747" relation="include">
        </childnode>
        <childnode refid="71748" relation="include">
        </childnode>
        <childnode refid="71749" relation="include">
        </childnode>
        <childnode refid="71726" relation="include">
        </childnode>
        <childnode refid="71750" relation="include">
        </childnode>
      </node>
      <node id="71734">
        <label>AthContainers/tools/error.h</label>
        <link refid="da/d41/error_8h"/>
        <childnode refid="71735" relation="include">
        </childnode>
        <childnode refid="71736" relation="include">
        </childnode>
      </node>
      <node id="71727">
        <label>typeinfo</label>
      </node>
      <node id="71738">
        <label>vector</label>
      </node>
      <node id="71744">
        <label>utility</label>
      </node>
      <node id="71736">
        <label>GaudiKernel/System.h</label>
      </node>
      <node id="71729">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="71728">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="71729" relation="include">
        </childnode>
        <childnode refid="71730" relation="include">
        </childnode>
        <childnode refid="71731" relation="include">
        </childnode>
        <childnode refid="71732" relation="include">
        </childnode>
        <childnode refid="71733" relation="include">
        </childnode>
      </node>
      <node id="71747">
        <label>cstdlib</label>
      </node>
      <node id="71746">
        <label>cstddef</label>
      </node>
      <node id="71737">
        <label>CxxUtils/ClassName.h</label>
        <link refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h"/>
        <childnode refid="71726" relation="include">
        </childnode>
        <childnode refid="71738" relation="include">
        </childnode>
        <childnode refid="71739" relation="include">
        </childnode>
        <childnode refid="71740" relation="include">
        </childnode>
      </node>
      <node id="71743">
        <label>algorithm</label>
      </node>
      <node id="71751">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
    <briefdescription>
<para>Convert a <computeroutput>type_info</computeroutput> to a normalized string representation (matching the names used in the root dictionary). </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Jun, 2014 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1a/normalizedTypeinfoName_8h" kindref="compound" tooltip="Convert a type_info to a normalized string representation (matching the names used...">AthContainers/normalizedTypeinfoName.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d22/threading_8h" kindref="compound" tooltip="Threading definitions.">AthContainers/tools/threading.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/d41/error_8h" kindref="compound" tooltip="Helper for emitting error messages.">AthContainers/tools/error.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" kindref="compound" tooltip="Recursively separate out template arguments in a C++ class name.">CxxUtils/ClassName.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&lt;<sp/>201100</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="db/daa/unordered__map_8h" kindref="compound" tooltip="This is the TR1 unordered_set implementation from gcc4, adapted to build in Atlas...">CxxUtils/unordered_map.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG_STD_OR_SG<sp/>=<sp/>SG;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG_STD_OR_SG<sp/>=<sp/>std;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map&lt;const std::type_info*, std::string&gt;</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>typemap_t;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>AthContainers_detail::upgrade_mutex<sp/>mutex_t;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/d35/classAthContainers__detail_1_1strict__shared__lock" kindref="compound" tooltip="Lock object for taking out shared locks.">AthContainers_detail::strict_shared_lock&lt;mutex_t&gt;</ref><sp/>lock_t;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">AthContainers_detail::upgrading_lock&lt;mutex_t&gt;</ref><sp/>upgrading_lock_t;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initRules<sp/>(<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">CxxUtils::ClassName::Rules</ref>&amp;<sp/>rules)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL<sp/>container<sp/>types<sp/>that<sp/>Reflex<sp/>knows<sp/>about.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::deque&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::deque&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::list&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::list&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::vector&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::vector&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::map&lt;$KEY,<sp/>$T,<sp/>std::less&lt;$KEY&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>$KEY,<sp/>$T&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::map&lt;$KEY,<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::multimapmap&lt;$KEY,<sp/>$T,<sp/>std::less&lt;$KEY&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>$KEY,<sp/>$T&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::multimapmap&lt;$KEY,<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::set&lt;$KEY,<sp/>std::less&lt;$KEY&gt;,<sp/>std::allocator&lt;$KEY&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::set&lt;$KEY&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::multiset&lt;$KEY,<sp/>std::less&lt;$KEY&gt;,<sp/>std::allocator&lt;$KEY&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::multiset&lt;$KEY&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::unordered_map&lt;$KEY,<sp/>$T,<sp/>std::hash&lt;$KEY&gt;,<sp/>std::equal_to&lt;$KEY&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>$KEY,<sp/>$T&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::unordered_map&lt;$KEY,<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::unordered_multimap&lt;$KEY,<sp/>$T,<sp/>std::hash&lt;$KEY&gt;,<sp/>std::equal_to&lt;$KEY&gt;,<sp/>std::allocator&lt;std::pair&lt;const<sp/>$KEY,<sp/>$T&gt;<sp/>&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::unordered_multimap&lt;$KEY,<sp/>$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::unordered_set&lt;$KEY,<sp/>std::hash&lt;$KEY&gt;,<sp/>std::equal_to&lt;$KEY&gt;,<sp/>std::allocator&lt;$KEY&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::unordered_set&lt;$KEY&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::unordered_multiset&lt;$KEY,<sp/>std::hash&lt;$KEY&gt;,<sp/>std::equal_to&lt;$KEY&gt;,<sp/>std::allocator&lt;$KEY&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::unordered_multiset&lt;$KEY&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::queue&lt;$T,<sp/>std::deque&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::queue&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::stack&lt;$T,<sp/>std::deque&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::stack&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>container<sp/>types<sp/>are<sp/>also<sp/>defined<sp/>in<sp/>the<sp/>C++11<sp/>standard,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>root5<sp/>reflex<sp/>doesn&apos;t<sp/>know<sp/>about<sp/>them.<sp/><sp/>List<sp/>them<sp/>here<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::forward_list&lt;$T,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::forward_list&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::priority_queue&lt;$T,<sp/>std::vector&lt;$T&gt;,<sp/>std::less&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::priority_queue&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reflex<sp/>also<sp/>handles<sp/>the<sp/>non-standard<sp/>containers<sp/>hash_map,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>think<sp/>atlas<sp/>is<sp/>using<sp/>those<sp/>anywhere,<sp/>so<sp/>skip<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reflex<sp/>handles<sp/>the<sp/>basic_string<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>actually<sp/>think<sp/>that<sp/>demangling<sp/>will<sp/>produce<sp/>`std::string&apos;<sp/>rather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>`std::basic_string&apos;<sp/>with<sp/>default<sp/>arguments;<sp/>however,<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>completeness.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::basic_string&lt;$T,<sp/>std::char_traits&lt;$T&gt;,<sp/>std::allocator&lt;$T&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;std::string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Atlas-specific<sp/>mappings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DataVector&lt;$T,<sp/>$U&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DataVector&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;DataList&lt;$T,<sp/>$U&gt;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DataList&lt;$T&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>for<sp/>macos?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>rules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" kindref="member" tooltip="Add a new transformation rule.">add</ref><sp/>(</highlight><highlight class="stringliteral">&quot;std::__1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;std&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">std::string<sp/><ref refid="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" kindref="member" tooltip="Convert a type_info to a normalized string representation (matching the names used...">normalizedTypeinfoName</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/>info)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>typemap_t<sp/>normalizedTypemap;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mutex_t<sp/>normalizedTypemapMutex;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>test<sp/>to<sp/>see<sp/>if<sp/>we<sp/>already<sp/>have<sp/>this<sp/>mapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>this,<sp/>use<sp/>a<sp/>read<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>lock_t<sp/>lock<sp/>(normalizedTypemapMutex);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>typemap_t::iterator<sp/>it<sp/>=<sp/>normalizedTypemap.find<sp/>(&amp;info);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>normalizedTypemap.end())</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kindref="compound" tooltip="A set of transformation rules to use with ClassName.">CxxUtils::ClassName::Rules</ref><sp/>normalizeRules;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Didn&apos;t<sp/>find<sp/>it.<sp/><sp/>Take<sp/>out<sp/>an<sp/>upgrading<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>upgrading_lock_t<sp/>lock<sp/>(normalizedTypemapMutex);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>check<sp/>again<sp/>to<sp/>see<sp/>if<sp/>the<sp/>mapping&apos;s<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>typemap_t::iterator<sp/>it<sp/>=<sp/>normalizedTypemap.find<sp/>(&amp;info);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>normalizedTypemap.end())</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>lock<sp/>to<sp/>exclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalizeRules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a84d800bbd52890c6d12e114a860d7d96" kindref="member" tooltip="Return the number of defined rules.">size</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initRules<sp/>(normalizeRules);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tiname<sp/>=<sp/>AthContainers_detail::typeinfoName<sp/>(info);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>normalizedName<sp/>=<sp/>normalizeRules.<ref refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ac5f945c506f2701a6f625ff34ce36a23" kindref="member" tooltip="Apply transformations to a class name.">apply</ref><sp/>(tiname);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>normalizedTypemap[&amp;info]<sp/>=<sp/>normalizedName;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normalizedName;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/normalizedTypeinfoName.cxx"/>
  </compounddef>
</doxygen>
