<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/d85/EventLoop_2Root_2UnitTest_8cxx" kind="file">
    <compoundname>UnitTest.cxx</compoundname>
    <includes refid="d9/da4/EventLoop_2EventLoop_2UnitTest_8h" local="no">EventLoop/UnitTest.h</includes>
    <includes refid="dd/d3c/Driver_8h" local="no">EventLoop/Driver.h</includes>
    <includes refid="d5/d80/Job_8h" local="no">EventLoop/Job.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="de/d6b/UnitTestAlg_8h" local="no">EventLoop/UnitTestAlg.h</includes>
    <includes local="no">RootCore/Packages.h</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="d2/d7b/MetaFields_8h" local="no">SampleHandler/MetaFields.h</includes>
    <includes refid="d7/d50/MetaObject_8h" local="no">SampleHandler/MetaObject.h</includes>
    <includes refid="dc/d9e/SampleLocal_8h" local="no">SampleHandler/SampleLocal.h</includes>
    <includes refid="d3/deb/SamplePtr_8h" local="no">SampleHandler/SamplePtr.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TH1.h</includes>
    <includes local="no">TSystem.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="10216">
        <label>RootCore/Packages.h</label>
      </node>
      <node id="10193">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTest.cxx</label>
        <link refid="EventLoop/Root/UnitTest.cxx"/>
        <childnode refid="10194" relation="include">
        </childnode>
        <childnode refid="10204" relation="include">
        </childnode>
        <childnode refid="10210" relation="include">
        </childnode>
        <childnode refid="10211" relation="include">
        </childnode>
        <childnode refid="10212" relation="include">
        </childnode>
        <childnode refid="10216" relation="include">
        </childnode>
        <childnode refid="10206" relation="include">
        </childnode>
        <childnode refid="10217" relation="include">
        </childnode>
        <childnode refid="10220" relation="include">
        </childnode>
        <childnode refid="10205" relation="include">
        </childnode>
        <childnode refid="10221" relation="include">
        </childnode>
        <childnode refid="10225" relation="include">
        </childnode>
        <childnode refid="10226" relation="include">
        </childnode>
        <childnode refid="10227" relation="include">
        </childnode>
        <childnode refid="10228" relation="include">
        </childnode>
        <childnode refid="10229" relation="include">
        </childnode>
        <childnode refid="10230" relation="include">
        </childnode>
        <childnode refid="10199" relation="include">
        </childnode>
        <childnode refid="10231" relation="include">
        </childnode>
      </node>
      <node id="10204">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10203" relation="include">
        </childnode>
        <childnode refid="10205" relation="include">
        </childnode>
      </node>
      <node id="10197">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10199" relation="include">
        </childnode>
        <childnode refid="10200" relation="include">
        </childnode>
        <childnode refid="10201" relation="include">
        </childnode>
        <childnode refid="10202" relation="include">
        </childnode>
        <childnode refid="10203" relation="include">
        </childnode>
      </node>
      <node id="10210">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10202" relation="include">
        </childnode>
        <childnode refid="10197" relation="include">
        </childnode>
        <childnode refid="10205" relation="include">
        </childnode>
      </node>
      <node id="10215">
        <label>EventLoop/StatusCode.h</label>
        <link refid="d0/d16/EventLoop_2EventLoop_2StatusCode_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
      </node>
      <node id="10212">
        <label>EventLoop/UnitTestAlg.h</label>
        <link refid="de/d6b/UnitTestAlg_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10213" relation="include">
        </childnode>
        <childnode refid="10216" relation="include">
        </childnode>
      </node>
      <node id="10208">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="10207" relation="include">
        </childnode>
      </node>
      <node id="10196">
        <label>string</label>
      </node>
      <node id="10201">
        <label>map</label>
      </node>
      <node id="10194">
        <label>EventLoop/UnitTest.h</label>
        <link refid="d9/da4/EventLoop_2EventLoop_2UnitTest_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
        <childnode refid="10197" relation="include">
        </childnode>
      </node>
      <node id="10205">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10206" relation="include">
        </childnode>
        <childnode refid="10208" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
        <childnode refid="10209" relation="include">
        </childnode>
      </node>
      <node id="10227">
        <label>TH1.h</label>
      </node>
      <node id="10222">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
        <childnode refid="10202" relation="include">
        </childnode>
        <childnode refid="10203" relation="include">
        </childnode>
        <childnode refid="10208" relation="include">
        </childnode>
        <childnode refid="10223" relation="include">
        </childnode>
      </node>
      <node id="10195">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="10220">
        <label>SampleHandler/MetaFields.h</label>
        <link refid="d2/d7b/MetaFields_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
      </node>
      <node id="10203">
        <label>TObject.h</label>
      </node>
      <node id="10228">
        <label>TSystem.h</label>
      </node>
      <node id="10202">
        <label>vector</label>
      </node>
      <node id="10226">
        <label>TFile.h</label>
      </node>
      <node id="10231">
        <label>sstream</label>
      </node>
      <node id="10221">
        <label>SampleHandler/SampleLocal.h</label>
        <link refid="dc/d9e/SampleLocal_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
        <childnode refid="10202" relation="include">
        </childnode>
        <childnode refid="10222" relation="include">
        </childnode>
      </node>
      <node id="10207">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="10219">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="10207" relation="include">
        </childnode>
      </node>
      <node id="10200">
        <label>iosfwd</label>
      </node>
      <node id="10229">
        <label>cstdlib</label>
      </node>
      <node id="10230">
        <label>iostream</label>
      </node>
      <node id="10223">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10224" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
      </node>
      <node id="10213">
        <label>EventLoop/Algorithm.h</label>
        <link refid="d7/d36/Algorithm_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10214" relation="include">
        </childnode>
        <childnode refid="10215" relation="include">
        </childnode>
      </node>
      <node id="10214">
        <label>TNamed.h</label>
      </node>
      <node id="10225">
        <label>SampleHandler/SamplePtr.h</label>
        <link refid="d3/deb/SamplePtr_8h_source"/>
        <childnode refid="10198" relation="include">
        </childnode>
        <childnode refid="10199" relation="include">
        </childnode>
      </node>
      <node id="10218">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="10207" relation="include">
        </childnode>
        <childnode refid="10196" relation="include">
        </childnode>
        <childnode refid="10219" relation="include">
        </childnode>
      </node>
      <node id="10217">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="10207" relation="include">
        </childnode>
        <childnode refid="10218" relation="include">
        </childnode>
      </node>
      <node id="10224">
        <label>set</label>
      </node>
      <node id="10206">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="10207" relation="include">
        </childnode>
      </node>
      <node id="10198">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="10199">
        <label>memory</label>
      </node>
      <node id="10211">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="10195" relation="include">
        </childnode>
        <childnode refid="10202" relation="include">
        </childnode>
        <childnode refid="10203" relation="include">
        </childnode>
        <childnode refid="10205" relation="include">
        </childnode>
        <childnode refid="10197" relation="include">
        </childnode>
      </node>
      <node id="10209">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="da/d9f/namespaceEL">EL</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2011.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/UnitTest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Driver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Job.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/UnitTestAlg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCore/Packages.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaFields.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaObject.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SampleLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/SamplePtr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH1.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TSystem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">EL</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="d9/da1/structEL_1_1UnitTest_1ab21bbdcc9929c8d3d09af06560160078" kindref="member">UnitTest ::</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="d9/da1/structEL_1_1UnitTest_1ab21bbdcc9929c8d3d09af06560160078" kindref="member">  UnitTest</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>val_name,<sp/>std::string<sp/>base_path)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>name<sp/>(val_name),<sp/>cleanup<sp/>(true),<sp/>testOutput<sp/>(true),<sp/>outputDisk<sp/>(0),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testFileExecute<sp/>(true)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>files;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TH1*&gt;<sp/>histos;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base_path.empty())</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/data/EventLoop/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>3;<sp/>iter<sp/>!=<sp/>end;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>path;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>&lt;&lt;<sp/>base_path<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_ntuple&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TString<sp/>input<sp/>=<sp/>path.str();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;ExpandPathName<sp/>(input);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>files.push_back<sp/>(input.Data());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TFile&gt;<sp/>file<sp/>(TFile::Open<sp/>(input.Data(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(file.get()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1<sp/>*hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(file-&gt;Get<sp/>(</highlight><highlight class="stringliteral">&quot;hist_n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(hist<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>histos.push_back(hist);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hist-&gt;SetDirectory<sp/>(0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tree<sp/>(</highlight><highlight class="stringliteral">&quot;physics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;SH::SampleLocal&gt;<sp/>mysample;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*hist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample.reset<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;dataset0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(files[0]);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histos[0]-&gt;Clone<sp/>(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;meta()-&gt;addReplace<sp/>(hist);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>samples.add<sp/>(mysample.release());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample.reset<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSH_1_1SampleLocal" kindref="compound" tooltip="A Sample based on a simple file list.">SH::SampleLocal</ref><sp/>(</highlight><highlight class="stringliteral">&quot;dataset1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(files[1]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;add<sp/>(files[2]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(histos[1]-&gt;Clone<sp/>(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>hist-&gt;Add<sp/>(histos[2]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>mysample-&gt;meta()-&gt;addReplace<sp/>(hist);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>samples.add<sp/>(mysample.release());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>samples.setMetaString<sp/>(<ref refid="d7/d06/structSH_1_1MetaFields_1a8acba4e022e9e86a5731cca0e5f2ce9f" kindref="member" tooltip="the name of the tree in the sample">SH::MetaFields::treeName</ref>,<sp/>tree);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>histos.size();<sp/>iter<sp/>!=<sp/>end;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>histos[iter];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UnitTest<sp/>::</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>run<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Driver&amp;<sp/>driver)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="93"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(samples.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>output<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(location.empty())</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tmpdir<sp/>=<sp/>getenv<sp/>(</highlight><highlight class="stringliteral">&quot;TMPDIR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpdir)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>tmpdir;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/EventLoop-&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.$$&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>location;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;ExpandPathName<sp/>(output);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnitTestAlg<sp/>alg;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alg.makeOutput<sp/>=<sp/>testOutput;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dbb/classEL_1_1Job" kindref="compound">EL::Job</ref><sp/>job;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>job.options()-&gt;setDouble<sp/>(Job::optD3PDPerfStats,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.<ref refid="da/dbb/classEL_1_1Job_1a26060474b2602f91ef3d220c415c2005" kindref="member">options</ref>()-&gt;<ref refid="db/d3a/classSH_1_1MetaObject_1a56f734fd246e6143d8861312221063e6" kindref="member" tooltip="set the meta-data double with the given name">setDouble</ref><sp/>(</highlight><highlight class="stringliteral">&quot;jobOpt&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>job.options()-&gt;setDouble<sp/>(Job::optPerfTree,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>job.options()-&gt;setDouble<sp/>(EL::Job::optCacheSize,<sp/>10*1024*1024);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>job.options()-&gt;setDouble<sp/>(Job::optPrintPerFileStats,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh<sp/>=<sp/>samples;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1a09786a76670fc6b3bb6d1be6c42e582a" kindref="member" tooltip="set the meta-data string with the given name for all samples.">setMetaString</ref><sp/>(</highlight><highlight class="stringliteral">&quot;mymeta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>job.<ref refid="da/dbb/classEL_1_1Job_1aa02788adcdc922ea863ef9c28c7d5b5f" kindref="member">sampleHandler</ref><sp/>(sh);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ROOTCORE_PACKAGE_D3PDReader</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.<ref refid="da/dbb/classEL_1_1Job_1aa5833b4d2f54f734ca01dec169e7eea6" kindref="member">useD3PDReader</ref><sp/>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.algsAdd<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>UnitTestAlg<sp/>(alg));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>outputDone<sp/>=<sp/>outputDisk<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputMIter<sp/>outputStream<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>outputStream<sp/>!=<sp/>end;<sp/>++<sp/>outputStream)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!outputDone)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputStream-&gt;output<sp/>(outputDisk);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outputDone<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cleanup)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_PRINT_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;placing<sp/>temporary<sp/>files<sp/>in:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output).Data());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>driver.submit<sp/>(job,<sp/>output.Data());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>iter<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>samples.size();<sp/>iter<sp/>!=<sp/>end;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*ref_hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(samples[iter]-&gt;meta()-&gt;get<sp/>(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref_hist<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>((output<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist&quot;</highlight><highlight class="normal">).Data());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound" tooltip="A smart pointer class that holds a single Sample object.">SH::SamplePtr</ref><sp/>sample<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>(samples[iter]-&gt;name());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sample.<ref refid="d8/d8a/classSH_1_1SamplePtr_1ae3692dbffff6ff84caca80964d7f9738" kindref="member" tooltip="get() == 0">empty</ref>())</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>histogram<sp/>sample<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>samples[iter]-&gt;name());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testFileExecute)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1<sp/>*file_executes<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;file_executes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(file_executes<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(file_executes-&gt;GetEntries()<sp/>==<sp/>samples[iter]-&gt;numFiles());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1<sp/>*hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;el_n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples[iter]-&gt;getNumEntries()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(hist<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(dynamic_cast&lt;TH1*&gt;(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;el_n2&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(dynamic_cast&lt;TList*&gt;(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;alpha&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT_SOFT<sp/>(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;beta/dir/hist&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;didn&apos;t<sp/>find<sp/>histogram<sp/>el_n<sp/>in<sp/>sample<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sample-&gt;name());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetNbinsX()<sp/>!=<sp/>ref_hist-&gt;GetNbinsX())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;bin<sp/>missmatch<sp/>between<sp/>histograms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>hist-&gt;GetNbinsX()+2;<sp/>bin<sp/>!=<sp/>end;<sp/>++<sp/>bin)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetBinContent<sp/>(bin)<sp/>!=<sp/>ref_hist-&gt;GetBinContent<sp/>(bin))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>str;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;bin<sp/>content<sp/>missmatch<sp/>in<sp/>bin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bin</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hist-&gt;GetBinContent<sp/>(bin)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>expected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ref_hist-&gt;GetBinContent<sp/>(bin);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(str.str());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1<sp/>*count<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sample-&gt;readHist<sp/>(</highlight><highlight class="stringliteral">&quot;EventLoop_EventCount&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(samples[iter]-&gt;getNumEntries()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;didn&apos;t<sp/>find<sp/>histogram<sp/>EventLoop_EventCount&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testOutput<sp/>&amp;&amp;<sp/>samples[iter]-&gt;getNumEntries()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound" tooltip="A class that manages a list of Sample objects.">SH::SampleHandler</ref><sp/>sh;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1aebbd3fa1f8bf12a43fc650ba63bce7b3" kindref="member" tooltip="load all the samples from the given directory">load</ref><sp/>((output<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output-out&quot;</highlight><highlight class="normal">).Data());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound" tooltip="a base class that manages a set of files belonging to a particular data set and the...">SH::Sample</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sample<sp/>=<sp/>sh.<ref refid="d1/d56/classSH_1_1SampleHandler_1ab804cbe5f76cf8103c8fefb9aa83fadb" kindref="member" tooltip="get the sample with the given name">get</ref><sp/>(samples[iter]-&gt;name());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sample)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;output<sp/>dataset<sp/>not<sp/>found<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>samples[iter]-&gt;name());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sample-&gt;<ref refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" kindref="member" tooltip="the meta-information for this sample">meta</ref>()-&gt;setString<sp/>(<ref refid="d7/d06/structSH_1_1MetaFields_1a8acba4e022e9e86a5731cca0e5f2ce9f" kindref="member" tooltip="the name of the tree in the sample">SH::MetaFields::treeName</ref>,<sp/></highlight><highlight class="stringliteral">&quot;tree&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref_hist<sp/>&amp;&amp;<sp/>samples[iter]-&gt;getNumEntries()<sp/>!=<sp/>ref_hist-&gt;GetEntries())</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>str;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tree<sp/>entries<sp/>missmatch<sp/>found<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>samples[iter]-&gt;getNumEntries()</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>expected<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ref_hist-&gt;GetEntries();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(str.str());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleanup)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output).Data());</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;exception<sp/>caught<sp/>in<sp/>unit<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleanup)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output).Data());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::string&amp;<sp/>e)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;exception<sp/>caught<sp/>in<sp/>unit<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleanup)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output).Data());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>exception<sp/>caught<sp/>in<sp/>unit<sp/>test&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleanup)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>gSystem-&gt;Exec<sp/>((</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>output).Data());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_FAILURE;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/UnitTest.cxx"/>
  </compounddef>
</doxygen>
