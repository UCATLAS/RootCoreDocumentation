<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dd9/CombinatoricsOdometer_8cxx" kind="file">
    <compoundname>CombinatoricsOdometer.cxx</compoundname>
    <includes refid="d2/d86/CombinatoricsOdometer_8h" local="yes">PATCore/CombinatoricsOdometer.h</includes>
    <incdepgraph>
      <node id="224866">
        <label>list</label>
      </node>
      <node id="224875">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="224860" relation="include">
        </childnode>
        <childnode refid="224867" relation="include">
        </childnode>
        <childnode refid="224851" relation="include">
        </childnode>
        <childnode refid="224856" relation="include">
        </childnode>
        <childnode refid="224794" relation="include">
        </childnode>
      </node>
      <node id="224860">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="224830">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="224881">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="224882" relation="include">
        </childnode>
        <childnode refid="224861" relation="include">
        </childnode>
        <childnode refid="224801" relation="include">
        </childnode>
        <childnode refid="224883" relation="include">
        </childnode>
      </node>
      <node id="224847">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="224793" relation="include">
        </childnode>
        <childnode refid="224795" relation="include">
        </childnode>
        <childnode refid="224801" relation="include">
        </childnode>
        <childnode refid="224802" relation="include">
        </childnode>
      </node>
      <node id="224849">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="224810" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224850" relation="include">
        </childnode>
        <childnode refid="224811" relation="include">
        </childnode>
      </node>
      <node id="224848">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="224800">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="224802">
        <label>functional</label>
      </node>
      <node id="224857">
        <label>boost/version.hpp</label>
      </node>
      <node id="224799">
        <label>limits</label>
      </node>
      <node id="224850">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="224828">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="224796">
        <label>iterator</label>
      </node>
      <node id="224812">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="224785" relation="include">
        </childnode>
        <childnode refid="224813" relation="include">
        </childnode>
      </node>
      <node id="224880">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="224886">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="224887" relation="include">
        </childnode>
        <childnode refid="224855" relation="include">
        </childnode>
        <childnode refid="224799" relation="include">
        </childnode>
        <childnode refid="224802" relation="include">
        </childnode>
        <childnode refid="224888" relation="include">
        </childnode>
      </node>
      <node id="224789">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="224790" relation="include">
        </childnode>
        <childnode refid="224803" relation="include">
        </childnode>
        <childnode refid="224804" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224785" relation="include">
        </childnode>
      </node>
      <node id="224814">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
      </node>
      <node id="224816">
        <label>stdint.h</label>
      </node>
      <node id="224867">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="224799" relation="include">
        </childnode>
        <childnode refid="224868" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
      </node>
      <node id="224835">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
      </node>
      <node id="224807">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="224819">
        <label>RVersion.h</label>
      </node>
      <node id="224792">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="224793" relation="include">
        </childnode>
        <childnode refid="224801" relation="include">
        </childnode>
        <childnode refid="224802" relation="include">
        </childnode>
      </node>
      <node id="224798">
        <label>cmath</label>
      </node>
      <node id="224854">
        <label>cassert</label>
      </node>
      <node id="224858">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="224877">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="224804">
        <label>stdexcept</label>
      </node>
      <node id="224831">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="224864">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="224872">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="224781">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATCore/Root/CombinatoricsOdometer.cxx</label>
        <link refid="CombinatoricsOdometer.cxx"/>
        <childnode refid="224782" relation="include">
        </childnode>
      </node>
      <node id="224785">
        <label>string</label>
      </node>
      <node id="224809">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="224790" relation="include">
        </childnode>
        <childnode refid="224810" relation="include">
        </childnode>
        <childnode refid="224812" relation="include">
        </childnode>
        <childnode refid="224814" relation="include">
        </childnode>
        <childnode refid="224815" relation="include">
        </childnode>
        <childnode refid="224821" relation="include">
        </childnode>
        <childnode refid="224822" relation="include">
        </childnode>
        <childnode refid="224823" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224795" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
        <childnode refid="224824" relation="include">
        </childnode>
        <childnode refid="224825" relation="include">
        </childnode>
        <childnode refid="224826" relation="include">
        </childnode>
        <childnode refid="224832" relation="include">
        </childnode>
      </node>
      <node id="224834">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
      </node>
      <node id="224824">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="224869">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="224806" relation="include">
        </childnode>
        <childnode refid="224867" relation="include">
        </childnode>
        <childnode refid="224870" relation="include">
        </childnode>
        <childnode refid="224872" relation="include">
        </childnode>
        <childnode refid="224857" relation="include">
        </childnode>
        <childnode refid="224796" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
      </node>
      <node id="224882">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="224783">
        <label>map</label>
      </node>
      <node id="224883">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="224884" relation="include">
        </childnode>
      </node>
      <node id="224884">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="224820">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="224844">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="224874">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="224869" relation="include">
        </childnode>
        <childnode refid="224796" relation="include">
        </childnode>
        <childnode refid="224794" relation="include">
        </childnode>
        <childnode refid="224875" relation="include">
        </childnode>
      </node>
      <node id="224825">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="224841">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="224870">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="224806" relation="include">
        </childnode>
        <childnode refid="224818" relation="include">
        </childnode>
        <childnode refid="224801" relation="include">
        </childnode>
        <childnode refid="224871" relation="include">
        </childnode>
      </node>
      <node id="224852">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="224818">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="224819" relation="include">
        </childnode>
        <childnode refid="224820" relation="include">
        </childnode>
      </node>
      <node id="224822">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="224829">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="224868">
        <label>limits.h</label>
      </node>
      <node id="224862">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="224863" relation="include">
        </childnode>
      </node>
      <node id="224839">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="224812" relation="include">
        </childnode>
        <childnode refid="224799" relation="include">
        </childnode>
        <childnode refid="224816" relation="include">
        </childnode>
        <childnode refid="224840" relation="include">
        </childnode>
      </node>
      <node id="224790">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224792" relation="include">
        </childnode>
      </node>
      <node id="224793">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="224794" relation="include">
        </childnode>
        <childnode refid="224795" relation="include">
        </childnode>
        <childnode refid="224796" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
        <childnode refid="224798" relation="include">
        </childnode>
        <childnode refid="224799" relation="include">
        </childnode>
        <childnode refid="224785" relation="include">
        </childnode>
        <childnode refid="224800" relation="include">
        </childnode>
      </node>
      <node id="224855">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="224854" relation="include">
        </childnode>
      </node>
      <node id="224871">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="224867" relation="include">
        </childnode>
        <childnode refid="224855" relation="include">
        </childnode>
      </node>
      <node id="224805">
        <label>typeinfo</label>
      </node>
      <node id="224853">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="224824" relation="include">
        </childnode>
        <childnode refid="224854" relation="include">
        </childnode>
      </node>
      <node id="224788">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="224789" relation="include">
        </childnode>
        <childnode refid="224806" relation="include">
        </childnode>
        <childnode refid="224807" relation="include">
        </childnode>
        <childnode refid="224808" relation="include">
        </childnode>
        <childnode refid="224860" relation="include">
        </childnode>
        <childnode refid="224861" relation="include">
        </childnode>
        <childnode refid="224867" relation="include">
        </childnode>
        <childnode refid="224869" relation="include">
        </childnode>
        <childnode refid="224873" relation="include">
        </childnode>
        <childnode refid="224874" relation="include">
        </childnode>
        <childnode refid="224870" relation="include">
        </childnode>
        <childnode refid="224876" relation="include">
        </childnode>
        <childnode refid="224818" relation="include">
        </childnode>
        <childnode refid="224877" relation="include">
        </childnode>
        <childnode refid="224878" relation="include">
        </childnode>
        <childnode refid="224872" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224802" relation="include">
        </childnode>
        <childnode refid="224786" relation="include">
        </childnode>
        <childnode refid="224794" relation="include">
        </childnode>
        <childnode refid="224804" relation="include">
        </childnode>
        <childnode refid="224796" relation="include">
        </childnode>
        <childnode refid="224850" relation="include">
        </childnode>
        <childnode refid="224879" relation="include">
        </childnode>
        <childnode refid="224881" relation="include">
        </childnode>
        <childnode refid="224885" relation="include">
        </childnode>
        <childnode refid="224886" relation="include">
        </childnode>
      </node>
      <node id="224840">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="224821">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="224817">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="224816" relation="include">
        </childnode>
      </node>
      <node id="224813">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="224843">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="224861">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="224862" relation="include">
        </childnode>
        <childnode refid="224808" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224800" relation="include">
        </childnode>
        <childnode refid="224864" relation="include">
        </childnode>
        <childnode refid="224842" relation="include">
        </childnode>
        <childnode refid="224865" relation="include">
        </childnode>
      </node>
      <node id="224811">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="224879">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="224880" relation="include">
        </childnode>
      </node>
      <node id="224833">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="224790" relation="include">
        </childnode>
        <childnode refid="224834" relation="include">
        </childnode>
        <childnode refid="224835" relation="include">
        </childnode>
        <childnode refid="224836" relation="include">
        </childnode>
        <childnode refid="224845" relation="include">
        </childnode>
        <childnode refid="224826" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224847" relation="include">
        </childnode>
        <childnode refid="224848" relation="include">
        </childnode>
      </node>
      <node id="224787">
        <label>vector</label>
      </node>
      <node id="224887">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="224794" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
      </node>
      <node id="224888">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="224795">
        <label>utility</label>
      </node>
      <node id="224885">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="224823">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="224782">
        <label>PATCore/CombinatoricsOdometer.h</label>
        <link refid="d2/d86/CombinatoricsOdometer_8h_source"/>
        <childnode refid="224783" relation="include">
        </childnode>
        <childnode refid="224784" relation="include">
        </childnode>
        <childnode refid="224785" relation="include">
        </childnode>
        <childnode refid="224786" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224788" relation="include">
        </childnode>
      </node>
      <node id="224859">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="224827">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="224837">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="224826">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="224827" relation="include">
        </childnode>
        <childnode refid="224828" relation="include">
        </childnode>
        <childnode refid="224829" relation="include">
        </childnode>
        <childnode refid="224830" relation="include">
        </childnode>
        <childnode refid="224831" relation="include">
        </childnode>
      </node>
      <node id="224797">
        <label>cstdlib</label>
      </node>
      <node id="224803">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="224786">
        <label>iostream</label>
      </node>
      <node id="224810">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="224790" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224811" relation="include">
        </childnode>
      </node>
      <node id="224791">
        <label>cstddef</label>
      </node>
      <node id="224832">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="224833" relation="include">
        </childnode>
        <childnode refid="224849" relation="include">
        </childnode>
        <childnode refid="224810" relation="include">
        </childnode>
        <childnode refid="224824" relation="include">
        </childnode>
        <childnode refid="224825" relation="include">
        </childnode>
      </node>
      <node id="224865">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="224806" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224866" relation="include">
        </childnode>
        <childnode refid="224854" relation="include">
        </childnode>
        <childnode refid="224797" relation="include">
        </childnode>
        <childnode refid="224850" relation="include">
        </childnode>
      </node>
      <node id="224836">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="224834" relation="include">
        </childnode>
        <childnode refid="224837" relation="include">
        </childnode>
        <childnode refid="224814" relation="include">
        </childnode>
        <childnode refid="224838" relation="include">
        </childnode>
        <childnode refid="224823" relation="include">
        </childnode>
        <childnode refid="224805" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224794" relation="include">
        </childnode>
        <childnode refid="224816" relation="include">
        </childnode>
        <childnode refid="224842" relation="include">
        </childnode>
        <childnode refid="224843" relation="include">
        </childnode>
        <childnode refid="224844" relation="include">
        </childnode>
      </node>
      <node id="224842">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="224808">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="224809" relation="include">
        </childnode>
        <childnode refid="224806" relation="include">
        </childnode>
        <childnode refid="224807" relation="include">
        </childnode>
        <childnode refid="224851" relation="include">
        </childnode>
        <childnode refid="224833" relation="include">
        </childnode>
        <childnode refid="224789" relation="include">
        </childnode>
        <childnode refid="224855" relation="include">
        </childnode>
        <childnode refid="224849" relation="include">
        </childnode>
        <childnode refid="224856" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224859" relation="include">
        </childnode>
      </node>
      <node id="224784">
        <label>set</label>
      </node>
      <node id="224846">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="224838">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="224837" relation="include">
        </childnode>
        <childnode refid="224839" relation="include">
        </childnode>
        <childnode refid="224823" relation="include">
        </childnode>
        <childnode refid="224787" relation="include">
        </childnode>
        <childnode refid="224841" relation="include">
        </childnode>
      </node>
      <node id="224794">
        <label>algorithm</label>
      </node>
      <node id="224876">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="224851">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="224852" relation="include">
        </childnode>
        <childnode refid="224810" relation="include">
        </childnode>
        <childnode refid="224849" relation="include">
        </childnode>
        <childnode refid="224815" relation="include">
        </childnode>
        <childnode refid="224833" relation="include">
        </childnode>
        <childnode refid="224809" relation="include">
        </childnode>
        <childnode refid="224814" relation="include">
        </childnode>
        <childnode refid="224789" relation="include">
        </childnode>
        <childnode refid="224824" relation="include">
        </childnode>
        <childnode refid="224791" relation="include">
        </childnode>
        <childnode refid="224853" relation="include">
        </childnode>
      </node>
      <node id="224815">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="224816" relation="include">
        </childnode>
        <childnode refid="224785" relation="include">
        </childnode>
        <childnode refid="224817" relation="include">
        </childnode>
        <childnode refid="224818" relation="include">
        </childnode>
      </node>
      <node id="224873">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="224869" relation="include">
        </childnode>
        <childnode refid="224855" relation="include">
        </childnode>
        <childnode refid="224796" relation="include">
        </childnode>
      </node>
      <node id="224806">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="224863">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="224878">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="224801">
        <label>memory</label>
      </node>
      <node id="224845">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="224835" relation="include">
        </childnode>
        <childnode refid="224836" relation="include">
        </childnode>
        <childnode refid="224846" relation="include">
        </childnode>
      </node>
      <node id="224856">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="224852" relation="include">
        </childnode>
        <childnode refid="224849" relation="include">
        </childnode>
        <childnode refid="224810" relation="include">
        </childnode>
        <childnode refid="224842" relation="include">
        </childnode>
        <childnode refid="224857" relation="include">
        </childnode>
        <childnode refid="224858" relation="include">
        </childnode>
        <childnode refid="224785" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="20"><highlight class="preprocessor">#include<sp/>&quot;PATCore/CombinatoricsOdometer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ROOTCORE)<sp/>||<sp/>defined(ROOTCORE_PACKAGE_AthContainers)</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">FlexDigit::FlexDigit(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitMax,<sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>*<sp/>nextDigit<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>m_digit=0;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>m_digitMax=digitMax-1;<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>m_nextDigit=nextDigit;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref><sp/>FlexDigit::operator++(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;isAtMax())</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setDigit(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!this-&gt;isFirstDigit())<sp/>(*(this-&gt;next()))++;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setDigit(<sp/>this-&gt;digit()+1<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">FlexDigits::FlexDigits(<sp/>std::vector&lt;std::string&gt;&amp;<sp/>labels,<sp/>std::map&lt;std::string,<sp/>int&gt;&amp;<sp/>digitMax<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>&gt;(SG::<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>m_started=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>this-&gt;reserve(labels.size());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::vector&lt;std::string&gt;::const_iterator<sp/>label_itr=labels.begin();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr<sp/>!=<sp/><sp/>labels.end();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr++<sp/>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>(digitMax[*label_itr]);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;push_back(temp);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">FlexDigits::FlexDigits(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDigits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitMax<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>&gt;(SG::<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">OWN_ELEMENTS</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_started=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>this-&gt;reserve(numDigits);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;numDigits;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>*<sp/>temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>(digitMax);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;push_back(temp);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">FlexDigits::~FlexDigits()</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//overloaded<sp/>vector<sp/>method,<sp/>need<sp/>to<sp/>tell<sp/>each<sp/>digit<sp/>which<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//is<sp/>next<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlexDigits::push_back(<sp/><ref refid="db/df2/classFlexDigit" kindref="compound">FlexDigit</ref>*<sp/>aDigit<sp/>)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size())</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>aDigit-&gt;setNext(this-&gt;back());</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;FlexDigit&gt;::push_back</ref>(aDigit);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//just<sp/>increment<sp/>by<sp/>one,<sp/>no<sp/>uniqueness<sp/>check<sp/>etc<sp/>(overloaded<sp/>in<sp/>OdoMeter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlexDigits::increment()</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_started<sp/>&amp;&amp;<sp/>this-&gt;isZero())</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_started<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>(*this)++;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//for<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlexDigits::print()</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;current<sp/>State<sp/>of<sp/>digits:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">FlexDigits::iterator</ref><sp/>digit_itr=this-&gt;begin();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr!=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr++<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">&lt;&lt;(*digit_itr)-&gt;digit()&lt;&lt;</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//if<sp/>the<sp/>whole<sp/>digits<sp/>are<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FlexDigits::isZero()</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isZero=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">FlexDigits::iterator</ref><sp/>digit_itr=this-&gt;begin();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr<sp/>!=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr++<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isZero<sp/>=<sp/>isZero<sp/>&amp;&amp;<sp/>!(*digit_itr)-&gt;digit();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isZero;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//only<sp/>++<sp/>operaor<sp/>defined<sp/>(only<sp/>thing<sp/>needed<sp/>for<sp/>now)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="d5/dfb/classFlexDigits" kindref="compound">FlexDigits</ref>&amp;<sp/>FlexDigits::operator++(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>this-&gt;size()<sp/>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*(this-&gt;back()))++;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">//somewhat<sp/>specific<sp/>constructor<sp/>for<sp/>label<sp/>and<sp/>number<sp/>of<sp/>paritlces<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//in<sp/>each<sp/>container<sp/>with<sp/>the<sp/>label</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">OdoMeter::OdoMeter(<sp/>std::vector&lt;std::string&gt;&amp;<sp/>labels,<sp/>std::map&lt;std::string,<sp/>int&gt;&amp;<sp/>digitMax<sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="d5/dfb/classFlexDigits" kindref="compound">FlexDigits</ref>(<sp/>labels,<sp/>digitMax<sp/>),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pairMeter(0)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>m_onlyUnique<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>m_onlySingleEntry<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>m_numLabels<sp/>=<sp/>labels.size();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;counter<sp/>&lt;<sp/>m_numLabels;<sp/>counter++<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_digitAssoc[labels[counter]].insert(counter);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_labels.insert(labels[counter]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>constructor<sp/>is<sp/>for<sp/>the<sp/>case<sp/>when<sp/>you<sp/>want<sp/>to<sp/>combine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//M<sp/>objects<sp/>(numDigits)<sp/>from<sp/>one<sp/>single<sp/>list<sp/>of<sp/>n<sp/>(digitMax)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">OdoMeter::OdoMeter(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDigits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitMax<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="d5/dfb/classFlexDigits" kindref="compound">FlexDigits</ref>(<sp/>numDigits,<sp/>digitMax<sp/>),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pairMeter(0)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>m_onlyUnique<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>m_onlySingleEntry<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>m_numLabels<sp/>=<sp/>numDigits;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;counter<sp/>&lt;<sp/>m_numLabels;<sp/>counter++<sp/>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_digitAssoc[</highlight><highlight class="stringliteral">&quot;dummy&quot;</highlight><highlight class="normal">].insert(counter);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_labels.insert(</highlight><highlight class="stringliteral">&quot;dummy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">OdoMeter::~OdoMeter()</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pairMeter;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>m_pairMeter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>function<sp/>make<sp/>sure<sp/>that<sp/>there&apos;s<sp/>no<sp/>double<sp/>counting,<sp/>should<sp/>be<sp/>used<sp/>in<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//with<sp/>hasOnlySingleEntry<sp/>as<sp/>isUnique<sp/>will<sp/>pass<sp/>the<sp/>ones<sp/>with<sp/>same<sp/>entries<sp/>from<sp/>one<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OdoMeter::isUnique(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doCheck<sp/>)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!doCheck)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::set&lt;std::string&gt;::const_iterator<sp/>label_itr<sp/>=<sp/>m_labels.begin();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr<sp/>!=<sp/>m_labels.end();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr++<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftDigit<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::set&lt;int&gt;::const_iterator<sp/>digit_itr<sp/>=<sp/>m_digitAssoc[*label_itr].begin();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr!=m_digitAssoc[*label_itr].end();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr++<sp/>)<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(leftDigit<sp/>&lt;=<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[*digit_itr]-&gt;digit())</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftDigit=(*this)[*digit_itr]-&gt;digit();<sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//this<sp/>function<sp/>make<sp/>sure<sp/>that<sp/>two<sp/>same<sp/>entries<sp/>from<sp/>single<sp/>container<sp/>do<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>method<sp/>uses<sp/>the<sp/>notion<sp/>of<sp/>std::set<sp/>which<sp/>does<sp/>not<sp/>allow<sp/>two<sp/>same<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OdoMeter::hasOnlySingleEntry(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doCheck<sp/>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!doCheck)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::set&lt;std::string&gt;::const_iterator<sp/>label_itr<sp/>=<sp/>m_labels.begin();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr<sp/>!=<sp/>m_labels.end();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>label_itr++<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>digitsForLabel;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::set&lt;int&gt;::const_iterator<sp/>digit_itr<sp/>=<sp/>m_digitAssoc[*label_itr].begin();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr!=m_digitAssoc[*label_itr].end();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digit_itr++<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>digitsForLabel.insert((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[*digit_itr]-&gt;digit());<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digitsForLabel.size()!=m_digitAssoc[*label_itr].size())</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//increment<sp/>the<sp/>meter<sp/>by<sp/>one<sp/>and<sp/>check<sp/>uniqueness.<sp/>if<sp/>not<sp/>unique,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//call<sp/>itself<sp/>again<sp/>(recursive)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OdoMeter::increment()</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;hasStarted()<sp/>&amp;&amp;<sp/>this-&gt;isZero())</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!this-&gt;hasStarted())</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setStarted()<sp/>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>(*this)++;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isUnique(m_onlyUnique))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<sp/>hasOnlySingleEntry(m_onlySingleEntry))</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!found)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;increment();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pairMeter;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_pairMeter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/dfd/classPairMeter" kindref="compound">PairMeter</ref>(m_numLabels);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//output<sp/>the<sp/>digit<sp/>in<sp/>the<sp/>form<sp/>of<sp/>vector&lt;int&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">std::vector&lt;int&gt;<sp/>OdoMeter::getVector()</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>digitsVector;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="d7/d17/classDataModel__detail_1_1const__iterator" kindref="compound" tooltip="Const iterator class for DataVector/DataList. ">OdoMeter::const_iterator</ref><sp/>fdigit_itr<sp/>=<sp/>(*this).begin();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdigit_itr<sp/>!=<sp/>(*this).end();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdigit_itr++)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>digitsVector.push_back((*fdigit_itr)-&gt;digit());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>digitsVector;</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//increment()<sp/>for<sp/>pairMeter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>OdoMeter::nextPair()</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_pairMeter)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_pairMeter-&gt;increment())</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pairMeter;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pairMeter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//get<sp/>unique<sp/>pairs<sp/>out<sp/>of<sp/>the<sp/>combined<sp/>particles<sp/>(useful<sp/>for<sp/>overlap<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">std::pair&lt;int,int&gt;<sp/>OdoMeter::getPair()</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_pairMeter)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<sp/>(*m_pairMeter)[0]-&gt;digit(),<sp/>(*m_pairMeter)[1]-&gt;digit()<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<sp/>0,0<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">PairMeter::PairMeter(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>digitMax<sp/>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>:<ref refid="d0/dc4/classOdoMeter" kindref="compound">OdoMeter</ref>(<sp/>2,<sp/>digitMax<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">PairMeter::~PairMeter()</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PairMeter::increment()</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;hasStarted()<sp/>&amp;&amp;<sp/>this-&gt;isZero())</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!this-&gt;hasStarted())</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setStarted()<sp/>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>(*this)++;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!isUnique(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!hasOnlySingleEntry(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!found)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;increment();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATCore/Root/CombinatoricsOdometer.cxx"/>
  </compounddef>
</doxygen>
