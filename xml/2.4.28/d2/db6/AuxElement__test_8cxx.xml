<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/db6/AuxElement__test_8cxx" kind="file">
    <compoundname>AuxElement_test.cxx</compoundname>
    <includes refid="d1/d6f/AuxElement_8h" local="yes">AthContainers/AuxElement.h</includes>
    <includes refid="d3/d0f/AuxStoreInternal_8h" local="yes">AthContainers/AuxStoreInternal.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="d2/d67/expect__exception_8h" local="yes">TestTools/expect_exception.h</includes>
    <includes refid="d3/d77/make__unique_8h" local="yes">CxxUtils/make_unique.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <includes refid="dd/d46/auxid__set__equal_8icc" local="yes">auxid_set_equal.icc</includes>
    <incdepgraph>
      <node id="71920">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="71922">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="71876" relation="include">
        </childnode>
        <childnode refid="71878" relation="include">
        </childnode>
        <childnode refid="71885" relation="include">
        </childnode>
        <childnode refid="71886" relation="include">
        </childnode>
      </node>
      <node id="71923">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="71888">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="71872" relation="include">
        </childnode>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71889" relation="include">
        </childnode>
        <childnode refid="71887" relation="include">
        </childnode>
      </node>
      <node id="71884">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="71886">
        <label>functional</label>
      </node>
      <node id="71882">
        <label>limits</label>
      </node>
      <node id="71889">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="71918">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="71879">
        <label>iterator</label>
      </node>
      <node id="71906">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="71883" relation="include">
        </childnode>
        <childnode refid="71907" relation="include">
        </childnode>
      </node>
      <node id="71869">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx</label>
        <link refid="AuxElement_test.cxx"/>
        <childnode refid="71870" relation="include">
        </childnode>
        <childnode refid="71935" relation="include">
        </childnode>
        <childnode refid="71930" relation="include">
        </childnode>
        <childnode refid="71938" relation="include">
        </childnode>
        <childnode refid="71939" relation="include">
        </childnode>
        <childnode refid="71940" relation="include">
        </childnode>
        <childnode refid="71934" relation="include">
        </childnode>
        <childnode refid="71885" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71941" relation="include">
        </childnode>
      </node>
      <node id="71930">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="71873" relation="include">
        </childnode>
        <childnode refid="71931" relation="include">
        </childnode>
        <childnode refid="71932" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
        <childnode refid="71883" relation="include">
        </childnode>
      </node>
      <node id="71902">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71880" relation="include">
        </childnode>
      </node>
      <node id="71891">
        <label>stdint.h</label>
      </node>
      <node id="71899">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
      </node>
      <node id="71936">
        <label>AthContainersInterfaces/IAuxStoreIO.h</label>
        <link refid="d9/db5/IAuxStoreIO_8h"/>
        <childnode refid="71873" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
        <childnode refid="71937" relation="include">
        </childnode>
        <childnode refid="71887" relation="include">
        </childnode>
      </node>
      <node id="71894">
        <label>RVersion.h</label>
      </node>
      <node id="71875">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="71876" relation="include">
        </childnode>
        <childnode refid="71885" relation="include">
        </childnode>
        <childnode refid="71886" relation="include">
        </childnode>
      </node>
      <node id="71881">
        <label>cmath</label>
      </node>
      <node id="71934">
        <label>cassert</label>
      </node>
      <node id="71932">
        <label>stdexcept</label>
      </node>
      <node id="71921">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="71883">
        <label>string</label>
      </node>
      <node id="71924">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="71873" relation="include">
        </childnode>
        <childnode refid="71872" relation="include">
        </childnode>
        <childnode refid="71906" relation="include">
        </childnode>
        <childnode refid="71902" relation="include">
        </childnode>
        <childnode refid="71890" relation="include">
        </childnode>
        <childnode refid="71925" relation="include">
        </childnode>
        <childnode refid="71926" relation="include">
        </childnode>
        <childnode refid="71909" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71878" relation="include">
        </childnode>
        <childnode refid="71880" relation="include">
        </childnode>
        <childnode refid="71927" relation="include">
        </childnode>
        <childnode refid="71928" relation="include">
        </childnode>
        <childnode refid="71916" relation="include">
        </childnode>
        <childnode refid="71929" relation="include">
        </childnode>
      </node>
      <node id="71897">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
      </node>
      <node id="71939">
        <label>CxxUtils/make_unique.h</label>
        <link refid="d3/d77/make__unique_8h"/>
      </node>
      <node id="71927">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="71941">
        <label>map</label>
      </node>
      <node id="71895">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="71913">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="71928">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="71910">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="71871">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="71893">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="71894" relation="include">
        </childnode>
        <childnode refid="71895" relation="include">
        </childnode>
      </node>
      <node id="71926">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="71919">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="71905">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="71906" relation="include">
        </childnode>
        <childnode refid="71882" relation="include">
        </childnode>
        <childnode refid="71891" relation="include">
        </childnode>
        <childnode refid="71908" relation="include">
        </childnode>
      </node>
      <node id="71873">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71875" relation="include">
        </childnode>
      </node>
      <node id="71876">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="71877" relation="include">
        </childnode>
        <childnode refid="71878" relation="include">
        </childnode>
        <childnode refid="71879" relation="include">
        </childnode>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71880" relation="include">
        </childnode>
        <childnode refid="71881" relation="include">
        </childnode>
        <childnode refid="71882" relation="include">
        </childnode>
        <childnode refid="71883" relation="include">
        </childnode>
        <childnode refid="71884" relation="include">
        </childnode>
      </node>
      <node id="71898">
        <label>typeinfo</label>
      </node>
      <node id="71933">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="71927" relation="include">
        </childnode>
        <childnode refid="71934" relation="include">
        </childnode>
      </node>
      <node id="71908">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="71925">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="71892">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="71891" relation="include">
        </childnode>
      </node>
      <node id="71907">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="71912">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="71887">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="71896">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="71873" relation="include">
        </childnode>
        <childnode refid="71897" relation="include">
        </childnode>
        <childnode refid="71899" relation="include">
        </childnode>
        <childnode refid="71900" relation="include">
        </childnode>
        <childnode refid="71914" relation="include">
        </childnode>
        <childnode refid="71916" relation="include">
        </childnode>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71922" relation="include">
        </childnode>
        <childnode refid="71923" relation="include">
        </childnode>
      </node>
      <node id="71903">
        <label>vector</label>
      </node>
      <node id="71878">
        <label>utility</label>
      </node>
      <node id="71909">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="71917">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="71901">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="71916">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="71917" relation="include">
        </childnode>
        <childnode refid="71918" relation="include">
        </childnode>
        <childnode refid="71919" relation="include">
        </childnode>
        <childnode refid="71920" relation="include">
        </childnode>
        <childnode refid="71921" relation="include">
        </childnode>
      </node>
      <node id="71880">
        <label>cstdlib</label>
      </node>
      <node id="71940">
        <label>iostream</label>
      </node>
      <node id="71931">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="71872">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="71873" relation="include">
        </childnode>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71887" relation="include">
        </childnode>
      </node>
      <node id="71874">
        <label>cstddef</label>
      </node>
      <node id="71929">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="71896" relation="include">
        </childnode>
        <childnode refid="71888" relation="include">
        </childnode>
        <childnode refid="71872" relation="include">
        </childnode>
        <childnode refid="71927" relation="include">
        </childnode>
        <childnode refid="71928" relation="include">
        </childnode>
      </node>
      <node id="71900">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="71897" relation="include">
        </childnode>
        <childnode refid="71901" relation="include">
        </childnode>
        <childnode refid="71902" relation="include">
        </childnode>
        <childnode refid="71904" relation="include">
        </childnode>
        <childnode refid="71909" relation="include">
        </childnode>
        <childnode refid="71898" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71877" relation="include">
        </childnode>
        <childnode refid="71891" relation="include">
        </childnode>
        <childnode refid="71911" relation="include">
        </childnode>
        <childnode refid="71912" relation="include">
        </childnode>
        <childnode refid="71913" relation="include">
        </childnode>
      </node>
      <node id="71911">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="71937">
        <label>set</label>
      </node>
      <node id="71915">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="71904">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="71901" relation="include">
        </childnode>
        <childnode refid="71905" relation="include">
        </childnode>
        <childnode refid="71909" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71910" relation="include">
        </childnode>
      </node>
      <node id="71877">
        <label>algorithm</label>
      </node>
      <node id="71938">
        <label>TestTools/expect_exception.h</label>
        <link refid="d2/d67/expect__exception_8h"/>
        <childnode refid="71934" relation="include">
        </childnode>
      </node>
      <node id="71935">
        <label>AthContainers/AuxStoreInternal.h</label>
        <link refid="d3/d0f/AuxStoreInternal_8h"/>
        <childnode refid="71888" relation="include">
        </childnode>
        <childnode refid="71936" relation="include">
        </childnode>
        <childnode refid="71916" relation="include">
        </childnode>
        <childnode refid="71909" relation="include">
        </childnode>
        <childnode refid="71903" relation="include">
        </childnode>
        <childnode refid="71889" relation="include">
        </childnode>
        <childnode refid="71887" relation="include">
        </childnode>
      </node>
      <node id="71870">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="71871" relation="include">
        </childnode>
        <childnode refid="71872" relation="include">
        </childnode>
        <childnode refid="71888" relation="include">
        </childnode>
        <childnode refid="71890" relation="include">
        </childnode>
        <childnode refid="71896" relation="include">
        </childnode>
        <childnode refid="71924" relation="include">
        </childnode>
        <childnode refid="71902" relation="include">
        </childnode>
        <childnode refid="71930" relation="include">
        </childnode>
        <childnode refid="71927" relation="include">
        </childnode>
        <childnode refid="71874" relation="include">
        </childnode>
        <childnode refid="71933" relation="include">
        </childnode>
      </node>
      <node id="71890">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="71891" relation="include">
        </childnode>
        <childnode refid="71883" relation="include">
        </childnode>
        <childnode refid="71892" relation="include">
        </childnode>
        <childnode refid="71893" relation="include">
        </childnode>
      </node>
      <node id="71885">
        <label>memory</label>
      </node>
      <node id="71914">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="71899" relation="include">
        </childnode>
        <childnode refid="71900" relation="include">
        </childnode>
        <childnode refid="71915" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="dd/da5/classSG_1_1AuxVectorBase" prot="public">SG::AuxVectorBase</innerclass>
    <innerclass refid="d7/d42/classConstAuxStoreTest" prot="public">ConstAuxStoreTest</innerclass>
    <innerclass refid="de/d20/classElt" prot="public">Elt</innerclass>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="106" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="286" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="285" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1a443aaa38b1796a39d965acb610d31cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clear</definition>
        <argsstring>()</argsstring>
        <name>test_clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="370" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="369" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1a55f27bb23b0b920b014dd5c7bc1a7dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copy</definition>
        <argsstring>()</argsstring>
        <name>test_copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="400" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="399" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1aadfa245dc5de16f693ef479f98541a49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_standalone</definition>
        <argsstring>()</argsstring>
        <name>test_standalone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="478" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="477" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1abcf824815ccf8be2cc5a5fe6a19a0ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_decoration</definition>
        <argsstring>()</argsstring>
        <name>test_decoration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="557" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="556" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1abb3246e4b376931be7a1356cc4804011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_private_store</definition>
        <argsstring>()</argsstring>
        <name>test_private_store</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="630" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="629" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="d2/db6/AuxElement__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" line="654" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx" bodystart="653" bodyend="663"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for AuxElement. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Jan, 2013 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d6f/AuxElement_8h" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">AthContainers/AuxElement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d0f/AuxStoreInternal_8h" kindref="compound" tooltip="An auxiliary data store that holds data internally.">AthContainers/AuxStoreInternal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d67/expect__exception_8h" kindref="compound" tooltip="Helper to check that an exception is thrown.">TestTools/expect_exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d77/make__unique_8h" kindref="compound" tooltip="Provide a version of the C++14 make_unique.">CxxUtils/make_unique.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;auxid_set_equal.icc&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AuxVectorBase</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::AuxVectorData</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1acb5fc1c8f606bd9fe52610b48ebb4c34" kindref="member" tooltip="Return the size of the container.">size_v</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad2ff11b7c4c2099a845990132dd76e4f" kindref="member" tooltip="Return the capacity of the container.">capacity_v</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="db/dd6/classSG_1_1AuxVectorData_1af6e2da3c14ea74935120cd1b5a37f021" kindref="member" tooltip="Set the store associated with this object.">SG::AuxVectorData::setStore</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal"><sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>b.setIndex<sp/>(index,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>b.setIndex<sp/>(0,<sp/>0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearAux<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>b.clearAux();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyAux<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>a.copyAux<sp/>(b);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testAuxElementCtor<sp/>(<ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound" tooltip="Manage lookup of vectors of auxiliary data.">SG::AuxVectorData</ref>*<sp/>container,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>bx<sp/>(container,<sp/>index);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(bx.index()<sp/>==<sp/>index);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(bx.container()<sp/>==<sp/>container);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="d7/d42/classConstAuxStoreTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d42/classConstAuxStoreTest" kindref="compound">ConstAuxStoreTest</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::IConstAuxStore</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d42/classConstAuxStoreTest_1a94b4ee6ceac125a033c9eddc6ed26344" kindref="member" tooltip="Return the data vector for one aux data item.">getData</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref>&amp;<sp/><ref refid="d7/d42/classConstAuxStoreTest_1ab37404e4dd42c7e4c7da0e712db2ac54" kindref="member" tooltip="Return a set of identifiers for existing data items in this store.">getAuxIDs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_set;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d42/classConstAuxStoreTest_1a748badd90faac6de099a1bd76a873459" kindref="member" tooltip="Return the data vector for one aux data decoration item.">getDecoration</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/></highlight><highlight class="comment">/*auxid*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*size*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*capacity*/</highlight><highlight class="normal">)<sp/>{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d42/classConstAuxStoreTest_1a40a146599e46f1dd1479a36f4118e58f" kindref="member" tooltip="Lock the container.">lock</ref>()<sp/>{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d42/classConstAuxStoreTest_1a1fc988601cb50be3ddd09c3bc75bf674" kindref="member" tooltip="Clear all decorations.">clearDecorations</ref>()<sp/>{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d7/d42/classConstAuxStoreTest_1a66d2ba15cde6fc5a264d98179c808f8a" kindref="member" tooltip="Return the number of elements in the store.">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>std::abort();<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add<sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,<sp/>std::unique_ptr&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>vec);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref><sp/>m_set;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;<sp/>vec_t;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;SG::auxid_t,<sp/>std::unique_ptr&lt;vec_t&gt;<sp/>&gt;<sp/>map_t;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>map_t<sp/>m_vecs;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="d7/d42/classConstAuxStoreTest_1a94b4ee6ceac125a033c9eddc6ed26344" kindref="member" tooltip="Return the data vector for one aux data item.">ConstAuxStoreTest::getData</ref><sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="91"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>map_t::const_iterator<sp/>it<sp/>=<sp/>m_vecs.find<sp/>(auxid);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_vecs.end())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second-&gt;data();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConstAuxStoreTest::add<sp/>(<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>vec)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>m_vecs[auxid]<sp/>=<sp/>std::move(vec);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">SG::AuxElement::ConstAccessor&lt;int&gt;</ref><sp/>ityp1_c<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;int&gt;</ref><sp/>ityp1<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;float&gt;</ref><sp/>ftyp1<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" kindref="member" tooltip="Return the index of this element within its container.">index</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" kindref="member" tooltip="Return a set of identifiers for existing data items for this object.">getAuxIDs</ref>().empty());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailable(b));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1_c.isAvailable(b));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>v;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>v.set<sp/>(b,<sp/>5);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" kindref="member" tooltip="Return the index of this element within its container.">index</ref>()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>==<sp/>&amp;v);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailable(b));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::testAuxElementCtor<sp/>(&amp;v,<sp/>10);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>v.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailable(b));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>assert<sp/>(!ftyp1.isAvailable(b));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>assert<sp/>(!ftyp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>ityp1(b)<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>ftyp1(b)<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(b)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1_c(b)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1(b)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1a1fc119dd13bd2c74f2ce4f2ba19c8898" kindref="member" tooltip="Fetch an aux data variable, as a const reference.">auxdataConst</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">)<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>b.<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(b)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref><sp/>auxids;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>auxids.insert<sp/>(ityp1_id);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>auxids.insert<sp/>(ftyp1_id);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" kindref="member" tooltip="Return a set of identifiers for existing data items for this object.">getAuxIDs</ref>()<sp/>==<sp/>auxids);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1_c.auxid()<sp/>==<sp/>ityp1_id);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.auxid()<sp/>==<sp/>ityp1_id);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1.auxid()<sp/>==<sp/>ftyp1_id);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(v,<sp/>5)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>ityp1(v,<sp/>5)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(v,<sp/>5)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.getDataArray(v)[5]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>ityp1.getDataArray(v)[5]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.getDataArray(v)[5]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailable(b));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1.isAvailable(b));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1.isAvailableWritable(b));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>cb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(cb)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1(cb)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref>&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(cv,<sp/>5)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.getDataArray(cv)[5]<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b2<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.index()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.container()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b3;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>v3;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>v3.set<sp/>(b3,<sp/>6);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>v3.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store3);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.index()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.container()<sp/>==<sp/>&amp;v3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>b3<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.index()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.container()<sp/>==<sp/>&amp;v3);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(b3)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1(b3)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ityp1(b)<sp/>=<sp/>21;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>b3<sp/>=<sp/>std::move(b);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.index()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.container()<sp/>==<sp/>&amp;v3);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(b3)<sp/>==<sp/>21);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1(b3)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b4<sp/>=<sp/>std::move(b);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>assert<sp/>(b4.<ref refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" kindref="member" tooltip="Return the index of this element within its container.">index</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>assert<sp/>(b4.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>ityp1.set<sp/>(b3,<sp/>22);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1(b3)<sp/>==<sp/>22);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>v.setStore<sp/>((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)&amp;store);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1(cb)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kindref="compound" tooltip="Helper class to provide const generic access to aux data.">SG::AuxElement::TypelessConstAccessor</ref><sp/>ftyp1a<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1a.isAvailable<sp/>(b3));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>assert<sp/>(*reinterpret_cast&lt;const<sp/>float*&gt;(ftyp1a<sp/>(b3))<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>assert<sp/>(*reinterpret_cast&lt;const<sp/>float*&gt;(ftyp1a<sp/>(v3,<sp/>6))<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>assert<sp/>((reinterpret_cast&lt;const<sp/>float*&gt;(ftyp1a.getDataArray<sp/>(v3)))[6]<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>assert<sp/>(ftyp1a.auxid()<sp/>==<sp/>ftyp1_id);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d9/d63/classSG_1_1ExcUnknownAuxItem" kindref="compound" tooltip="Exception --- Unknown aux data item.">SG::ExcUnknownAuxItem</ref>,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kindref="compound" tooltip="Helper class to provide const generic access to aux data.">SG::AuxElement::TypelessConstAccessor</ref><sp/>(</highlight><highlight class="stringliteral">&quot;adsasd&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kindref="compound" tooltip="Helper class to provide const generic access to aux data.">SG::AuxElement::TypelessConstAccessor</ref><sp/>x1<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;adsasd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d9/d63/classSG_1_1ExcUnknownAuxItem" kindref="compound" tooltip="Exception --- Unknown aux data item.">SG::ExcUnknownAuxItem</ref>,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kindref="compound" tooltip="Helper class to provide const generic access to aux data.">SG::AuxElement::TypelessConstAccessor</ref><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref>),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;x2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="de/d20/classElt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d20/classElt" kindref="compound">Elt</ref></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref></highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>()<sp/>:<sp/>x(0)<sp/>{<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x)<sp/>:<sp/>x(the_x)<sp/>{<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();<sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">SG::AuxElement</ref>(other),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x(other.x)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>(other);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>*<sp/>other)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">SG::AuxElement</ref>(*other),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x(other-&gt;x)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>(other);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ityp1()</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ityp1()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="264"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>ftyp1()</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ftyp1()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="276"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.x<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt2<sp/>(10);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.x<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Elt::Accessor&lt;int&gt;</ref><sp/>ityp2<sp/>(</highlight><highlight class="stringliteral">&quot;anotherInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>elt.ityp1()<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ityp2(elt)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>elt.ftyp1()<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.ityp1()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp2_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anotherInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref><sp/>auxids;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>auxids.insert<sp/>(ityp1_id);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>auxids.insert<sp/>(ftyp1_id);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>auxids.insert<sp/>(ityp2_id);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a607ee93fe8081d2bd3aa1745f0cbbb50" kindref="member" tooltip="Return a set of identifiers for existing data items for this object.">getAuxIDs</ref>()<sp/>==<sp/>auxids);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>elt.x<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt3<sp/>(elt);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.x<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt3)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.container()<sp/>!=<sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt3a<sp/>(&amp;elt);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3a.x<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3a.ityp1()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt3a)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3a.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3a.container()<sp/>!=<sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>elt.ityp1()<sp/>=<sp/>31;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>elt3<sp/>=<sp/>elt;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>31);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.container()<sp/>!=<sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>elt.ityp1()<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>31);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>elt3<sp/>=<sp/>std::move(elt);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>41);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.container()<sp/>!=<sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt4<sp/>(std::move(elt));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>assert<sp/>(elt4.x<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>assert<sp/>(elt4.ityp1()<sp/>==<sp/>41);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt4)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>assert<sp/>(elt4.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>assert<sp/>(elt4.container()<sp/>!=<sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>elt3.ityp1()<sp/>=<sp/>41;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>elt.<ref refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" kindref="member" tooltip="Release and free any private store associated with this object.">releasePrivateStore</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.x<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ityp1()<sp/>==<sp/>41);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt3)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>assert<sp/>(elt3.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt5;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>elt5.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt5.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>());</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>elt5.<ref refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" kindref="member" tooltip="Release and free any private store associated with this object.">releasePrivateStore</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt5.<ref refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" kindref="member" tooltip="Release and free any private store associated with this object.">releasePrivateStore</ref>());</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_clear()</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_clear\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>elt1.ityp1()<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>elt1.ftyp1()<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ityp1()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ftyp1()<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::clearAux<sp/>(elt1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ityp1()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ftyp1()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" kindref="member" tooltip="Release and free any private store associated with this object.">releasePrivateStore</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::clearAux<sp/>(elt1);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>dv;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>dv.set<sp/>(elt1,<sp/>1);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="d7/d42/classConstAuxStoreTest" kindref="compound">ConstAuxStoreTest</ref><sp/>store;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>dv.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>,<sp/>SG::AuxVectorBase::clearAux<sp/>(elt1));</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>dv.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)0);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::clearAux<sp/>(elt1);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copy()</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_copy\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Elt::Accessor&lt;int&gt;</ref><sp/>ityp2<sp/>(</highlight><highlight class="stringliteral">&quot;anotherInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt1;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt2;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>dv1;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>dv1.set<sp/>(elt1,<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>dv1.set<sp/>(elt2,<sp/>2);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>dv1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>elt1.ityp1()<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>elt1.ftyp1()<sp/>=<sp/>3.5;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>ityp2(elt1)<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>elt2.ityp1()<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>elt2.ftyp1()<sp/>=<sp/>7.5;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>ityp2(elt2)<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt3;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>dv3;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>dv3.set<sp/>(elt3,<sp/>3);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>dv3.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store3);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>elt3.ityp1()<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>elt3.ftyp1()<sp/>=<sp/>10.5;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::copyAux<sp/>(elt2,<sp/>elt3);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.ityp1()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.ftyp1()<sp/>==<sp/>10.5);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref>&amp;<sp/>celt2<sp/>=<sp/>elt2;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Elt::Accessor&lt;int&gt;</ref><sp/>ityp3<sp/>(</highlight><highlight class="stringliteral">&quot;yetAnotherInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt5;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>dv5;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>dv5.set<sp/>(elt5,<sp/>1);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="d7/d42/classConstAuxStoreTest" kindref="compound">ConstAuxStoreTest</ref><sp/>store5;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>dv5.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store5);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp1_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp3_id<sp/>=<sp/>ityp3.auxid();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>store5.m_set.insert<sp/>(ityp1_id);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>store5.m_set.insert<sp/>(ityp3_id);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>store5.m_set.insert<sp/>(ftyp1_id);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vptr<sp/>=<sp/>CxxUtils::make_unique&lt;std::vector&lt;float&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>vptr-&gt;resize(5);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>(*vptr)[1]<sp/>=<sp/>3.5;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>store5.add<sp/>(ftyp1_id,<sp/>std::move(vptr));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/da7/classSG_1_1ExcBadAuxVar" kindref="compound" tooltip="Exception --- Attempt to retrieve nonexistent aux data item.">SG::ExcBadAuxVar</ref>,<sp/>ityp3(celt2));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::copyAux<sp/>(elt2,<sp/>elt5);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.ityp1()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.ftyp1()<sp/>==<sp/>3.5);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3(celt2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt4;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>elt4.<ref refid="dc/db0/classSG_1_1AuxElement_1aab2f280f3c832e285fe020365bb3ac1e" kindref="member" tooltip="Release and free any private store associated with this object.">releasePrivateStore</ref>();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::copyAux<sp/>(elt1,<sp/>elt4);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ityp1()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.ftyp1()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2(elt1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><ref refid="d7/d42/classConstAuxStoreTest" kindref="compound">ConstAuxStoreTest</ref><sp/>store;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>dv1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>,<sp/>SG::AuxVectorBase::copyAux(elt1,<sp/>elt4));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>dv1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)0);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::copyAux<sp/>(elt1,<sp/>elt4);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase::copyAux<sp/>(elt4,<sp/>elt1);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_standalone()</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_standalone\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;int&gt;</ref><sp/>int1<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>i1<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(store1.<ref refid="d1/d1c/classSG_1_1AuxStoreInternal_1a90b2121f7a3ae82b0cd339cb5d212d48" kindref="member" tooltip="Return the data vector for one aux data item.">getData</ref>(ityp1,<sp/>1,<sp/>1));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>i1[0]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>v;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt1;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" kindref="member" tooltip="Clear the cached aux data pointers.">clearCache</ref>();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a127c2c4839333f537cb83ecdc82ad99d" kindref="member" tooltip="Clear the cached aux data pointers.">clearCache</ref>();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>&amp;store1);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>&amp;store1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>assert<sp/>(int1(elt1)<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>int1(elt1)<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>());</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>v.set(elt1,<sp/>2));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>*)0);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>assert<sp/>(i1[0]<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>v.set<sp/>(elt1,<sp/>1);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>*)0));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>assert<sp/>(elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt2;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>elt2.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d8/ded/classSG_1_1ExcBadPrivateStore" kindref="compound" tooltip="Exception --- Bad use of private store.">SG::ExcBadPrivateStore</ref>,<sp/>elt1.<ref refid="dc/db0/classSG_1_1AuxElement_1a57b602d3ec1c0129811375f46c18c049" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>*)0));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.usingPrivateStore());</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt2.usingStandaloneStore());</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.hasStore());</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.hasNonConstStore());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getStore()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getConstStore()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>elt2.releasePrivateStore();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>elt2.setNonConstStore<sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getStore()<sp/>==<sp/>&amp;store1);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getConstStore()<sp/>==<sp/>&amp;store1);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>elt2.setConstStore<sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getStore()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>assert<sp/>(elt2.getConstStore()<sp/>==<sp/>&amp;store1);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_decoration()</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_decoration\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>v;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>v.set<sp/>(b,<sp/>5);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>v.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;int&gt;</ref><sp/><sp/>ityp1<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound">SG::AuxElement::Decorator&lt;int&gt;</ref><sp/>ityp2<sp/>(</highlight><highlight class="stringliteral">&quot;anInt2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>r<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp2_id<sp/>=<sp/>r.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a5b1f2839e2695b9f56494d2b9dbc5057" kindref="member" tooltip="Look up a name -&amp;gt; auxid_t mapping.">getAuxID</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp2.auxid()<sp/>==<sp/>ityp2_id);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>ityp1(b)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ityp2(b)<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>assert<sp/>(10<sp/>==<sp/>ityp1(b));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>assert<sp/>(11<sp/>==<sp/>ityp2(b));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>v.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a4379058b2eb0522291c4c20076ef7967" kindref="member" tooltip="Lock the container.">lock</ref>();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>cb<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound">SG::AuxElement::Decorator&lt;int&gt;</ref><sp/>ityp3<sp/>(</highlight><highlight class="stringliteral">&quot;anInt3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>ityp3(cb)<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>assert<sp/>(10<sp/>==<sp/>ityp1(cb));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>assert<sp/>(12<sp/>==<sp/>ityp3(cb));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>cb.<ref refid="dc/db0/classSG_1_1AuxElement_1af85b897bffef87879e0ed6a58428a60b" kindref="member" tooltip="Fetch an aux decoration, as a non-const reference.">auxdecor</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt3&quot;</highlight><highlight class="normal">)<sp/>=<sp/>19;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>assert<sp/>(19<sp/>==<sp/>ityp3(cb));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d5/d41/classSG_1_1ExcStoreLocked" kindref="compound" tooltip="Exception --- Attempted to modify auxiliary data in a locked store.">SG::ExcStoreLocked</ref>,<sp/>ityp2(cb)<sp/>=<sp/>14);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3.isAvailable(cb));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>cb.<ref refid="dc/db0/classSG_1_1AuxElement_1a71044a012a37af1bb0b6fab3d3ea1230" kindref="member" tooltip="Clear all decorations.">clearDecorations</ref>();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailable(cb));</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp3.isAvailable(cb));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="600"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;int&gt;</ref><sp/><sp/>ityp4<sp/>(</highlight><highlight class="stringliteral">&quot;anInt4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>b2;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>b2.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>ityp1(b2)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>b2.<ref refid="dc/db0/classSG_1_1AuxElement_1afc4602cf2edeb01c3350367f5985f49b" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()-&gt;<ref refid="d3/dd5/classSG_1_1IConstAuxStore_1a6bf19cb8961665a0d4672e2d4f719aa5" kindref="member" tooltip="Lock the container.">lock</ref>();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="d5/d41/classSG_1_1ExcStoreLocked" kindref="compound" tooltip="Exception --- Attempted to modify auxiliary data in a locked store.">SG::ExcStoreLocked</ref>,<sp/>ityp4(b2)<sp/>=<sp/>12);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailable(b2));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp4.isAvailable(b2));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailableWritable(b2));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>cb2<sp/>=<sp/>b2;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>ityp3(cb2)<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3(cb2)<sp/>==<sp/>14);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3.isAvailable(b2));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>ityp3.set(cb2,<sp/>15);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3(cb2)<sp/>==<sp/>15);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp3.isAvailable(b2));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>cb2.clearDecorations();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>assert<sp/>(ityp1.isAvailable(b2));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>assert<sp/>(!ityp3.isAvailable(b2));</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_private_store()</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_private_store\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><ref refid="de/d20/classElt" kindref="compound">Elt</ref><sp/>elt;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref><sp/>v;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>v.set<sp/>(elt,<sp/>1);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>v.clear<sp/>(elt);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1a2d354faac53b7a003d29c0f7b95f3672" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ac4bc75a2f7b1ed984ffae1bba6de58ba" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>assert<sp/>(!elt.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>());</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>test_clear();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>test_copy();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>test_standalone();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>test_decoration();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>test_private_store();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>LocalWords:<sp/><sp/>anInt4</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxElement_test.cxx"/>
  </compounddef>
</doxygen>
