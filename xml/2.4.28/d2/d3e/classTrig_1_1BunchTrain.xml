<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/d3e/classTrig_1_1BunchTrain" kind="class" prot="public">
    <compoundname>Trig::BunchTrain</compoundname>
    <includes refid="d5/d28/BunchTrain_8h" local="no">BunchTrain.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d2/d3e/classTrig_1_1BunchTrain_1a794fa73c1e0b264e9ef344e214351f3f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Trig::BunchTrain::m_spacing</definition>
        <argsstring></argsstring>
        <name>m_spacing</name>
        <briefdescription>
<para>Spacing of the bunches in nanoseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/d3e/classTrig_1_1BunchTrain_1a25fc4d2ebcf83773d0fe4ce79751d49d" prot="private" static="no" mutable="no">
        <type>const_iterator</type>
        <definition>const_iterator Trig::BunchTrain::m_front</definition>
        <argsstring></argsstring>
        <name>m_front</name>
        <briefdescription>
<para>Iterator pointing to the first bunch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/d3e/classTrig_1_1BunchTrain_1afec746d8c5d5eaa98ad15e0a44f3694c" prot="private" static="no" mutable="no">
        <type>const_iterator</type>
        <definition>const_iterator Trig::BunchTrain::m_back</definition>
        <argsstring></argsstring>
        <name>m_back</name>
        <briefdescription>
<para>Iterator pointing to the last bunch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/d3e/classTrig_1_1BunchTrain_1aa14453fdf1ed7c15422264e474d81460" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Trig::BunchTrain::m_gapFound</definition>
        <argsstring></argsstring>
        <name>m_gapFound</name>
        <briefdescription>
<para>Flag specifying if the train spreads over the &quot;BCID turnover&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1aa0398bd0bd49b9fd6bf10042a993f347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchTrain::BunchTrain</definition>
        <argsstring>()</argsstring>
        <name>BunchTrain</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Default constructor, creating an empty bunch train. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="34" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1a9805f3c301c7a54e95ecc897c389adcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Trig::BunchTrain::BunchTrain</definition>
        <argsstring>(const BunchTrain &amp;parent)</argsstring>
        <name>BunchTrain</name>
        <param>
          <type>const <ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">BunchTrain</ref> &amp;</type>
          <declname>parent</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para>The internal iterators don&apos;t remain valid if we just use the default copy constructor. Hence when the object is copied, the validation has to be run again.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>The original <ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">BunchTrain</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1a098d3dd896bdc5e0d1d9ecf864c9ff1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">BunchTrain</ref> &amp;</type>
        <definition>BunchTrain &amp; Trig::BunchTrain::operator=</definition>
        <argsstring>(const BunchTrain &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="d2/d3e/classTrig_1_1BunchTrain" kindref="compound">BunchTrain</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="39" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1a2f9601b12403871a656ae66d494a25cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchTrain::spacing</definition>
        <argsstring>() const </argsstring>
        <name>spacing</name>
        <briefdescription>
<para>Spacing of the bunches in this train in nanoseconds. </para>        </briefdescription>
        <detaileddescription>
<para>The spacing between the bunches in the train is calculated by the <ref refid="d2/d3e/classTrig_1_1BunchTrain_1a06595f15ff086dfed71affa6f73af68e" kindref="member">BunchTrain::validate()</ref> function, so you should only trust this value once the validation ran on this object.</para><para>The value is stored in nanoseconds to maybe make the meaning of the value a bit more obvious.</para><para><simplesect kind="return"><para>The bunch spacing in nanoseconds, or -1 if the object has not been validated yet </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1ad933be45cefbc7704911d70da5ba46c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Trig::BunchTrain::distance</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>&quot;Distance&quot; of a bunch crossing from this bunch train </para>        </briefdescription>
        <detaileddescription>
<para>This function is used by the code to determine if a new bunch crossing should be merged into this bunch train or not. The calculation of the distance of a bunch crossing from a bunch train is pretty simple. If the train is empty, or the bunch crossing is already in it, the distance is 0. Otherwise the code calculates the distance of the reference bunch crossing from all the bunch crossings which are already in the train, and takes the smallest value. It&apos;s not the fastest method, but it&apos;s the only reliable method that I&apos;ve found...</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference bunch crossing </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance of the reference bunch crossing from this bunch train </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="89" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1ae939259306168d71e1f3551e05b94fa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Trig::BunchTrain::isInside</definition>
        <argsstring>(const BunchCrossing &amp;bc) const </argsstring>
        <name>isInside</name>
        <param>
          <type>const <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
<para>Check if a bunch crossing is inside this train. </para>        </briefdescription>
        <detaileddescription>
<para>This function checks if the specified bunch crossing is &quot;inside&quot; this bunch train. This can mean two different things. Either the bunch crossing is a filled bunch crossing which is part of the train, or the bunch crossing is an empty bunch crossing which is between the front and the tail of this train.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bc</parametername>
</parameternamelist>
<parameterdescription>
<para>The reference bunch crossing </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if the reference bunch crossing is &quot;inside&quot; the train, or <computeroutput>false</computeroutput> if it isn&apos;t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="122" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>BunchTrain::const_iterator Trig::BunchTrain::train_front</definition>
        <argsstring>() const </argsstring>
        <name>train_front</name>
        <briefdescription>
<para>Iterator pointing to the first bunch in the train. </para>        </briefdescription>
        <detaileddescription>
<para>The returned iterator always points to the first bunch of the train.</para><para>Note however, that can only be &quot;logically&quot; the first bunch of the train. When a train stretches over the &quot;BCID turnover&quot; region, the underlying <computeroutput>std::set</computeroutput> object will order the bunches like this:</para><para>0, 1, 2, 3562, 3563</para><para>In this case 3562 is the first bunch of the train, and this function will return an iterator pointing to that element.</para><para>This iterator is determined in the <ref refid="d2/d3e/classTrig_1_1BunchTrain_1a06595f15ff086dfed71affa6f73af68e" kindref="member">validate()</ref> function, so the code must always call <ref refid="d2/d3e/classTrig_1_1BunchTrain_1a06595f15ff086dfed71affa6f73af68e" kindref="member">validate()</ref> at least once before using this iterator.</para><para><simplesect kind="return"><para>The element that is logically the front of the train </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1afb28d88f6f6dac720348b0e57199d2f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_iterator</type>
        <definition>BunchTrain::const_iterator Trig::BunchTrain::train_back</definition>
        <argsstring>() const </argsstring>
        <name>train_back</name>
        <briefdescription>
<para>Iterator pointing to the last bunch in the train. </para>        </briefdescription>
        <detaileddescription>
<para>The returned iterator always points to the last bunch of the train.</para><para>Note that it is a valid iterator, which actually points to the end of the train. So you shouldn&apos;t use it in for loops like end().</para><para>The rest of the logic is the same as with <ref refid="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" kindref="member">train_front()</ref>.</para><para><simplesect kind="see"><para><ref refid="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" kindref="member">train_front</ref> </para></simplesect>
<simplesect kind="return"><para>The element that is logically at the back of the train </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="d2/d3e/classTrig_1_1BunchTrain_1a06595f15ff086dfed71affa6f73af68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Trig::BunchTrain::validate</definition>
        <argsstring>()</argsstring>
        <name>validate</name>
        <briefdescription>
<para>Check the spacing of the bunches in the train. </para>        </briefdescription>
        <detaileddescription>
<para>The function checks if the bunches in the train have equal spacing in between them. This should be the case if everything went correctly with the code...</para><para>It also checks whether the train stretches over the &quot;BCID turnover&quot; or not. If it does, it sets the m_front and m_back variables correctly. If it does not, then the train doesn&apos;t have to be treated in a special way.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if the validation passes, <computeroutput>false</computeroutput> otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Helper object to print logging messages: </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/Root/BunchTrain.cxx" bodystart="202" bodyend="264"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> smart set of <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> objects. </para>    </briefdescription>
    <detaileddescription>
<para>This class is used internally to describe a bunch train. It&apos;s basically just a list of <ref refid="d6/db1/classTrig_1_1BunchCrossing" kindref="compound">BunchCrossing</ref> objects with a couple of convenience functions.</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>618129 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2014-09-23 13:37:00 +0200 (Tue, 23 Sep 2014) </para></simplesect>
</para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigBunchCrossingTool/TrigBunchCrossingTool/BunchTrain.h" bodystart="30" bodyend="62"/>
    <listofallmembers>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1aa0398bd0bd49b9fd6bf10042a993f347" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>BunchTrain</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a9805f3c301c7a54e95ecc897c389adcc" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>BunchTrain</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1ad933be45cefbc7704911d70da5ba46c3" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>distance</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1ae939259306168d71e1f3551e05b94fa7" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>isInside</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1afec746d8c5d5eaa98ad15e0a44f3694c" prot="private" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>m_back</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a25fc4d2ebcf83773d0fe4ce79751d49d" prot="private" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>m_front</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1aa14453fdf1ed7c15422264e474d81460" prot="private" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>m_gapFound</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a794fa73c1e0b264e9ef344e214351f3f" prot="private" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>m_spacing</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a098d3dd896bdc5e0d1d9ecf864c9ff1c" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>operator=</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a2f9601b12403871a656ae66d494a25cc" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>spacing</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1afb28d88f6f6dac720348b0e57199d2f0" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>train_back</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1ae950c4962b954b523b8f955952511030" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>train_front</name></member>
      <member refid="d2/d3e/classTrig_1_1BunchTrain_1a06595f15ff086dfed71affa6f73af68e" prot="public" virt="non-virtual"><scope>Trig::BunchTrain</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
