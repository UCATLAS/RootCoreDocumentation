<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/db4/AmgTransformPlugin_8h" kind="file">
    <compoundname>AmgTransformPlugin.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/db4/AmgTransformPlugin_8h_1abdf3fb779d58f4000b09d6e578dc800d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Transform</definition>
        <argsstring>(const Vector3d &amp;rotationMatrixCol0, const Vector3d &amp;rotationMatrixCol1, const Vector3d &amp;rotationMatrixCol2)</argsstring>
        <name>Transform</name>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol0</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol1</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" line="9" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" bodystart="9" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/db4/AmgTransformPlugin_8h_1a79b7eedf3217b153ff96989be408ed86" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Transform</definition>
        <argsstring>(const Vector3d &amp;translation)</argsstring>
        <name>Transform</name>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" line="18" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="d2/db4/AmgTransformPlugin_8h_1a5d0910fb126bb839bd32272c75555c41" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Transform</definition>
        <argsstring>(const Matrix&lt; double, 3, 3 &gt; &amp;rotation, const Vector3d &amp;translation)</argsstring>
        <name>Transform</name>
        <param>
          <type>const Matrix&lt; double, 3, 3 &gt; &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="d2/db4/AmgTransformPlugin_8h_1ab193f2bf1755eb7fa457e85ca590d167" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Transform</definition>
        <argsstring>(const Matrix&lt; double, 3, 3 &gt; &amp;rotation, const TranslationType &amp;translation)</argsstring>
        <name>Transform</name>
        <param>
          <type>const Matrix&lt; double, 3, 3 &gt; &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const TranslationType &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d2/db4/AmgTransformPlugin_8h_1a7641f1070844fcc4ba869473c4a562de" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Transform</definition>
        <argsstring>(const Vector3d &amp;rotationMatrixCol0, const Vector3d &amp;rotationMatrixCol1, const Vector3d &amp;rotationMatrixCol2, const Vector3d &amp;translation)</argsstring>
        <name>Transform</name>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol0</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol1</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>rotationMatrixCol2</declname>
        </param>
        <param>
          <type>const Vector3d &amp;</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h" bodystart="41" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>GeoPrimitivesHelpers.h,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EVENTPRIMITIVES_AMGTRANSFORMPLUGIN_H</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EVENTPRIMITIVES_AMGTRANSFORMPLUGIN_H</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol2){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_template_params();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,0,3,1)<sp/>=<sp/>rotationMatrixCol0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,1,3,1)<sp/>=<sp/>rotationMatrixCol1;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,2,3,1)<sp/>=<sp/>rotationMatrixCol2;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(Mode)==Affine)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeAffine();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>translation){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_template_params();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,3,3,1)<sp/>=<sp/>translation;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,0,3,3).setIdentity();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(Mode)==Affine)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeAffine();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix&lt;double,<sp/>3,3&gt;&amp;<sp/>rotation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>translation){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_template_params();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,0,3,3)<sp/>=<sp/>rotation;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,3,3,1)<sp/>=<sp/>translation;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(Mode)==Affine)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeAffine();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matrix&lt;double,<sp/>3,3&gt;&amp;<sp/>rotation,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TranslationType&amp;<sp/>translation){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_template_params();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,0,3,3)<sp/>=<sp/>rotation;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,3,3,1)<sp/>=<sp/>translation.vector();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(Mode)==Affine)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeAffine();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>rotationMatrixCol2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector3d&amp;<sp/>translation){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_template_params();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,0,3,1)<sp/>=<sp/>rotationMatrixCol0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,1,3,1)<sp/>=<sp/>rotationMatrixCol1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,2,3,1)<sp/>=<sp/>rotationMatrixCol2;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matrix.block(0,3,3,1)<sp/>=<sp/>translation;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(Mode)==Affine)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeAffine();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/AmgTransformPlugin.h"/>
  </compounddef>
</doxygen>
