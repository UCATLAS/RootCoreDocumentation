<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/d10/BitPackerUnpacker__test_8cxx" kind="file">
    <compoundname>BitPackerUnpacker_test.cxx</compoundname>
    <includes refid="dc/d57/BitPacker_8h" local="yes">CxxUtils/BitPacker.h</includes>
    <includes refid="d5/d33/BitUnpacker_8h" local="yes">CxxUtils/BitUnpacker.h</includes>
    <includes refid="d1/d79/random_8h" local="yes">TestTools/random.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="113620">
        <label>CxxUtils/BitUnpacker.h</label>
        <link refid="d5/d33/BitUnpacker_8h"/>
        <childnode refid="113617" relation="include">
        </childnode>
        <childnode refid="113618" relation="include">
        </childnode>
        <childnode refid="113621" relation="include">
        </childnode>
      </node>
      <node id="113623">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="113617" relation="include">
        </childnode>
      </node>
      <node id="113622">
        <label>CxxUtils/ones.h</label>
        <link refid="dd/d16/ones_8h"/>
      </node>
      <node id="113617">
        <label>stdint.h</label>
      </node>
      <node id="113618">
        <label>cassert</label>
      </node>
      <node id="113616">
        <label>CxxUtils/BitPacker.h</label>
        <link refid="dc/d57/BitPacker_8h"/>
        <childnode refid="113617" relation="include">
        </childnode>
        <childnode refid="113618" relation="include">
        </childnode>
        <childnode refid="113619" relation="include">
        </childnode>
      </node>
      <node id="113621">
        <label>CxxUtils/BitUnpacker.icc</label>
        <link refid="db/db1/BitUnpacker_8icc"/>
        <childnode refid="113622" relation="include">
        </childnode>
      </node>
      <node id="113624">
        <label>vector</label>
      </node>
      <node id="113625">
        <label>iostream</label>
      </node>
      <node id="113615">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx</label>
        <link refid="BitPackerUnpacker_test.cxx"/>
        <childnode refid="113616" relation="include">
        </childnode>
        <childnode refid="113620" relation="include">
        </childnode>
        <childnode refid="113623" relation="include">
        </childnode>
        <childnode refid="113624" relation="include">
        </childnode>
        <childnode refid="113618" relation="include">
        </childnode>
        <childnode refid="113625" relation="include">
        </childnode>
      </node>
      <node id="113619">
        <label>CxxUtils/BitPacker.icc</label>
        <link refid="d9/dad/BitPacker_8icc"/>
      </node>
    </incdepgraph>
    <innerclass refid="d4/dc8/classTestStream" prot="public">TestStream</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/d10/BitPackerUnpacker__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" bodystart="31" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d2/d10/BitPackerUnpacker__test_8cxx_1ad9c3075d66042021765a9d1aca8b2804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>PACKER</declname>
            <defname>PACKER</defname>
          </param>
          <param>
            <type>template&lt; class &gt; class</type>
            <declname>UNPACKER</declname>
            <defname>UNPACKER</defname>
          </param>
          <param>
            <type>class STREAM</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testit2</definition>
        <argsstring>(int nbits)</argsstring>
        <name>testit2</name>
        <param>
          <type>int</type>
          <declname>nbits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" line="139" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" bodystart="138" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="d2/d10/BitPackerUnpacker__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" line="169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" bodystart="168" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="d2/d10/BitPackerUnpacker__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" line="187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx" bodystart="186" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression test for BitPacker/BitUnpacker class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Nov, 2014 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/d57/BitPacker_8h" kindref="compound" tooltip="Helper to pack a set of values bitwise into a stream.">CxxUtils/BitPacker.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d5/d33/BitUnpacker_8h" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils/BitUnpacker.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d79/random_8h" kindref="compound" tooltip="Very simple random numbers for regression testing.">TestTools/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="20" refid="d4/dc8/classTestStream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream</ref>()<sp/>:<sp/>pos(0)<sp/>{}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream</ref>&amp;<sp/>operator&lt;&lt;<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref><sp/>x)<sp/>{<sp/>v.push_back(x);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream</ref>&amp;<sp/>operator&gt;&gt;<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>&amp;<sp/>x)<sp/>{<sp/>x<sp/>=<sp/>v[pos++];<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>v;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>data;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x1eab8);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x3ff8);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x15f35);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0xf34e);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0xad40);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x1d54f);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0xe2d5);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x1221b);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0x1791d);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>data.push_back<sp/>(0xe1f6);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***********************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream&lt;uint32_t&gt;</ref><sp/>stream;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d3c/classCxxUtils_1_1BitPacker" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>packer<sp/>(17,<sp/>stream);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packer.pack<sp/>(data[i]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[0]<sp/>==<sp/>0x7ff1eab8);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[1]<sp/>==<sp/>0x9a757cd4);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[2]<sp/>==<sp/>0xa9ead407);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[3]<sp/>==<sp/>0xdb8b57a);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[4]<sp/>==<sp/>0xed791d91);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>assert<sp/>(stream.v[5]<sp/>==<sp/>0x1c3);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d06/classCxxUtils_1_1BitUnpacker" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>unpacker<sp/>(17,<sp/>stream);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(unpacker.unpack()<sp/>==<sp/>data[i]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***********************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream&lt;uint32_t&gt;</ref><sp/>stream2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d3c/classCxxUtils_1_1BitPacker" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>packer<sp/>(16,<sp/>stream2);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packer.pack<sp/>(data[i]<sp/>&amp;<sp/>0xffff);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v[0]<sp/>==<sp/>0x3ff8eab8);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v[1]<sp/>==<sp/>0xf34e5f35);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v[2]<sp/>==<sp/>0xd54fad40);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v[3]<sp/>==<sp/>0x221be2d5);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>assert<sp/>(stream2.v[4]<sp/>==<sp/>0xe1f6791d);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d06/classCxxUtils_1_1BitUnpacker" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>unpacker<sp/>(16,<sp/>stream2);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(unpacker.unpack()<sp/>==<sp/>(data[i]<sp/>&amp;<sp/>0xffff));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***********************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream&lt;uint32_t&gt;</ref><sp/>stream8;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/dd9/classCxxUtils_1_1BitPacker8" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker8&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>packer<sp/>(stream8);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packer.pack<sp/>(data[i]<sp/>&amp;<sp/>0xff);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>assert<sp/>(stream8.v.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>assert<sp/>(stream8.v[0]<sp/>==<sp/>0x4e35f8b8);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(stream8.v[1]<sp/>==<sp/>0x1bd54f40);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>assert<sp/>(stream8.v[2]<sp/>==<sp/>0xf61d);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/dac/classCxxUtils_1_1BitUnpacker8" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker8&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>unpacker<sp/>(stream8);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(unpacker.unpack()<sp/>==<sp/>(data[i]<sp/>&amp;<sp/>0xff));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***********************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="d4/dc8/classTestStream" kindref="compound">TestStream&lt;uint32_t&gt;</ref><sp/>stream16;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d5c/classCxxUtils_1_1BitPacker16" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker16&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>packer<sp/>(stream16);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packer.pack<sp/>(data[i]<sp/>&amp;<sp/>0xffff);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v[0]<sp/>==<sp/>0x3ff8eab8);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v[1]<sp/>==<sp/>0xf34e5f35);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v[2]<sp/>==<sp/>0xd54fad40);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v[3]<sp/>==<sp/>0x221be2d5);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>assert<sp/>(stream16.v[4]<sp/>==<sp/>0xe1f6791d);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dbe/classCxxUtils_1_1BitUnpacker16" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker16&lt;TestStream&lt;uint32_t&gt;</ref><sp/>&gt;<sp/>unpacker<sp/>(stream16);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(unpacker.unpack()<sp/>==<sp/>(data[i]<sp/>&amp;<sp/>0xffff));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PACKER,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UNPACKER,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">STREAM&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testit2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>STREAM<sp/>stream;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>data;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>data.push_back<sp/>(static_cast&lt;uint32_t&gt;<sp/>(Athena_test::rng()));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mask;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbits<sp/>==<sp/>32)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>~0U;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>(1U<sp/>&lt;&lt;<sp/>nbits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>PACKER&lt;STREAM&gt;<sp/>packer<sp/>(nbits,<sp/>stream);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>packer.pack<sp/>(data[i]<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>UNPACKER&lt;STREAM&gt;<sp/>unpacker<sp/>(nbits,<sp/>stream);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>val<sp/>=<sp/>unpacker.unpack();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(val<sp/>==<sp/>(data[i]&amp;mask));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d3c/classCxxUtils_1_1BitPacker" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d8/dd9/classCxxUtils_1_1BitPacker8" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker8</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d7/d5c/classCxxUtils_1_1BitPacker16" kindref="compound" tooltip="Pack a set of values bitwise into a stream.">CxxUtils::BitPacker16</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/d06/classCxxUtils_1_1BitUnpacker" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d8/dac/classCxxUtils_1_1BitUnpacker8" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker8</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d3/dbe/classCxxUtils_1_1BitUnpacker16" kindref="compound" tooltip="Helper to unpack a set of values bitwise from a stream.">CxxUtils::BitUnpacker16</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits=1;<sp/>nbits<sp/>&lt;=<sp/>32;<sp/>++nbits)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>testit2&lt;BitPacker,<sp/>BitUnpacker,<sp/>TestStream&lt;uint32_t&gt;<sp/>&gt;<sp/>(nbits);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>testit2&lt;BitPacker8,<sp/><sp/>BitUnpacker8,<sp/><sp/>TestStream&lt;uint32_t&gt;<sp/>&gt;<sp/><sp/>(8);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>testit2&lt;BitPacker16,<sp/>BitUnpacker16,<sp/>TestStream&lt;uint32_t&gt;<sp/>&gt;<sp/>(16);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/BitPackerUnpacker_test.cxx"/>
  </compounddef>
</doxygen>
