<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/d1c/AuxVectorBase__test_8cxx" kind="file">
    <compoundname>AuxVectorBase_test.cxx</compoundname>
    <includes local="no">exception</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes refid="d7/d18/AuxVectorBase_8h" local="yes">AthContainers/AuxVectorBase.h</includes>
    <includes refid="db/d7f/AuxTypeRegistry_8h" local="yes">AthContainers/AuxTypeRegistry.h</includes>
    <includes refid="d3/d0f/AuxStoreInternal_8h" local="yes">AthContainers/AuxStoreInternal.h</includes>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="d1/d79/random_8h" local="yes">TestTools/random.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="72291">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="72309">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="72260" relation="include">
        </childnode>
        <childnode refid="72262" relation="include">
        </childnode>
        <childnode refid="72268" relation="include">
        </childnode>
        <childnode refid="72269" relation="include">
        </childnode>
      </node>
      <node id="72311">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="72270" relation="include">
        </childnode>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72312" relation="include">
        </childnode>
        <childnode refid="72271" relation="include">
        </childnode>
      </node>
      <node id="72310">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="72267">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="72269">
        <label>functional</label>
      </node>
      <node id="72324">
        <label>boost/version.hpp</label>
      </node>
      <node id="72266">
        <label>limits</label>
      </node>
      <node id="72312">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="72289">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="72330">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="72277" relation="include">
        </childnode>
      </node>
      <node id="72263">
        <label>iterator</label>
      </node>
      <node id="72272">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="72253" relation="include">
        </childnode>
        <childnode refid="72273" relation="include">
        </childnode>
      </node>
      <node id="72317">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="72257" relation="include">
        </childnode>
        <childnode refid="72318" relation="include">
        </childnode>
        <childnode refid="72319" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
        <childnode refid="72253" relation="include">
        </childnode>
      </node>
      <node id="72274">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72264" relation="include">
        </childnode>
      </node>
      <node id="72277">
        <label>stdint.h</label>
      </node>
      <node id="72314">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="72297">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
      </node>
      <node id="72328">
        <label>AthContainersInterfaces/IAuxStoreIO.h</label>
        <link refid="d9/db5/IAuxStoreIO_8h"/>
        <childnode refid="72257" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
        <childnode refid="72329" relation="include">
        </childnode>
        <childnode refid="72271" relation="include">
        </childnode>
      </node>
      <node id="72280">
        <label>RVersion.h</label>
      </node>
      <node id="72259">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="72260" relation="include">
        </childnode>
        <childnode refid="72268" relation="include">
        </childnode>
        <childnode refid="72269" relation="include">
        </childnode>
      </node>
      <node id="72265">
        <label>cmath</label>
      </node>
      <node id="72321">
        <label>cassert</label>
      </node>
      <node id="72325">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="72319">
        <label>stdexcept</label>
      </node>
      <node id="72292">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="72253">
        <label>string</label>
      </node>
      <node id="72256">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="72257" relation="include">
        </childnode>
        <childnode refid="72270" relation="include">
        </childnode>
        <childnode refid="72272" relation="include">
        </childnode>
        <childnode refid="72274" relation="include">
        </childnode>
        <childnode refid="72276" relation="include">
        </childnode>
        <childnode refid="72282" relation="include">
        </childnode>
        <childnode refid="72283" relation="include">
        </childnode>
        <childnode refid="72284" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72262" relation="include">
        </childnode>
        <childnode refid="72264" relation="include">
        </childnode>
        <childnode refid="72285" relation="include">
        </childnode>
        <childnode refid="72286" relation="include">
        </childnode>
        <childnode refid="72287" relation="include">
        </childnode>
        <childnode refid="72293" relation="include">
        </childnode>
      </node>
      <node id="72295">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
      </node>
      <node id="72285">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="72281">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="72306">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="72252">
        <label>exception</label>
      </node>
      <node id="72286">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="72303">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="72316">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="72279">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="72280" relation="include">
        </childnode>
        <childnode refid="72281" relation="include">
        </childnode>
      </node>
      <node id="72283">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="72290">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="72251">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx</label>
        <link refid="AuxVectorBase_test.cxx"/>
        <childnode refid="72252" relation="include">
        </childnode>
        <childnode refid="72253" relation="include">
        </childnode>
        <childnode refid="72254" relation="include">
        </childnode>
        <childnode refid="72255" relation="include">
        </childnode>
        <childnode refid="72294" relation="include">
        </childnode>
        <childnode refid="72327" relation="include">
        </childnode>
        <childnode refid="72317" relation="include">
        </childnode>
        <childnode refid="72330" relation="include">
        </childnode>
        <childnode refid="72321" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72331" relation="include">
        </childnode>
      </node>
      <node id="72301">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="72272" relation="include">
        </childnode>
        <childnode refid="72266" relation="include">
        </childnode>
        <childnode refid="72277" relation="include">
        </childnode>
        <childnode refid="72302" relation="include">
        </childnode>
      </node>
      <node id="72257">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72259" relation="include">
        </childnode>
      </node>
      <node id="72260">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="72261" relation="include">
        </childnode>
        <childnode refid="72262" relation="include">
        </childnode>
        <childnode refid="72263" relation="include">
        </childnode>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72264" relation="include">
        </childnode>
        <childnode refid="72265" relation="include">
        </childnode>
        <childnode refid="72266" relation="include">
        </childnode>
        <childnode refid="72253" relation="include">
        </childnode>
        <childnode refid="72267" relation="include">
        </childnode>
      </node>
      <node id="72322">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="72321" relation="include">
        </childnode>
      </node>
      <node id="72296">
        <label>typeinfo</label>
      </node>
      <node id="72320">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="72285" relation="include">
        </childnode>
        <childnode refid="72321" relation="include">
        </childnode>
      </node>
      <node id="72302">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="72282">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="72278">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="72277" relation="include">
        </childnode>
      </node>
      <node id="72273">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="72305">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="72271">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="72294">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="72257" relation="include">
        </childnode>
        <childnode refid="72295" relation="include">
        </childnode>
        <childnode refid="72297" relation="include">
        </childnode>
        <childnode refid="72298" relation="include">
        </childnode>
        <childnode refid="72307" relation="include">
        </childnode>
        <childnode refid="72287" relation="include">
        </childnode>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72309" relation="include">
        </childnode>
        <childnode refid="72310" relation="include">
        </childnode>
      </node>
      <node id="72275">
        <label>vector</label>
      </node>
      <node id="72262">
        <label>utility</label>
      </node>
      <node id="72284">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="72254">
        <label>sstream</label>
      </node>
      <node id="72326">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="72288">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="72299">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="72287">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="72288" relation="include">
        </childnode>
        <childnode refid="72289" relation="include">
        </childnode>
        <childnode refid="72290" relation="include">
        </childnode>
        <childnode refid="72291" relation="include">
        </childnode>
        <childnode refid="72292" relation="include">
        </childnode>
      </node>
      <node id="72264">
        <label>cstdlib</label>
      </node>
      <node id="72331">
        <label>iostream</label>
      </node>
      <node id="72318">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="72270">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="72257" relation="include">
        </childnode>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72271" relation="include">
        </childnode>
      </node>
      <node id="72258">
        <label>cstddef</label>
      </node>
      <node id="72293">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="72294" relation="include">
        </childnode>
        <childnode refid="72311" relation="include">
        </childnode>
        <childnode refid="72270" relation="include">
        </childnode>
        <childnode refid="72285" relation="include">
        </childnode>
        <childnode refid="72286" relation="include">
        </childnode>
      </node>
      <node id="72298">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="72295" relation="include">
        </childnode>
        <childnode refid="72299" relation="include">
        </childnode>
        <childnode refid="72274" relation="include">
        </childnode>
        <childnode refid="72300" relation="include">
        </childnode>
        <childnode refid="72284" relation="include">
        </childnode>
        <childnode refid="72296" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72261" relation="include">
        </childnode>
        <childnode refid="72277" relation="include">
        </childnode>
        <childnode refid="72304" relation="include">
        </childnode>
        <childnode refid="72305" relation="include">
        </childnode>
        <childnode refid="72306" relation="include">
        </childnode>
      </node>
      <node id="72304">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="72255">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="72256" relation="include">
        </childnode>
        <childnode refid="72313" relation="include">
        </childnode>
        <childnode refid="72314" relation="include">
        </childnode>
        <childnode refid="72315" relation="include">
        </childnode>
        <childnode refid="72294" relation="include">
        </childnode>
        <childnode refid="72317" relation="include">
        </childnode>
        <childnode refid="72322" relation="include">
        </childnode>
        <childnode refid="72311" relation="include">
        </childnode>
        <childnode refid="72323" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72326" relation="include">
        </childnode>
      </node>
      <node id="72329">
        <label>set</label>
      </node>
      <node id="72308">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="72300">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="72299" relation="include">
        </childnode>
        <childnode refid="72301" relation="include">
        </childnode>
        <childnode refid="72284" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72303" relation="include">
        </childnode>
      </node>
      <node id="72261">
        <label>algorithm</label>
      </node>
      <node id="72327">
        <label>AthContainers/AuxStoreInternal.h</label>
        <link refid="d3/d0f/AuxStoreInternal_8h"/>
        <childnode refid="72311" relation="include">
        </childnode>
        <childnode refid="72328" relation="include">
        </childnode>
        <childnode refid="72287" relation="include">
        </childnode>
        <childnode refid="72284" relation="include">
        </childnode>
        <childnode refid="72275" relation="include">
        </childnode>
        <childnode refid="72312" relation="include">
        </childnode>
        <childnode refid="72271" relation="include">
        </childnode>
      </node>
      <node id="72315">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="72316" relation="include">
        </childnode>
        <childnode refid="72270" relation="include">
        </childnode>
        <childnode refid="72311" relation="include">
        </childnode>
        <childnode refid="72276" relation="include">
        </childnode>
        <childnode refid="72294" relation="include">
        </childnode>
        <childnode refid="72256" relation="include">
        </childnode>
        <childnode refid="72274" relation="include">
        </childnode>
        <childnode refid="72317" relation="include">
        </childnode>
        <childnode refid="72285" relation="include">
        </childnode>
        <childnode refid="72258" relation="include">
        </childnode>
        <childnode refid="72320" relation="include">
        </childnode>
      </node>
      <node id="72276">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="72277" relation="include">
        </childnode>
        <childnode refid="72253" relation="include">
        </childnode>
        <childnode refid="72278" relation="include">
        </childnode>
        <childnode refid="72279" relation="include">
        </childnode>
      </node>
      <node id="72313">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="72268">
        <label>memory</label>
      </node>
      <node id="72307">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="72297" relation="include">
        </childnode>
        <childnode refid="72298" relation="include">
        </childnode>
        <childnode refid="72308" relation="include">
        </childnode>
      </node>
      <node id="72323">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="72316" relation="include">
        </childnode>
        <childnode refid="72311" relation="include">
        </childnode>
        <childnode refid="72270" relation="include">
        </childnode>
        <childnode refid="72304" relation="include">
        </childnode>
        <childnode refid="72324" relation="include">
        </childnode>
        <childnode refid="72325" relation="include">
        </childnode>
        <childnode refid="72253" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="d1/db3/classdv__test__err" prot="public">dv_test_err</innerclass>
    <innerclass refid="d4/dc4/structA" prot="public">A</innerclass>
    <innerclass refid="d9/db3/structB" prot="public">B</innerclass>
    <innerclass refid="db/db2/structC" prot="public">C</innerclass>
    <innerclass refid="d9/dfe/structACont" prot="public">ACont</innerclass>
    <innerclass refid="d0/d4a/structBCont" prot="public">BCont</innerclass>
    <innerclass refid="db/d03/structCCont" prot="public">CCont</innerclass>
    <innerclass refid="d8/db3/classSG_1_1AuxVectorBase__test" prot="public">SG::AuxVectorBase_test</innerclass>
    <innerclass refid="d5/d6d/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01B_01_5_01_4_01_4" prot="public">SG::AuxStore_traits&lt; std::vector&lt; B * &gt; &gt;</innerclass>
    <innerclass refid="d0/d93/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01C_01_5_01_4_01_4" prot="public">SG::AuxStore_traits&lt; std::vector&lt; C * &gt; &gt;</innerclass>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="d2/d1c/AuxVectorBase__test_8cxx_1adfad0eabfe51f87b9c0ad1673cc690fa" prot="public" static="no">
        <name>myassert</name>
        <param><defname>X</defname></param>
        <initializer>do {     \
    if (!(<ref refid="d3/d24/structX" kindref="compound">X</ref>)) { \
      throw_dv_test_err (__FILE__, __LINE__, #<ref refid="d3/d24/structX" kindref="compound">X</ref>); \
    } \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/d1c/AuxVectorBase__test_8cxx_1a86fba812902b6fb0feea3faf586e45d2" prot="public" static="no">
        <name>ATHCONTAINERS_ASSERT</name>
        <param><defname>X</defname></param>
        <initializer>myassert(<ref refid="d3/d24/structX" kindref="compound">X</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d2/d1c/AuxVectorBase__test_8cxx_1ab3e754ee641921cdee9b9fe374873e31" prot="public" static="no" mutable="no">
        <type><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound">Athena_test::RNG</ref></type>
        <definition>Athena_test::RNG stlrand</definition>
        <argsstring></argsstring>
        <name>stlrand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1aaa55a13ec44dcdfdae5fc8162facedde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_dv_test_err</definition>
        <argsstring>(const char *file, int line, const char *what)</argsstring>
        <name>throw_dv_test_err</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a73541880b0d0e7e2c89b06f8366071d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BASE</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; BASE * &gt;</type>
        <definition>std::vector&lt;BASE*&gt; make_v</definition>
        <argsstring>()</argsstring>
        <name>make_v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a03c05f2818b1f2ab7a501b167ba03690" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class BASE</type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; BASE * &gt;</type>
        <definition>std::vector&lt;BASE*&gt; make_v2</definition>
        <argsstring>()</argsstring>
        <name>make_v2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="237" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a500f3e6675ddc2ae311f22f90e919653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_init</definition>
        <argsstring>()</argsstring>
        <name>test_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="247" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="246" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a74beb005f44dc04f36ff8e75594eedc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_set_store</definition>
        <argsstring>()</argsstring>
        <name>test_set_store</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="298" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="297" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a1b9250a130fa234cf147486c951f58c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_set_store2</definition>
        <argsstring>()</argsstring>
        <name>test_set_store2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="336" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="335" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a7da90f0f220362ee8552bcb29d3010f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_set_indices</definition>
        <argsstring>()</argsstring>
        <name>test_set_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="374" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="373" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a5cb6829cfaced9152b3910b146d9a70c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clear_index</definition>
        <argsstring>()</argsstring>
        <name>test_clear_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="394" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="393" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a241f57935039fa7c469edfc93393457f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clear_indices</definition>
        <argsstring>()</argsstring>
        <name>test_clear_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="417" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="416" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a5ff9dc97670eb99a0cf3501111cf3e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_get_data</definition>
        <argsstring>()</argsstring>
        <name>test_get_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="441" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="440" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a9bc6e4d6a0560e26c3029faf93cce366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_reserve_resize</definition>
        <argsstring>()</argsstring>
        <name>test_reserve_resize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="499" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="498" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a0b7ed45901dfae2a36376498c37eb05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_shift</definition>
        <argsstring>()</argsstring>
        <name>test_shift</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="542" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="541" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a02b4d6539176fba3c3b837d8e7f4b4fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_get_types</definition>
        <argsstring>()</argsstring>
        <name>test_get_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="599" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="598" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1ac0cf9f6a13dbb661e841716580b84d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copy_aux</definition>
        <argsstring>()</argsstring>
        <name>test_copy_aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="621" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="620" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a15b15c3503a99de49a5acfe728a0aee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_copy_base_aux</definition>
        <argsstring>()</argsstring>
        <name>test_copy_base_aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="683" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="682" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a2dd33662f91fcf0681bf8fa8e808ef28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_clear_aux</definition>
        <argsstring>()</argsstring>
        <name>test_clear_aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="704" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="703" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1ae2530f426600abc7b2fffae6063ee15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_swap_elements_aux</definition>
        <argsstring>()</argsstring>
        <name>test_swap_elements_aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="732" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="731" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1ac9a3407e125a52196092eb6e1f06225c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>class BASE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_resort_aux_check</definition>
        <argsstring>(SG::AuxVectorBase_test &amp;b, std::vector&lt; BASE * &gt; &amp;v, bool checkaux=true)</argsstring>
        <name>test_resort_aux_check</name>
        <param>
          <type><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; BASE * &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkaux</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="807" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="804" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a67a888ab6cbf89ad40698ea18fdc23a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>class CONT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_resort_aux1</definition>
        <argsstring>()</argsstring>
        <name>test_resort_aux1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="823" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="822" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a15cc837597cbb493da042954be7dc65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_resort_aux</definition>
        <argsstring>()</argsstring>
        <name>test_resort_aux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="872" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="871" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1a4faa2b1253ebee4809759cae2fd23855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_move</definition>
        <argsstring>()</argsstring>
        <name>test_move</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="887" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="886" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="d2/d1c/AuxVectorBase__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" line="922" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx" bodystart="921" bodyend="941"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for AuxVectorBase. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Jan, 2013 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="d1/db3/classdv__test__err" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>what);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>()<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_what.c_str();<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::string<sp/>m_what;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">dv_test_err::dv_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>what)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>myassertion<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>what;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>m_what<sp/>=<sp/>os.str();</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_dv_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(file,<sp/>line,<sp/>what));</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>myassert(X)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(X))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>throw_dv_test_err<sp/>(__FILE__,<sp/>__LINE__,<sp/>#X);<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_ASSERT(X)<sp/>myassert(X)</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d18/AuxVectorBase_8h" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">AthContainers/AuxVectorBase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d7f/AuxTypeRegistry_8h" kindref="compound" tooltip="Handle mappings between names and auxid_t.">AthContainers/AuxTypeRegistry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d0f/AuxStoreInternal_8h" kindref="compound" tooltip="An auxiliary data store that holds data internally.">AthContainers/AuxStoreInternal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d79/random_8h" kindref="compound" tooltip="Very simple random numbers for regression testing.">TestTools/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">Athena_test::RNG</ref><sp/>stlrand;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//*************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d4/dc4/structA" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/dc4/structA" kindref="compound">A</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81" refid="d9/db3/structB" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/db3/structB" kindref="compound">B</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="db/db2/structC" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/db2/structC" kindref="compound">C</ref></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref></highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="d9/dfe/structACont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/dfe/structACont" kindref="compound">ACont</ref></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;A*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref><sp/><ref refid="d4/dc4/structA" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref><sp/><ref refid="d4/dc4/structA" kindref="compound">base_type</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101" refid="d0/d4a/structBCont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/d4a/structBCont" kindref="compound">BCont</ref></highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;B*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref><sp/><ref refid="d9/db3/structB" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref><sp/><ref refid="d9/db3/structB" kindref="compound">base_type</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108" refid="db/d03/structCCont" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d03/structCCont" kindref="compound">CCont</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_virtual<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;A*&gt;<sp/>BaseContainer;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="db/db2/structC" kindref="compound">C</ref><sp/><ref refid="db/db2/structC" kindref="compound">base_value_type</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref><sp/><ref refid="d4/dc4/structA" kindref="compound">base_type</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">std::vector&lt;BASE*&gt;<sp/>make_v()</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::vector&lt;BASE*&gt;<sp/>v;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BASE(i));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">std::vector&lt;BASE*&gt;<sp/>make_v2()</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::vector&lt;BASE*&gt;<sp/>v;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="d8/db3/classSG_1_1AuxVectorBase__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">AuxVectorBase_test</ref></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">AuxVectorBase</ref></highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">AuxVectorBase::initAuxVectorBase</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a235d711b1dc6ccd3147d1e55b6d9b2a9" kindref="member" tooltip="Set container/index for all elements within a range.">AuxVectorBase::setIndices</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1adb19fc133c31c74e245d65646e8e99a6" kindref="member" tooltip="Clear the container / index for element elt.">AuxVectorBase::clearIndex</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1aea8774b45a413ba19af7709a03d80278" kindref="member" tooltip="Clear the container / index for a range of elements.">AuxVectorBase::clearIndices</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad2c7feb935ffe7cfc1b3a80d9ad4b414" kindref="member" tooltip="Change the capacity of the aux data associated with this container.">AuxVectorBase::reserve</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1aab61a29d68cb3876b1e6a5f06b8320e2" kindref="member" tooltip="Resize the aux data associated with this container.">AuxVectorBase::resize</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1b5a71b56431f1010d8cdb846dd35bfa" kindref="member" tooltip="Shift the elements of the container.">AuxVectorBase::shift</ref>;<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad4be9ca08792014774acdd5218bd27a0" kindref="member" tooltip="Set index on an element and copy auxiliary data.">AuxVectorBase::moveAux</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a3105544a00e10c72e45ca7367bb43e87" kindref="member" tooltip="Swap indices and auxiliary data between two elements.">AuxVectorBase::swapElementsAux</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a2513e17b33c0b9715553416e19e23810" kindref="member" tooltip="Reset indices / reorder aux data after elements have been permuted.">AuxVectorBase::resortAux</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1413cec813bba2f0cba00cd3136e7131" kindref="member" tooltip="Swap with another container.">AuxVectorBase::swap</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test_1a1d585341390c46dcdfe0b257af171858" kindref="member" tooltip="Return the size of the container.">size_v</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test_1a8fc5d6bb424ff267020798b274a1c24b" kindref="member" tooltip="Return the capacity of the container.">capacity_v</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>20;<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_ordered<sp/>(Iterator<sp/>beg,<sp/>Iterator<sp/>end,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(beg<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>((*beg)-&gt;index()<sp/>==<sp/>index);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>((*beg)-&gt;container()<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++beg;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_ordered<sp/>(<ref refid="d3/d2d/structCont" kindref="compound">Cont</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>check_ordered<sp/>(c.begin(),<sp/>c.end(),<sp/>index);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_clear<sp/>(Iterator<sp/>beg,<sp/>Iterator<sp/>end)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(beg<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>((*beg)-&gt;index()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>((*beg)-&gt;container()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++beg;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_clear<sp/>(Container&amp;<sp/>c)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>check_clear<sp/>(c.begin(),<sp/>c.end());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>order<sp/>(Iterator<sp/>beg,<sp/>Iterator<sp/>end,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>initAuxVectorBase&lt;B&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase_1a235d711b1dc6ccd3147d1e55b6d9b2a9" kindref="member" tooltip="Set container/index for all elements within a range.">setIndices</ref><sp/>(beg,<sp/>end,<sp/>index);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Cont&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>order<sp/>(<ref refid="d3/d2d/structCont" kindref="compound">Cont</ref>&amp;<sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>order<sp/>(c.begin(),<sp/>c.end(),<sp/>index);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyAux<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>e1.copyAux<sp/>(e2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearAux<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>e.clearAux();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setIndexTest<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;setIndex<sp/>(index,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="229" refid="d5/d6d/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01B_01_5_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">AuxStore_traits</ref>&lt;std::vector&lt;B*&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/d5b/structSG_1_1AuxStore__traits__AuxDefault" kindref="compound" tooltip="Default traits values for aux data case.">AuxStore_traits_AuxDefault</ref><sp/>{};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="231" refid="d0/d93/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01C_01_5_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">AuxStore_traits</ref>&lt;std::vector&lt;C*&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/d5b/structSG_1_1AuxStore__traits__AuxDefault" kindref="compound" tooltip="Default traits values for aux data case.">AuxStore_traits_AuxDefault</ref><sp/>{};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="d8/db3/classSG_1_1AuxVectorBase__test_1a1d585341390c46dcdfe0b257af171858" kindref="member" tooltip="Return the size of the container.">size_v</ref>()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="d8/db3/classSG_1_1AuxVectorBase__test_1a8fc5d6bb424ff267020798b274a1c24b" kindref="member" tooltip="Return the capacity of the container.">capacity_v</ref>()<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_init()</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" kindref="member" tooltip="Never track indices, regardless of the setting of the ownership policy.">SG::NEVER_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" kindref="member" tooltip="Never track indices, regardless of the setting of the ownership policy.">SG::NEVER_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>assert<sp/>(!b2.trackIndices());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1413cec813bba2f0cba00cd3136e7131" kindref="member" tooltip="Swap with another container.">swap</ref><sp/>(b2);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>assert<sp/>(!b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.trackIndices());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>b2.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>b2.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>b2.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" kindref="member" tooltip="Never track indices, regardless of the setting of the ownership policy.">SG::NEVER_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>b2.initAuxVectorBase&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_set_store()</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_set_store\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)&amp;store);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)&amp;store);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_set_store2()</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_set_store2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a4786cd7b376a4a33d840715f44b3d01f" kindref="member" tooltip="Synonym for setStore with IAuxStore.">setNonConstStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a8223a5c9a9af0a9dbb8fc268cd0ea832" kindref="member" tooltip="Synonym for setStore with IConstAuxStore.">setConstStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d77/classSG_1_1ExcUntrackedSetStore" kindref="compound" tooltip="Exception --- Attempt to set aux data store on container that doesn&amp;#39;t track indices...">SG::ExcUntrackedSetStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a8223a5c9a9af0a9dbb8fc268cd0ea832" kindref="member" tooltip="Synonym for setStore with IConstAuxStore.">setConstStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>assert<sp/>(!b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a4786cd7b376a4a33d840715f44b3d01f" kindref="member" tooltip="Synonym for setStore with IAuxStore.">setNonConstStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae905757bbac29e780e4010eaf52ea01e" kindref="member" tooltip="Return true if index tracking is enabled for this container.">trackIndices</ref>());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" kindref="member" tooltip="Return true if this object has an associated store.">hasStore</ref>());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>());</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_set_indices()</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>std::vector&lt;A*&gt;<sp/>va<sp/>=<sp/>make_v&lt;A&gt;();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>std::vector&lt;B*&gt;<sp/>vb<sp/>=<sp/>make_v&lt;B&gt;();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>b1.setIndices<sp/>(va.begin(),<sp/>va.end(),<sp/>3);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>b1.setIndices<sp/>(vb.begin(),<sp/>vb.end(),<sp/>3);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>b1.check_clear<sp/>(vb);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>b1.setIndices<sp/>(vb.begin(),<sp/>vb.begin()+5,<sp/>3);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb.begin(),<sp/>vb.begin()+5,<sp/>3);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>b1.check_clear<sp/>(vb.begin()+5,<sp/>vb.end());</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_clear_index()</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>std::vector&lt;A*&gt;<sp/>va<sp/>=<sp/>make_v&lt;A&gt;();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>std::vector&lt;B*&gt;<sp/>vb<sp/>=<sp/>make_v&lt;B&gt;();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>b1.order<sp/>(vb);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>b1.clearIndex<sp/>(va.begin());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>b1.clearIndex<sp/>(vb.begin());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>b1.clearIndex<sp/>(vb.begin());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>b1.check_clear<sp/>(vb.begin(),<sp/>vb.begin()+1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb.begin()+1,<sp/>vb.end(),<sp/>1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_clear_indices()</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>std::vector&lt;A*&gt;<sp/>va<sp/>=<sp/>make_v&lt;A&gt;();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>std::vector&lt;B*&gt;<sp/>vb<sp/>=<sp/>make_v&lt;B&gt;();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>b1.order<sp/>(vb);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>b1.clearIndices<sp/>(va.begin(),<sp/>va.begin()+5);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>b1.clearIndices<sp/>(vb.begin(),<sp/>vb.begin()+5);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>b1.initAuxVectorBase&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.trackIndices());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>b1.clearIndices<sp/>(vb.begin(),<sp/>vb.begin()+5);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>b1.check_clear<sp/>(vb.begin(),<sp/>vb.begin()+5);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb.begin()+5,<sp/>vb.end(),<sp/>5);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_get_data()</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_get_data\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref>&amp;<sp/>cb1<sp/>=<sp/>b1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d45/classSG_1_1ExcNoAuxStore" kindref="compound" tooltip="Exception --- Aux data requested from object with no store.">SG::ExcNoAuxStore</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*<sp/>cstore<sp/>=<sp/>&amp;store;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(cstore);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(cb1.getData&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/da7/classSG_1_1ExcBadAuxVar" kindref="compound" tooltip="Exception --- Attempt to retrieve nonexistent aux data item.">SG::ExcBadAuxVar</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(cstore);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>assert<sp/>(cb1.getData&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>assert<sp/>(cb1.getData&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>ff<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(store.<ref refid="d1/d1c/classSG_1_1AuxStoreInternal_1a90b2121f7a3ae82b0cd339cb5d212d48" kindref="member" tooltip="Return the data vector for one aux data item.">getData</ref><sp/>(ftyp,<sp/>10,<sp/>20));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>ff[0]<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>ff[1]<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>assert<sp/>(cb1.getData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>0)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>assert<sp/>(cb1.getData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_reserve_resize()</highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_reserve_resize\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SG::IConstAuxStore*<sp/>cstore<sp/>=<sp/>&amp;store;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad2c7feb935ffe7cfc1b3a80d9ad4b414" kindref="member" tooltip="Change the capacity of the aux data associated with this container.">reserve</ref>&lt;<ref refid="d0/d4a/structBCont" kindref="compound">BCont</ref>&gt;<sp/>(50);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ip<sp/>=<sp/>&amp;b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aab61a29d68cb3876b1e6a5f06b8320e2" kindref="member" tooltip="Resize the aux data associated with this container.">resize</ref>&lt;<ref refid="d0/d4a/structBCont" kindref="compound">BCont</ref>&gt;<sp/>(40);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>assert<sp/>(ip<sp/>==<sp/>&amp;b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad2c7feb935ffe7cfc1b3a80d9ad4b414" kindref="member" tooltip="Change the capacity of the aux data associated with this container.">reserve</ref>&lt;<ref refid="d9/dfe/structACont" kindref="compound">ACont</ref>&gt;<sp/>(1);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aab61a29d68cb3876b1e6a5f06b8320e2" kindref="member" tooltip="Resize the aux data associated with this container.">resize</ref>&lt;<ref refid="d9/dfe/structACont" kindref="compound">ACont</ref>&gt;<sp/>(1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad2c7feb935ffe7cfc1b3a80d9ad4b414" kindref="member" tooltip="Change the capacity of the aux data associated with this container.">reserve</ref>&lt;<ref refid="d9/dfe/structACont" kindref="compound">ACont</ref>&gt;<sp/>(1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aab61a29d68cb3876b1e6a5f06b8320e2" kindref="member" tooltip="Resize the aux data associated with this container.">resize</ref>&lt;<ref refid="d9/dfe/structACont" kindref="compound">ACont</ref>&gt;<sp/>(1);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_shift()</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_shift\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>std::vector&lt;B*&gt;<sp/>vb<sp/>=<sp/>make_v&lt;B&gt;();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>b1.order<sp/>(vb);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>=<sp/>i+1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.insert<sp/>(vb.begin()+5,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1b5a71b56431f1010d8cdb846dd35bfa" kindref="member" tooltip="Shift the elements of the container.">shift</ref><sp/>(vb,<sp/>5,<sp/>3);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>0<sp/>0<sp/>0<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;5;<sp/>i++)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>i+1);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=5;<sp/>i&lt;8;<sp/>i++)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=8;<sp/>i&lt;13;<sp/>i++)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>i-2);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb.begin(),<sp/>vb.begin()+5,<sp/>0);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb.begin()+8,<sp/>vb.end(),<sp/>8);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>b1.order<sp/>(vb);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.erase<sp/>(vb.begin()+1);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1b5a71b56431f1010d8cdb846dd35bfa" kindref="member" tooltip="Shift the elements of the container.">shift</ref><sp/>(vb,<sp/>3,<sp/>-2);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>4<sp/>5<sp/>0<sp/>0<sp/>0<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>i+3);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=3;<sp/>i&lt;6;<sp/>i++)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=6;<sp/>i&lt;11;<sp/>i++)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>b1.check_ordered<sp/>(vb);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>std::vector&lt;A*&gt;<sp/>va<sp/>=<sp/>make_v&lt;A&gt;();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1b5a71b56431f1010d8cdb846dd35bfa" kindref="member" tooltip="Shift the elements of the container.">shift</ref><sp/>(va,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>assert<sp/>(caught);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a1b5a71b56431f1010d8cdb846dd35bfa" kindref="member" tooltip="Shift the elements of the container.">shift</ref><sp/>(va,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_get_types()</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_get_types\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp2<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().find(ityp1)<sp/>!=<sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().end());</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().find(ityp2)<sp/>!=<sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" kindref="member" tooltip="Return a set of identifiers for existing data items in store associated with this...">getAuxIDs</ref>().end());</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copy_aux()</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_copy_aux\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store2);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp2<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp3<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>1)<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(&amp;elt,<sp/>1);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>3)<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp3,<sp/>3)<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad4be9ca08792014774acdd5218bd27a0" kindref="member" tooltip="Set index on an element and copy auxiliary data.">moveAux</ref><sp/>(3,<sp/>&amp;elt);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>3)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>3)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp3,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>3)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.index()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.container()<sp/>==<sp/>&amp;b2);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad4be9ca08792014774acdd5218bd27a0" kindref="member" tooltip="Set index on an element and copy auxiliary data.">moveAux</ref><sp/>(3,<sp/>(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)0);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp3,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(&amp;elt,<sp/>1);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt2;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>b2.setIndexTest<sp/>(&amp;elt2,<sp/>2);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase_test::copyAux<sp/>(elt2,<sp/>elt);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>2)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>2)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp3,<sp/>2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ad4be9ca08792014774acdd5218bd27a0" kindref="member" tooltip="Set index on an element and copy auxiliary data.">moveAux</ref><sp/>(2,<sp/>&amp;elt,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_copy_base_aux()</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_copy_base_aux\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="db/db2/structC" kindref="compound">C</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>*<sp/>pc<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(pc,<sp/>0);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>0)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>b2.setStore<sp/>(&amp;store2);</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_clear_aux()</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_clear_aux\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp1<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp2<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>1)<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref><sp/>elt;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(&amp;elt,<sp/>1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>assert<sp/>(elt.container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>SG::AuxVectorBase_test::clearAux<sp/>(elt);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp1,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp2,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>3)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_swap_elements_aux()</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_swap_elements_aux\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="db/db2/structC" kindref="compound">C</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store1);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="db/db2/structC" kindref="compound">C</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store2);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>*<sp/>pc1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(pc1,<sp/>1);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>*<sp/>pc2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/db2/structC" kindref="compound">C</ref>;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>b2.setIndexTest<sp/>(pc2,<sp/>2);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>2)<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a3105544a00e10c72e45ca7367bb43e87" kindref="member" tooltip="Swap indices and auxiliary data between two elements.">swapElementsAux</ref>(1,<sp/>2,<sp/>pc2,<sp/>pc1,<sp/>&amp;b2);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;index()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;container()<sp/>==<sp/>&amp;b2);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>2)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a3105544a00e10c72e45ca7367bb43e87" kindref="member" tooltip="Swap indices and auxiliary data between two elements.">swapElementsAux</ref>(2,<sp/>1,<sp/>0,<sp/>pc1,<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>==<sp/>1.5);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>b1.setIndexTest<sp/>(pc1,<sp/>1);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>b2.setIndexTest<sp/>(pc2,<sp/>2);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>2)<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a3105544a00e10c72e45ca7367bb43e87" kindref="member" tooltip="Swap indices and auxiliary data between two elements.">swapElementsAux</ref>(1,<sp/>2,<sp/>pc2,<sp/>0,<sp/>&amp;b2);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>assert<sp/>(pc1-&gt;container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>1)<sp/>==<sp/>2.5);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;index()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>assert<sp/>(pc2-&gt;container()<sp/>==<sp/>&amp;b1);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BASE&gt;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_resort_aux_check<sp/>(<ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref>&amp;<sp/>b,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;BASE*&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkaux<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>vv<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(v[i]);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(vv-&gt;container()<sp/>==<sp/>&amp;b);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(vv-&gt;index()<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkaux)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;(ityp,<sp/>i)<sp/>==<sp/>v[i]-&gt;x);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(b.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(ftyp,<sp/>i)<sp/>==<sp/>v[i]-&gt;x+0.5);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CONT&gt;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_resort_aux1()</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>typename<sp/>CONT::base_type<sp/>BASE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>BASE;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>stlrand.seed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;aFloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>std::vector&lt;BASE*&gt;<sp/>v<sp/>=<sp/>make_v2&lt;BASE,<sp/>T&gt;();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>b.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>b.setIndexTest<sp/>(static_cast&lt;T*&gt;(v[i]),<sp/>i);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>test_resort_aux_check&lt;T,BASE&gt;<sp/>(b,<sp/>v,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>b.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>b.getData&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>i)<sp/>=<sp/>v[i]-&gt;x;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>b.getData&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>i)<sp/>=<sp/>v[i]-&gt;x<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;<sp/>jj&lt;10;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>b.resortAux<sp/>(0,<sp/>v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>test_resort_aux_check&lt;T,BASE&gt;<sp/>(b,<sp/>v);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;<sp/>jj&lt;10;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin()+2,<sp/>v.end()-2,<sp/>stlrand);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>b.resortAux<sp/>(2,<sp/>v.begin()+2,<sp/>v.end()-2);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>test_resort_aux_check&lt;T,BASE&gt;<sp/>(b,<sp/>v);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>std::vector&lt;BASE*&gt;<sp/>v2<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>(SG::VIEW_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;<sp/>jj&lt;10;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>b2.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1a2513e17b33c0b9715553416e19e23810" kindref="member" tooltip="Reset indices / reorder aux data after elements have been permuted.">resortAux</ref><sp/>(0,<sp/>v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>test_resort_aux_check&lt;T,BASE&gt;<sp/>(b,<sp/>v);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>b.setStore((<ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>*)0);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;<sp/>jj&lt;10;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>b.resortAux<sp/>(0,<sp/>v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>test_resort_aux_check&lt;T,BASE&gt;<sp/>(b,<sp/>v,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_resort_aux()</highlight></codeline>
<codeline lineno="872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_resort_aux\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>std::vector&lt;A*&gt;<sp/>va<sp/>=<sp/>make_v&lt;A&gt;();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d4/dc4/structA" kindref="compound">A</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>b1.setIndices<sp/>(va.begin(),<sp/>va.end(),<sp/>0);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>b1.resortAux<sp/>(0,<sp/>va.begin(),<sp/>va.end());</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>test_resort_aux1&lt;B,<sp/>BCont&gt;();</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>test_resort_aux1&lt;C,<sp/>CCont&gt;();</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_move()</highlight></codeline>
<codeline lineno="887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test_move\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b1;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1ae1de1c541f5642e2241a22c8d20fc9f5" kindref="member" tooltip="Initialize index tracking mode.">initAuxVectorBase</ref>&lt;<ref refid="d9/db3/structB" kindref="compound">B</ref>&gt;<sp/>(SG::OWN_ELEMENTS,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" kindref="member">SG::DEFAULT_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>b1.<ref refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad" kindref="member" tooltip="Set the store associated with this object.">setStore</ref><sp/>(&amp;store);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;anInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b2<sp/>(std::move<sp/>(b1));</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>assert<sp/>(b1.<ref refid="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>&amp;store);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>&amp;store);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="d8/db3/classSG_1_1AuxVectorBase__test" kindref="compound">SG::AuxVectorBase_test</ref><sp/>b3;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>b3<sp/>=<sp/>std::move<sp/>(b2);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>assert<sp/>(b2.<ref refid="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>==<sp/>&amp;store);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.<ref refid="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" kindref="member" tooltip="Return the current store, as a non-const interface.">getStore</ref>()<sp/>==<sp/>&amp;store);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>assert<sp/>(b3.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>test_init();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>test_set_store();</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>test_set_store2();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>test_set_indices();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>test_clear_index();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>test_clear_indices();</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>test_get_data();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>test_reserve_resize();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>test_shift();</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>test_get_types();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>test_copy_aux();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>test_copy_base_aux();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>test_clear_aux();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>test_swap_elements_aux();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>test_resort_aux();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>test_move();</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorBase_test.cxx"/>
  </compounddef>
</doxygen>
