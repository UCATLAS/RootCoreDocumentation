<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/db8/DataVector__test_8icc" kind="file">
    <compoundname>DataVector_test.icc</compoundname>
    <includes refid="d4/d03/exceptions_8h" local="yes">AthContainers/exceptions.h</includes>
    <includes refid="da/d8e/foreach_8h" local="yes">AthContainers/tools/foreach.h</includes>
    <includes refid="d2/d67/expect__exception_8h" local="yes">TestTools/expect_exception.h</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes refid="d7/dd6/DataVector_8h" local="yes">AthContainers/DataVector.h</includes>
    <includes refid="d2/d0d/ConstDataVector_8h" local="yes">AthContainers/ConstDataVector.h</includes>
    <includes refid="d3/d0f/AuxStoreInternal_8h" local="yes">AthContainers/AuxStoreInternal.h</includes>
    <includes refid="d8/d4b/unused_8h" local="yes">CxxUtils/unused.h</includes>
    <includes refid="d3/d77/make__unique_8h" local="yes">CxxUtils/make_unique.h</includes>
    <includes refid="d1/d79/random_8h" local="yes">TestTools/random.h</includes>
    <includedby refid="d7/def/DataVector__a__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_a_test.cxx</includedby>
    <includedby refid="d2/d0b/DataVector__b__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_b_test.cxx</includedby>
    <includedby refid="dd/dd6/DataVector__c__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_c_test.cxx</includedby>
    <includedby refid="de/da2/DataVector__d__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_d_test.cxx</includedby>
    <includedby refid="d6/da5/DataVector__e__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_e_test.cxx</includedby>
    <includedby refid="dd/d14/DataVector__f__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_f_test.cxx</includedby>
    <includedby refid="d1/d1a/DataVector__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.cxx</includedby>
    <incdepgraph>
      <node id="73644">
        <label>list</label>
      </node>
      <node id="73653">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="73638" relation="include">
        </childnode>
        <childnode refid="73645" relation="include">
        </childnode>
        <childnode refid="73630" relation="include">
        </childnode>
        <childnode refid="73634" relation="include">
        </childnode>
        <childnode refid="73565" relation="include">
        </childnode>
      </node>
      <node id="73638">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="73609">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="73660">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="73661" relation="include">
        </childnode>
        <childnode refid="73639" relation="include">
        </childnode>
        <childnode refid="73573" relation="include">
        </childnode>
        <childnode refid="73662" relation="include">
        </childnode>
      </node>
      <node id="73626">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="73564" relation="include">
        </childnode>
        <childnode refid="73566" relation="include">
        </childnode>
        <childnode refid="73573" relation="include">
        </childnode>
        <childnode refid="73574" relation="include">
        </childnode>
      </node>
      <node id="73628">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="73588" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73629" relation="include">
        </childnode>
        <childnode refid="73589" relation="include">
        </childnode>
      </node>
      <node id="73627">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="73572">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="73574">
        <label>functional</label>
      </node>
      <node id="73635">
        <label>boost/version.hpp</label>
      </node>
      <node id="73570">
        <label>limits</label>
      </node>
      <node id="73629">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="73607">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="73677">
        <label>TestTools/random.h</label>
        <link refid="d1/d79/random_8h"/>
        <childnode refid="73595" relation="include">
        </childnode>
      </node>
      <node id="73567">
        <label>iterator</label>
      </node>
      <node id="73590">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="73571" relation="include">
        </childnode>
        <childnode refid="73591" relation="include">
        </childnode>
      </node>
      <node id="73669">
        <label>SGTools/ClassID_traits.h</label>
      </node>
      <node id="73659">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="73665">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="73666" relation="include">
        </childnode>
        <childnode refid="73633" relation="include">
        </childnode>
        <childnode refid="73570" relation="include">
        </childnode>
        <childnode refid="73574" relation="include">
        </childnode>
        <childnode refid="73667" relation="include">
        </childnode>
      </node>
      <node id="73560">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="73561" relation="include">
        </childnode>
        <childnode refid="73575" relation="include">
        </childnode>
        <childnode refid="73576" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73571" relation="include">
        </childnode>
      </node>
      <node id="73592">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
      </node>
      <node id="73670">
        <label>AthContainers/ConstDataVector.icc</label>
        <link refid="d2/d61/ConstDataVector_8icc"/>
        <childnode refid="73671" relation="include">
        </childnode>
        <childnode refid="73574" relation="include">
        </childnode>
      </node>
      <node id="73595">
        <label>stdint.h</label>
      </node>
      <node id="73645">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="73570" relation="include">
        </childnode>
        <childnode refid="73646" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
      </node>
      <node id="73614">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
      </node>
      <node id="73585">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="73579">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="73673">
        <label>AthContainersInterfaces/IAuxStoreIO.h</label>
        <link refid="d9/db5/IAuxStoreIO_8h"/>
        <childnode refid="73561" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73674" relation="include">
        </childnode>
        <childnode refid="73589" relation="include">
        </childnode>
      </node>
      <node id="73598">
        <label>RVersion.h</label>
      </node>
      <node id="73563">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="73564" relation="include">
        </childnode>
        <childnode refid="73573" relation="include">
        </childnode>
        <childnode refid="73574" relation="include">
        </childnode>
      </node>
      <node id="73569">
        <label>cmath</label>
      </node>
      <node id="73581">
        <label>cassert</label>
      </node>
      <node id="73636">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="73655">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="73671">
        <label>boost/iterator/transform_iterator.hpp</label>
      </node>
      <node id="73576">
        <label>stdexcept</label>
      </node>
      <node id="73610">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="73642">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="73675">
        <label>CxxUtils/unused.h</label>
        <link refid="d8/d4b/unused_8h"/>
      </node>
      <node id="73650">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="73571">
        <label>string</label>
      </node>
      <node id="73587">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="73561" relation="include">
        </childnode>
        <childnode refid="73588" relation="include">
        </childnode>
        <childnode refid="73590" relation="include">
        </childnode>
        <childnode refid="73592" relation="include">
        </childnode>
        <childnode refid="73594" relation="include">
        </childnode>
        <childnode refid="73600" relation="include">
        </childnode>
        <childnode refid="73601" relation="include">
        </childnode>
        <childnode refid="73602" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73566" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
        <childnode refid="73603" relation="include">
        </childnode>
        <childnode refid="73604" relation="include">
        </childnode>
        <childnode refid="73605" relation="include">
        </childnode>
        <childnode refid="73611" relation="include">
        </childnode>
      </node>
      <node id="73613">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
      </node>
      <node id="73676">
        <label>CxxUtils/make_unique.h</label>
        <link refid="d3/d77/make__unique_8h"/>
      </node>
      <node id="73603">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="73647">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="73584" relation="include">
        </childnode>
        <childnode refid="73645" relation="include">
        </childnode>
        <childnode refid="73648" relation="include">
        </childnode>
        <childnode refid="73650" relation="include">
        </childnode>
        <childnode refid="73635" relation="include">
        </childnode>
        <childnode refid="73567" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
      </node>
      <node id="73661">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="73662">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="73663" relation="include">
        </childnode>
      </node>
      <node id="73663">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="73599">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="73623">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="73652">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="73647" relation="include">
        </childnode>
        <childnode refid="73567" relation="include">
        </childnode>
        <childnode refid="73565" relation="include">
        </childnode>
        <childnode refid="73653" relation="include">
        </childnode>
      </node>
      <node id="73604">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="73620">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="73648">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="73584" relation="include">
        </childnode>
        <childnode refid="73597" relation="include">
        </childnode>
        <childnode refid="73573" relation="include">
        </childnode>
        <childnode refid="73649" relation="include">
        </childnode>
      </node>
      <node id="73631">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="73597">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="73598" relation="include">
        </childnode>
        <childnode refid="73599" relation="include">
        </childnode>
      </node>
      <node id="73601">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="73608">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="73578">
        <label>AthContainers/tools/foreach.h</label>
        <link refid="da/d8e/foreach_8h"/>
        <childnode refid="73579" relation="include">
        </childnode>
      </node>
      <node id="73646">
        <label>limits.h</label>
      </node>
      <node id="73640">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="73641" relation="include">
        </childnode>
      </node>
      <node id="73618">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="73590" relation="include">
        </childnode>
        <childnode refid="73570" relation="include">
        </childnode>
        <childnode refid="73595" relation="include">
        </childnode>
        <childnode refid="73619" relation="include">
        </childnode>
      </node>
      <node id="73561">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73563" relation="include">
        </childnode>
      </node>
      <node id="73564">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="73565" relation="include">
        </childnode>
        <childnode refid="73566" relation="include">
        </childnode>
        <childnode refid="73567" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
        <childnode refid="73569" relation="include">
        </childnode>
        <childnode refid="73570" relation="include">
        </childnode>
        <childnode refid="73571" relation="include">
        </childnode>
        <childnode refid="73572" relation="include">
        </childnode>
      </node>
      <node id="73633">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="73581" relation="include">
        </childnode>
      </node>
      <node id="73559">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc</label>
        <link refid="DataVector_test.icc"/>
        <childnode refid="73560" relation="include">
        </childnode>
        <childnode refid="73578" relation="include">
        </childnode>
        <childnode refid="73580" relation="include">
        </childnode>
        <childnode refid="73576" relation="include">
        </childnode>
        <childnode refid="73571" relation="include">
        </childnode>
        <childnode refid="73582" relation="include">
        </childnode>
        <childnode refid="73583" relation="include">
        </childnode>
        <childnode refid="73668" relation="include">
        </childnode>
        <childnode refid="73672" relation="include">
        </childnode>
        <childnode refid="73675" relation="include">
        </childnode>
        <childnode refid="73676" relation="include">
        </childnode>
        <childnode refid="73677" relation="include">
        </childnode>
      </node>
      <node id="73649">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="73645" relation="include">
        </childnode>
        <childnode refid="73633" relation="include">
        </childnode>
      </node>
      <node id="73577">
        <label>typeinfo</label>
      </node>
      <node id="73632">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="73603" relation="include">
        </childnode>
        <childnode refid="73581" relation="include">
        </childnode>
      </node>
      <node id="73583">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="73560" relation="include">
        </childnode>
        <childnode refid="73584" relation="include">
        </childnode>
        <childnode refid="73585" relation="include">
        </childnode>
        <childnode refid="73586" relation="include">
        </childnode>
        <childnode refid="73638" relation="include">
        </childnode>
        <childnode refid="73639" relation="include">
        </childnode>
        <childnode refid="73645" relation="include">
        </childnode>
        <childnode refid="73647" relation="include">
        </childnode>
        <childnode refid="73651" relation="include">
        </childnode>
        <childnode refid="73652" relation="include">
        </childnode>
        <childnode refid="73648" relation="include">
        </childnode>
        <childnode refid="73654" relation="include">
        </childnode>
        <childnode refid="73597" relation="include">
        </childnode>
        <childnode refid="73655" relation="include">
        </childnode>
        <childnode refid="73656" relation="include">
        </childnode>
        <childnode refid="73650" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73574" relation="include">
        </childnode>
        <childnode refid="73657" relation="include">
        </childnode>
        <childnode refid="73565" relation="include">
        </childnode>
        <childnode refid="73576" relation="include">
        </childnode>
        <childnode refid="73567" relation="include">
        </childnode>
        <childnode refid="73629" relation="include">
        </childnode>
        <childnode refid="73658" relation="include">
        </childnode>
        <childnode refid="73660" relation="include">
        </childnode>
        <childnode refid="73664" relation="include">
        </childnode>
        <childnode refid="73665" relation="include">
        </childnode>
      </node>
      <node id="73619">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="73600">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="73596">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="73595" relation="include">
        </childnode>
      </node>
      <node id="73591">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="73622">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="73639">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="73640" relation="include">
        </childnode>
        <childnode refid="73586" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73572" relation="include">
        </childnode>
        <childnode refid="73642" relation="include">
        </childnode>
        <childnode refid="73621" relation="include">
        </childnode>
        <childnode refid="73643" relation="include">
        </childnode>
      </node>
      <node id="73589">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="73658">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="73659" relation="include">
        </childnode>
      </node>
      <node id="73612">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="73561" relation="include">
        </childnode>
        <childnode refid="73613" relation="include">
        </childnode>
        <childnode refid="73614" relation="include">
        </childnode>
        <childnode refid="73615" relation="include">
        </childnode>
        <childnode refid="73624" relation="include">
        </childnode>
        <childnode refid="73605" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73626" relation="include">
        </childnode>
        <childnode refid="73627" relation="include">
        </childnode>
      </node>
      <node id="73593">
        <label>vector</label>
      </node>
      <node id="73666">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="73565" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
      </node>
      <node id="73668">
        <label>AthContainers/ConstDataVector.h</label>
        <link refid="d2/d0d/ConstDataVector_8h"/>
        <childnode refid="73583" relation="include">
        </childnode>
        <childnode refid="73669" relation="include">
        </childnode>
        <childnode refid="73670" relation="include">
        </childnode>
      </node>
      <node id="73667">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="73566">
        <label>utility</label>
      </node>
      <node id="73664">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="73602">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="73582">
        <label>sstream</label>
      </node>
      <node id="73637">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="73606">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="73616">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="73605">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="73606" relation="include">
        </childnode>
        <childnode refid="73607" relation="include">
        </childnode>
        <childnode refid="73608" relation="include">
        </childnode>
        <childnode refid="73609" relation="include">
        </childnode>
        <childnode refid="73610" relation="include">
        </childnode>
      </node>
      <node id="73568">
        <label>cstdlib</label>
      </node>
      <node id="73657">
        <label>iostream</label>
      </node>
      <node id="73575">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="73588">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="73561" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73589" relation="include">
        </childnode>
      </node>
      <node id="73562">
        <label>cstddef</label>
      </node>
      <node id="73611">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="73612" relation="include">
        </childnode>
        <childnode refid="73628" relation="include">
        </childnode>
        <childnode refid="73588" relation="include">
        </childnode>
        <childnode refid="73603" relation="include">
        </childnode>
        <childnode refid="73604" relation="include">
        </childnode>
      </node>
      <node id="73643">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="73584" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73644" relation="include">
        </childnode>
        <childnode refid="73581" relation="include">
        </childnode>
        <childnode refid="73568" relation="include">
        </childnode>
        <childnode refid="73629" relation="include">
        </childnode>
      </node>
      <node id="73615">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="73613" relation="include">
        </childnode>
        <childnode refid="73616" relation="include">
        </childnode>
        <childnode refid="73592" relation="include">
        </childnode>
        <childnode refid="73617" relation="include">
        </childnode>
        <childnode refid="73602" relation="include">
        </childnode>
        <childnode refid="73577" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73565" relation="include">
        </childnode>
        <childnode refid="73595" relation="include">
        </childnode>
        <childnode refid="73621" relation="include">
        </childnode>
        <childnode refid="73622" relation="include">
        </childnode>
        <childnode refid="73623" relation="include">
        </childnode>
      </node>
      <node id="73621">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="73586">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="73587" relation="include">
        </childnode>
        <childnode refid="73584" relation="include">
        </childnode>
        <childnode refid="73585" relation="include">
        </childnode>
        <childnode refid="73630" relation="include">
        </childnode>
        <childnode refid="73612" relation="include">
        </childnode>
        <childnode refid="73560" relation="include">
        </childnode>
        <childnode refid="73633" relation="include">
        </childnode>
        <childnode refid="73628" relation="include">
        </childnode>
        <childnode refid="73634" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73637" relation="include">
        </childnode>
      </node>
      <node id="73674">
        <label>set</label>
      </node>
      <node id="73625">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="73617">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="73616" relation="include">
        </childnode>
        <childnode refid="73618" relation="include">
        </childnode>
        <childnode refid="73602" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73620" relation="include">
        </childnode>
      </node>
      <node id="73565">
        <label>algorithm</label>
      </node>
      <node id="73654">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="73580">
        <label>TestTools/expect_exception.h</label>
        <link refid="d2/d67/expect__exception_8h"/>
        <childnode refid="73581" relation="include">
        </childnode>
      </node>
      <node id="73672">
        <label>AthContainers/AuxStoreInternal.h</label>
        <link refid="d3/d0f/AuxStoreInternal_8h"/>
        <childnode refid="73628" relation="include">
        </childnode>
        <childnode refid="73673" relation="include">
        </childnode>
        <childnode refid="73605" relation="include">
        </childnode>
        <childnode refid="73602" relation="include">
        </childnode>
        <childnode refid="73593" relation="include">
        </childnode>
        <childnode refid="73629" relation="include">
        </childnode>
        <childnode refid="73589" relation="include">
        </childnode>
      </node>
      <node id="73630">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="73631" relation="include">
        </childnode>
        <childnode refid="73588" relation="include">
        </childnode>
        <childnode refid="73628" relation="include">
        </childnode>
        <childnode refid="73594" relation="include">
        </childnode>
        <childnode refid="73612" relation="include">
        </childnode>
        <childnode refid="73587" relation="include">
        </childnode>
        <childnode refid="73592" relation="include">
        </childnode>
        <childnode refid="73560" relation="include">
        </childnode>
        <childnode refid="73603" relation="include">
        </childnode>
        <childnode refid="73562" relation="include">
        </childnode>
        <childnode refid="73632" relation="include">
        </childnode>
      </node>
      <node id="73594">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="73595" relation="include">
        </childnode>
        <childnode refid="73571" relation="include">
        </childnode>
        <childnode refid="73596" relation="include">
        </childnode>
        <childnode refid="73597" relation="include">
        </childnode>
      </node>
      <node id="73651">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="73647" relation="include">
        </childnode>
        <childnode refid="73633" relation="include">
        </childnode>
        <childnode refid="73567" relation="include">
        </childnode>
      </node>
      <node id="73584">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="73641">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="73656">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="73573">
        <label>memory</label>
      </node>
      <node id="73624">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="73614" relation="include">
        </childnode>
        <childnode refid="73615" relation="include">
        </childnode>
        <childnode refid="73625" relation="include">
        </childnode>
      </node>
      <node id="73634">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="73631" relation="include">
        </childnode>
        <childnode refid="73628" relation="include">
        </childnode>
        <childnode refid="73588" relation="include">
        </childnode>
        <childnode refid="73621" relation="include">
        </childnode>
        <childnode refid="73635" relation="include">
        </childnode>
        <childnode refid="73636" relation="include">
        </childnode>
        <childnode refid="73571" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="73684">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_f_test.cxx</label>
        <link refid="dd/d14/DataVector__f__test_8cxx"/>
      </node>
      <node id="73683">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_e_test.cxx</label>
        <link refid="d6/da5/DataVector__e__test_8cxx"/>
      </node>
      <node id="73682">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_d_test.cxx</label>
        <link refid="de/da2/DataVector__d__test_8cxx"/>
      </node>
      <node id="73680">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_b_test.cxx</label>
        <link refid="d2/d0b/DataVector__b__test_8cxx"/>
      </node>
      <node id="73679">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_a_test.cxx</label>
        <link refid="d7/def/DataVector__a__test_8cxx"/>
      </node>
      <node id="73678">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc</label>
        <link refid="DataVector_test.icc"/>
        <childnode refid="73679" relation="include">
        </childnode>
        <childnode refid="73680" relation="include">
        </childnode>
        <childnode refid="73681" relation="include">
        </childnode>
        <childnode refid="73682" relation="include">
        </childnode>
        <childnode refid="73683" relation="include">
        </childnode>
        <childnode refid="73684" relation="include">
        </childnode>
      </node>
      <node id="73681">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_c_test.cxx</label>
        <link refid="dd/dd6/DataVector__c__test_8cxx"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d1/db3/classdv__test__err" prot="public">dv_test_err</innerclass>
    <innerclass refid="d7/df1/structAA" prot="public">AA</innerclass>
    <innerclass refid="d7/d1f/structBB" prot="public">BB</innerclass>
    <innerclass refid="d4/d95/structCC" prot="public">CC</innerclass>
    <innerclass refid="dc/d7e/structMM" prot="public">MM</innerclass>
    <innerclass refid="d8/d55/structM" prot="public">M</innerclass>
    <innerclass refid="da/deb/structN" prot="public">N</innerclass>
    <innerclass refid="d1/d78/structO" prot="public">O</innerclass>
    <innerclass refid="dc/dec/structP" prot="public">P</innerclass>
    <innerclass refid="d1/dbc/structQ" prot="public">Q</innerclass>
    <innerclass refid="d8/df7/structR" prot="public">R</innerclass>
    <innerclass refid="d1/d51/structAAux" prot="public">AAux</innerclass>
    <innerclass refid="da/d42/structBAux" prot="public">BAux</innerclass>
    <innerclass refid="df/df0/structCAux" prot="public">CAux</innerclass>
    <innerclass refid="d8/dff/structtest2__maybeconst1" prot="public">test2_maybeconst1</innerclass>
    <innerclass refid="d0/d8a/structtest2__maybeconst1_3_01T_00_01SG__STD__OR__BOOST_1_1true__type_01_4" prot="public">test2_maybeconst1&lt; T, SG_STD_OR_BOOST::true_type &gt;</innerclass>
    <innerclass refid="d6/d82/structtest2__maybeconst" prot="public">test2_maybeconst</innerclass>
    <innerclass refid="d9/dd2/structComp" prot="public">Comp</innerclass>
    <innerclass refid="df/d97/structPred" prot="public">Pred</innerclass>
    <innerclass refid="d0/daa/structBPred" prot="public">BPred</innerclass>
    <innerclass refid="db/dba/structPPred" prot="public">PPred</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d2/db8/DataVector__test_8icc_1adfad0eabfe51f87b9c0ad1673cc690fa" prot="public" static="no">
        <name>myassert</name>
        <param><defname>X</defname></param>
        <initializer>do {     \
    if (!(<ref refid="d3/d24/structX" kindref="compound">X</ref>)) { \
      throw_dv_test_err (__FILE__, __LINE__, #<ref refid="d3/d24/structX" kindref="compound">X</ref>); \
    } \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/db8/DataVector__test_8icc_1a86fba812902b6fb0feea3faf586e45d2" prot="public" static="no">
        <name>ATHCONTAINERS_ASSERT</name>
        <param><defname>X</defname></param>
        <initializer>myassert(<ref refid="d3/d24/structX" kindref="compound">X</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/db8/DataVector__test_8icc_1ac52672b0a004600778477661f271b8da" prot="public" static="no">
        <name>CHECK_INDICES</name>
        <param><defname>V</defname></param>
        <initializer>do { \
  check_indices(V, __FILE__, __LINE__); \
} while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="362" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/db8/DataVector__test_8icc_1aa414e0582ffc4b5801739af1c91b4a0e" prot="public" static="no">
        <name>CHECK_INDICES_FAIL</name>
        <param><defname>V</defname></param>
        <initializer>do { \
  bool caught = false; \
  try { \
    check_indices(V, __FILE__, __LINE__); \
  } catch (const <ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;) { caught = true; }  \
  myassert (caught || !v.trackIndices());          \
} while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="371" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/db8/DataVector__test_8icc_1a7496242f536300fc3589a4bef2b0fd83" prot="public" static="no">
        <name>CHECK_INDEX_CLEAR</name>
        <param><defname>P</defname></param>
        <initializer>do { \
  check_index_clear (<ref refid="dc/dec/structP" kindref="compound">P</ref>, __FILE__, __LINE__, <ref refid="dc/dec/structP" kindref="compound">P</ref>);  \
} while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="414" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="412" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="d2/db8/DataVector__test_8icc_1ab3e754ee641921cdee9b9fe374873e31" prot="public" static="no" mutable="no">
        <type><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound">Athena_test::RNG</ref></type>
        <definition>Athena_test::RNG stlrand</definition>
        <argsstring></argsstring>
        <name>stlrand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/db8/DataVector__test_8icc_1a4077f5386e0b5252e9f5759e3bb73876" prot="public" static="no" mutable="no">
        <type><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound">Athena_test::RNG</ref></type>
        <definition>Athena_test::RNG stlrand2</definition>
        <argsstring></argsstring>
        <name>stlrand2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/db8/DataVector__test_8icc_1aa4f17f21680d0b1cb86d491e704a1e98" prot="public" static="no" mutable="no">
        <type><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound">Athena_test::URNG</ref></type>
        <definition>Athena_test::URNG stlurand</definition>
        <argsstring></argsstring>
        <name>stlurand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/db8/DataVector__test_8icc_1af44139d32c3a6e1529d6e2853b25d3c0" prot="public" static="no" mutable="no">
        <type><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound">Athena_test::URNG</ref></type>
        <definition>Athena_test::URNG stlurand2</definition>
        <argsstring></argsstring>
        <name>stlurand2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/db8/DataVector__test_8icc_1a5d54ba216b27d4d04f91e3e69ffc3a6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; dtor_log</definition>
        <argsstring></argsstring>
        <name>dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aaa55a13ec44dcdfdae5fc8162facedde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void throw_dv_test_err</definition>
        <argsstring>(const char *file, int line, const char *what)</argsstring>
        <name>throw_dv_test_err</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0c09f5f474864bb14937dda533c84d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; get_dtor_log</definition>
        <argsstring>()</argsstring>
        <name>get_dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af023a511679d8636167eaa1dca80bf66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clear_dtor_log</definition>
        <argsstring>()</argsstring>
        <name>clear_dtor_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a3013a6fefde4fbc9fbb2e0262f68f8c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_dtor_log</definition>
        <argsstring>(int a=-1, int b=-1, int c=-1, int d=-1, int e=-1, int f=-1)</argsstring>
        <name>check_dtor_log</name>
        <param>
          <type>int</type>
          <declname>a</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>e</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>f</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="105" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="104" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a316ab7c2d4bc50b88126519469ad25aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_BASE</definition>
        <argsstring>(BB, AA)</argsstring>
        <name>DATAVECTOR_BASE</name>
        <param>
          <type><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></type>
        </param>
        <param>
          <type><ref refid="d7/df1/structAA" kindref="compound">AA</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="138"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a21baa7a56cd28209ca6a9b994f19127f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_BASE</definition>
        <argsstring>(CC, BB)</argsstring>
        <name>DATAVECTOR_BASE</name>
        <param>
          <type><ref refid="d4/d95/structCC" kindref="compound">CC</ref></type>
        </param>
        <param>
          <type><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="139"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac2bf08b39738ee64575a2080a5ace59e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_VIRTBASES1</definition>
        <argsstring>(N, M)</argsstring>
        <name>DATAVECTOR_VIRTBASES1</name>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="172"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af9f465923be399d20b94c0b4b6284589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_VIRTBASES1</definition>
        <argsstring>(O, M)</argsstring>
        <name>DATAVECTOR_VIRTBASES1</name>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="173"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af87bcc86850fe8273cb24ab5b0e610e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_VIRTBASES2</definition>
        <argsstring>(P, N, O)</argsstring>
        <name>DATAVECTOR_VIRTBASES2</name>
        <param>
          <type><ref refid="dc/dec/structP" kindref="compound">P</ref></type>
        </param>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="174"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a149200f2c93c8ccee28b23ea6f8239a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASES2</definition>
        <argsstring>(N, SG_VIRTUAL(M), MM)</argsstring>
        <name>SG_BASES2</name>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>)</type>
        </param>
        <param>
          <type><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="176"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a51e2e0acd87049c01aaa064133580150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASE</definition>
        <argsstring>(O, SG_VIRTUAL(M))</argsstring>
        <name>SG_BASE</name>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="177"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a740b5f673cd8f4786e031de283263739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG_BASES2</definition>
        <argsstring>(P, SG_VIRTUAL(N), SG_VIRTUAL(O))</argsstring>
        <name>SG_BASES2</name>
        <param>
          <type><ref refid="dc/dec/structP" kindref="compound">P</ref></type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="da/deb/structN" kindref="compound">N</ref>)</type>
        </param>
        <param>
          <type>SG_VIRTUAL(<ref refid="d1/d78/structO" kindref="compound">O</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="178"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a828ad4a6b96c124036f479445f836793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_VIRTBASES1</definition>
        <argsstring>(Q, M)</argsstring>
        <name>DATAVECTOR_VIRTBASES1</name>
        <param>
          <type><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d55/structM" kindref="compound">M</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="194"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a89de159a1d1e4ecd7a36a50627de39fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_VIRTBASES3</definition>
        <argsstring>(R, N, O, Q)</argsstring>
        <name>DATAVECTOR_VIRTBASES3</name>
        <param>
          <type><ref refid="d8/df7/structR" kindref="compound">R</ref></type>
        </param>
        <param>
          <type><ref refid="da/deb/structN" kindref="compound">N</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d78/structO" kindref="compound">O</ref></type>
        </param>
        <param>
          <type><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="195"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac01014c0d4b76832e7488a8e7c1d8020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_BASE</definition>
        <argsstring>(BAux, AAux)</argsstring>
        <name>DATAVECTOR_BASE</name>
        <param>
          <type><ref refid="da/d42/structBAux" kindref="compound">BAux</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="311"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a6626f5752e0afd8744457eda46d9304f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DATAVECTOR_BASE</definition>
        <argsstring>(CAux, AA)</argsstring>
        <name>DATAVECTOR_BASE</name>
        <param>
          <type><ref refid="df/df0/structCAux" kindref="compound">CAux</ref></type>
        </param>
        <param>
          <type><ref refid="d7/df1/structAA" kindref="compound">AA</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="312"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae3f1e66da88618374b4802c181797962" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_indices1</definition>
        <argsstring>(const DV &amp;v, const char *file, int line, const SG::AuxElement *)</argsstring>
        <name>check_indices1</name>
        <param>
          <type>const <ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="322" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0031398ec8a6cf520e1ae076b1516b58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_indices1</definition>
        <argsstring>(const DV &amp;, const char *, int, const void *)</argsstring>
        <name>check_indices1</name>
        <param>
          <type>const <ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="347" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae64c25cd1c4482daa75ec856e7c6fec3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_indices</definition>
        <argsstring>(const DV &amp;v, const char *file, int line)</argsstring>
        <name>check_indices</name>
        <param>
          <type>const <ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="355" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="352" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a9ebc9696114a77e66bfb057cf094dc5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_index_clear</definition>
        <argsstring>(const SG::AuxElement *p, const char *file, int line, const T *)</argsstring>
        <name>check_index_clear</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="379" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="375" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a4191182575331ae947cf5c5d272d8646" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_index_clear</definition>
        <argsstring>(const void *, const char *, int, const T *)</argsstring>
        <name>check_index_clear</name>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="396" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="392" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad7a01de297974e2c7aae4adacf597237" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux1</definition>
        <argsstring>(const DataVector&lt; T &gt; &amp;v, const SG::AuxElement *)</argsstring>
        <name>checkaux1</name>
        <param>
          <type>const <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="419" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="418" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8cea3324c247cfa6c63130f2d25f6195" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux1</definition>
        <argsstring>(const DataVector&lt; T &gt; &amp;, const void *)</argsstring>
        <name>checkaux1</name>
        <param>
          <type>const <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="430" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0197e25943ab221d508d8ba3bbf2a7d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux</definition>
        <argsstring>(const DataVector&lt; T &gt; &amp;v)</argsstring>
        <name>checkaux</name>
        <param>
          <type>const <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="436" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab3d020e4bfd4bce6db94223b87d977ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux</definition>
        <argsstring>(const ConstDataVector&lt; T &gt; &amp;)</argsstring>
        <name>checkaux</name>
        <param>
          <type>const <ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="443" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="442" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1715dbdd9ac40dd6e1a451b41dee7e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux1</definition>
        <argsstring>(T *p, const SG::AuxElement *)</argsstring>
        <name>checkaux1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="449" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a37d36bf7e8f6d92bc6749afff54502f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux1</definition>
        <argsstring>(T *, const void *)</argsstring>
        <name>checkaux1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="455" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a414986a73f07fd202cfaeb90aeab1f3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkaux</definition>
        <argsstring>(T *p)</argsstring>
        <name>checkaux</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="460" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2609ccae7c900151253c8adbc919aaa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setaux1</definition>
        <argsstring>(DV &amp;v, SG::IAuxStore &amp;store, const SG::AuxElement *)</argsstring>
        <name>setaux1</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> &amp;</type>
          <declname>store</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="467" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="466" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a664d06da41ff9a374c00b5d4e4823b7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setaux1</definition>
        <argsstring>(DV &amp;, SG::IAuxStore &amp;, const void *)</argsstring>
        <name>setaux1</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> &amp;</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="479" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aa9d0ca62ea43034f3f98721e9741c323" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setaux</definition>
        <argsstring>(DataVector&lt; T &gt; &amp;v, SG::IAuxStore &amp;store)</argsstring>
        <name>setaux</name>
        <param>
          <type><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> &amp;</type>
          <declname>store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="485" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a247b517491af12db241855d893e291b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void setaux</definition>
        <argsstring>(ConstDataVector&lt; T &gt; &amp;, SG::IAuxStore &amp;)</argsstring>
        <name>setaux</name>
        <param>
          <type><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="492" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="491" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2e469da6994e684902b5a957ed5d7b26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* make_comp1</definition>
        <argsstring>(int x, bool setaux, const SG::AuxElement *)</argsstring>
        <name>make_comp1</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>setaux</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="498" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="497" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aacbe72c82ff633e038a6e29090e86548" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* make_comp1</definition>
        <argsstring>(int x, bool, const void *)</argsstring>
        <name>make_comp1</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="508" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a029adf62ac32b85d146e1479dc7ea9c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* make_comp</definition>
        <argsstring>(int x, bool setaux=true)</argsstring>
        <name>make_comp</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>setaux</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="514" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="513" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad42dfe02ce2d0fe9cde1e8b8a1f0131a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void releasePrivateStore1</definition>
        <argsstring>(T *p, const SG::AuxElement *)</argsstring>
        <name>releasePrivateStore1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="532" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="531" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a42b0d187b8387f5049e1e1ecf65cb231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void releasePrivateStore1</definition>
        <argsstring>(T *, const void *)</argsstring>
        <name>releasePrivateStore1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="538" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="537" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8374151cab15afe6fa3fdbfd97d3588b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void releasePrivateStore</definition>
        <argsstring>(T *p)</argsstring>
        <name>releasePrivateStore</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="543" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a17bb71f79b3847ddfbeefcfc87df1a91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkauxZero1</definition>
        <argsstring>(T *p, const SG::AuxElement *)</argsstring>
        <name>checkauxZero1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="550" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a7da3d7414c1b74b71259ceada32318fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkauxZero1</definition>
        <argsstring>(T *, const void *)</argsstring>
        <name>checkauxZero1</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        </param>
        <param>
          <type>const void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="556" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="555" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a49d62383d3d69d2ba62b292fb5fff0dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void checkauxZero</definition>
        <argsstring>(T *p)</argsstring>
        <name>checkauxZero</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="561" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a5422ea0af448691953eefd379cdc6235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void checkauxZero</definition>
        <argsstring>(const SG::AuxVectorBase &amp;v, size_t index)</argsstring>
        <name>checkauxZero</name>
        <param>
          <type>const <ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound">SG::AuxVectorBase</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="568" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="567" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1d55db6a87e085baa13e85f9c5033e1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_initial</definition>
        <argsstring>()</argsstring>
        <name>test2_initial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="602" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="601" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a39cfb05b3550d27e9d7ee265cb6e14b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_default_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_default_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="624" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="623" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a551bb2f406bc50d60093b6fcfe966083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_default_ctor2</definition>
        <argsstring>()</argsstring>
        <name>test2_default_ctor2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="641" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="640" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac1af216c2f01644ea5c41a22bbeba833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_default_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_default_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="671" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="670" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ace317ff1686127341b8ed4738aacddcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sized_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_sized_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="682" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="681" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aacfdb4fd35b5f9153dd36bb60cd8d065" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sized_ctor2</definition>
        <argsstring>()</argsstring>
        <name>test2_sized_ctor2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="701" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="700" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a73ad105c7c9758f60811febcad0397e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sized_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_sized_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="722" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="721" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a61c5102970bc733739de13c9398b1b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insertion_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_insertion_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="733" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="732" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a234381d1eb6910bdb4d406c372831b63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insertion_ctor2</definition>
        <argsstring>()</argsstring>
        <name>test2_insertion_ctor2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="774" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="773" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a7d3fc70ef49bd312615e928aebfa923d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insertion_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_insertion_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="798" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="797" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a895a24ed797903c55d7d1e427c9b2c8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_copy_ctor1</definition>
        <argsstring>()</argsstring>
        <name>test2_copy_ctor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="831" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="830" bodyend="846"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a47a77cd6bf38f85ea9981df10b8a8344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_copy_ctor2</definition>
        <argsstring>()</argsstring>
        <name>test2_copy_ctor2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="849" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="848" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a970710e44a8cf7293c0d953dda49e696" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_copy_ctor</definition>
        <argsstring>()</argsstring>
        <name>test2_copy_ctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="866" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="865" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a97dbbadb8c54cb768d26bbb25d496597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_dtor1</definition>
        <argsstring>()</argsstring>
        <name>test2_dtor1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="906" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="905" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a24bb49947369665f7a7645700d536b4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_dtor</definition>
        <argsstring>()</argsstring>
        <name>test2_dtor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="933" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="932" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a98e9fe17fd8e2fa4619b62ce5e5a6e00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_push_back</definition>
        <argsstring>()</argsstring>
        <name>test2_push_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="944" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="943" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a474e0c8cc52ecc9da7ca0b131b944ad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_index_const</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_index_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1068" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1067" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2e8a46a989c7f890adad7b480e9e99d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_at_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_at_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1108" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a83d7c2abfe28cc97fba7406638a85e90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_at_const</definition>
        <argsstring>()</argsstring>
        <name>test2_at_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1128" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a3e2e89cadb141f9e9052713ec5c60ff2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_size1</definition>
        <argsstring>()</argsstring>
        <name>test2_size1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1141" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1140" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a19d865c451eeb2a11062e90f2a70c6c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_size</definition>
        <argsstring>()</argsstring>
        <name>test2_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1149" bodyend="1156"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab08d79cd3dc834ec2358bd08d9b5c508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_stdcont</definition>
        <argsstring>()</argsstring>
        <name>test2_stdcont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1161" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abdc984a1b08a5f7a61f7d63d3ab59f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_empty1</definition>
        <argsstring>()</argsstring>
        <name>test2_empty1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1175" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1174" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a9e3a5b53920985e674a6a63f62695b9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_empty</definition>
        <argsstring>()</argsstring>
        <name>test2_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1184" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1183" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad3486f5c65741581ac7d0bbcf7f19388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reserve_capacity1</definition>
        <argsstring>()</argsstring>
        <name>test2_reserve_capacity1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1193" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae0ba5d12d23979cddff5b05718804217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reserve_capacity</definition>
        <argsstring>()</argsstring>
        <name>test2_reserve_capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1208" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1207" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad02146eaa4f07c304ec4f919b8012f3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_max_size</definition>
        <argsstring>()</argsstring>
        <name>test2_max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1218" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1217" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abe023bac145b18b571f16ded28ff7312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1233" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1232" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a5042500ed3fc941e1c847f557a62ea7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back_const</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1245" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1244" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8c572c5e4bcfb5c8da8111c867dba40b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1257" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1256" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a6dc625229920bf949694e4caada4a40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end_const</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1284" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1283" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af93a0d61f9a084696aa136ae2d12fff6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend_const1</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend_const1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1295" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1294" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac0455095cfcae1ff7cdb016985eb2464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend_const</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend_const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1324" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1323" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a78faa356fd9afb6011c5a71aff398d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_elementproxy</definition>
        <argsstring>()</argsstring>
        <name>test2_elementproxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1335" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1334" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad1475fc9483ba250b777f89b8ca18427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_index1</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_index1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1587" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1586" bodyend="1600"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abbe151762785225a068de7e6593ceda7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_index2</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_index2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1603" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1602" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a516795d895c72df6bc7d7a63cebc5654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_index</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1663" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1662" bodyend="1668"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a7218334a13cf49dad2fc9ff940779c59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_at1</definition>
        <argsstring>()</argsstring>
        <name>test2_at1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1674" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1673" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2ca42542fd4195d406785ccc959ff1c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_at2</definition>
        <argsstring>()</argsstring>
        <name>test2_at2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1700" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1699" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a6e183e553293b70b9a6ce90f5bf8ee10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_at</definition>
        <argsstring>()</argsstring>
        <name>test2_at</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1762" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1761" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae1f5bb247e3e26b9eb362fe267c90c72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapelement</definition>
        <argsstring>()</argsstring>
        <name>test2_swapelement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1773" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1772" bodyend="1913"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a78d45c68cfccc91794db59293a25fd79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapelement_unique</definition>
        <argsstring>()</argsstring>
        <name>test2_swapelement_unique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="1919" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="1918" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a32e44d02b5a9e086ff364dc15fb940d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapelement_iter</definition>
        <argsstring>()</argsstring>
        <name>test2_swapelement_iter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2063" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2062" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aebe073376e0b9b3d485dd071c18b4151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapelement_iter_unique</definition>
        <argsstring>()</argsstring>
        <name>test2_swapelement_iter_unique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2209" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2208" bodyend="2347"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0297573b32c0d773f36eea365f09c4ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resize1</definition>
        <argsstring>()</argsstring>
        <name>test2_resize1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2353" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2352" bodyend="2378"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af2cab707a4f72807d4069c1b9720f06a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resize2</definition>
        <argsstring>()</argsstring>
        <name>test2_resize2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2381" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2380" bodyend="2431"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1afeff9c28cee3a25c9ce5b585a2c934f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resize</definition>
        <argsstring>()</argsstring>
        <name>test2_resize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2434" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2433" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a29c5f9d7e1dfb685a6fd86cd87a4465e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_back1</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_back1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2445" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2444" bodyend="2462"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a074345dc5225d220b2f9624ca8f6f6c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_back2</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_back2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2465" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2464" bodyend="2511"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a5d903e476a183449767595f6b2a7bba5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_pop_back</definition>
        <argsstring>()</argsstring>
        <name>test2_pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2514" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2513" bodyend="2538"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a70b49f15be86e757faa3fcaba1542d1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end1</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2544" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2543" bodyend="2611"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a7f227c6ee66d838b986bb248f7a73d26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end2</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2614" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2613" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a75af7fff8c51ad7573910404787764d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_begin_end</definition>
        <argsstring>()</argsstring>
        <name>test2_begin_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2674" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2673" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0cb85bc0978e0f7799dae8455cf53073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back1</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2696" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2695" bodyend="2737"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a49012e944faa06c2888a77e0e865194c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back2</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2740" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2739" bodyend="2796"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a53a99f6fd318f08e9894350c9333af8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_front_back</definition>
        <argsstring>()</argsstring>
        <name>test2_front_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2799" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2798" bodyend="2815"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a53b423c792f8902bc435568b87216982" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend1</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2821" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2820" bodyend="2875"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8fbe66f550460af9b3497e2cbcafcf85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend2</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2878" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2877" bodyend="2935"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a25d67121ce0d4eccbb9e44fdc9690270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rbegin_rend</definition>
        <argsstring>()</argsstring>
        <name>test2_rbegin_rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2938" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2937" bodyend="2954"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a640fcd55188a1e266aa7e787c3f55e93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_range1</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_range1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="2960" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="2959" bodyend="2998"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a98278a04c78b53f186442457788e3bcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_range2</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_range2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3001" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3000" bodyend="3040"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aab10268df522c19483cf6d2a7b14447e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_range</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3043" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3042" bodyend="3048"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a537dbb175f4d86d524a8289a035a3c0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_single1</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_single1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3054" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3053" bodyend="3074"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2dfbeaf929fb242bfdc902630385c2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_single2</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_single2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3077" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3076" bodyend="3113"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abd424861c26705277dbbc82e644a5820" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_erase_single</definition>
        <argsstring>()</argsstring>
        <name>test2_erase_single</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3116" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3115" bodyend="3121"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af8271a6cd0498cb1ae5bdaa9597fd937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_assign1</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_assign1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3126" bodyend="3158"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a4446dab553dc146a2e1a96705903cefd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_assign2</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_assign2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3161" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3160" bodyend="3186"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a3f4039b3a328b32ce4b186ff521479db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_operator_assign</definition>
        <argsstring>()</argsstring>
        <name>test2_operator_assign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3188" bodyend="3211"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1e4ee9a015ca6c5cf300c42450a94e32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_value1</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_value1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3217" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3216" bodyend="3264"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aa670fcf2005d82b917b98663e2273d1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_value2</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_value2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3267" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3266" bodyend="3315"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a48382747a1b2fc54d903e10174f88dc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_value</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3318" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3317" bodyend="3333"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a57ad0482cba5dff365ac72124a19cd9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_range1</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_range1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3339" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3338" bodyend="3375"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a9d2d99e6e00c97c585367dd85f05f8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_insert_range</definition>
        <argsstring>()</argsstring>
        <name>test2_insert_range</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3378" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3377" bodyend="3420"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a118c2aea7a1331f0cf8072cc6fcc3299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_clear1</definition>
        <argsstring>()</argsstring>
        <name>test2_clear1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3426" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3425" bodyend="3449"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1bac2c3db35736de284b2a06c4724fba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_clear2</definition>
        <argsstring>()</argsstring>
        <name>test2_clear2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3452" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3451" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aed819a68dc77839243afed23740d471c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_clear</definition>
        <argsstring>()</argsstring>
        <name>test2_clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3510" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3509" bodyend="3515"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abf9824ad9e3b5e7b1ae0a966bffd75cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swap1</definition>
        <argsstring>()</argsstring>
        <name>test2_swap1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3521" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3520" bodyend="3566"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a27a1d7399a1e5ef34c3c5efff5d7e7e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swap</definition>
        <argsstring>()</argsstring>
        <name>test2_swap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3569" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3568" bodyend="3612"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abc775bdaec61e42007cc34fb65244477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assign1</definition>
        <argsstring>()</argsstring>
        <name>test2_assign1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3617" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3616" bodyend="3668"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a99a8013f4bb0e1d4222402956a50dd5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assign2</definition>
        <argsstring>()</argsstring>
        <name>test2_assign2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3671" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3670" bodyend="3714"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a51d54897f87f1643126b052d6133a25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assign</definition>
        <argsstring>()</argsstring>
        <name>test2_assign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3717" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3716" bodyend="3734"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1afdf4a845605b4087c44a36f0278d1a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_relops1</definition>
        <argsstring>()</argsstring>
        <name>test2_relops1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3739" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3738" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad5fd2d492f2cb3360ca36bf67395716b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_relops</definition>
        <argsstring>()</argsstring>
        <name>test2_relops</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3771" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3770" bodyend="3776"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a74032b8d5967dc4289c16c84a2e8c92d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort1_prepare1</definition>
        <argsstring>(DV &amp;v)</argsstring>
        <name>test2_sort1_prepare1</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3788" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3787" bodyend="3799"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a3c7661ad9e24c1c07d12cf4f129cd428" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort1</definition>
        <argsstring>()</argsstring>
        <name>test2_sort1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="3802" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="3801" bodyend="4166"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad71c52587afbc218cbbcd341a07367c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_sort</definition>
        <argsstring>()</argsstring>
        <name>test2_sort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4168" bodyend="4174"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a686ca26407e89f25ce256eb6c1ed0070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_call_inplace_merge</definition>
        <argsstring>(Iterator beg, Iterator end)</argsstring>
        <name>test2_call_inplace_merge</name>
        <param>
          <type>Iterator</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4177" bodyend="4182"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac1a4dfc3077710afcc7ff846ec7127b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_call_inplace_merge</definition>
        <argsstring>(Iterator beg, Iterator end, Compare comp)</argsstring>
        <name>test2_call_inplace_merge</name>
        <param>
          <type>Iterator</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Compare</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4185" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4184" bodyend="4189"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8a59fb4505ef4fe6087c57a41406065f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_inplace_merge1</definition>
        <argsstring>()</argsstring>
        <name>test2_inplace_merge1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4192" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4191" bodyend="4313"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a0c4a38473a5f89cd5a81b92685d156d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_inplace_merge</definition>
        <argsstring>()</argsstring>
        <name>test2_inplace_merge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4316" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4315" bodyend="4321"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab7024b32764af5fc4aae9b92214b4aac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb2</definition>
        <argsstring>(DV &amp;v, It beg, It end)</argsstring>
        <name>test2_iter_swap_memb2</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>It</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4325" bodyend="4334"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab3d143c01acc14726213ec81eaff35d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb1</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap_memb1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4337" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4336" bodyend="4370"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad3376158c1b6760875c8bec5be313aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb4</definition>
        <argsstring>(void *)</argsstring>
        <name>test2_iter_swap_memb4</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4373" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4372" bodyend="4374"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8b199452eafc4b64ac374899d6dbe91b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb4</definition>
        <argsstring>(SG::AuxElement *)</argsstring>
        <name>test2_iter_swap_memb4</name>
        <param>
          <type><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4377" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4376" bodyend="4474"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a5412aa6cce37439e60ffdca707c667d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb3</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap_memb3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4477" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4476" bodyend="4535"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab25c8c8e0b386c51210bab5c7803559f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap_memb</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap_memb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4538" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4537" bodyend="4557"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8c555314a3c12e5426f0ab9c8ece48fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
          <param>
            <type>class It</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap2</definition>
        <argsstring>(DV &amp;v, It beg, It end)</argsstring>
        <name>test2_iter_swap2</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>It</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>It</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4561" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4560" bodyend="4569"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a3b2b42fe727f7ac4210932711b968f33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap1</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4572" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4571" bodyend="4605"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1abc947a762595b0bf65521162da2591bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap3</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4608" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4607" bodyend="4672"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a4c1275cb42661b2befc6069d9dd524da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_iter_swap</definition>
        <argsstring>()</argsstring>
        <name>test2_iter_swap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4675" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4674" bodyend="4702"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1a67702d516b01e995974141f3936420" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_set_ownership</definition>
        <argsstring>(DV &amp;v, bool testClearIndex)</argsstring>
        <name>test2_set_ownership</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>testClearIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4714" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4713" bodyend="4717"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aaec215e20b38ad0412214aa5bc70cd9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_set_ownership</definition>
        <argsstring>(ConstDataVector&lt; DV &gt; &amp;v, bool testClearIndex)</argsstring>
        <name>test2_set_ownership</name>
        <param>
          <type><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref>&lt; <ref refid="d3/d78/structDV" kindref="compound">DV</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>testClearIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4720" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4719" bodyend="4723"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a54b8b728c93b535230313ff6c0d8c6cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_remove1</definition>
        <argsstring>(bool testClearIndex)</argsstring>
        <name>test2_remove1</name>
        <param>
          <type>bool</type>
          <declname>testClearIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4726" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4725" bodyend="4906"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1acc65d692c216f999412a417d2a1ca3e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_remove2</definition>
        <argsstring>(bool testClearIndex)</argsstring>
        <name>test2_remove2</name>
        <param>
          <type>bool</type>
          <declname>testClearIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="4909" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="4908" bodyend="5010"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a109b8e1e089505e517c7efd49b5f73c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_remove</definition>
        <argsstring>()</argsstring>
        <name>test2_remove</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5013" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5012" bodyend="5020"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ade738e1bfd902ad4493e2f5c70ee7e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique1</definition>
        <argsstring>()</argsstring>
        <name>test2_unique1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5030" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5029" bodyend="5206"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a682b061d62af6f677a3d5db9fd28cd5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique2</definition>
        <argsstring>()</argsstring>
        <name>test2_unique2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5209" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5208" bodyend="5211"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a24d6498f753b6f17f00a39890dbf8830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_unique</definition>
        <argsstring>()</argsstring>
        <name>test2_unique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5214" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5213" bodyend="5217"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad4fe38727eab4e0b86294d4cefdf1693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reverse</definition>
        <argsstring>()</argsstring>
        <name>test2_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5221" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5220" bodyend="5270"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad4fe38727eab4e0b86294d4cefdf1693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_reverse</definition>
        <argsstring>()</argsstring>
        <name>test2_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5273" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5272" bodyend="5278"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae0c9b6e5a3c349e11fd81979f2239894" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rotate</definition>
        <argsstring>()</argsstring>
        <name>test2_rotate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5283" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5282" bodyend="5331"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae0c9b6e5a3c349e11fd81979f2239894" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_rotate</definition>
        <argsstring>()</argsstring>
        <name>test2_rotate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5334" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5333" bodyend="5339"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae184fb17a94be4cca3c047d3d422fcd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_random_shuffle</definition>
        <argsstring>()</argsstring>
        <name>test2_random_shuffle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5344" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5343" bodyend="5477"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ae184fb17a94be4cca3c047d3d422fcd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_random_shuffle</definition>
        <argsstring>()</argsstring>
        <name>test2_random_shuffle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5480" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5479" bodyend="5485"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af70ab1486adc3dfc29906eabf5599fc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_partition</definition>
        <argsstring>()</argsstring>
        <name>test2_partition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5498" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5497" bodyend="5610"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1af70ab1486adc3dfc29906eabf5599fc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_partition</definition>
        <argsstring>()</argsstring>
        <name>test2_partition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5613" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5612" bodyend="5618"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab398c524eca59bb186817045ea0b2533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_asdatavector</definition>
        <argsstring>()</argsstring>
        <name>test2_asdatavector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5623" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5622" bodyend="5628"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a1119a539ef95e66a83ed73e65ce4acb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement1</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5633" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5632" bodyend="5657"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a5d549df8562ac32795e7bebf440b830d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement2</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5660" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5659" bodyend="5707"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a251a65cafb07a9d8ba65e2cdc0ee0f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_assignelement</definition>
        <argsstring>()</argsstring>
        <name>test2_assignelement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5710" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5709" bodyend="5715"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad37bd15b6077eb9aa71e7e7535ce8aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapranges</definition>
        <argsstring>()</argsstring>
        <name>test2_swapranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5719" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5718" bodyend="5768"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ad37bd15b6077eb9aa71e7e7535ce8aa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_swapranges</definition>
        <argsstring>()</argsstring>
        <name>test2_swapranges</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5771" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5770" bodyend="5776"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a2e47bfc1fa1bf96f837f214c35c05293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>DV::BaseContainer &amp;</type>
        <definition>DV::BaseContainer&amp; test2_resortaux_ptrvector</definition>
        <argsstring>(DV &amp;v)</argsstring>
        <name>test2_resortaux_ptrvector</name>
        <param>
          <type><ref refid="d3/d78/structDV" kindref="compound">DV</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5780" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5779" bodyend="5782"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a8dd876b01dbb7553feedc5ae05f7f664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>DV::BaseContainer &amp;</type>
        <definition>DV::BaseContainer&amp; test2_resortaux_ptrvector</definition>
        <argsstring>(ConstDataVector&lt; DV &gt; &amp;v)</argsstring>
        <name>test2_resortaux_ptrvector</name>
        <param>
          <type><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref>&lt; <ref refid="d3/d78/structDV" kindref="compound">DV</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5785" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5784" bodyend="5787"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1aaf846ec12b3e1fdb7b24c375c0ac5ef0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resortaux1</definition>
        <argsstring>()</argsstring>
        <name>test2_resortaux1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5790" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5789" bodyend="5847"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a403918a15e2138ec2dcc93ee3581a23b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_resortaux</definition>
        <argsstring>()</argsstring>
        <name>test2_resortaux</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5850" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5849" bodyend="5855"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a10f15171668de635313401d147f88e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d3/d78/structDV" kindref="compound">DV</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_move1</definition>
        <argsstring>()</argsstring>
        <name>test2_move1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5859" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5858" bodyend="5902"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ab8545d1fbbaf4a58acdf4656cea321a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_move</definition>
        <argsstring>()</argsstring>
        <name>test2_move</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5905" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5904" bodyend="5910"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a922a0b07c33d4e3642c357d65929667d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test2_offset</definition>
        <argsstring>()</argsstring>
        <name>test2_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5915" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5914" bodyend="5926"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1ac3be5e33cb9e5487719c46bf7f36d3bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d9/db3/structB" kindref="compound">B</ref></type>
          </param>
          <param>
            <type>class <ref refid="d7/db3/structD" kindref="compound">D</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void do_test2</definition>
        <argsstring>()</argsstring>
        <name>do_test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5931" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5930" bodyend="5989"/>
      </memberdef>
      <memberdef kind="function" id="d2/db8/DataVector__test_8icc_1a196de027229cb5bbb1164ce4003e66d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dump_classid</definition>
        <argsstring>()</argsstring>
        <name>dump_classid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" line="5994" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc" bodystart="5993" bodyend="6001"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2013 The <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> regression tests are split into several pieces, in order to reduce the memory required for compilation.</para></simplesect>
This file contains the code common between these pieces. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d03/exceptions_8h" kindref="compound" tooltip="Exceptions that can be thrown from AthContainers.">AthContainers/exceptions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="da/d8e/foreach_8h" kindref="compound" tooltip="foreach helper for standalone build.">AthContainers/tools/foreach.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d67/expect__exception_8h" kindref="compound" tooltip="Helper to check that an exception is thrown.">TestTools/expect_exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>what);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>()<sp/>throw()<sp/>{}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>throw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_what.c_str();<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::string<sp/>m_what;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">dv_test_err::dv_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>what)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>os;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>myassertion<sp/>failure:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>what;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_what<sp/>=<sp/>os.str();</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_dv_test_err<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(file,<sp/>line,<sp/>what));</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>myassert(X)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(X))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>throw_dv_test_err<sp/>(__FILE__,<sp/>__LINE__,<sp/>#X);<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_ASSERT(X)<sp/>myassert(X)</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/dd6/DataVector_8h" kindref="compound" tooltip="An STL vector of pointers that by default owns its pointed-to elements.">AthContainers/DataVector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d0d/ConstDataVector_8h" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">AthContainers/ConstDataVector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d0f/AuxStoreInternal_8h" kindref="compound" tooltip="An auxiliary data store that holds data internally.">AthContainers/AuxStoreInternal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d4b/unused_8h" kindref="compound" tooltip="Macro to mark a variable as unused.">CxxUtils/unused.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d77/make__unique_8h" kindref="compound" tooltip="Provide a version of the C++14 make_unique.">CxxUtils/make_unique.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d79/random_8h" kindref="compound" tooltip="Very simple random numbers for regression testing.">TestTools/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CxxUtils::make_unique;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">Athena_test::RNG</ref><sp/>stlrand;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="d3/ddc/structAthena__test_1_1RNG" kindref="compound" tooltip="Generator compatible with the STL RandomNumberGenerator.">Athena_test::RNG</ref><sp/>stlrand2;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound" tooltip="Generator compatible with the C++11 STL UniformRandomNumberGenerator.">Athena_test::URNG</ref><sp/>stlurand;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="d8/dd6/structAthena__test_1_1URNG" kindref="compound" tooltip="Generator compatible with the C++11 STL UniformRandomNumberGenerator.">Athena_test::URNG</ref><sp/>stlurand2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">std::vector&lt;int&gt;<sp/>dtor_log;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">std::vector&lt;int&gt;<sp/>get_dtor_log()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>out;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>out.swap<sp/>(dtor_log);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>of<sp/>element<sp/>deletion<sp/>within<sp/>a<sp/>container<sp/>is<sp/>unpredictable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>the<sp/>sort()<sp/>in<sp/>remove_duplicates().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>std::sort<sp/>(out.begin(),<sp/>out.end());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_dtor_log()</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>dtor_log.clear();</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_dtor_log(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=-1,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d=-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e=-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f=-1)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>!=<sp/>-1)<sp/>v.push_back(a);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>-1)<sp/>v.push_back(b);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>-1)<sp/>v.push_back(c);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>!=<sp/>-1)<sp/>v.push_back(d);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(e<sp/>!=<sp/>-1)<sp/>v.push_back(e);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>!=<sp/>-1)<sp/>v.push_back(f);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::sort<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>vv<sp/>=<sp/>get_dtor_log();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>myassert<sp/>(vv<sp/>==<sp/>v);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/df1/structAA" kindref="compound">AA</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0):<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>~<ref refid="d7/df1/structAA" kindref="compound">AA</ref>()<sp/>{<sp/>dtor_log.push_back<sp/>(x);<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>other.x;<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d1f/structBB" kindref="compound">BB</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref></highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d95/structCC" kindref="compound">CC</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref></highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="d4/d95/structCC" kindref="compound">CC</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a7ee2c7ff8209815d164658289e0981ea" kindref="member" tooltip="Declare base class info to DataVector. Single, non-virtual derivation.">DATAVECTOR_BASE</ref>(<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>,<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a7ee2c7ff8209815d164658289e0981ea" kindref="member" tooltip="Declare base class info to DataVector. Single, non-virtual derivation.">DATAVECTOR_BASE</ref>(<ref refid="d4/d95/structCC" kindref="compound">CC</ref>,<sp/><ref refid="d7/d1f/structBB" kindref="compound">BB</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AA&gt;</ref><sp/>,<sp/>9881<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="d7/d1f/structBB" kindref="compound">BB</ref>&gt;<sp/>,<sp/>9882<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="d4/d95/structCC" kindref="compound">CC</ref>&gt;<sp/>,<sp/>178538783<sp/>,<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">struct<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>MM<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>mm(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~MM()<sp/>{}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mm;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/d55/structM" kindref="compound">M</ref></highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>x(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d8/d55/structM" kindref="compound">M</ref>()<sp/>{<sp/>dtor_log.push_back<sp/>(x);<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>other.x;<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref></highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x),<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>(the_x+100)<sp/>{}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d8/d55/structM" kindref="compound">M</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="166"><highlight class="normal">};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref></highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x),<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1abf92e4ab5c7811adc4e57e4997641636" kindref="member" tooltip="Declare base class info to DataVector. Single, virtual derivation.">DATAVECTOR_VIRTBASES1</ref><sp/>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1abf92e4ab5c7811adc4e57e4997641636" kindref="member" tooltip="Declare base class info to DataVector. Single, virtual derivation.">DATAVECTOR_VIRTBASES1</ref><sp/>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a2ca8baa62a0521d1a8fe71e41dd854f8" kindref="member" tooltip="Declare base class info to DataVector. Multiple derivation.">DATAVECTOR_VIRTBASES2</ref><sp/>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">SG_BASES2<sp/>(<ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>),<sp/><ref refid="dc/d7e/structMM" kindref="compound">MM</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">SG_BASE<sp/>(<ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/>SG_VIRTUAL(<ref refid="d8/d55/structM" kindref="compound">M</ref>));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">SG_BASES2<sp/>(<ref refid="dc/dec/structP" kindref="compound">P</ref>,<sp/>SG_VIRTUAL(<ref refid="da/deb/structN" kindref="compound">N</ref>),<sp/>SG_VIRTUAL(<ref refid="d1/d78/structO" kindref="compound">O</ref>));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;N&gt;</ref><sp/>,<sp/>9884<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="d1/d78/structO" kindref="compound">O</ref>&gt;<sp/>,<sp/>9885<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="d8/d55/structM" kindref="compound">M</ref>&gt;<sp/>,<sp/>9887<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">struct<sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref><sp/>:<sp/>virtual<sp/>public<sp/>M</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>M(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/df7/structR" kindref="compound">R</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="d8/df7/structR" kindref="compound">R</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1abf92e4ab5c7811adc4e57e4997641636" kindref="member" tooltip="Declare base class info to DataVector. Single, virtual derivation.">DATAVECTOR_VIRTBASES1</ref><sp/>(<ref refid="d1/dbc/structQ" kindref="compound">Q</ref>,<sp/><ref refid="d8/d55/structM" kindref="compound">M</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a8b51182afbfb18b07c5565f35eaf9205" kindref="member" tooltip="Declare base class info to DataVector. Multiple derivation.">DATAVECTOR_VIRTBASES3</ref><sp/>(<ref refid="d8/df7/structR" kindref="compound">R</ref>,<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>,<sp/><ref refid="d1/d78/structO" kindref="compound">O</ref>,<sp/><ref refid="d1/dbc/structQ" kindref="compound">Q</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;R&gt;</ref><sp/>,<sp/>9883<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="d1/dbc/structQ" kindref="compound">Q</ref>&gt;<sp/>,<sp/>9886<sp/>,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="d1/d51/structAAux" refkind="compound"><highlight class="normal">struct<sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref><sp/>:<sp/>public<sp/>SG::AuxElement</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/>x(the_x)<sp/><sp/>{<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//AAux<sp/>(const<sp/>AAux&amp;<sp/>other)<sp/>:<sp/>SG::AuxElement(other),<sp/>x(other.x)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="d1/d51/structAAux" kindref="compound">AAux</ref>()<sp/>{<sp/>dtor_log.push_back<sp/>(x);<sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a331f1405e2b4323d37655e725a8f5b63" kindref="member" tooltip="List ordering relation.">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>other.x;<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>xint()</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="213"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>xintAvailable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="215"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>xfloat()</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xfloat()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="220"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>xfloatAvailable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="222"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux()</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>xint()<sp/>=<sp/>x+10;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>xfloat()<sp/>=<sp/>x+11.5;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="231"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(xint()<sp/>==<sp/>x+10);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(xfloat()<sp/>==<sp/>x+11.5);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="237"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!xintAvailable()<sp/>||<sp/>xint()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!xfloatAvailable()<sp/>||<sp/>xfloat()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242" refid="da/d42/structBAux" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/d42/structBAux" kindref="compound">BAux</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><ref refid="da/d42/structBAux" kindref="compound">BAux</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//BAux<sp/>(const<sp/>BAux&amp;<sp/>other)<sp/>:<sp/>AAux(other)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>xint2()</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint2&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xint2()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="250"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint2&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>xint2Available()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="252"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint2&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux()</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>AAux::setaux();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>xint2()<sp/>=<sp/>x+20;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="262"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>AAux::checkaux();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(xint2()<sp/>==<sp/>x+20);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="268"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>AAux::checkauxZero();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!xint2Available()<sp/>||<sp/>xint2()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">};</highlight></codeline>
<codeline lineno="273" refid="df/df0/structCAux" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/df0/structCAux" kindref="compound">CAux</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SG::<ref refid="dc/db0/classSG_1_1AuxElement_1aef247a3ae0d53cd8c4f90702c7501d2f" kindref="member" tooltip="Default constructor.">AuxElement</ref></highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="df/df0/structCAux" kindref="compound">CAux</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_x=0)<sp/>:<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>(the_x)<sp/>{}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//CAux<sp/>(const<sp/>CAux&amp;<sp/>other)<sp/>:<sp/>AA(other),<sp/>SG::AuxElement(other)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>xint()</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xint()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="281"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>xintAvailable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="283"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;int&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>xfloat()</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xfloat()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="288"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>xfloatAvailable()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="290"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor&lt;float&gt;</ref><sp/>acc<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc.<ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor_1ae085d8a369304f86be998575cbe94998" kindref="member" tooltip="Test to see if this variable exists in the store.">isAvailable</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux()</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>xint()<sp/>=<sp/>x+10;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>xfloat()<sp/>=<sp/>x+11.5;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="299"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(xint()<sp/>==<sp/>x+10);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(xfloat()<sp/>==<sp/>x+11.5);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="305"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!xintAvailable()<sp/>||<sp/>xint()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!xfloatAvailable()<sp/>||<sp/>xfloat()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a7ee2c7ff8209815d164658289e0981ea" kindref="member" tooltip="Declare base class info to DataVector. Single, non-virtual derivation.">DATAVECTOR_BASE</ref>(<ref refid="da/d42/structBAux" kindref="compound">BAux</ref>,<sp/><ref refid="d1/d51/structAAux" kindref="compound">AAux</ref>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="d7/dd6/DataVector_8h_1a7ee2c7ff8209815d164658289e0981ea" kindref="member" tooltip="Declare base class info to DataVector. Single, non-virtual derivation.">DATAVECTOR_BASE</ref>(<ref refid="df/df0/structCAux" kindref="compound">CAux</ref>,<sp/><ref refid="d7/df1/structAA" kindref="compound">AA</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;AAux&gt;</ref>,<sp/>9891,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="da/d42/structBAux" kindref="compound">BAux</ref>&gt;,<sp/>9892,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">CLASS_DEF(<sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector</ref>&lt;<ref refid="df/df0/structCAux" kindref="compound">CAux</ref>&gt;,<sp/>9893,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">template<sp/>&lt;class<sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&gt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_indices1<sp/>(const<sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>SG::AuxElement*)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.trackIndices())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(v[i])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf<sp/>(&quot;%d<sp/>%d<sp/>%p\n&quot;,<sp/>i,<sp/>v[i]-&gt;index(),<sp/>v[i]-&gt;container());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>printf<sp/>(&quot;%d<sp/>null\n&quot;,<sp/>i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v[i]<sp/>&amp;&amp;<sp/>(v[i]-&gt;container()<sp/>!=<sp/>&amp;v.auxbase()<sp/>||<sp/>v[i]-&gt;index()<sp/>!=<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(file,<sp/>line,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>(</highlight><highlight class="stringliteral">&quot;check_indices<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassName&lt;DV&gt;::name()));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_indices1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_indices<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>check_indices1<sp/>(v,<sp/>file,<sp/>line,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::value_type());</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_INDICES(V)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/>check_indices(V,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor">}<sp/>while(false)</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_INDICES_FAIL(V)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/>bool<sp/>caught<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>check_indices(V,<sp/>__FILE__,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/>}<sp/>catch<sp/>(const<sp/>dv_test_err&amp;)<sp/>{<sp/>caught<sp/>=<sp/>true;<sp/>}<sp/><sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!v.trackIndices());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor">}<sp/>while(false)</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_index_clear<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*<sp/>p,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>())</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>!=<sp/>0<sp/>||<sp/>p-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1aba555afb4547fbe96fbdc4b266f75f16" kindref="member" tooltip="Return the index of this element within its container.">index</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref><sp/>(file,<sp/>line,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>(</highlight><highlight class="stringliteral">&quot;check_index_clear<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClassName&lt;T&gt;::name()));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_index_clear<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_index_clear<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;&amp;<sp/>p,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;&amp;)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>check_index_clear<sp/>(p.get(),<sp/>file,<sp/>line,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_INDEX_CLEAR(P)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/>check_index_clear<sp/>(P,<sp/>__FILE__,<sp/>__LINE__,<sp/>P);<sp/><sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor">}<sp/>while(false)</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.hasNonConstStore())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_FOREACH<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DataVector&lt;T&gt;::base_value_type</ref>*<sp/>p,<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;checkaux();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux1<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>checkaux1<sp/>(v,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DataVector&lt;T&gt;::value_type</ref>());</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector&lt;T&gt;</ref>&amp;)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>p-&gt;checkaux();</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkaux<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>checkaux1<sp/>(p,<sp/>p);</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux1<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,<sp/><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>&amp;<sp/>store,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.hasNonConstStore())</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(&amp;store);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>ATHCONTAINERS_FOREACH<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::value_type<sp/>p,<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;setaux();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux1<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;,<sp/><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux<sp/>(<ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;T&gt;</ref>&amp;<sp/>v,<sp/><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>&amp;<sp/>store)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>setaux1<sp/>(v,<sp/>store,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DataVector&lt;T&gt;::value_type</ref>());</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setaux<sp/>(<ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector&lt;T&gt;</ref>&amp;,<sp/><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound" tooltip="Interface for non-const operations on an auxiliary store.">SG::IAuxStore</ref>&amp;)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>make_comp1<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setaux,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(x);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>t-&gt;makePrivateStore();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setaux)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;setaux();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>make_comp1<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(x);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>make_comp<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setaux=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_comp1&lt;T&gt;<sp/>(x,<sp/>setaux,<sp/>ptr());</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">std::unique_ptr&lt;T&gt;<sp/>make_comp_unique<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setaux=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>ptr;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;<sp/>(make_comp1&lt;T&gt;<sp/>(x,<sp/>setaux,<sp/>ptr()));</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releasePrivateStore1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>p-&gt;releasePrivateStore();</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releasePrivateStore1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releasePrivateStore<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>releasePrivateStore1<sp/>(p,<sp/>p);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>p-&gt;checkauxZero();</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero1<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero<sp/>(<ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>p)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>checkauxZero1<sp/>(p,<sp/>p);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkauxZero<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/da5/classSG_1_1AuxVectorBase" kindref="compound" tooltip="Manage index tracking and synchronization of auxiliary data.">SG::AuxVectorBase</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" kindref="member" tooltip="Return true if this object has an associated non-const store.">hasNonConstStore</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(ityp,<sp/>index)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>assert<sp/>(v.<ref refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" kindref="member" tooltip="Return reference to an aux data item.">getData</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(ftyp,<sp/>index)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>hasaux&gt;</highlight></codeline>
<codeline lineno="578" refid="d8/dff/structtest2__maybeconst1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/dff/structtest2__maybeconst1" kindref="compound">test2_maybeconst1</ref></highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/><ref refid="d1/def/classT" kindref="compound">type</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="585" refid="d0/d8a/structtest2__maybeconst1_3_01T_00_01SG__STD__OR__BOOST_1_1true__type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/dff/structtest2__maybeconst1" kindref="compound">test2_maybeconst1</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>,<sp/>SG_STD_OR_BOOST::true_type&gt;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/><ref refid="d1/def/classT" kindref="compound">type</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gives<sp/>`T&apos;<sp/>if<sp/>T<sp/>has<sp/>auxdata;<sp/>otherwise<sp/>`const<sp/>T&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="593" refid="d6/d82/structtest2__maybeconst" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/d82/structtest2__maybeconst" kindref="compound">test2_maybeconst</ref></highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d8/dff/structtest2__maybeconst1" kindref="compound">test2_maybeconst1&lt;T, typename SG::AuxStore_traits&lt;T&gt;::flag</ref>&gt;<ref refid="d1/def/classT" kindref="compound">::type</ref><sp/><ref refid="d1/def/classT" kindref="compound">type</ref>;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initial<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_initial()</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>b<sp/>=<sp/>vb[0];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d<sp/>=<sp/>vd[0];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>myassert<sp/>(b-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>myassert<sp/>(d-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>d2<sp/>(10);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>myassert<sp/>(d2.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>d3<sp/>(d2);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>myassert<sp/>(d3.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>CHECK_INDICES(d2);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>CHECK_INDICES(d3);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>default<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_default_ctor1()</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_default_ctor2()</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>test2_default_ctor1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v1.trackIndices());</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>!v2.trackIndices());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v3.trackIndices());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" kindref="member" tooltip="Never track indices, regardless of the setting of the ownership policy.">SG::NEVER_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v4.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>!v4.trackIndices());</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_default_ctor()</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>test2_default_ctor2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>test2_default_ctor2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>test2_default_ctor1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>test2_default_ctor1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>sized<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sized_ctor1()</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>(10);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(v1);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(10,<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(v2);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sized_ctor2()</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>(10,<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v1.trackIndices());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>v1[0]<sp/>=<sp/>make_comp&lt;T&gt;<sp/>(10,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore(&amp;*v1[0]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(&amp;*v1[0]);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v1[0];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sized_ctor()</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>test2_sized_ctor2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>test2_sized_ctor2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>test2_sized_ctor1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insertion<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;<sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insertion_ctor1()</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>DV::value_type&gt;<sp/>tt;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>(tt.begin(),<sp/>tt.end());</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(tt.begin(),<sp/>tt.end(),<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]<sp/>==<sp/>tt[0]);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[1]<sp/>==<sp/>tt[1]);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>tt[0]);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]<sp/>==<sp/>tt[1]);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>DV::value_type&gt;<sp/>tt;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>({tt[0],<sp/>tt[1]});</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>({tt[0],<sp/>tt[1]},<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]<sp/>==<sp/>tt[0]);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[1]<sp/>==<sp/>tt[1]);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>tt[0]);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]<sp/>==<sp/>tt[1]);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insertion_ctor2()</highlight></codeline>
<codeline lineno="774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>DV::value_type&gt;<sp/>tt;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(make_comp&lt;T&gt;(1));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>tt.push_back<sp/>(make_comp&lt;T&gt;(2));</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>(tt.begin(),<sp/>tt.end(),<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" kindref="member" tooltip="Always track indices, regardless of the setting of the ownership policy.">SG::ALWAYS_TRACK_INDICES</ref>,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auxdata<sp/>?<sp/>&amp;store<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v1.trackIndices());</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tt[0];</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>tt[1];</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insertion_ctor()</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>test2_insertion_ctor2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>test2_insertion_ctor2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>test2_insertion_ctor1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>put<sp/>D<sp/>pointers<sp/>into<sp/>a<sp/>B<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;D*&gt;<sp/>dd;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>v1<sp/>(dd.begin(),<sp/>dd.end());</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]<sp/>==<sp/>dd[0]);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[1]<sp/>==<sp/>dd[1]);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPILE_ERROR</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>not<sp/>the<sp/>other<sp/>way<sp/>&apos;round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;B*&gt;<sp/>dd;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>dd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>v1<sp/>(dd.begin(),<sp/>dd.end());</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]<sp/>==<sp/>dd[0]);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[1]<sp/>==<sp/>dd[1]);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>copy<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_copy_ctor1()</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>v1[0]);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]<sp/>==<sp/>v1[1]);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_copy_ctor2()</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>setaux(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>assert<sp/>(!v2.hasStore());</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_copy_ctor()</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>test2_copy_ctor2&lt;DataVector&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>test2_copy_ctor2&lt;DataVector&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>test2_copy_ctor1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>copy<sp/>derived<sp/>vector<sp/>to<sp/>base<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>v1;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>v1[0]);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]<sp/>==<sp/>v1[1]);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>v3<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3[0]<sp/>==<sp/>v1[0]);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3[1]<sp/>==<sp/>v1[1]);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>COMPILE_ERROR</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>not<sp/>the<sp/>other<sp/>way<sp/>&apos;round.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>v1;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]<sp/>==<sp/>v1[0]);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]<sp/>==<sp/>v1[1]);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="899"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_dtor1()</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DO_REMOVE_DUPLICATES</highlight></codeline>
<codeline lineno="922"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_dtor()</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>test2_dtor1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>push_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_push_back()</highlight></codeline>
<codeline lineno="944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>storeb;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>setaux<sp/>(vb,<sp/>storeb);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp&lt;D&gt;(2));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1af6206e99fb0d7d2e2fce1eafe99877f1" kindref="member" tooltip="Add an element to the end of the collection.">emplace_back</ref><sp/>(make_comp&lt;D&gt;(12));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb[2]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>vb2.push_back<sp/>(vb[1]);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb3;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>vb3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>vb3.<ref refid="d0/d4d/classDataVector_1af6206e99fb0d7d2e2fce1eafe99877f1" kindref="member" tooltip="Add an element to the end of the collection.">emplace_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb3);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>stored;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>setaux<sp/>(vd,<sp/>stored);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp&lt;D&gt;(3));</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp&lt;D&gt;(4));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>releasePrivateStore<sp/>(&amp;*vd[0]);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>myassert<sp/>(vd[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>vd2.push_back<sp/>(vd[1]);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd3;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>vd3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>vd3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb3);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvd[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>CHECK_INDICES(cvd);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Dconst&gt;</ref><sp/>vcd;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>vcd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>myassert<sp/>(vcd.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>myassert<sp/>(vcd[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vcd);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>isn&apos;t<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd4<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,<sp/>vd4.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4)));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata_b<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata_d<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(10));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>assert<sp/>(caught<sp/>||<sp/>!auxdata_d);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>vb.setStore<sp/>(vb.getConstStore());</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>assert<sp/>(caught<sp/>||<sp/>!auxdata_b);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb_u;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>storeb_u;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb_u,<sp/>storeb_u);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>vb_u.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp_unique&lt;B&gt;(20));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>vb_u.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp_unique&lt;D&gt;(21));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb_u);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb_u);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2_u<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb2_u.push_back<sp/>(make_unique&lt;B&gt;(22)));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>check_dtor_log(22,<sp/>20,<sp/>21);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd_u;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>stored_u;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd_u,<sp/>stored_u);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>vd_u.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp_unique&lt;D&gt;(23));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>vd_u.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_comp_unique&lt;D&gt;(24));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd_u);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd_u);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd4_u<sp/>=<sp/>vd_u;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd4_u.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(26)));</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vd2_u<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd2_u.push_back<sp/>(make_unique&lt;D&gt;(25)));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>check_dtor_log(26,<sp/>25,<sp/>23,<sp/>24);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1062"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>operator[]<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_index_const()</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>cvb<sp/>=<sp/>vb;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cvb[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cvb[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cvb.<ref refid="d0/d4d/classDataVector_1aee535632a89bd041be90a3fa3058e36b" kindref="member" tooltip="Access an element, as an rvalue.">get</ref>(1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref>&amp;<sp/>cvd<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd<sp/>=<sp/>cvd[0];</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>vd;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;&amp;<sp/>cvd<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd<sp/>=<sp/>cvd[0];</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Dconst&gt;</ref><sp/>vcd;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>vcd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3));</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Dconst&gt;</ref>&amp;<sp/>cvcd<sp/>=<sp/>vcd;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd<sp/>=<sp/>cvcd[0];</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>at<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_at_const1()</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>cvb<sp/>=<sp/>vb;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvb.at(0)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvb.at(1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.at(10);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::out_of_range&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_at_const()</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>test2_at_const1&lt;DataVector&lt;B&gt;,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>test2_at_const1&lt;DataVector&lt;D&gt;,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>test2_at_const1&lt;DataVector&lt;Dconst&gt;,<sp/>Dconst,<sp/>Dconst&gt;();</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>test2_at_const1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;,<sp/>D,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_size1()</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_size()</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>test2_size1&lt;DataVector&lt;B&gt;,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>test2_size1&lt;ConstDataVector&lt;DataVector&lt;B&gt;<sp/>&gt;,<sp/>B,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>test2_size1&lt;DataVector&lt;Dconst&gt;,<sp/>Dconst,<sp/>Dconst&gt;();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>stdcont</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_stdcont()</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;::PtrVector</ref>&amp;<sp/>vv<sp/>=<sp/>vb.<ref refid="d0/d4d/classDataVector_1a0e2e64a35d842a206c96ccfec265df21" kindref="member" tooltip="Return the underlying std::vector of the container.">stdcont</ref>();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>myassert<sp/>(vv.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>myassert<sp/>(vv[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_empty1()</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.empty());</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>vb.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>myassert<sp/>(!vb.empty());</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_empty()</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>test2_empty1&lt;DataVector&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>test2_empty1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;B&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>test2_empty1&lt;ConstDataVector&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>reserve<sp/>and<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reserve_capacity1()</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.capacity()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>vb.reserve<sp/>(10);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.capacity()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>vb.resize<sp/>(5);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>vb.shrink_to_fit();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.capacity()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reserve_capacity()</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>test2_reserve_capacity1&lt;DataVector&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>test2_reserve_capacity1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>test2_reserve_capacity1&lt;ConstDataVector&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>max_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_max_size()</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb.<ref refid="d0/d4d/classDataVector_1afaa2425da1ced3fa685a37a2a0561b05" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/>==<sp/>std::vector&lt;void*&gt;().max_size());</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;B&gt;</ref><sp/>&gt;<sp/>cvb;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>myassert<sp/>(cvb.max_size()<sp/>==<sp/>std::vector&lt;void*&gt;().max_size());</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;B&gt;::type</ref><sp/>Bconst;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;Bconst&gt;</ref><sp/>vcb;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>myassert<sp/>(vcb.<ref refid="d0/d4d/classDataVector_1afaa2425da1ced3fa685a37a2a0561b05" kindref="member" tooltip="Returns the size() of the largest possible collection.">max_size</ref>()<sp/>==<sp/>std::vector&lt;void*&gt;().max_size());</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>front<sp/>const,<sp/>back<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back_const1()</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>vd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>vd.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>cvd<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>dd<sp/>=<sp/>cvd.front();</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>dd<sp/>=<sp/>cvd.back();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back_const()</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;DataVector&lt;B&gt;,<sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>&gt;();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;DataVector&lt;D&gt;,<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;DataVector&lt;Dconst&gt;,<sp/>Dconst,<sp/>Dconst&gt;();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>test2_front_back_const1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;,<sp/>D,<sp/>D&gt;();</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>begin<sp/>const,<sp/>end<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end_const1()</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>myassert<sp/>(cv.end()<sp/>-<sp/>cv.begin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>myassert<sp/>(cv.cend()<sp/>-<sp/>cv.cbegin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::const_iterator<sp/>i<sp/>=<sp/>cv.begin();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.end());</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>tt<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.end());</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.cend());</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.end());</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.begin());</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.cbegin());</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end_const()</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>test2_begin_end_const1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>rbegin<sp/>const,<sp/>rend<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend_const1()</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>cv<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>myassert<sp/>(cv.rend()<sp/>-<sp/>cv.rbegin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>myassert<sp/>(cv.crend()<sp/>-<sp/>cv.crbegin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::const_reverse_iterator<sp/>i<sp/>=<sp/>cv.rbegin();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.rend());</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.crend());</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>tt<sp/>=<sp/>*i;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.rend());</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>!=<sp/>cv.crend());</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.rend());</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.crend());</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>--i;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.rbegin());</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>cv.crbegin());</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend_const()</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>ElementProxy<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_elementproxy()</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb1,<sp/>store_b);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(5));</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(6));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd1,<sp/>store_d);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb2);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd2);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb1);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd1);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vb1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*vb1[1]).x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd<sp/>=<sp/>vd1[0];</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dd-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vd1[1]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(3,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(7,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>ownership<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VIEW-&gt;VIEW<sp/>doesn&apos;t<sp/>delete<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/>vb2[1];</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2[0]<sp/>=<sp/>vd2[1];</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb2);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd2);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(4,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(8,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OWN-&gt;VIEW<sp/>doesn&apos;t<sp/>delete<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/>vb1[0];</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2[0]<sp/>=<sp/>vd1[0];</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb2);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd2);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(&amp;*vb2[0]);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(&amp;*vd2[0]);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,2)<sp/><sp/>vb2:<sp/>(1,4)<sp/><sp/>vd1:<sp/>(5,6)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>VIEW-&gt;OWN<sp/>deletes<sp/>old<sp/>val,<sp/>takes<sp/>ownership.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[1]<sp/>=<sp/>vb2[1];</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1[1]<sp/>=<sp/>vd2[1];</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2,<sp/>6);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(&amp;*vb1[1]);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(&amp;*vd1[1]);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,4)<sp/><sp/>vb2:<sp/>(1,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OWN-&gt;OWN<sp/>not<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>vb1[1];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/>vd1[1];</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unless<sp/>it&apos;s<sp/>the<sp/>same<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>vb1[0];</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bb<sp/>=<sp/>vb1[0];</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>bb;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(&amp;*vb1[0]);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(&amp;*vd1[0]);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>can&apos;t<sp/>manage<sp/>to<sp/>put<sp/>a<sp/>B<sp/>into<sp/>a<sp/>D<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>ElementProxy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd2_b<sp/>=<sp/>vd2;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd2_b[0]<sp/>=<sp/>vb2[0];</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>we<sp/>can<sp/>put<sp/>a<sp/>D<sp/>in<sp/>a<sp/>B<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/>vd2_b[0];</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(1,4)<sp/><sp/>vb2:<sp/>(5,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>assignment<sp/>from<sp/>explicit<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(9);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(9,4)<sp/><sp/>vb2:<sp/>(10,4)<sp/><sp/>vd1:<sp/>(5,8)<sp/><sp/>vd2:<sp/>(5,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(11);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dd2<sp/>=<sp/>make_comp&lt;D&gt;(12);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/>dd2;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore<sp/>(dd2);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vb1:<sp/>(9,4)<sp/><sp/>vb2:<sp/>(10,4)<sp/><sp/>vd1:<sp/>(12,8)<sp/><sp/>vd2:<sp/>(11,8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb2);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd2);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(&amp;*vb1[0]);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(&amp;*vd1[0]);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="1477"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>assignment<sp/>from<sp/>unique_ptr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>make_unique&lt;B&gt;(21);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(9);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>make_unique&lt;B&gt;(9);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(21);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/>make_unique&lt;D&gt;(22);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(12);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/>make_unique&lt;D&gt;(12);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(22);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/>make_unique&lt;B&gt;(50));</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd2[0]<sp/>=<sp/>make_unique&lt;D&gt;(51));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log(50,<sp/>51);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1494"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd3<sp/><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d1<sp/>=<sp/>make_comp&lt;D&gt;(11);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d2<sp/>=<sp/>make_comp&lt;D&gt;(12);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>vd3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(d1);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>vd3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(d2);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore<sp/>(d1);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore<sp/>(d2);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd3);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd3);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>vd3[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd3);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(d1);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd3);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(12,<sp/>8,<sp/>9,<sp/>4);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata_b<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata_d<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb1,<sp/>store_b);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.setStore<sp/>(vb1.getConstStore());</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!auxdata_b);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb1[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!auxdata_b);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd1,<sp/>store_d);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.setStore<sp/>(vd1.getConstStore());</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!auxdata_d);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd1[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!auxdata_d);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.resize(2);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[0]<sp/>=<sp/>vb1[1];</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2[1]<sp/>=<sp/>vb1[0];</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vb1);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.resize(2);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2[0]<sp/>=<sp/>vd1[1];</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2[1]<sp/>=<sp/>vd1[0];</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(vd1);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>operator[]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_index1()</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(2);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>v[1]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>myassert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>myassert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>v[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>myassert<sp/>(v[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_index2()</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>test2_operator_index1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>v2.resize(2);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>v2[0]<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>v2[1]<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>setaux<sp/>(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>v2[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>v2.clear();</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/>v2.resize(2);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>v2[0]<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>v2[1]<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(1);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>v3[0]<sp/>=<sp/>v2[1];</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>v2.setStore<sp/>(v2.getConstStore());</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[0]<sp/>=<sp/>t3;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>v2[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_index()</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/>test2_operator_index2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>test2_operator_index2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>test2_operator_index1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>test2_operator_index1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_at1()</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(2);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>v.at(0)<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>v.at(1)<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.at(0)-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.at(1)-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>v.at(0)<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.at(0)-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>v.at(10);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::out_of_range&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_at2()</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>test2_at1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>v2.<ref refid="d1/d1c/classSG_1_1AuxStoreInternal_1adcba0811d598f897ae6c482373428629" kindref="member" tooltip="Change the size of all aux data vectors.">resize</ref>(2);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>v2.at(0)<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>v2.at(1)<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/>setaux<sp/>(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/>v2.at(1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/>v2.clear();</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>v2.resize(2);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>v2.at(0)<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>v2.at(1)<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>releasePrivateStore(t1);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>releasePrivateStore(t2);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(1);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a3f598b345c9b1eb8793fd9cc6c16abe3" kindref="member" tooltip="Access an element, as an rvalue.">at</ref>(0)<sp/>=<sp/>v2.at(1);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/>v2.setStore<sp/>(v2.getConstStore());</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.at(0)<sp/>=<sp/>t3;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.at(0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_at()</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>test2_at2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>test2_at2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>test2_at1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>test2_at1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swapElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapelement()</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/>make_comp&lt;B&gt;(3);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vb[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(bold-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(bold);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bold;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(5));</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/>make_comp&lt;D&gt;(6);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore(dnew);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vd[1]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dold-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(dold);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dold;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd_b<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd_b.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10),<sp/>bold);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>cdold;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cvd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cdold;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(cvd);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;Dconst&gt;</ref><sp/>&gt;<sp/>vcd;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vcd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cdold;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(vcd);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(7,<sp/>9);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4,<sp/>6,<sp/>1,<sp/>3,<sp/>7,<sp/>9);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.setStore<sp/>(vb.getConstStore());</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/>make_comp&lt;B&gt;(3);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/>make_comp&lt;D&gt;(3);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>bnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>dnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swapElement<sp/>with<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapelement_unique()</highlight></codeline>
<codeline lineno="1919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="1921"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(2));</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>make_comp_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vb[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(bold-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(bold);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(4));</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(5));</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>make_comp_unique&lt;D&gt;(6),<sp/>dold);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>releasePrivateStore(static_cast&lt;D*&gt;(vd[1]));</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vd[1]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(dold-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(dold);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd_b<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd_b.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>make_unique&lt;B&gt;(10),<sp/>bold));</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(7));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(8));</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>D&gt;<sp/>cdold;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>make_unique&lt;const<sp/>D&gt;(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cvd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(cvd);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;Dconst&gt;</ref><sp/>&gt;<sp/>vcd;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(7));</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(8));</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>D&gt;<sp/>cdold;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(1,<sp/>make_unique&lt;const<sp/>D&gt;(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vcd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(vcd);</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(7,<sp/>9);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4,<sp/>6,<sp/>1,<sp/>3,<sp/>7,<sp/>9);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.setStore<sp/>(vb.getConstStore());</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>make_comp_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(1));</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>make_comp_unique&lt;D&gt;(3),<sp/>dold);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(2));</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>make_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>make_unique&lt;B&gt;(4),<sp/>bold));</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(1));</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.push_back<sp/>(make_unique&lt;D&gt;(2));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.swapElement<sp/>(0,<sp/>make_unique&lt;D&gt;(3),<sp/>dold);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(0,<sp/>make_unique&lt;D&gt;(4),<sp/>dold));</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2057"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swapElement<sp/>with<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapelement_iter()</highlight></codeline>
<codeline lineno="2063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/>make_comp&lt;B&gt;(3);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore(bnew);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vb[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(bold-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(bold);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>bold;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4));</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(5));</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/>make_comp&lt;D&gt;(6);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>releasePrivateStore(dnew);</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(vd[1]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(dold-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(dold);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>dold;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd_b<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd_b.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd_b.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(10),<sp/>bold);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>cdold;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(cvd.<ref refid="de/db1/classConstDataVector_1a1eebe42ee99ce34ab685d69a53b65dc0" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cvd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cdold;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(cvd);</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;Dconst&gt;</ref><sp/>&gt;<sp/>vcd;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(7));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(8));</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vcd.<ref refid="de/db1/classConstDataVector_1a1eebe42ee99ce34ab685d69a53b65dc0" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vcd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cdold;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(vcd);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(7,<sp/>9);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4,<sp/>6,<sp/>1,<sp/>3,<sp/>7,<sp/>9);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.setStore<sp/>(vb.getConstStore());</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/>make_comp&lt;B&gt;(3);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/>make_comp&lt;D&gt;(3);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1));</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2));</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bold;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>bnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(3);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb1.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>bnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(4);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>bnew,<sp/>bold);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(2));</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dold;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>dnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(3);</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd1.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/>dnew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(4);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>vd2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>dnew,<sp/>dold);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swapElement<sp/>with<sp/>iterator<sp/>and<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapelement_iter_unique()</highlight></codeline>
<codeline lineno="2209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="2211"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(2));</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_comp_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>releasePrivateStore<sp/>(static_cast&lt;B*&gt;(vb[1]));</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vb[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(bold-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(bold);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(4));</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(5));</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_comp_unique&lt;D&gt;(6),<sp/>dold);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>releasePrivateStore<sp/>(static_cast&lt;D*&gt;<sp/>(vd[1]));</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vd[1]-&gt;x<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(dold-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(dold);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd_b<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd_b.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd_b.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_unique&lt;B&gt;(10),<sp/>bold));</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(10);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cvd;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(7));</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(8));</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>D&gt;<sp/>cdold;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cvd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(cvd.<ref refid="de/db1/classConstDataVector_1a1eebe42ee99ce34ab685d69a53b65dc0" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_unique&lt;const<sp/>D&gt;(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cvd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(cvd);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">test2_maybeconst&lt;D&gt;::type</ref><sp/>Dconst;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;Dconst&gt;</ref><sp/>&gt;<sp/>vcd;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(7));</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(8));</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;const<sp/>D&gt;<sp/>cdold;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vcd.<ref refid="de/db1/classConstDataVector_1a63dd71d02bdefb4cf4501b8d788998bf" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vcd.<ref refid="de/db1/classConstDataVector_1a1eebe42ee99ce34ab685d69a53b65dc0" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_unique&lt;const<sp/>D&gt;(9),<sp/>cdold);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(vcd[1]-&gt;x<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(cdold-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(vcd);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(7,<sp/>9);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4,<sp/>6,<sp/>1,<sp/>3,<sp/>7,<sp/>9);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_b;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vb,<sp/>store_b);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.setStore<sp/>(vb.getConstStore());</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_comp_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store_d;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(1));</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(vd,<sp/>store_d);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_comp_unique&lt;D&gt;(3),<sp/>dold);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(1));</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;B&gt;(2));</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;B&gt;<sp/>bold;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>vb1.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb1.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_unique&lt;B&gt;(3),<sp/>bold);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vb1);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vb2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_unique&lt;B&gt;(4),<sp/>bold));</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(make_unique&lt;D&gt;(1));</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.push_back<sp/>(make_unique&lt;D&gt;(2));</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;D&gt;<sp/>dold;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1.swapElement<sp/>(vd1.begin(),<sp/>make_unique&lt;D&gt;(3),<sp/>dold);</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(vd1);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd2.<ref refid="d0/d4d/classDataVector_1a9a0337f2ef172c59b899e4aaf816891d" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref><sp/>(vd2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_unique&lt;D&gt;(4),<sp/>dold));</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2347"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resize1()</highlight></codeline>
<codeline lineno="2353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>v2.resize<sp/>(1);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/>v1.resize<sp/>(1);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/>v1.resize<sp/>(3);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resize2()</highlight></codeline>
<codeline lineno="2381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>test2_resize1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(t1);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(t2);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>setaux(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref>(1);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>=<sp/>v3;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>v4.resize(0);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t3);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(&amp;*v3.<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>());</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref><sp/>(100);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a15eb577a199c519cb5126233b04cc429" kindref="member" tooltip="Resizes the collection to the specified number of elements.">resize</ref><sp/>(0);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resize()</highlight></codeline>
<codeline lineno="2434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/>test2_resize2&lt;DataVector&lt;B&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>test2_resize2&lt;DataVector&lt;D&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>test2_resize1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/>test2_resize1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="2439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>pop_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_back1()</highlight></codeline>
<codeline lineno="2445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>v2.pop_back();</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/>v1.pop_back();</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_back2()</highlight></codeline>
<codeline lineno="2465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(t1);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(t2);</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>=<sp/>v3;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>v4.pop_back();</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t1);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t1);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/>assert<sp/>(v3.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(&amp;*v3[0]);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_pop_back()</highlight></codeline>
<codeline lineno="2514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/>test2_pop_back2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>test2_pop_back2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>test2_pop_back1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd<sp/><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>d<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1);</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>vd.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(d);</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a52881ff983e0d0dd21b23c4d03824b68" kindref="member" tooltip="Remove the last element from the collection.">pop_back</ref>();</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;B&gt;::flag</ref>())</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(d);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>begin,<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end1()</highlight></codeline>
<codeline lineno="2544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.end()<sp/>-<sp/>v1.begin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::value_type<sp/>tt<sp/>=<sp/>*v1.begin();</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.begin()[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>*v1.begin()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5));</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>*v2.begin()<sp/>=<sp/>*v1.begin();</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,2)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>*(v1.end()-1)<sp/>=<sp/>v2.end()[-1];</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[1]-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,5)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>v2.begin()[0]<sp/>=<sp/>v2.begin()[1];</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.begin()[0]<sp/>=<sp/>v1.begin()[1];</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>creating<sp/>a<sp/>const_iterator<sp/>from<sp/>an<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::const_iterator<sp/>ci<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/>myassert<sp/>((*ci)-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>comparing<sp/>iterators<sp/>and<sp/>const_iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i<sp/>=<sp/>v2.begin();</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>==<sp/>ci);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/>myassert<sp/>(ci<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(i<sp/>!=<sp/>ci));</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(ci<sp/>!=<sp/>i));</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(i<sp/>&lt;<sp/>ci));</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(ci<sp/>&lt;<sp/>i));</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(i<sp/>&gt;<sp/>ci));</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>myassert<sp/>(!<sp/>(ci<sp/>&gt;<sp/>i));</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>&lt;=<sp/>ci);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>myassert<sp/>(ci<sp/>&lt;=<sp/>i);</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>&gt;=<sp/>ci);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>myassert<sp/>(ci<sp/>&gt;=<sp/>i);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>myassert<sp/>(ci<sp/>-<sp/>i<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>myassert<sp/>(i<sp/>-<sp/>ci<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/>std::sort<sp/>(v2.begin(),<sp/>v2.end());</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end2()</highlight></codeline>
<codeline lineno="2614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t1);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t2);</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t1);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1)<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>v4.resize(2);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/>*v4.begin()<sp/>=<sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>*(v4.end()-1)<sp/>=<sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>());</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1)<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_begin_end()</highlight></codeline>
<codeline lineno="2674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>test2_begin_end2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>test2_begin_end2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>test2_begin_end1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd<sp/>(1);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>*vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>front,<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back1()</highlight></codeline>
<codeline lineno="2696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::value_type<sp/>tt<sp/>=<sp/>v1.front();</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.back()-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>v1.front()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5));</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/>v2.front()<sp/>=<sp/>v1.front();</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,2)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>v1.back()<sp/>=<sp/>v2.back();</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[1]-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3,5)<sp/><sp/>(3,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/>v2.front()<sp/>=<sp/>v2.back();</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.front()<sp/>=<sp/>v1.back();</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back2()</highlight></codeline>
<codeline lineno="2740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t1);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t2);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t1);</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>v4.resize(2);</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/>v4.front()<sp/>=<sp/>v3.<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>();</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/>v4.back()<sp/>=<sp/>v3.<ref refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>();</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1aee6b47538e67f772011367fccbf0e83f" kindref="member" tooltip="Access the last element in the collection as an rvalue.">back</ref>()<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_front_back()</highlight></codeline>
<codeline lineno="2799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>test2_front_back2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>test2_front_back2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>test2_front_back1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd<sp/>(1);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1ad60c996521bcea5c5a57bc078b08b876" kindref="member" tooltip="Access the first element in the collection as an rvalue.">front</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>rbegin,<sp/>rend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend1()</highlight></codeline>
<codeline lineno="2821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.rend()<sp/>-<sp/>v1.rbegin()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::value_type<sp/>tt<sp/>=<sp/>*v1.rbegin();</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/>myassert<sp/>(tt-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.rbegin()[1]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/>*v1.rbegin()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5));</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1,3)<sp/>(4,5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/>*v2.rbegin()<sp/>=<sp/>*v1.rbegin();</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1,3)<sp/><sp/>(4,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/>*(v1.rend()-1)<sp/>=<sp/>v2.rend()[-1];</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/>check_dtor_log(1);</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4,3)<sp/><sp/>(4,3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>v2.rbegin()[0]<sp/>=<sp/>v2.rbegin()[1];</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4,3)<sp/><sp/>(4,4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.rbegin()[0]<sp/>=<sp/>v1.rbegin()[1];</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>creating<sp/>a<sp/>const_iterator<sp/>from<sp/>an<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::const_reverse_iterator<sp/>ci<sp/>=<sp/>v2.rbegin();</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>myassert<sp/>((*ci)-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>std::sort<sp/>(v2.begin(),<sp/>v2.end());</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend2()</highlight></codeline>
<codeline lineno="2878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t1);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/>v3.<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(t2);</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t2);</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()-1)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t1);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()-1)<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>v4.resize(2);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>*v4.rbegin()<sp/>=<sp/>*(v3.<ref refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()-1);</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>*(v4.rend()-1)<sp/>=<sp/>*(v3.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>());</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>*v3.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>*(v3.<ref refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()-1)<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rbegin_rend()</highlight></codeline>
<codeline lineno="2938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/>test2_rbegin_rend2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/>test2_rbegin_rend2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>test2_rbegin_rend1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd<sp/>(1);</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>*vb.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>()<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="2954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>erase(it,<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_range1()</highlight></codeline>
<codeline lineno="2960"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i1<sp/>=<sp/>v.erase<sp/>(v.begin()+3,<sp/>v.end()-3);</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i1)-&gt;x<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(3,<sp/>4,<sp/>5,<sp/>6);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>myassert<sp/>(v[2]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/>myassert<sp/>(v[3]-&gt;x<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i2<sp/>=<sp/>v2.erase<sp/>(v2.begin()+2,<sp/>v2.end()-2);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>myassert<sp/>((*i2)-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[2]-&gt;x<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DO_REMOVE_DUPLICATES</highlight></codeline>
<codeline lineno="2986"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(t);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.erase<sp/>(v3.begin(),<sp/>v3.begin()+2);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/>check_dtor_log(2);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2998"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_range2()</highlight></codeline>
<codeline lineno="3001"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/>std::vector&lt;T*&gt;<sp/>vv4;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store4;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>vv4.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>v4.push_back<sp/>(vv4.back());</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/>setaux(v4,<sp/>store4);</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v4);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/>checkaux(v4);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/>v4.erase<sp/>(v4.begin()+3,<sp/>v4.end()-3);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v4);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>checkaux(v4);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=3;<sp/>i&lt;7;<sp/>i++)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(vv4[i]);</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v5<sp/>=<sp/>v4;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/>v5.erase<sp/>(v5.begin()+1,<sp/>v5.end()-1);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v4);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/>checkaux(v4);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/>v4.setStore<sp/>(v4.getConstStore());</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/>v4.erase<sp/>(v4.begin()+1,<sp/>v4.end()-1);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>vv4.size();<sp/>++i)</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vv4[i];</highlight></codeline>
<codeline lineno="3040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_range()</highlight></codeline>
<codeline lineno="3043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>test2_erase_range2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>test2_erase_range2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>test2_erase_range1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>erase(it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_single1()</highlight></codeline>
<codeline lineno="3054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>v1.erase<sp/>(v1.begin());</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/>v2.erase<sp/>(v2.begin());</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_single2()</highlight></codeline>
<codeline lineno="3077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/>v3.erase<sp/>(v3.begin());</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR(t1);</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v5<sp/>=<sp/>v3;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>v5.erase<sp/>(v5.begin());</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.erase<sp/>(v3.begin());</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_erase_single()</highlight></codeline>
<codeline lineno="3116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>test2_erase_single2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/>test2_erase_single2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/>test2_erase_single1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>operator=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_assign1()</highlight></codeline>
<codeline lineno="3127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>v2;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="3158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_assign2()</highlight></codeline>
<codeline lineno="3161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store4;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>setaux<sp/>(v4,<sp/>store4);</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>v3<sp/>=<sp/>v4;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t1);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t2);</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/>myassert<sp/>(!v3.hasStore());</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(auxdata)<sp/>myassert<sp/>(v4.hasStore());</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_operator_assign()</highlight></codeline>
<codeline lineno="3189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>test2_operator_assign2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>test2_operator_assign2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>test2_operator_assign1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd1;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>vd1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb1;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>vb1<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb1.<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>myassert<sp/>(vb1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vd1_b<sp/>=<sp/>vd1;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/>vd1_b<sp/>=<sp/>vb1;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insert(it,<sp/>val)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_value1()</highlight></codeline>
<codeline lineno="3217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i1<sp/>=<sp/>v1.insert<sp/>(v1.begin()+1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*i1)-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1[2]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i2<sp/>=<sp/>v2.emplace<sp/>(v2.begin()+1,<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*i2)-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3,<sp/>2);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="3241"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_unique&lt;T&gt;(11));</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_unique&lt;T&gt;(12));</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>i3<sp/>=<sp/>v3.insert<sp/>(v3.begin()+1,<sp/>make_unique&lt;T&gt;(13));</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>((*i3)-&gt;x<sp/>==<sp/>13);</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3[0]-&gt;x<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3[1]-&gt;x<sp/>==<sp/>13);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v3[2]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(11,<sp/>13,<sp/>12);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/>v4.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(21));</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/>v4.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(22));</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v4.insert<sp/>(v4.begin()+1,<sp/>make_unique&lt;T&gt;(23)));</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(23);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3264"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_value2()</highlight></codeline>
<codeline lineno="3267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>v1.insert<sp/>(v1.begin()+1,<sp/>make_comp&lt;T&gt;(3));</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>assert<sp/>(v1.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/>v2.insert<sp/>(v2.begin()+1,<sp/>make_comp&lt;T&gt;(5));</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/>v1.setStore<sp/>(v1.getConstStore());</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.insert<sp/>(v1.begin()+1,<sp/>make_comp&lt;T&gt;(4));</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="3300"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_unique&lt;T&gt;(41));</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_unique&lt;T&gt;(42));</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.insert<sp/>(v3.begin()+1,<sp/>make_comp_unique&lt;T&gt;(43));</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3315"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_value()</highlight></codeline>
<codeline lineno="3318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>test2_insert_value2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/>test2_insert_value2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/>test2_insert_value1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,<sp/></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1)));</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="3329"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>,<sp/></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>make_unique&lt;D&gt;(1)));</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3332"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>vd.insert<sp/>(vd.begin(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="3333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>insert(it,<sp/>It,<sp/>It)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_range1()</highlight></codeline>
<codeline lineno="3339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>tt[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert<sp/>(v.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>tt[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert<sp/>(v.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="3365"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>v.insert<sp/>(v.begin(),<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)});</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3375"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_insert_range()</highlight></codeline>
<codeline lineno="3378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/>test2_insert_range1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/>setaux<sp/>(vd,<sp/>store);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>tt[]<sp/>=<sp/>{make_comp&lt;D&gt;(1),<sp/>make_comp&lt;D&gt;(2)};</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/>vd.insert<sp/>(vd.begin(),<sp/>tt,<sp/>tt+2);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd2<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/>vd2.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vd2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_comp&lt;D&gt;(5));</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vd);</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>checkaux(vd);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2<sp/>=<sp/>vb;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a4bfe807fd5835ae4e484eb505bb03533" kindref="member" tooltip="Add a new element to the collection.">insert</ref><sp/>(vb2.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>()+1,<sp/>make_comp&lt;B&gt;(5));</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>CHECK_INDICES(vb);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>checkaux(vb);</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>*<sp/>tt2[]<sp/>=<sp/>{make_comp&lt;D&gt;(3),<sp/>make_comp&lt;D&gt;(4)};</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/>vd.setStore<sp/>(vd.getConstStore());</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>vd.insert<sp/>(vd.begin(),<sp/>tt2,<sp/>tt2+2);</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;D&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>clear()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_clear1()</highlight></codeline>
<codeline lineno="3426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/>v1.clear();</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/>v2.clear();</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>v2.clear(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>v2.clear(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2.ownPolicy()<sp/>==<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(1,<sp/>2);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_clear2()</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>test2_clear1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>setaux<sp/>(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v5<sp/>=<sp/>v3;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>v5.clear();</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/>v3.clear();</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t1);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t2);</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>v3.push_back(t1);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(t1);</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>auxdata<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>();</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>v3.setStore((<ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound" tooltip="Interface for const operations on an auxiliary store.">SG::IConstAuxStore</ref>*)0);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v3.trackIndices());</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>v3.clear<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>!v3.trackIndices());</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>v3.clear<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>v3.trackIndices());</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>v3.clear<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/><ref refid="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" kindref="member" tooltip="Never track indices, regardless of the setting of the ownership policy.">SG::NEVER_TRACK_INDICES</ref>);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/>myassert<sp/>(!auxdata<sp/>||<sp/>!v3.trackIndices());</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store4;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>setaux<sp/>(v4,<sp/>store4);</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>v4.setStore<sp/>(v4.getConstStore());</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/>v4.clear();</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_clear()</highlight></codeline>
<codeline lineno="3510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/>test2_clear2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>test2_clear2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>test2_clear1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>test2_clear1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>swap()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swap1()</highlight></codeline>
<codeline lineno="3521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.swap<sp/>(v2);</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v2[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="3566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swap()</highlight></codeline>
<codeline lineno="3569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>test2_swap1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>test2_swap1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>vb2;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a53d2dcc591d07cc817b06d2523442432" kindref="member" tooltip="Swap this collection with another.">swap</ref>(vb2);</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/>vb2.<ref refid="d0/d4d/classDataVector_1a53d2dcc591d07cc817b06d2523442432" kindref="member" tooltip="Swap this collection with another.">swap</ref>(vb);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(vb,<sp/>vb2);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref><sp/>(vb2,<sp/>vb);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assign1()</highlight></codeline>
<codeline lineno="3617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assign<sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log(0);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)};</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assign<sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="3642"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assign<sp/>({</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2)});</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log(0);</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/>check_dtor_log(1,2);</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(10));</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(11),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(12)};</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log(10);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[0]-&gt;x<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/>check_dtor_log(11,<sp/>12);</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3666"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="3668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assign2()</highlight></codeline>
<codeline lineno="3671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/>test2_assign1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store3;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1);</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>T*<sp/>t2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t1);</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(t2);</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>setaux(v3,<sp/>store3);</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v4;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/>v3.assign<sp/>(v4.begin(),<sp/>v4.end());</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t1);</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t2);</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>assert<sp/>(v3.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t1;</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t2;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/>check_dtor_log(1,<sp/>2);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/>T*<sp/>vv[2]<sp/>=<sp/>{make_comp&lt;T&gt;(3),<sp/>make_comp&lt;T&gt;(4)};</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/>v3.assign<sp/>(vv,<sp/>vv+2);</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/>assert<sp/>(v3.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>checkaux(v3);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>T*<sp/>vv2[2]<sp/>=<sp/>{make_comp&lt;T&gt;(5),<sp/>make_comp&lt;T&gt;(6)};</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>v3.setStore<sp/>(v3.getConstStore());</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.assign<sp/>(vv2,<sp/>vv2+2);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vv[0];</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>vv[1];</highlight></codeline>
<codeline lineno="3714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assign()</highlight></codeline>
<codeline lineno="3717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/>test2_assign2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>test2_assign2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>test2_assign1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/>test2_assign1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>vd;</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>*<sp/>t[]<sp/>=<sp/>{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(1),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/db3/structB" kindref="compound">B</ref>(2)};</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>vb.<ref refid="d0/d4d/classDataVector_1a39b727c555a667c66094016314050332" kindref="member" tooltip="Assign from iterators.">assign</ref><sp/>(t,<sp/>t+2);</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_relops1()</highlight></codeline>
<codeline lineno="3739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v1);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>(v1);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>==<sp/>v2);</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>==<sp/>v3));</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>!=<sp/>v3);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>!=<sp/>v2));</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;<sp/>v3);</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>&lt;<sp/>v2));</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3<sp/>&gt;<sp/>v1);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v2<sp/>&gt;<sp/>v1));</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;=<sp/>v3);</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>myassert<sp/>(v1<sp/>&lt;=<sp/>v2);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v3<sp/>&lt;=<sp/>v1));</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>myassert<sp/>(v3<sp/>&gt;=<sp/>v1);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/>myassert<sp/>(v2<sp/>&gt;=<sp/>v1);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>myassert<sp/>(!(v1<sp/>&gt;=<sp/>v3));</highlight></codeline>
<codeline lineno="3768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_relops()</highlight></codeline>
<codeline lineno="3771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/>test2_relops1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/>test2_relops1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/>test2_relops1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/>test2_relops1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="3776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/dd2/structComp" kindref="compound">Comp</ref></highlight></codeline>
<codeline lineno="3781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3783"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*b<sp/>&lt;<sp/>*a;<sp/>}</highlight></codeline>
<codeline lineno="3784"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort1_prepare1<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::remove_const&lt;typename<sp/>DV::base_value_type&gt;::type<sp/>T;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>T*<sp/>tmp[<ref refid="da/deb/structN" kindref="compound">N</ref>];</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="da/deb/structN" kindref="compound">N</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i);</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/>std::sort<sp/>(tmp,<sp/>tmp+N);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp[i]-&gt;x<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(tmp[N-1-i]);</highlight></codeline>
<codeline lineno="3799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort1()</highlight></codeline>
<codeline lineno="3802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.sort();<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sort();</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.sort();</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v2.begin(),<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v2.rbegin(),<sp/>v2.rend());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v3.rbegin(),<sp/>v3.rend());</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v2.begin(),<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v2.rbegin(),<sp/>v2.rend());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v3.rbegin(),<sp/>v3.rend());</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v2.begin(),<sp/>v2.begin()+N/2,<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v.begin(),<sp/>v.begin()+N/2,<sp/>v.end());</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v3.begin(),<sp/>v3.begin()+N/2,<sp/>v3.end());</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N/2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v2.rbegin(),<sp/>v2.rend()-N/2,<sp/>v2.rend());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v.rbegin(),<sp/>v.rend()-N/2,<sp/>v.rend());</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v3.rbegin(),<sp/>v3.rend()-N/2,<sp/>v3.rend());</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=N/2;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.sort(<ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/>v.sort(<ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.sort(<ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v3.begin(),<sp/>v3.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v3.begin(),<sp/>v3.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_sort<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v2.begin(),<sp/>v2.begin()+N/2,<sp/>v2.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v.begin(),<sp/>v.begin()+N/2,<sp/>v.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v3.begin(),<sp/>v3.begin()+N/2,<sp/>v3.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N/2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v2.rbegin(),<sp/>v2.rend()-N/2,<sp/>v2.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v.rbegin(),<sp/>v.rend()-N/2,<sp/>v.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort<sp/>(v3.rbegin(),<sp/>v3.rend()-N/2,<sp/>v3.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=N/2;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.sort();</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_sort()</highlight></codeline>
<codeline lineno="4169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>test2_sort1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/>test2_sort1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>test2_sort1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>test2_sort1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_call_inplace_merge<sp/>(Iterator<sp/>beg,<sp/>Iterator<sp/>end)</highlight></codeline>
<codeline lineno="4178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>std::sort<sp/>(beg,<sp/>beg+4);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>std::sort<sp/>(beg+4,<sp/>end);</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>std::inplace_merge<sp/>(beg,<sp/>beg+4,<sp/>end);</highlight></codeline>
<codeline lineno="4182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Compare&gt;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_call_inplace_merge<sp/>(Iterator<sp/>beg,<sp/>Iterator<sp/>end,<sp/>Compare<sp/>comp)</highlight></codeline>
<codeline lineno="4185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>std::sort<sp/>(beg,<sp/>beg+4,<sp/>comp);</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>std::sort<sp/>(beg+4,<sp/>end,<sp/>comp);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/>std::inplace_merge<sp/>(beg,<sp/>beg+4,<sp/>end,<sp/>comp);</highlight></codeline>
<codeline lineno="4189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_inplace_merge1()</highlight></codeline>
<codeline lineno="4192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v2.begin(),<sp/>v2.end());</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v2.rbegin(),<sp/>v2.rend());</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v3);</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v3.rbegin(),<sp/>v3.rend());</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v3.begin(),<sp/>v3.end(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/><ref refid="d9/dd2/structComp" kindref="compound">Comp&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v2[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v3[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_sort1_prepare1&lt;DV,<sp/>N&gt;<sp/>(v);</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test2_call_inplace_merge<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.sort();</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_inplace_merge()</highlight></codeline>
<codeline lineno="4316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/>test2_inplace_merge1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/>test2_inplace_merge1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/>test2_inplace_merge1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>test2_inplace_merge1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb2<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,<sp/>It<sp/>beg,<sp/>It<sp/>end)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v.front()-&gt;x;</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>v.back()-&gt;x;</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(beg,<sp/>end);</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>==<sp/>v.back()-&gt;x);</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/>myassert<sp/>(b<sp/>==<sp/>v.front()-&gt;x);</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb1()</highlight></codeline>
<codeline lineno="4337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>v.end()-1);</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>v.end()-1);</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>v2.end()-1);</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>v2.end()-1);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(100));</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v.begin()+1,<sp/>v3.begin());</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>100);</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/>assert<sp/>(v3.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb4(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="4373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb4(<ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>*)</highlight></codeline>
<codeline lineno="4377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v1);</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>1<sp/>2<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"></highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(11));</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(12));</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/>setaux<sp/>(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v2);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ityp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;xint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>ftyp<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>().getAuxID&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;<sp/>(</highlight><highlight class="stringliteral">&quot;xfloat&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/>v1[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin()+1,<sp/>v2.begin()+1);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/>assert<sp/>(v2.template<sp/>getData&lt;int&gt;<sp/>(ityp,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/>assert<sp/>(v2.template<sp/>getData&lt;float&gt;<sp/>(ftyp,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[1]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>1<sp/>12<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"></highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin()+0,<sp/>v2.begin()+1);</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>assert<sp/>(v1.template<sp/>getData&lt;int&gt;<sp/>(ityp,<sp/>0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>assert<sp/>(v1.template<sp/>getData&lt;float&gt;<sp/>(ftyp,<sp/>0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>x<sp/>12<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::template<sp/>Accessor&lt;int&gt;<sp/>xinta<sp/>(</highlight><highlight class="stringliteral">&quot;xinta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::template<sp/>Accessor&lt;int&gt;<sp/>xintb<sp/>(</highlight><highlight class="stringliteral">&quot;xintb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>xinta(*v1[1])<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin()+1,<sp/>v2.begin()+1);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[1]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/>assert<sp/>(xinta(*v1[1])<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>assert<sp/>(xinta(*v2[1])<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>x<sp/>1<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>xintb(*v2[1])<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin()+1,<sp/>v2.begin()+1);</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[1]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/>assert<sp/>(xinta(*v1[1])<sp/>==<sp/>10);</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>assert<sp/>(xinta(*v2[1])<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/>assert<sp/>(xintb(*v1[1])<sp/>==<sp/>20);</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/>assert<sp/>(xintb(*v2[1])<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>x<sp/>12<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v3.begin()+1,<sp/>v3.begin()+2);</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/>v1.setStore<sp/>(v1.getConstStore());</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/>DV::iter_swap<sp/>(v1.begin(),<sp/>v1.begin()+1);</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="4474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb3()</highlight></codeline>
<codeline lineno="4477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb4&lt;DV&gt;((T*)0);</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v1);</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>1<sp/>2<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin(),<sp/>v1.begin()+2);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>3<sp/>2<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin(),<sp/>v1.end()-1);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>1<sp/>2<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(11));</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(12));</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/>setaux<sp/>(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v2);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>11<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"></highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.begin(),<sp/>v2.begin());</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>11<sp/>2<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>1<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v1.end()-1,<sp/>v2.end()-1);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v1:<sp/>11<sp/>2<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>v2:<sp/>1<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap_memb()</highlight></codeline>
<codeline lineno="4538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb3&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb3&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>b<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb2<sp/>(v,<sp/>v.begin(),<sp/>v.end()-1);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap_memb2<sp/>(b,<sp/>b.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>b.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1);</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>It&gt;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap2<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,<sp/>It<sp/>beg,<sp/>It<sp/>end)</highlight></codeline>
<codeline lineno="4561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v.front()-&gt;x;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>v.back()-&gt;x;</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(beg,<sp/>end);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/>myassert<sp/>(a<sp/>==<sp/>v.back()-&gt;x);</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>myassert<sp/>(b<sp/>==<sp/>v.front()-&gt;x);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap1()</highlight></codeline>
<codeline lineno="4572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>v.end()-1);</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.rbegin(),<sp/>v.rend()-1);</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(v);</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>v2.end()-1);</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.rbegin(),<sp/>v2.rend()-1);</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="d1/db3/classdv__test__err" kindref="compound">dv_test_err</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"></highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(100));</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(v.begin()+1,<sp/>v3.begin());</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/>assert<sp/>(v[1]-&gt;x<sp/>==<sp/>100);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>assert<sp/>(v3.front()-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap3()</highlight></codeline>
<codeline lineno="4608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v1);</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(v1.begin(),<sp/>v1.begin()+2);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(v1.rbegin(),<sp/>v1.rend()-1);</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(11));</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(12));</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/>setaux<sp/>(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/>CHECK_INDICES<sp/>(v2);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(v1.begin(),<sp/>v2.begin());</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]-&gt;x<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/>std::iter_swap<sp/>(v1.rbegin(),<sp/>v2.rbegin());</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[2]-&gt;x<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/>DV::iter_swap<sp/>(v3.begin(),<sp/>v3.begin()+1);</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>v1.setStore<sp/>(v1.getConstStore());</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>std::iter_swap<sp/>(v1.begin(),<sp/>v1.begin()+1);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="4672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_iter_swap()</highlight></codeline>
<codeline lineno="4675"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>test2_iter_swap3&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>test2_iter_swap3&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/>test2_iter_swap1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;10;<sp/>i++)</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(i));</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref>&amp;<sp/>b<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>test2_iter_swap2<sp/>(v,<sp/>v.begin(),<sp/>v.end()-1);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(b,<sp/>b.<ref refid="d0/d4d/classDataVector_1a66c78bd83eeb15e5616a898557598b36" kindref="member" tooltip="Return a const_iterator pointing at the beginning of the collection.">begin</ref>(),<sp/>b.<ref refid="d0/d4d/classDataVector_1a1d5dd5515d2c9bc20f417830f5d05b5e" kindref="member" tooltip="Return a const_iterator pointing past the end of the collection.">end</ref>()-1);</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_iter_swap2<sp/>(b,<sp/>b.<ref refid="d0/d4d/classDataVector_1a71dc1d0d8666c71cdbd98cf12ed58832" kindref="member" tooltip="Return a const_reverse_iterator pointing past the end of the collection.">rbegin</ref>(),<sp/>b.<ref refid="d0/d4d/classDataVector_1ae09c48f39c028009bf8dbc0bc9340e80" kindref="member" tooltip="Return a const_reverse_iterator pointing at the beginning of the collection.">rend</ref>()-1);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="df/dde/classSG_1_1ExcInsertionInBaseClass" kindref="compound" tooltip="Exception --- Attempted to do OP on a BASE base class of COMPLETE; can only be done...">SG::ExcInsertionInBaseClass</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/d97/structPred" kindref="compound">Pred</ref></highlight></codeline>
<codeline lineno="4706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><ref refid="df/d97/structPred" kindref="compound">Pred</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_v)<sp/>:<sp/>v<sp/>(the_v)<sp/>{}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4709"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>==<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_set_ownership<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testClearIndex)</highlight></codeline>
<codeline lineno="4714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/>v.clear<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="4717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_set_ownership<sp/>(<ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DV&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testClearIndex)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/>v.<ref refid="de/db1/classConstDataVector_1ae8944232be996809a74b641ac20e7aa2" kindref="member" tooltip="Erase all the elements in the collection.">clear</ref><sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_remove1<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testClearIndex)</highlight></codeline>
<codeline lineno="4726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_set_ownership<sp/>(v,<sp/>testClearIndex);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove<sp/>(v.begin(),<sp/>v.end(),<sp/>v[5]);</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-1;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[5]);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove<sp/>(v.begin(),<sp/>v.end()-1,<sp/>v[8]);</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>9)<sp/>++j;</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[9]);</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(9);</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_set_ownership<sp/>(v,<sp/>testClearIndex);</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-1;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[5]);</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove_if<sp/>(v.begin(),<sp/>v.end()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(9));</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>9)<sp/>++j;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[9]);</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(9);</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_set_ownership<sp/>(v,<sp/>testClearIndex);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove<sp/>(v.rbegin(),<sp/>v.rend(),<sp/>v[5]);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[5]);</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove<sp/>(v.rbegin(),<sp/>v.rend()-1,<sp/>v[8]);</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>8)<sp/>++j;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[8]);</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>test2_set_ownership<sp/>(v,<sp/>testClearIndex);</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>it<sp/>=<sp/></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::remove_if<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>N-1);</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[5]);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(5);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>std::remove_if<sp/>(v.rbegin(),<sp/>v.rend()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(8));</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>N-2);</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=2;<sp/>i&lt;N;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>8)<sp/>++j;</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testClearIndex)<sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR(v2[8]);</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(8);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_remove2<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testClearIndex)</highlight></codeline>
<codeline lineno="4909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/>test2_remove1&lt;DV&gt;<sp/>(testClearIndex);</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>std::remove<sp/>(v2.begin(),<sp/>v2.end(),<sp/>v2[5]);</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/>std::remove<sp/>(v1.begin(),<sp/>v1.end(),<sp/>v1[5]);</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,<sp/>j=0;<sp/>i<sp/>&lt;<sp/>N-1;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v1[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-1);</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>std::remove_if<sp/>(v2.begin(),<sp/>v2.end()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(3));</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"></highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>std::remove_if<sp/>(v1.begin(),<sp/>v1.end()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(3));</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0,<sp/>j=0;<sp/>i<sp/>&lt;<sp/>N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>3)<sp/>++j;</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v1[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-2);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-1);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>1<sp/>2<sp/>4<sp/>6<sp/>7<sp/>8<sp/>9<sp/>x<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/>std::remove<sp/>(v2.rbegin()+2,<sp/>v2.rend(),<sp/>v2[4]);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/>std::remove<sp/>(v1.rbegin()+2,<sp/>v1.rend(),<sp/>v1[4]);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1,<sp/>j=0;<sp/>i<sp/>&lt;<sp/>N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>3)<sp/>++j;</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>6)<sp/>++j;</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v1[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>0);</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-2);</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-1);</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>0<sp/>1<sp/>2<sp/>4<sp/>7<sp/>8<sp/>9<sp/>x<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>v2<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/>std::remove_if<sp/>(v2.rbegin()+2,<sp/>v2.rend()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(7));</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/>std::remove_if<sp/>(v1.rbegin()+2,<sp/>v1.rend()-1,<sp/><ref refid="df/d97/structPred" kindref="compound">Pred&lt;T&gt;</ref>(7));</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=2,<sp/>j=0;<sp/>i<sp/>&lt;<sp/>N-2;<sp/>i++,<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>3)<sp/>++j;</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>5)<sp/>++j;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>6)<sp/>++j;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>7)<sp/>++j;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v1[i]-&gt;x<sp/>==<sp/>j);</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/>assert<sp/>(v1[N-1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>1);</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-2);</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v1,<sp/>N-1);</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>x<sp/>0<sp/>1<sp/>2<sp/>4<sp/>8<sp/>9<sp/>x<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"></highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/>v1.setStore<sp/>(v1.getConstStore());</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>std::remove<sp/>(v1.begin(),<sp/>v1.end(),<sp/>v1[2]);</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="5010"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_remove()</highlight></codeline>
<codeline lineno="5013"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/>test2_remove2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/>test2_remove2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/>test2_remove2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/>test2_remove2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/>test2_remove1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/>test2_remove1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/daa/structBPred" kindref="compound">BPred</ref></highlight></codeline>
<codeline lineno="5024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5026"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>==<sp/>b-&gt;x;<sp/>}</highlight></codeline>
<codeline lineno="5027"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique1()</highlight></codeline>
<codeline lineno="5030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(v.back());</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=<sp/>std::unique<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[3]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[4]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[5]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>4);</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>5);</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3);</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.begin()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[4]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[5]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>4);</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>5);</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(v2[2]);</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(v2[5]);</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(v.back());</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"></highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i-1);</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i-2);</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>0);</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>1);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>(1,<sp/>3);</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"></highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(0));</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T*&gt;<sp/>v2<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(it<sp/>-<sp/>v.rbegin()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>2;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i-2);</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(v[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>0);</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/>checkauxZero<sp/>(v,<sp/>1);</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(v2[1]);</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(v2[4]);</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v2.size();<sp/>i++)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>v2[i];</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="d0/daa/structBPred" kindref="compound">BPred&lt;T&gt;</ref>());</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique2()</highlight></codeline>
<codeline lineno="5209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/>test2_unique1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="5211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_unique()</highlight></codeline>
<codeline lineno="5214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/>test2_unique2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/>test2_unique2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reverse()</highlight></codeline>
<codeline lineno="5221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=5;</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v2.begin(),<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>N-1-i);</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v2.rbegin(),<sp/>v2.rend());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/>std::reverse<sp/>(v3.rbegin(),<sp/>v3.rend());</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::reverse<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_reverse()</highlight></codeline>
<codeline lineno="5273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/>test2_reverse&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/>test2_reverse&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/>test2_reverse&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/>test2_reverse&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rotate()</highlight></codeline>
<codeline lineno="5283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=5;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v2.begin(),<sp/>v2.begin()+2,<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v.begin(),<sp/>v.begin()+2,<sp/>v.end());</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>(i+2)%5);</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v2.rbegin(),<sp/>v2.rbegin()+2,<sp/>v2.rend());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v.rbegin(),<sp/>v.rbegin()+2,<sp/>v.rend());</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v3.begin(),<sp/>v3.begin()+2,<sp/>v3.end());</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::rotate<sp/>(v3.rbegin(),<sp/>v3.rbegin()+2,<sp/>v3.rend());</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::rotate<sp/>(v.begin(),<sp/>v.begin()+2,<sp/>v.end());</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_rotate()</highlight></codeline>
<codeline lineno="5334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/>test2_rotate&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/>test2_rotate&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/>test2_rotate&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/>test2_rotate&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_random_shuffle()</highlight></codeline>
<codeline lineno="5344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=5;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end());<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.rbegin(),<sp/>v.rend());</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.rbegin(),<sp/>v3.rend());</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp1[N]<sp/>=<sp/>{1,2,3,4,0};</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp2[N]<sp/>=<sp/>{0,2,1,3,4};</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/>stlrand.seed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end(),<sp/>stlrand2);<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>exp1[i]);</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/>stlrand2);<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.rbegin(),<sp/>v.rend(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>exp2[i]);</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="5427"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp1[N]<sp/>=<sp/>{1,2,3,4,0};</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exp2[N]<sp/>=<sp/>{0,2,1,3,4};</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/>stlurand.seed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(make_unique&lt;T&gt;(i));</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v2.begin(),<sp/>v2.end(),<sp/>stlurand2);<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlurand);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>exp1[i]);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/>stlurand2);<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v.rbegin(),<sp/>v.rend(),<sp/>stlurand);</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>==<sp/>exp2[i]);</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"></highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_unique&lt;T&gt;(i));</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlurand);</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/>stlurand);</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"></highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlurand);</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5477"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_random_shuffle()</highlight></codeline>
<codeline lineno="5480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/>test2_random_shuffle&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/>test2_random_shuffle&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/>test2_random_shuffle&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/>test2_random_shuffle&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"></highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/dba/structPPred" kindref="compound">PPred</ref></highlight></codeline>
<codeline lineno="5490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><ref refid="db/dba/structPPred" kindref="compound">PPred</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>the_v)<sp/>:<sp/>v<sp/>(the_v)<sp/>{}</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5493"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;x<sp/>&lt;<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_partition()</highlight></codeline>
<codeline lineno="5498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>stlrand.seed<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partition<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partition<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>it-v.begin();<sp/>i++)</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=it-v.begin();<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partition<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>rit<sp/>=</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partition<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>rit-v.rbegin();<sp/>i++)</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1-i]-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=rit-v.rbegin();<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1-i]-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partition<sp/>(v3.begin(),<sp/>v3.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partition<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::partition<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"></highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/>stlrand.seed<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v2.begin(),<sp/>v2.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v.begin(),<sp/>v.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>it-v.begin();<sp/>i++)</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=it-v.begin();<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[i]-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v.begin(),<sp/>v.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v2.begin(),<sp/>v2.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v2.rbegin(),<sp/>v2.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::reverse_iterator<sp/>rit<sp/>=</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v.rbegin(),<sp/>v.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>rit-v.rbegin();<sp/>i++)</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1-i]-&gt;x<sp/>&lt;<sp/>5);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=rit-v.rbegin();<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myassert<sp/>(v[N-1-i]-&gt;x<sp/>&gt;=<sp/>5);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v3.begin(),<sp/>v3.end(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(v3.begin(),<sp/>v3.end(),<sp/>stlrand2);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stable_partition<sp/>(v3.rbegin(),<sp/>v3.rend(),<sp/><ref refid="db/dba/structPPred" kindref="compound">PPred&lt;T&gt;</ref>(5));<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>this<sp/>doesn&apos;t<sp/>affect<sp/>v&apos;s<sp/>auxdata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_partition()</highlight></codeline>
<codeline lineno="5613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/>test2_partition&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/>test2_partition&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/>test2_partition&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/>test2_partition&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_asdatavector()</highlight></codeline>
<codeline lineno="5623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DataVector&lt;D&gt;</ref><sp/>&gt;<sp/>cv;</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/>cv.<ref refid="de/db1/classConstDataVector_1a83ff6832bd6d52468225dca32c516121" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref><sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1));</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref>*<sp/>dv<sp/>=<sp/>cv.<ref refid="de/db1/classConstDataVector_1afc25e0985e21c58a97654203aa8c2635" kindref="member" tooltip="Return a pointer to this object, as a const DataVector.">asDataVector</ref>();</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/>myassert<sp/>(dv-&gt;<ref refid="d0/d4d/classDataVector_1aa4d259c267222003a6d2592fbe9809af" kindref="member" tooltip="Returns the number of elements in the collection.">size</ref>()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="5628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"></highlight></codeline>
<codeline lineno="5630"><highlight class="normal"></highlight></codeline>
<codeline lineno="5631"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1()</highlight></codeline>
<codeline lineno="5633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(3));</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(2);</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(4));</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(3);</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="5647"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/>make_unique&lt;T&gt;(5));</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>(4);</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(11));</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(12));</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><ref refid="d2/d67/expect__exception_8h_1a15ab402fd517d4bddede832507ed6439" kindref="member" tooltip="Helper to check that an exception is thrown.">EXPECT_EXCEPTION</ref><sp/>(<ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound" tooltip="Exception --- Attempted to insert a unique_ptr to a non-owning container.">SG::ExcNonowningContainer</ref>,</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2.assignElement<sp/>((v2.begin()+1).base(),<sp/>make_unique&lt;T&gt;(15)));</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5657"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement2()</highlight></codeline>
<codeline lineno="5660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;DV&gt;();</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>,<sp/>SG::ALWAYS_TRACK_INDICES);</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(1));</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(2));</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/>setaux<sp/>(v,<sp/>store);</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/>T*<sp/>t1<sp/>=<sp/>v[1];</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/>T*<sp/>t3<sp/>=<sp/>make_comp&lt;T&gt;(3);</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/>t3);</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/>releasePrivateStore(t3);</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/>checkaux<sp/>(v);</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t1);</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/>T*<sp/>t4<sp/>=<sp/>make_comp&lt;T&gt;(4);</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/>t4);</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/>check_dtor_log<sp/>();</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t3);</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/>0);</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/>checkauxZero<sp/>(v,<sp/>1);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/>CHECK_INDEX_CLEAR<sp/>(t4);</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"></highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/>T*<sp/>t5<sp/>=<sp/>make_comp&lt;T&gt;(5);</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/>v.assignElement<sp/>((v.begin()+1).base(),<sp/>t5);</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||<sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>());</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t3;</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t4;</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>t5;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement()</highlight></codeline>
<codeline lineno="5710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/>test2_assignelement2&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/>test2_assignelement2&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/>test2_assignelement1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapranges()</highlight></codeline>
<codeline lineno="5719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"></highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store2;</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i+10));</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/>setaux(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/>setaux(v2,<sp/>store2);</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"></highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/>std::swap_ranges<sp/>(v1.begin()+3,<sp/>v1.begin()+6,<sp/>v2.begin()+4);</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/>std::swap_ranges<sp/>(v1.rbegin()+3,<sp/>v1.rbegin()+6,<sp/>v2.rbegin()+4);</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v2);</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/>checkaux(v2);</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/>std::swap_ranges<sp/>(v3.begin(),<sp/>v3.begin()+2,<sp/>v3.begin()+4);</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/>CHECK_INDICES(v1);</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/>checkaux(v1);</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"></highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/>v1.setStore<sp/>(v1.getConstStore());</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap_ranges<sp/>(v1.begin()+3,<sp/>v1.begin()+6,<sp/>v2.begin()+4);</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v1.trackIndices());</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"></highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_swapranges()</highlight></codeline>
<codeline lineno="5771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"></highlight></codeline>
<codeline lineno="5778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::BaseContainer&amp;<sp/>test2_resortaux_ptrvector<sp/>(<ref refid="d3/d78/structDV" kindref="compound">DV</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="5780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">typename<sp/>DV::BaseContainer&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.stdcont());</highlight></codeline>
<codeline lineno="5782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::BaseContainer&amp;<sp/>test2_resortaux_ptrvector<sp/>(<ref refid="de/db1/classConstDataVector" kindref="compound" tooltip="DataVector adapter that acts like it holds const pointers.">ConstDataVector&lt;DV&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="5785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">typename<sp/>DV::BaseContainer&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.<ref refid="de/db1/classConstDataVector_1afc25e0985e21c58a97654203aa8c2635" kindref="member" tooltip="Return a pointer to this object, as a const DataVector.">asDataVector</ref>()-&gt;stdcont());</highlight></codeline>
<codeline lineno="5787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resortaux1()</highlight></codeline>
<codeline lineno="5790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N=10;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/>stlrand.seed<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v;</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/>setaux(v,<sp/>store);</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"></highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::BaseContainer&amp;<sp/>pv<sp/>=<sp/>test2_resortaux_ptrvector<sp/>(v);</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"></highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(pv.begin(),<sp/>pv.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resortAux<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(pv.begin()+2,<sp/>pv.end()-2,<sp/>stlrand);</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resortAux<sp/>(v.begin()+2,<sp/>v.end()-2);</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"></highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2(v);</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::BaseContainer&amp;<sp/>pv2<sp/>=<sp/>test2_resortaux_ptrvector<sp/>(v2);</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(pv2.begin(),<sp/>pv2.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resortAux<sp/>(v2.begin(),<sp/>v2.end());</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v);</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux(v);</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DV::BaseContainer&amp;<sp/>pv3<sp/>=<sp/>test2_resortaux_ptrvector<sp/>(v3);</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(i));</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/>std::random_shuffle<sp/>(pv3.begin(),<sp/>pv3.end(),<sp/>stlrand);</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.resortAux<sp/>(v3.begin(),<sp/>v3.end());</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES(v3);</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/>v.setStore<sp/>(v.getConstStore());</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/>v.resortAux<sp/>(v.begin(),<sp/>v.end());</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="da/ddd/classSG_1_1ExcConstAuxData" kindref="compound" tooltip="Exception --- Non-const operation performed on const aux data.">SG::ExcConstAuxData</ref>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/>caught<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/>myassert<sp/>(caught<sp/>||</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="db/da6/structSG_1_1AuxStore__traits" kindref="compound" tooltip="Associate AuxStore classes with EDM container classes (default implementation).">SG::AuxStore_traits&lt;T&gt;::flag</ref>()<sp/>||</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!v.trackIndices());</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"></highlight></codeline>
<codeline lineno="5847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_resortaux()</highlight></codeline>
<codeline lineno="5850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/>test2_resortaux1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/>test2_resortaux1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/>test2_resortaux1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/>test2_resortaux1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight></codeline>
<codeline lineno="5857"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DV&gt;</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_move1()</highlight></codeline>
<codeline lineno="5859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="5861"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">DV::base_value_type</ref><sp/>T;</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"></highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v1;</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d1/d1c/classSG_1_1AuxStoreInternal" kindref="compound" tooltip="An auxiliary data store that holds data internally.">SG::AuxStoreInternal</ref><sp/>store1;</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(make_unique&lt;T&gt;(1));</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(make_unique&lt;T&gt;(2));</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/>v1.push_back<sp/>(make_unique&lt;T&gt;(3));</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/>setaux<sp/>(v1,<sp/>store1);</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v1);</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(v1);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"></highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v2<sp/>(std::move<sp/>(v1));</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v2.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v2[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v2[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v2[2]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v2);</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(v2);</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/>v2.push_back<sp/>(make_comp_unique&lt;T&gt;(4));</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"></highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v1.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"></highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d78/structDV" kindref="compound">DV</ref><sp/>v3;</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>v3<sp/>=<sp/>std::move<sp/>(v2);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3.size()<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3[0]-&gt;x<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3[1]-&gt;x<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3[2]-&gt;x<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v3[3]-&gt;x<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/>checkaux<sp/>(v3);</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_INDICES<sp/>(v3);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/>v3.push_back<sp/>(make_comp_unique&lt;T&gt;(5));</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(v2.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/>check_dtor_log();</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/>clear_dtor_log();</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5902"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_move()</highlight></codeline>
<codeline lineno="5905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/>test2_move1&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/>test2_move1&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/>test2_move1&lt;DataVector&lt;typename<sp/>test2_maybeconst&lt;D&gt;::type&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/>test2_move1&lt;ConstDataVector&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;<sp/>();</highlight></codeline>
<codeline lineno="5910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"></highlight></codeline>
<codeline lineno="5913"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_offset()</highlight></codeline>
<codeline lineno="5915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;B&gt;</ref><sp/>DVB;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">DataVector&lt;D&gt;</ref><sp/>DVD;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/>assert<sp/>(DVB::baseOffset<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(DVB))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/>assert<sp/>(DVB::baseOffset<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(DVD))<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/>DVD<sp/>vd;</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/>DVB&amp;<sp/>vb<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offs<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;vb)<sp/>-<sp/>reinterpret_cast&lt;char*&gt;(&amp;vd);</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/>assert<sp/>(DVD::baseOffset<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(DVD))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/>assert<sp/>(DVD::baseOffset<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(DVB))<sp/>==<sp/>offs);</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/>assert<sp/>(DVD::baseOffset<sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">))<sp/>==<sp/>-1);</highlight></codeline>
<codeline lineno="5926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight></codeline>
<codeline lineno="5929"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_test2()</highlight></codeline>
<codeline lineno="5931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/>boost::function_requires&lt;boost::ForwardContainerConcept&lt;DataVector&lt;B&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/>boost::function_requires&lt;boost::ForwardContainerConcept&lt;DataVector&lt;D&gt;<sp/>&gt;<sp/>&gt;();</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"></highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/>test2_initial&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/>test2_default_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/>test2_sized_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/>test2_insertion_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/>test2_copy_ctor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/>test2_dtor&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/>test2_push_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/>test2_operator_index_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/>test2_at_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/>test2_size&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/>test2_stdcont&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/>test2_empty&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/>test2_reserve_capacity&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/>test2_max_size&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/>test2_front_back_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/>test2_begin_end_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/>test2_rbegin_rend_const&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/>test2_elementproxy&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/>test2_operator_index&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/>test2_at&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/>test2_swapelement&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/>test2_swapelement_unique&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/>test2_swapelement_iter&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/>test2_swapelement_iter_unique&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/>test2_resize&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/>test2_pop_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/>test2_front_back&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/>test2_begin_end&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/>test2_rbegin_rend&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/>test2_erase_range&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/>test2_erase_single&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/>test2_operator_assign&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/>test2_insert_value&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/>test2_insert_range&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/>test2_clear&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/>test2_swap&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/>test2_assign&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/>test2_relops&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/>test2_sort&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/>test2_inplace_merge&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/>test2_iter_swap_memb&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/>test2_iter_swap&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/>test2_remove&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/>test2_unique&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/>test2_reverse&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/>test2_rotate&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/>test2_random_shuffle&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/>test2_partition&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/>test2_asdatavector&lt;D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/>test2_assignelement&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/>test2_swapranges&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/>test2_resortaux&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/>test2_move&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/>test2_offset&lt;B,D&gt;<sp/>();</highlight></codeline>
<codeline lineno="5989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"></highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump_classid()</highlight></codeline>
<codeline lineno="5994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits&lt;DataVector&lt;T&gt;</ref><sp/>&gt;<sp/>traits;</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>traits::typeName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>clid,<sp/>vers,<sp/>is_do:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>traits::ID()<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>traits::s_version<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>traits::s_isDataObject<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"></highlight></codeline>
<codeline lineno="6003"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataVector_test.icc"/>
  </compounddef>
</doxygen>
