<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator" kind="class" prot="public">
    <compoundname>CxxUtils::pointer_list::allocator</compoundname>
    <basecompoundref refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator" prot="public" virt="non-virtual">CxxUtils::pointer_list_base::allocator</basecompoundref>
    <includes refid="df/d5b/pointer__list_8h" local="no">pointer_list.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a187138b32cd2032d251a29d581599e7b" prot="public" static="yes" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long CxxUtils::pointer_list&lt; NELT &gt;::allocator::END_OFFS</definition>
        <argsstring></argsstring>
        <name>END_OFFS</name>
        <initializer> NELT * sizeof(<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" kindref="member">value_type</ref>)</initializer>
        <briefdescription>
<para>Constants to use to test if we&apos;re at the end of a block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="259" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1ad44a8599152707b116568550e89d172f" prot="public" static="yes" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long CxxUtils::pointer_list&lt; NELT &gt;::allocator::END_MASK</definition>
        <argsstring></argsstring>
        <name>END_MASK</name>
        <initializer> <ref refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a187138b32cd2032d251a29d581599e7b" kindref="member">END_OFFS</ref> | (sizeof(<ref refid="d1/d6f/classCxxUtils_1_1pointer__list__base_1a05ce8c634f52db796a226f7d106d880d" kindref="member">value_type</ref>)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="260" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a13c9109bd8b7142bbecaf5518e3a9287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::pointer_list&lt; NELT &gt;::allocator::BOOST_STATIC_ASSERT</definition>
        <argsstring>(((NELT+1)&amp;NELT)==0)</argsstring>
        <name>BOOST_STATIC_ASSERT</name>
        <param>
          <type>((NELT+1)&amp;NELT)</type>
          <defval>=0</defval>
        </param>
        <briefdescription>
<para>Verify that <computeroutput>NELT</computeroutput> is one less than a power of two. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="256"/>
      </memberdef>
      <memberdef kind="function" id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a8125283241eb78c460d17b694358563d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::pointer_list&lt; NELT &gt;::allocator::allocator</definition>
        <argsstring>(size_t nblock=100)</argsstring>
        <name>allocator</name>
        <param>
          <type>size_t</type>
          <declname>nblock</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nblock</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to allocate per chunk. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="266" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="85" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a31a2d4347ccb4071abd4754f78c6ce95" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::pointer_list&lt; NELT &gt;::allocator::at_end_static</definition>
        <argsstring>(const void *p)</argsstring>
        <name>at_end_static</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Test if <ref refid="dc/dec/structP" kindref="compound">P</ref> is pointing at the end-pointer of a block. </para>        </briefdescription>
        <detaileddescription>
<para>Test to see if we&apos;re looking at the end of a block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="270" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.icc" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocator for <computeroutput><ref refid="d1/d88/classCxxUtils_1_1pointer__list" kindref="compound">pointer_list</ref></computeroutput>, specialized for <computeroutput>NELT</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>The purpose for thsi is to be able to have the static <computeroutput>at_end_static</computeroutput> function, which we can call from an <ref refid="d3/d1c/classCxxUtils_1_1pointer__list_1_1iterator" kindref="compound">iterator</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="397">
        <label>CxxUtils::pointer_list&lt; NELT &gt;::allocator</label>
        <link refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator"/>
        <childnode refid="398" relation="public-inheritance">
        </childnode>
      </node>
      <node id="398">
        <label>CxxUtils::pointer_list_base::allocator</label>
        <link refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="399">
        <label>CxxUtils::pointer_list&lt; NELT &gt;::allocator</label>
        <link refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator"/>
        <childnode refid="400" relation="public-inheritance">
        </childnode>
      </node>
      <node id="400">
        <label>CxxUtils::pointer_list_base::allocator</label>
        <link refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator"/>
        <childnode refid="401" relation="usage">
          <edgelabel>m_chunks</edgelabel>
        </childnode>
      </node>
      <node id="402">
        <label>CxxUtils::pointer_list_base::list_block</label>
        <link refid="d8/d02/structCxxUtils_1_1pointer__list__base_1_1list__block"/>
        <childnode refid="403" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="401">
        <label>CxxUtils::pointer_list_base::allocator::chunk</label>
        <childnode refid="401" relation="usage">
          <edgelabel>m_next</edgelabel>
        </childnode>
        <childnode refid="402" relation="usage">
          <edgelabel>m_blocks</edgelabel>
        </childnode>
      </node>
      <node id="403">
        <label>void</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" line="253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/pointer_list.h" bodystart="251" bodyend="271"/>
    <listofallmembers>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a1c3a179a632545cbfca821603e35f594" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>allocate</name></member>
      <member refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a8125283241eb78c460d17b694358563d" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>allocator</name></member>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a156f16467a071282081194b293dd43e4" prot="public" virt="non-virtual" ambiguityscope="CxxUtils::pointer_list_base::allocator::"><scope>CxxUtils::pointer_list::allocator</scope><name>allocator</name></member>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1af4b432441532660a66c86a330f8e4da8" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>at_end</name></member>
      <member refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a31a2d4347ccb4071abd4754f78c6ce95" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>at_end_static</name></member>
      <member refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a13c9109bd8b7142bbecaf5518e3a9287" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>BOOST_STATIC_ASSERT</name></member>
      <member refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1ad44a8599152707b116568550e89d172f" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>END_MASK</name></member>
      <member refid="d2/dde/classCxxUtils_1_1pointer__list_1_1allocator_1a187138b32cd2032d251a29d581599e7b" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>END_OFFS</name></member>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a8fe3059d4e568e9cbff5cd49746fe52a" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>nchunks</name></member>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a66bf563d60cdcbbafdd1dcae18ecbb21" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>nelt</name></member>
      <member refid="d9/d49/classCxxUtils_1_1pointer__list__base_1_1allocator_1a9da8fcf7ab6ee39343629dd19d46b9cf" prot="public" virt="non-virtual"><scope>CxxUtils::pointer_list::allocator</scope><name>~allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
