<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor" kind="class" prot="public">
    <compoundname>SG::AuxElement::TypelessConstAccessor</compoundname>
    <includes refid="d1/d6f/AuxElement_8h" local="no">AuxElement.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1abf9f37a4fd3d3255a2260a95f9dee71c" prot="protected" static="no" mutable="no">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>SG::auxid_t SG::AuxElement::TypelessConstAccessor::m_auxid</definition>
        <argsstring></argsstring>
        <name>m_auxid</name>
        <briefdescription>
<para>The cached <computeroutput>auxid</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="331" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a2a56af66878b469dd99ff93015bd8393" prot="protected" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t SG::AuxElement::TypelessConstAccessor::m_eltSize</definition>
        <argsstring></argsstring>
        <name>m_eltSize</name>
        <briefdescription>
<para>Cached element size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="334" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1ae699296be383598d14e9864e57074120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::TypelessConstAccessor::TypelessConstAccessor</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>TypelessConstAccessor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="252" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1aee254288f7ea5024a9f8e4258b2e1d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::TypelessConstAccessor::TypelessConstAccessor</definition>
        <argsstring>(const std::type_info &amp;ti, const std::string &amp;name)</argsstring>
        <name>TypelessConstAccessor</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for this aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="263" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a107514ed05edf42bbb381fd537bf75ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::TypelessConstAccessor::TypelessConstAccessor</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname)</argsstring>
        <name>TypelessConstAccessor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of its associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="274" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="186" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a8112030541073cc8d83e9d84f45fa18a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>SG::AuxElement::TypelessConstAccessor::TypelessConstAccessor</definition>
        <argsstring>(const std::type_info &amp;ti, const std::string &amp;name, const std::string &amp;clsname)</argsstring>
        <name>TypelessConstAccessor</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>The type for this aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of this aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of its associated class. May be blank.</para></parameterdescription>
</parameteritem>
</parameterlist>
The name -&gt; auxid lookup is done here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="287" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="206" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1aa4b47977741479109233118bde2726f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxElement::TypelessConstAccessor::operator()</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a const pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The element for which to fetch the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="294" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a9c27656303b2e181025d586e38e8e19c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxElement::TypelessConstAccessor::operator()</definition>
        <argsstring>(const AuxVectorData &amp;container, size_t index) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Fetch the variable for one element, as a const pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the desired element.</para></parameterdescription>
</parameteritem>
</parameterlist>
This allows retrieving aux data by container / index. Looping over the index via this method will be faster then looping over the elements of the container. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="306" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1afcc25c96550fafe2bdb1598d16ec3959" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxElement::TypelessConstAccessor::getDataArray</definition>
        <argsstring>(const AuxVectorData &amp;container) const </argsstring>
        <name>getDataArray</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
<para>Get a pointer to the start of the auxiliary data array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container from which to fetch the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="313" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a632254588fefda981da1d9c107136b11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxElement::TypelessConstAccessor::isAvailable</definition>
        <argsstring>(const AuxElement &amp;e) const </argsstring>
        <name>isAvailable</name>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Test to see if this variable exists in the store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>An element of the container which to test the variable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="320" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a278df2fa8f4b3683078867f49e2be45c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>SG::auxid_t SG::AuxElement::TypelessConstAccessor::auxid</definition>
        <argsstring>() const </argsstring>
        <name>auxid</name>
        <briefdescription>
<para>Return the aux id for this variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.icc" bodystart="279" bodyend="282"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper class to provide const generic access to aux data. </para>    </briefdescription>
    <detaileddescription>
<para>This is written as a separate class in order to be able to cache the name -&gt; auxid lookup.</para><para>This should generally only be used by code which treats auxiliary data generically (that is, where the type is not known at compile-time). Most of the time, you&apos;d want to use the type-safe versions <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">ConstAccessor</ref></computeroutput> and <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">Accessor</ref></computeroutput>. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="244" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" bodystart="243" bodyend="335"/>
    <listofallmembers>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a278df2fa8f4b3683078867f49e2be45c" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>auxid</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1afcc25c96550fafe2bdb1598d16ec3959" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>getDataArray</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a632254588fefda981da1d9c107136b11" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>isAvailable</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1abf9f37a4fd3d3255a2260a95f9dee71c" prot="protected" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>m_auxid</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a2a56af66878b469dd99ff93015bd8393" prot="protected" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>m_eltSize</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1aa4b47977741479109233118bde2726f3" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>operator()</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a9c27656303b2e181025d586e38e8e19c" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>operator()</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1ae699296be383598d14e9864e57074120" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>TypelessConstAccessor</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1aee254288f7ea5024a9f8e4258b2e1d5a" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>TypelessConstAccessor</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a107514ed05edf42bbb381fd537bf75ed" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>TypelessConstAccessor</name></member>
      <member refid="d2/dd4/classSG_1_1AuxElement_1_1TypelessConstAccessor_1a8112030541073cc8d83e9d84f45fa18a" prot="public" virt="non-virtual"><scope>SG::AuxElement::TypelessConstAccessor</scope><name>TypelessConstAccessor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
