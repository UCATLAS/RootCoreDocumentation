<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d2/dad/classCxxUtils_1_1PackedArray" kind="class" prot="public">
    <compoundname>CxxUtils::PackedArray</compoundname>
    <includes refid="de/d5f/PackedArray_8h" local="no">PackedArray.h</includes>
    <innerclass refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" prot="public">CxxUtils::PackedArray::proxy</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d2/dad/classCxxUtils_1_1PackedArray_1aa358214d0a6aa0bb156f433bbfc2bddd" prot="private" static="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>typedef std::vector&lt;unsigned int&gt; CxxUtils::PackedArray::basetype</definition>
        <argsstring></argsstring>
        <name>basetype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d2/dad/classCxxUtils_1_1PackedArray_1ae82e9bba0487b7e2bd7f46c8700b88d8" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t CxxUtils::PackedArray::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dad/classCxxUtils_1_1PackedArray_1aed6f0196ba744ae209b6ca9ba512dc7f" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int CxxUtils::PackedArray::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dad/classCxxUtils_1_1PackedArray_1ad932fd1eba73222d6d55e6cf3fb0e49c" prot="public" static="no">
        <type>basetype::allocator_type</type>
        <definition>typedef basetype::allocator_type CxxUtils::PackedArray::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d2/dad/classCxxUtils_1_1PackedArray_1a0b5bbcf7b4b2e398467cfccbfc92b90b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CxxUtils::PackedArray::m_bitsize</definition>
        <argsstring></argsstring>
        <name>m_bitsize</name>
        <briefdescription>
<para>The current bitsize of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="271" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dad/classCxxUtils_1_1PackedArray_1a23093b4428822899ffd3207b252cd24e" prot="private" static="no" mutable="no">
        <type>size_type</type>
        <definition>size_type CxxUtils::PackedArray::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
<para>The current number of entries in the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="274" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dad/classCxxUtils_1_1PackedArray_1a2842411ffe7def51c6b470655008055a" prot="private" static="no" mutable="no">
        <type>value_type</type>
        <definition>value_type CxxUtils::PackedArray::m_mask</definition>
        <argsstring></argsstring>
        <name>m_mask</name>
        <briefdescription>
<para>Mask with m_bitsize bits set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="277" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dad/classCxxUtils_1_1PackedArray_1a39c4221c5db732899b775be7276e3441" prot="private" static="no" mutable="no">
        <type>basetype</type>
        <definition>basetype CxxUtils::PackedArray::m_vec</definition>
        <argsstring></argsstring>
        <name>m_vec</name>
        <briefdescription>
<para>Underlying vector holding the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="280" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a8635baf7ca8b369dc589dd676a99ada8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::PackedArray::PackedArray</definition>
        <argsstring>(int bitsize, const allocator_type &amp;allocator=allocator_type())</argsstring>
        <name>PackedArray</name>
        <param>
          <type>int</type>
          <declname>bitsize</declname>
        </param>
        <param>
          <type>const allocator_type &amp;</type>
          <declname>allocator</declname>
          <defval>allocator_type()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bits, of each element. Must be greater than zero, and not larger than the size of an unsigned int. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the underlying vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="81" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ad444bc1343e3b0e1460ee67d555587d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::PackedArray::PackedArray</definition>
        <argsstring>(int bitsize, size_type n, value_type val=0, const allocator_type &amp;allocator=allocator_type())</argsstring>
        <name>PackedArray</name>
        <param>
          <type>int</type>
          <declname>bitsize</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>val</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const allocator_type &amp;</type>
          <declname>allocator</declname>
          <defval>allocator_type()</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bits, of each element. Must be greater than zero, and not larger than the size of an unsigned int. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial number of entries in the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to which the initial entries are to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the underlying vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="159" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1aa22f36beb2d58ab292b3279b53a99388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::assign</definition>
        <argsstring>(size_type n, value_type u)</argsstring>
        <name>assign</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>Set the container to multiple copies of the same value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of entries to which the container is to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to which the entries are to be set.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of entries to which the container is to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to which the entries are to be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="102" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="181" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a26d189125282ac33fbc4d7ebb8fa55f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>allocator_type</type>
        <definition>PackedArray::allocator_type CxxUtils::PackedArray::get_allocator</definition>
        <argsstring>() const </argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>Returns the allocator of the underlying vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>PackedArray::size_type CxxUtils::PackedArray::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of elements in the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1aa16e46c9361d4068cb9079c6fd9332d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>PackedArray::size_type CxxUtils::PackedArray::max_size</definition>
        <argsstring>() const </argsstring>
        <name>max_size</name>
        <briefdescription>
<para>Returns the <computeroutput><ref refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" kindref="member">size()</ref></computeroutput> of the largest possible collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="117" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ad98897a69438ff0fd403c8b15f50e53c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_type</type>
        <definition>PackedArray::size_type CxxUtils::PackedArray::capacity</definition>
        <argsstring>() const </argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Returns the total number of elements that the collection can hold before needing to allocate more memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a910eaa0dc483ad3de182412c450abc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::resize</definition>
        <argsstring>(size_type sz, value_type c=0)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>c</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Resizes the collection to the specified number of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size of the collection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to which any new elements are to be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="130" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="235" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ad4ccffe8f87d1ce9ba976ec2235493f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::PackedArray::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns <computeroutput>true</computeroutput> if the collection is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="135" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ae0a70e013bcf51f200085dd52160ed49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::reserve</definition>
        <argsstring>(size_type n)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Attempt to preallocate enough memory for a specified number of elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements required. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a9ba7922bd02894fca2ff37c0f79b60ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::get</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>get</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return the entry at index <computeroutput>n</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the entry to retrieve. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="148" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ae7de942bfcab31d447d6f538b9af4660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::set</definition>
        <argsstring>(size_type n, value_type val)</argsstring>
        <name>set</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set the entry at index <computeroutput>n</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the entry to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value for the entry at index <computeroutput>n</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="155" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="299" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ac8fcbf2e04b66208b3a3d5963c39699d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::operator[]</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Access an element, as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> index to access. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at <emphasis>n</emphasis>.</para></simplesect>
No bounds checking is done. Note that we return a <computeroutput>value_type</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="165" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ab9eb6c764cb13bcb17631e6de0974631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref></type>
        <definition>PackedArray::proxy CxxUtils::PackedArray::operator[]</definition>
        <argsstring>(size_type n)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Access an element, as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> index to access. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Proxy to the element at <emphasis>n</emphasis>.</para></simplesect>
No bounds checking is done. Note that we return a <ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref> object rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="175" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::at</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>at</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Access an element, as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> index to access. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at <emphasis>n</emphasis>.</para></simplesect>
Will raise <computeroutput>std::out_of_range</computeroutput> if the index is out-of-bounds. Note that we return a <computeroutput>value_type</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="185" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1aa9b741964ce3151746d2a5d3d1cda16d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref></type>
        <definition>PackedArray::proxy CxxUtils::PackedArray::at</definition>
        <argsstring>(size_type n)</argsstring>
        <name>at</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Access an element, as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> index to access. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Proxy to the element at <emphasis>n</emphasis>.</para></simplesect>
Will raise <computeroutput>std::out_of_range</computeroutput> if the index is out-of-bounds. Note that we return a <ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref> object rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="195" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="356" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a58ef50783b1e53493de2db72eb0fea78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
<para>Access the first element in the collection as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <computeroutput>value_type</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="204" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="370" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a0c9798626d33866ff351676aa96779bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
<para>Access the last element in the collection as an rvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <computeroutput>value_type</computeroutput> rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="213" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a089d92f8d76c7dcc0eddb867e449067f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref></type>
        <definition>PackedArray::proxy CxxUtils::PackedArray::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>Access the first element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the first element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref> object rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="222" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a577827cfb9a6b0a4ed2d4ad1f0d71426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref></type>
        <definition>PackedArray::proxy CxxUtils::PackedArray::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>Access the last element in the collection as an lvalue. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Proxy to the last element in the collection.</para></simplesect>
No checking is done to ensure that the container is not empty. Note that we return a <ref refid="d3/d59/classCxxUtils_1_1PackedArray_1_1proxy" kindref="compound">proxy</ref> object rather than a reference. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="231" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1aacc10e0ade6ee9865447712497b73359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::push_back</definition>
        <argsstring>(value_type x)</argsstring>
        <name>push_back</name>
        <param>
          <type>value_type</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add an element to the end of the collection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The element to add to the collection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="419" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ad2f168a6a1068d3f80fb5aa65ceb9d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Remove the last element from the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="242" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ab59e60439cfa8d3922a928f7e328e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::swap</definition>
        <argsstring>(PackedArray &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d2/dad/classCxxUtils_1_1PackedArray" kindref="compound">PackedArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this collection with another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The collection with which to swap. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="248" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="445" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a20429677f6445adba5fc120ba87baeda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Erase all the elements in the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="253" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="457" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a1a411b8c31cb1119611fd39bc1fae431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::set_bitsize</definition>
        <argsstring>(int bitsize)</argsstring>
        <name>set_bitsize</name>
        <param>
          <type>int</type>
          <declname>bitsize</declname>
        </param>
        <briefdescription>
<para>Change the bitsize of the container. </para>        </briefdescription>
        <detaileddescription>
<para>bitsize The new bitsize. This method may only be called when the container is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="261" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="470" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a7e0ce2643308d9bafb06c718dd654ca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CxxUtils::PackedArray::bitsize</definition>
        <argsstring>() const </argsstring>
        <name>bitsize</name>
        <briefdescription>
<para>Return the bitsize of the container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="266" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="482" bodyend="485"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a66fa53adf6f8b58a155a0afbb1f76296" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>PackedArray::size_type CxxUtils::PackedArray::nbase</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>nbase</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the number of entries in the base vector needed to hold <linebreak/>
 entries with the current bitsize.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of packed entries desired. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="284" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1affab0c539e8c9b5d750dc2b8f82a2746" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>PackedArray::size_type CxxUtils::PackedArray::tondx</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>tondx</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Find the index in the base vector where entry <linebreak/>
 starts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Packed entry desired. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="287" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1ad6b4301289e9a3e8b073a048781faf00" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CxxUtils::PackedArray::tooff</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>tooff</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Find the bit offset of entry <linebreak/>
 within its entry in the base vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Packed entry desired. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="290" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a8fd907c71b4ec47e034fde44a0f86d19" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type</type>
        <definition>PackedArray::value_type CxxUtils::PackedArray::doget</definition>
        <argsstring>(size_type ndx, int off) const </argsstring>
        <name>doget</name>
        <param>
          <type>size_type</type>
          <declname>ndx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <briefdescription>
<para>Return the entry at base index <computeroutput>ndx/offset</computeroutput> <computeroutput>off</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the entry in the base vector at which the packed entry starts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit offset within that entry where the packed entry starts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="81" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a494379d107f33d46c59495ebac49f233" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::doset</definition>
        <argsstring>(size_type ndx, int off, value_type v)</argsstring>
        <name>doset</name>
        <param>
          <type>size_type</type>
          <declname>ndx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
        </param>
        <param>
          <type>value_type</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set the entry at base index <computeroutput>ndx/offset</computeroutput> <computeroutput>off</computeroutput> to <computeroutput>v</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>Set the entry at base index <computeroutput>ndx/offset</computeroutput> <computeroutput>off</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the entry in the base vector at which the packed entry starts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit offset within that entry where the packed entry starts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to which the entry should be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="296" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d2/dad/classCxxUtils_1_1PackedArray_1a31ef29f62e5305598e9926d66f0c67df" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::PackedArray::range_check</definition>
        <argsstring>(size_type n) const </argsstring>
        <name>range_check</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check that <computeroutput>n</computeroutput> is in range and throw <computeroutput>out_of_range</computeroutput> if not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="299" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/PackedArray.cxx" bodystart="124" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An array of unsigned values of some bit size, packed tightly. </para>    </briefdescription>
    <detaileddescription>
<para>When creating an instance of this class, specify the bit size of the entries. The entries will be packed so that each takes exactly that many bits. For example, if the bit size is 10, 16 entries will be packed into 5 32-bit words. The bitsize may be changed, but only if the container is empty.</para><para>Any values assigned to the array that are too large to be represented in the specified number of bits will have the high bits silently dropped.</para><para>The interface is modeled after <computeroutput>std::vector</computeroutput>, except that there are no iterators. They could be added if there is a need for them. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/PackedArray.h" bodystart="36" bodyend="300"/>
    <listofallmembers>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad932fd1eba73222d6d55e6cf3fb0e49c" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>allocator_type</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aa22f36beb2d58ab292b3279b53a99388" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>assign</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aa396f5d6b37d788babd6dec4178d25f9" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>at</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aa9b741964ce3151746d2a5d3d1cda16d" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>at</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a0c9798626d33866ff351676aa96779bd" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>back</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a577827cfb9a6b0a4ed2d4ad1f0d71426" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>back</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aa358214d0a6aa0bb156f433bbfc2bddd" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>basetype</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a7e0ce2643308d9bafb06c718dd654ca4" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>bitsize</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad98897a69438ff0fd403c8b15f50e53c" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>capacity</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a20429677f6445adba5fc120ba87baeda" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>clear</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a8fd907c71b4ec47e034fde44a0f86d19" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>doget</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a494379d107f33d46c59495ebac49f233" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>doset</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad4ccffe8f87d1ce9ba976ec2235493f0" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>empty</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a58ef50783b1e53493de2db72eb0fea78" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>front</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a089d92f8d76c7dcc0eddb867e449067f" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>front</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a9ba7922bd02894fca2ff37c0f79b60ec" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>get</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a26d189125282ac33fbc4d7ebb8fa55f8" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>get_allocator</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a0b5bbcf7b4b2e398467cfccbfc92b90b" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>m_bitsize</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a2842411ffe7def51c6b470655008055a" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>m_mask</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a23093b4428822899ffd3207b252cd24e" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>m_size</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a39c4221c5db732899b775be7276e3441" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>m_vec</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aa16e46c9361d4068cb9079c6fd9332d1" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>max_size</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a66fa53adf6f8b58a155a0afbb1f76296" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>nbase</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ac8fcbf2e04b66208b3a3d5963c39699d" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>operator[]</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ab9eb6c764cb13bcb17631e6de0974631" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>operator[]</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a8635baf7ca8b369dc589dd676a99ada8" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>PackedArray</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad444bc1343e3b0e1460ee67d555587d6" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>PackedArray</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad2f168a6a1068d3f80fb5aa65ceb9d98" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>pop_back</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aacc10e0ade6ee9865447712497b73359" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>push_back</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a31ef29f62e5305598e9926d66f0c67df" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>range_check</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ae0a70e013bcf51f200085dd52160ed49" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>reserve</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a910eaa0dc483ad3de182412c450abc87" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>resize</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ae7de942bfcab31d447d6f538b9af4660" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>set</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a1a411b8c31cb1119611fd39bc1fae431" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>set_bitsize</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1a14a94d68468785bd879aad6bb11cdd72" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>size</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ae82e9bba0487b7e2bd7f46c8700b88d8" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>size_type</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ab59e60439cfa8d3922a928f7e328e627" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>swap</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1affab0c539e8c9b5d750dc2b8f82a2746" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>tondx</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1ad6b4301289e9a3e8b073a048781faf00" prot="private" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>tooff</name></member>
      <member refid="d2/dad/classCxxUtils_1_1PackedArray_1aed6f0196ba744ae209b6ca9ba512dc7f" prot="public" virt="non-virtual"><scope>CxxUtils::PackedArray</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
