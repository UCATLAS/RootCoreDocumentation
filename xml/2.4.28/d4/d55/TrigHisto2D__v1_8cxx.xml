<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d55/TrigHisto2D__v1_8cxx" kind="file">
    <compoundname>TrigHisto2D_v1.cxx</compoundname>
    <includes refid="d1/d0c/AuxStoreAccessorMacros_8h" local="yes">xAODCore/AuxStoreAccessorMacros.h</includes>
    <includes refid="d2/df0/TrigHisto2D__v1_8h" local="yes">xAODTrigMinBias/versions/TrigHisto2D_v1.h</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="471136">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="471138">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="471092" relation="include">
        </childnode>
        <childnode refid="471094" relation="include">
        </childnode>
        <childnode refid="471101" relation="include">
        </childnode>
        <childnode refid="471102" relation="include">
        </childnode>
      </node>
      <node id="471139">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="471104">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="471088" relation="include">
        </childnode>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471105" relation="include">
        </childnode>
        <childnode refid="471103" relation="include">
        </childnode>
      </node>
      <node id="471100">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="471102">
        <label>functional</label>
      </node>
      <node id="471098">
        <label>limits</label>
      </node>
      <node id="471105">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="471134">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="471095">
        <label>iterator</label>
      </node>
      <node id="471122">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="471099" relation="include">
        </childnode>
        <childnode refid="471123" relation="include">
        </childnode>
      </node>
      <node id="471146">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="471089" relation="include">
        </childnode>
        <childnode refid="471147" relation="include">
        </childnode>
        <childnode refid="471148" relation="include">
        </childnode>
        <childnode refid="471114" relation="include">
        </childnode>
        <childnode refid="471099" relation="include">
        </childnode>
      </node>
      <node id="471118">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="471119" relation="include">
        </childnode>
        <childnode refid="471096" relation="include">
        </childnode>
      </node>
      <node id="471107">
        <label>stdint.h</label>
      </node>
      <node id="471115">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471114" relation="include">
        </childnode>
      </node>
      <node id="471110">
        <label>RVersion.h</label>
      </node>
      <node id="471091">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="471092" relation="include">
        </childnode>
        <childnode refid="471101" relation="include">
        </childnode>
        <childnode refid="471102" relation="include">
        </childnode>
      </node>
      <node id="471097">
        <label>cmath</label>
      </node>
      <node id="471150">
        <label>cassert</label>
      </node>
      <node id="471148">
        <label>stdexcept</label>
      </node>
      <node id="471137">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="471099">
        <label>string</label>
      </node>
      <node id="471140">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="471089" relation="include">
        </childnode>
        <childnode refid="471088" relation="include">
        </childnode>
        <childnode refid="471122" relation="include">
        </childnode>
        <childnode refid="471118" relation="include">
        </childnode>
        <childnode refid="471106" relation="include">
        </childnode>
        <childnode refid="471141" relation="include">
        </childnode>
        <childnode refid="471142" relation="include">
        </childnode>
        <childnode refid="471125" relation="include">
        </childnode>
        <childnode refid="471119" relation="include">
        </childnode>
        <childnode refid="471094" relation="include">
        </childnode>
        <childnode refid="471096" relation="include">
        </childnode>
        <childnode refid="471143" relation="include">
        </childnode>
        <childnode refid="471144" relation="include">
        </childnode>
        <childnode refid="471132" relation="include">
        </childnode>
        <childnode refid="471145" relation="include">
        </childnode>
      </node>
      <node id="471113">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471114" relation="include">
        </childnode>
      </node>
      <node id="471143">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="471111">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="471129">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="471144">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="471126">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="471087">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="471109">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="471110" relation="include">
        </childnode>
        <childnode refid="471111" relation="include">
        </childnode>
      </node>
      <node id="471142">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="471135">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="471121">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="471122" relation="include">
        </childnode>
        <childnode refid="471098" relation="include">
        </childnode>
        <childnode refid="471107" relation="include">
        </childnode>
        <childnode refid="471124" relation="include">
        </childnode>
      </node>
      <node id="471089">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471091" relation="include">
        </childnode>
      </node>
      <node id="471092">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="471093" relation="include">
        </childnode>
        <childnode refid="471094" relation="include">
        </childnode>
        <childnode refid="471095" relation="include">
        </childnode>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471096" relation="include">
        </childnode>
        <childnode refid="471097" relation="include">
        </childnode>
        <childnode refid="471098" relation="include">
        </childnode>
        <childnode refid="471099" relation="include">
        </childnode>
        <childnode refid="471100" relation="include">
        </childnode>
      </node>
      <node id="471114">
        <label>typeinfo</label>
      </node>
      <node id="471149">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="471143" relation="include">
        </childnode>
        <childnode refid="471150" relation="include">
        </childnode>
      </node>
      <node id="471124">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="471141">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="471108">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="471107" relation="include">
        </childnode>
      </node>
      <node id="471123">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="471128">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="471103">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="471112">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="471089" relation="include">
        </childnode>
        <childnode refid="471113" relation="include">
        </childnode>
        <childnode refid="471115" relation="include">
        </childnode>
        <childnode refid="471116" relation="include">
        </childnode>
        <childnode refid="471130" relation="include">
        </childnode>
        <childnode refid="471132" relation="include">
        </childnode>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471114" relation="include">
        </childnode>
        <childnode refid="471119" relation="include">
        </childnode>
        <childnode refid="471138" relation="include">
        </childnode>
        <childnode refid="471139" relation="include">
        </childnode>
      </node>
      <node id="471119">
        <label>vector</label>
      </node>
      <node id="471085">
        <label>xAODTrigMinBias/versions/TrigHisto2D_v1.h</label>
        <link refid="d2/df0/TrigHisto2D__v1_8h_source"/>
        <childnode refid="471086" relation="include">
        </childnode>
      </node>
      <node id="471094">
        <label>utility</label>
      </node>
      <node id="471125">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="471133">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="471117">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="471132">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="471133" relation="include">
        </childnode>
        <childnode refid="471134" relation="include">
        </childnode>
        <childnode refid="471135" relation="include">
        </childnode>
        <childnode refid="471136" relation="include">
        </childnode>
        <childnode refid="471137" relation="include">
        </childnode>
      </node>
      <node id="471096">
        <label>cstdlib</label>
      </node>
      <node id="471083">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigMinBias/Root/TrigHisto2D_v1.cxx</label>
        <link refid="TrigHisto2D_v1.cxx"/>
        <childnode refid="471084" relation="include">
        </childnode>
        <childnode refid="471085" relation="include">
        </childnode>
        <childnode refid="471151" relation="include">
        </childnode>
      </node>
      <node id="471151">
        <label>iostream</label>
      </node>
      <node id="471147">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="471088">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="471089" relation="include">
        </childnode>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471103" relation="include">
        </childnode>
      </node>
      <node id="471090">
        <label>cstddef</label>
      </node>
      <node id="471145">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="471112" relation="include">
        </childnode>
        <childnode refid="471104" relation="include">
        </childnode>
        <childnode refid="471088" relation="include">
        </childnode>
        <childnode refid="471143" relation="include">
        </childnode>
        <childnode refid="471144" relation="include">
        </childnode>
      </node>
      <node id="471084">
        <label>xAODCore/AuxStoreAccessorMacros.h</label>
        <link refid="d1/d0c/AuxStoreAccessorMacros_8h_source"/>
      </node>
      <node id="471116">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="471113" relation="include">
        </childnode>
        <childnode refid="471117" relation="include">
        </childnode>
        <childnode refid="471118" relation="include">
        </childnode>
        <childnode refid="471120" relation="include">
        </childnode>
        <childnode refid="471125" relation="include">
        </childnode>
        <childnode refid="471114" relation="include">
        </childnode>
        <childnode refid="471119" relation="include">
        </childnode>
        <childnode refid="471093" relation="include">
        </childnode>
        <childnode refid="471107" relation="include">
        </childnode>
        <childnode refid="471127" relation="include">
        </childnode>
        <childnode refid="471128" relation="include">
        </childnode>
        <childnode refid="471129" relation="include">
        </childnode>
      </node>
      <node id="471127">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="471131">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="471120">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="471117" relation="include">
        </childnode>
        <childnode refid="471121" relation="include">
        </childnode>
        <childnode refid="471125" relation="include">
        </childnode>
        <childnode refid="471119" relation="include">
        </childnode>
        <childnode refid="471126" relation="include">
        </childnode>
      </node>
      <node id="471093">
        <label>algorithm</label>
      </node>
      <node id="471086">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="471087" relation="include">
        </childnode>
        <childnode refid="471088" relation="include">
        </childnode>
        <childnode refid="471104" relation="include">
        </childnode>
        <childnode refid="471106" relation="include">
        </childnode>
        <childnode refid="471112" relation="include">
        </childnode>
        <childnode refid="471140" relation="include">
        </childnode>
        <childnode refid="471118" relation="include">
        </childnode>
        <childnode refid="471146" relation="include">
        </childnode>
        <childnode refid="471143" relation="include">
        </childnode>
        <childnode refid="471090" relation="include">
        </childnode>
        <childnode refid="471149" relation="include">
        </childnode>
      </node>
      <node id="471106">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="471107" relation="include">
        </childnode>
        <childnode refid="471099" relation="include">
        </childnode>
        <childnode refid="471108" relation="include">
        </childnode>
        <childnode refid="471109" relation="include">
        </childnode>
      </node>
      <node id="471101">
        <label>memory</label>
      </node>
      <node id="471130">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="471115" relation="include">
        </childnode>
        <childnode refid="471116" relation="include">
        </childnode>
        <childnode refid="471131" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="dd/d44/namespacexAOD">xAOD</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODCore/AuxStoreAccessorMacros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTrigMinBias/versions/TrigHisto2D_v1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>DBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xAOD<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>ctor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>TrigHisto2D_v1::TrigHisto2D_v1()</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>:<sp/>SG::AuxElement(),m_binWidthX(0),m_binWidthY(0)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>TrigHisto2D_v1::TrigHisto2D_v1(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_y)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>:<sp/>SG::AuxElement()<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>initialize(nbins_x,<sp/>min_x,<sp/>max_x,<sp/>nbins_y,<sp/>min_y,<sp/>max_y);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>TrigHisto2D_v1::~TrigHisto2D_v1(){}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>AUXSTORE_OBJECT_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/>std::vector&lt;float&gt;,<sp/>contents,<sp/>setContents)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>nbinsX,<sp/>setNbinsX)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>minX,<sp/>setMinX)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>maxX,<sp/>setMaxX)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>nbinsY,<sp/>setNbinsY)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>minY,<sp/>setMinY)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>AUXSTORE_PRIMITIVE_SETTER_AND_GETTER(TrigHisto2D_v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>maxY,<sp/>setMaxY)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::initialize(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_x,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_y){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>aux<sp/>store<sp/>has<sp/>to<sp/>exist<sp/>if<sp/>we<sp/>wont<sp/>to<sp/>write<sp/>anything<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!this-&gt;hasStore())</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;makePrivateStore();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>contents_size<sp/>=<sp/>(nbins_x+TrigHisto2D_v1::EXTRA_BINS)*(nbins_y+TrigHisto2D_v1::EXTRA_BINS);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DBG</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Creating<sp/>Thist2D<sp/>with<sp/>:&quot;</highlight><highlight class="normal">&lt;&lt;contents_size&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements&quot;</highlight><highlight class="normal">&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;nbins_x+2=&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>nbins_x+TrigHisto2D_v1::EXTRA_BINS&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;nbins_y+2=&quot;</highlight><highlight class="normal">&lt;&lt;nbins_y+TrigHisto2D_v1::EXTRA_BINS&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>setContents(std::vector&lt;float&gt;(contents_size,0.));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>setMinX(min_x);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>setMaxX(max_x);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>setNbinsX(nbins_x);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>setMinY(min_y);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>setMaxY(max_y);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>setNbinsY(nbins_y);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbins_x<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_binWidthX<sp/>=<sp/>(max_x<sp/>-<sp/>min_x)/((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)nbins_x);<sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>bin<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_binWidthX<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nbins_y<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_binWidthY<sp/>=<sp/>(max_y<sp/>-<sp/>min_y)/((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)nbins_y);<sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>bin<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_binWidthY<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::fill(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value_y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>weight=1.){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_x<sp/>=<sp/>findBinX(value_x);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_y<sp/>=<sp/>findBinY(value_y);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin<sp/>=<sp/>ibin_y*(nbinsX()+TrigHisto2D_v1::EXTRA_BINS)<sp/>+<sp/>ibin_x;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>acc_contents(*this).at(ibin)+=<sp/>weight;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>TrigHisto2D_v1::profileX()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>contentsX(nbinsX()+TrigHisto2D_v1::EXTRA_BINS,0.);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0<sp/>;<sp/>ix<sp/>&lt;<sp/>nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ix++){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>nbinsY()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>iy++){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>contentsX.at(ix)<sp/>+=<sp/>acc_contents(*this).at(ix<sp/>+<sp/>iy*(nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contentsX;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>TrigHisto2D_v1::profileY()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>contentsY(nbinsY()+TrigHisto2D_v1::EXTRA_BINS);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0<sp/>;<sp/>iy<sp/>&lt;<sp/>nbinsY()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>iy++){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ix++){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>contentsY.at(iy)<sp/>+=<sp/>acc_contents(*this).at(ix<sp/>+<sp/>iy*(nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contentsY;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::sumEntries(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value_x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value_y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cutType)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin,<sp/>ibin_x,<sp/>ibin_y,<sp/>ibin_x_selected,<sp/>ibin_y_selected;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>entries;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>x<sp/>bin<sp/>index<sp/>that<sp/>the<sp/>cut<sp/>corresponds<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ibin_x_selected<sp/>=<sp/>findBinX(value_x);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>y<sp/>bin<sp/>index<sp/>that<sp/>the<sp/>cut<sp/>corresponds<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>ibin_y_selected<sp/>=<sp/>findBinY(value_y);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>entries<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nbinsX()==0<sp/>||<sp/>nbinsY()==0<sp/>){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cutType<sp/>==<sp/>TrigHistoCutType::BELOW_X_BELOW_Y)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_x<sp/>=<sp/>0;<sp/>ibin_x<sp/>&lt;=<sp/>ibin_x_selected;<sp/>ibin_x++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_y<sp/>=<sp/>0;<sp/>ibin_y<sp/>&lt;=<sp/>ibin_y_selected;<sp/>ibin_y++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>ibin_y*(nbinsX()+2)<sp/>+<sp/>ibin_x;<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>position<sp/>in<sp/>1d<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>+=<sp/>acc_contents(*this).at(ibin);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cutType<sp/>==<sp/>TrigHistoCutType::ABOVE_X_BELOW_Y)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_x<sp/>=<sp/>ibin_x_selected;<sp/>ibin_x<sp/>&lt;<sp/>nbinsX()+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ibin_x++)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_y<sp/>=<sp/>0;<sp/>ibin_y<sp/>&lt;=<sp/>ibin_y_selected;<sp/>ibin_y++)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>ibin_y*(nbinsX()+<sp/>TrigHisto2D_v1::EXTRA_BINS)<sp/>+<sp/>ibin_x;<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>position<sp/>in<sp/>1d<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>+=<sp/>acc_contents(*this).at(ibin);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cutType<sp/>==<sp/>TrigHistoCutType::BELOW_X_ABOVE_Y)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_x<sp/>=<sp/>0;<sp/>ibin_x<sp/>&lt;=<sp/>ibin_x_selected;<sp/>ibin_x++)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_y<sp/>=<sp/>ibin_y_selected;<sp/>ibin_y<sp/>&lt;<sp/>nbinsY()+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ibin_y++)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>ibin_y*(nbinsX()+<sp/>TrigHisto2D_v1::EXTRA_BINS)<sp/>+<sp/>ibin_x;<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>position<sp/>in<sp/>1d<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>+=<sp/>acc_contents(*this).at(ibin);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cutType<sp/>==<sp/>TrigHistoCutType::ABOVE_X_ABOVE_Y)<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_x<sp/>=<sp/>ibin_x_selected;<sp/>ibin_x<sp/>&lt;<sp/>nbinsX()+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ibin_x++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ibin_y<sp/>=<sp/>ibin_y_selected;<sp/>ibin_y<sp/>&lt;<sp/>nbinsY()+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ibin_y++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>ibin_y*(nbinsX()+<sp/>TrigHisto2D_v1::EXTRA_BINS)<sp/>+<sp/>ibin_x;<sp/></highlight><highlight class="comment">//<sp/>Find<sp/>position<sp/>in<sp/>1d<sp/>data<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>+=<sp/>acc_contents(*this).at(ibin);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//<sp/>else<sp/>of<sp/>m_nbins!=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entries;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::findBinX(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>minX())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!(value<sp/>&lt;<sp/>maxX())<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Overflow<sp/>(catches<sp/>NaN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>nbinsX()+1;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(value<sp/>&gt;<sp/>(ibin*m_binWidthX+minX())<sp/>&amp;&amp;<sp/>ibin<sp/>&lt;=<sp/>nbinsX())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>None<sp/>under/overflow<sp/>from<sp/>1<sp/>to<sp/>nbins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>ibin++;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ibin;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::findBinY(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>minY())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!(value<sp/>&lt;<sp/>maxY())<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Overflow<sp/>(catches<sp/>NaN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ibin<sp/>=<sp/>nbinsY()+1;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(value<sp/>&gt;<sp/>(ibin*m_binWidthY+minY())<sp/>&amp;&amp;<sp/>ibin<sp/>&lt;=<sp/>nbinsY())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>None<sp/>under/overflow<sp/>from<sp/>1<sp/>to<sp/>nbins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>ibin++;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ibin;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::clear()<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::vector&lt;float&gt;::iterator<sp/>contents_iter<sp/>=<sp/>acc_contents(*this).begin();<sp/>contents_iter<sp/>!=acc_contents(*this).end();<sp/>++contents_iter)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*contents_iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrigHisto2D_v1::dump(){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Accessor&lt;<sp/>std::vector&lt;float&gt;<sp/>&gt;<sp/>acc_contents(<sp/></highlight><highlight class="stringliteral">&quot;contents&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Dump<sp/>contets<sp/>vector<sp/>of<sp/>size::<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;acc_contents(*this).size()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>acc_contents(*this).size();<sp/>i++)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;acc_contents(*this).at(i)&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;NbinX::<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>nbinsX()&lt;&lt;</highlight><highlight class="stringliteral">&quot;\tRangeX::<sp/>[&quot;</highlight><highlight class="normal">&lt;&lt;minX()&lt;&lt;</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">&lt;&lt;maxX()&lt;&lt;</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;NbinY::<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>nbinsY()&lt;&lt;</highlight><highlight class="stringliteral">&quot;\tRangeY::<sp/>[&quot;</highlight><highlight class="normal">&lt;&lt;minY()&lt;&lt;</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">&lt;&lt;maxY()&lt;&lt;</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy<sp/>=<sp/>0<sp/>;<sp/>iy<sp/>&lt;<sp/>nbinsY()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>iy++){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS;<sp/>ix++){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;<sp/>acc_contents(*this).at(ix<sp/>+<sp/>iy*(nbinsX()<sp/>+<sp/>TrigHisto2D_v1::EXTRA_BINS))&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigMinBias/Root/TrigHisto2D_v1.cxx"/>
  </compounddef>
</doxygen>
