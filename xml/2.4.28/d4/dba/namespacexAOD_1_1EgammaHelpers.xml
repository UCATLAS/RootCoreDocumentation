<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/dba/namespacexAOD_1_1EgammaHelpers" kind="namespace">
    <compoundname>xAOD::EgammaHelpers</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a101516d8780b98afe0d47d33f4a5d813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>const T* xAOD::EgammaHelpers::getLink</definition>
        <argsstring>(const xAOD::IParticle *particle, std::string name)</argsstring>
        <name>getLink</name>
        <param>
          <type>const <ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">xAOD::IParticle</ref> *</type>
          <declname>particle</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access to element link to object of type <ref refid="d1/def/classT" kindref="compound">T</ref> stored in auxdata. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" bodystart="22" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ad56758546dec99c246470ac315edd2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
        <definition>const xAOD::Electron * xAOD::EgammaHelpers::getRecoElectron</definition>
        <argsstring>(const xAOD::TruthParticle *)</argsstring>
        <name>getRecoElectron</name>
        <param>
          <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
          <defname>particle</defname>
        </param>
        <briefdescription>
<para>return the reco electron associated to the given TruthParticle (if any) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1aa4e67bb863b74d1a1e0959a63d5497e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
        <definition>const xAOD::Photon * xAOD::EgammaHelpers::getRecoPhoton</definition>
        <argsstring>(const xAOD::TruthParticle *particle)</argsstring>
        <name>getRecoPhoton</name>
        <param>
          <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
          <declname>particle</declname>
        </param>
        <briefdescription>
<para>return the reco photon associated to the given TruthParticle (if any) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a95d53de47adc2c08a963f2f54c31d460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isTrueConvertedPhoton</definition>
        <argsstring>(const xAOD::Photon *ph, float maxRadius=800.)</argsstring>
        <name>isTrueConvertedPhoton</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxRadius</declname>
          <defval>800.</defval>
        </param>
        <briefdescription>
<para>is the object matched to a true converted photon with <ref refid="d8/df7/structR" kindref="compound">R</ref> &lt; maxRadius </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="24" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ac2f0d82595a29eba55bf3f895754cdbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isTrueConvertedPhoton</definition>
        <argsstring>(const xAOD::TruthParticle *truePh, float maxRadius=800.)</argsstring>
        <name>isTrueConvertedPhoton</name>
        <param>
          <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
          <declname>truePh</declname>
        </param>
        <param>
          <type>float</type>
          <declname>maxRadius</declname>
          <defval>800.</defval>
        </param>
        <briefdescription>
<para>is the true object a converted photon with <ref refid="d8/df7/structR" kindref="compound">R</ref> &lt; maxRadius </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a6bb9b67415981eeac92743bcdc2c85ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
        <definition>const xAOD::TruthParticle * xAOD::EgammaHelpers::getBkgElectronMother</definition>
        <argsstring>(const xAOD::Electron *el, const unsigned int barcodecut=0)</argsstring>
        <name>getBkgElectronMother</name>
        <param>
          <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>barcodecut</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Helper wrapper function for calling the function below that accepts truth input. It extract the truth from the reco electron and uses the function below. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a34cd31b25a85d37693482c1ec56d340d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
        <definition>const xAOD::TruthParticle * xAOD::EgammaHelpers::getBkgElectronMother</definition>
        <argsstring>(const xAOD::TruthParticle *truthel, const unsigned int barcodecut=0)</argsstring>
        <name>getBkgElectronMother</name>
        <param>
          <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
          <declname>truthel</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>barcodecut</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Helper function for getting the True &quot;Mother&quot; electron for an existing electron. There are cases when an electron has a photon (or electron) mother, that in turn comes from another particle (possible leading to a <ref refid="de/d0e/structZ" kindref="compound">Z</ref> or <ref refid="db/d2c/structW" kindref="compound">W</ref> etc). This method will navigate back up to the last electron or photon it can find in the lineage of the original true electron. Then the user just needs to check this electron/photon. If it fails returns null pointer. </para>        </briefdescription>
        <detaileddescription>
<para>The user can apply also a barcode cut. This is handy in cases when we want to find the first non geant particle occuring when going back the lineage. The method will stop after the 1st particle failing this cut </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a398c4a66913fd73fc88f0907e5a1c7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> * &gt;</type>
        <definition>std::vector&lt; const xAOD::TruthParticle * &gt; xAOD::EgammaHelpers::getBkgElectronLineage</definition>
        <argsstring>(const xAOD::Electron *el, const unsigned int barcodecut=0)</argsstring>
        <name>getBkgElectronLineage</name>
        <param>
          <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
          <declname>el</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>barcodecut</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Helper wrapper function for calling the function below that accepts truth input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a45fc94fca61974cd471fdf24d5d897bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> * &gt;</type>
        <definition>std::vector&lt; const xAOD::TruthParticle * &gt; xAOD::EgammaHelpers::getBkgElectronLineage</definition>
        <argsstring>(const xAOD::TruthParticle *truthel, const unsigned int barcodecut=0)</argsstring>
        <name>getBkgElectronLineage</name>
        <param>
          <type>const <ref refid="dd/dc2/classxAOD_1_1TruthParticle__v1" kindref="compound">xAOD::TruthParticle</ref> *</type>
          <declname>truthel</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>barcodecut</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Helper function for getting the True Lineage of an electron for an existing electron. There are cases when an electron has a photon (or electron) mother, that in turn comes from another particle (possible leading to a <ref refid="de/d0e/structZ" kindref="compound">Z</ref> or <ref refid="db/d2c/structW" kindref="compound">W</ref> etc). This method will navigate back and will return all true electron and photons in the lineage. in case of complex topologies will return just the 1st electron or photon mother. </para>        </briefdescription>
        <detaileddescription>
<para>The user can apply also a barcode cut. This is handy in cases when we want to find the first non geant particle occuring when going back the lineage. The method will stop after the 1st particle failing this cut </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaTruthxAODHelpers.cxx" bodystart="67" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ac964f92bcc40852e2ce3f33edc841aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isElectron</definition>
        <argsstring>(const xAOD::Egamma *eg)</argsstring>
        <name>isElectron</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>is the object an electron (not Fwd) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a1a7cb8e1df8de4a1411d43b5515fe863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isFwdElectron</definition>
        <argsstring>(const xAOD::Egamma *eg)</argsstring>
        <name>isFwdElectron</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>is the object a Fwd electron </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="29" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="14" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ae29dc77602983c79926f825fb7cd27f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isPhoton</definition>
        <argsstring>(const xAOD::Egamma *eg)</argsstring>
        <name>isPhoton</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>is the object a photon </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="18" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a9c5dde40b6a0ada60674b998c0b9ed07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isConvertedPhoton</definition>
        <argsstring>(const xAOD::Egamma *eg)</argsstring>
        <name>isConvertedPhoton</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>is the object a converted photon </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a1740564b0cd5724fa67ee792f6dea81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isBarrel</definition>
        <argsstring>(const xAOD::Egamma *eg)</argsstring>
        <name>isBarrel</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>return true if the cluster is in the barrel </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a85d897fcfbe07045b404e1b1e326f970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isBarrel</definition>
        <argsstring>(const xAOD::CaloCluster *cluster)</argsstring>
        <name>isBarrel</name>
        <param>
          <type>const <ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref> *</type>
          <declname>cluster</declname>
        </param>
        <briefdescription>
<para>return true if the cluster (or the majority of its energy) is in the barrel </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1aeb127642ad71ac05e98ce1023be3f681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::set&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::set&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticles</definition>
        <argsstring>(const xAOD::Egamma *eg, bool useBremAssoc=true, bool allParticles=true)</argsstring>
        <name>getTrackParticles</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allParticles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This is useful when a std::set of the original track Particles is required, which is mainly the case for the. </para>        </briefdescription>
        <detaileddescription>
<para>as it will re-order the elements in pointer order and not best match. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="39" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ac1fd6b490172230ffe6506a47008b059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::vector&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticlesVec</definition>
        <argsstring>(const xAOD::Egamma *eg, bool useBremAssoc=true, bool allParticles=true)</argsstring>
        <name>getTrackParticlesVec</name>
        <param>
          <type>const <ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound">xAOD::Egamma</ref> *</type>
          <declname>eg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allParticles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This one returns a vector so as to be more &quot;user friendly&quot;, as it retains the original best match ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="57" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a8d9b2c0b7edcbbd920bf7e2c25c5a8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int xAOD::EgammaHelpers::summaryValueInt</definition>
        <argsstring>(const xAOD::TrackParticle &amp;tp, const xAOD::SummaryType &amp;info, int deflt=-999)</argsstring>
        <name>summaryValueInt</name>
        <param>
          <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>const <ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deflt</declname>
          <defval>-999</defval>
        </param>
        <briefdescription>
<para>return the summary value for a TrackParticle or default value (-999) (to be used mostly in python where uint8_t is converted to char and the Tracking does not provide unprotected methods) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="60" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a38aa70920c3b3a055c4e8920f7476f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float xAOD::EgammaHelpers::summaryValueFloat</definition>
        <argsstring>(const xAOD::TrackParticle &amp;tp, const xAOD::SummaryType &amp;info, int deflt=-999.)</argsstring>
        <name>summaryValueFloat</name>
        <param>
          <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>const <ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deflt</declname>
          <defval>-999.</defval>
        </param>
        <briefdescription>
<para>return the summary value for a TrackParticle or default value (-999) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaxAODHelpers.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/EgammaxAODHelpers.cxx" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ac8f90f5d9225770b2fde49f3c8ba64ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> *</type>
        <definition>const xAOD::TrackParticle * xAOD::EgammaHelpers::getOriginalTrackParticle</definition>
        <argsstring>(const xAOD::Electron *el)</argsstring>
        <name>getOriginalTrackParticle</name>
        <param>
          <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
<para>Helper function for getting the &quot;Original&quot; Track Particle (i.e before GSF) via the electron. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="17" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1ab9ee55721859317f078f5ca7869a2e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> *</type>
        <definition>const xAOD::TrackParticle * xAOD::EgammaHelpers::getOriginalTrackParticleFromGSF</definition>
        <argsstring>(const xAOD::TrackParticle *trkPar)</argsstring>
        <name>getOriginalTrackParticleFromGSF</name>
        <param>
          <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> *</type>
          <declname>trkPar</declname>
        </param>
        <briefdescription>
<para>Helper function for getting the &quot;Original&quot; Track Particle (i.e before GSF) via the GSF Track Particle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="20" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="18" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a4f9b6b651b48ac7928bbc7163eb828de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float xAOD::EgammaHelpers::getLastMeasurementQoverP</definition>
        <argsstring>(const xAOD::TrackParticle *tp)</argsstring>
        <name>getLastMeasurementQoverP</name>
        <param>
          <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> *</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>return parameters for the last measurement for a GSF track particle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="23" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a16dd8606336ea22be32690a41f4f1405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::set&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::set&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticles</definition>
        <argsstring>(const xAOD::Electron *el, bool useBremAssoc=true, bool allParticles=true)</argsstring>
        <name>getTrackParticles</name>
        <param>
          <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
          <declname>el</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allParticles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This is useful when a std::set of the original track Particles is required, which is mainly the case for the. </para>        </briefdescription>
        <detaileddescription>
<para>as it will re-order the elements in pointer order and not best match. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="37" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a9ccee61bd42b6a3bb1f3a157e4de68ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::vector&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticlesVec</definition>
        <argsstring>(const xAOD::Electron *el, bool useBremAssoc=true, bool allParticles=true)</argsstring>
        <name>getTrackParticlesVec</name>
        <param>
          <type>const <ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound">xAOD::Electron</ref> *</type>
          <declname>el</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>allParticles</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This one returns a vector so as to be more &quot;user friendly&quot;,as it retains the original best match ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1abb40d703ced1407383367701f15cb91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t xAOD::EgammaHelpers::numberOfSiHits</definition>
        <argsstring>(const xAOD::TrackParticle *tp)</argsstring>
        <name>numberOfSiHits</name>
        <param>
          <type>const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> *</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
<para>return the number of Si hits in the track particle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/ElectronxAODHelpers.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/ElectronxAODHelpers.cxx" bodystart="65" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a2d1f465af60c4fa19f8970ff480ce697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xAOD::EgammaHelpers::isConvertedPhoton</definition>
        <argsstring>(const xAOD::Photon *ph)</argsstring>
        <name>isConvertedPhoton</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <briefdescription>
<para>is the object a converted photon </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="19" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a66457a61219d8d50679dbffefea4e79f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xAOD::EgammaParameters::ConversionType</type>
        <definition>xAOD::EgammaParameters::ConversionType xAOD::EgammaHelpers::conversionType</definition>
        <argsstring>(const xAOD::Photon *ph)</argsstring>
        <name>conversionType</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <briefdescription>
<para>return the photon conversion type (see EgammaEnums) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a7987bdb72506ac1531595709daced6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xAOD::EgammaParameters::ConversionType</type>
        <definition>xAOD::EgammaParameters::ConversionType xAOD::EgammaHelpers::conversionType</definition>
        <argsstring>(const xAOD::Vertex *vx)</argsstring>
        <name>conversionType</name>
        <param>
          <type>const <ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref> *</type>
          <declname>vx</declname>
        </param>
        <briefdescription>
<para>return the photon conversion type (see EgammaEnums) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="25" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="20" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a0bda93d43720fcc0d39d693c5c789e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t xAOD::EgammaHelpers::numberOfSiTracks</definition>
        <argsstring>(const xAOD::Photon *eg)</argsstring>
        <name>numberOfSiTracks</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>eg</declname>
        </param>
        <briefdescription>
<para>return the number of Si tracks in the conversion </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="28" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a3741fbf2625595529d8370ed5b306baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t xAOD::EgammaHelpers::numberOfSiTracks</definition>
        <argsstring>(const xAOD::Vertex *vx)</argsstring>
        <name>numberOfSiTracks</name>
        <param>
          <type>const <ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref> *</type>
          <declname>vx</declname>
        </param>
        <briefdescription>
<para>return the number of Si tracks in the conversion </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a559cb94e92c2d15ae5e1dd399ba28465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t xAOD::EgammaHelpers::numberOfSiTracks</definition>
        <argsstring>(const xAOD::EgammaParameters::ConversionType convType)</argsstring>
        <name>numberOfSiTracks</name>
        <param>
          <type>const xAOD::EgammaParameters::ConversionType</type>
          <declname>convType</declname>
        </param>
        <briefdescription>
<para>return the number of Si tracks in the conversion </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="34" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1abeb8d6920e6b91fcab60e007f881e4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float xAOD::EgammaHelpers::conversionRadius</definition>
        <argsstring>(const xAOD::Vertex *vx)</argsstring>
        <name>conversionRadius</name>
        <param>
          <type>const <ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref> *</type>
          <declname>vx</declname>
        </param>
        <briefdescription>
<para>return the conversion radius or 9999. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1aee86e01d1ea4bdd80aa0bd4fc0770757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float xAOD::EgammaHelpers::conversionRadius</definition>
        <argsstring>(const xAOD::Photon *ph)</argsstring>
        <name>conversionRadius</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <briefdescription>
<para>return the conversion radius or 9999. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a32eaa7f0444b8a27cba1a4b05e179884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D xAOD::EgammaHelpers::momentumAtVertex</definition>
        <argsstring>(const xAOD::Photon *, bool debug=false)</argsstring>
        <name>momentumAtVertex</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <defname>photon</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>return the momentum at the vertex (which can be 0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a89203057a2f05149490a37173ae60574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D xAOD::EgammaHelpers::momentumAtVertex</definition>
        <argsstring>(const xAOD::Vertex &amp;, bool debug=false)</argsstring>
        <name>momentumAtVertex</name>
        <param>
          <type>const <ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref> &amp;</type>
          <defname>vertex</defname>
        </param>
        <param>
          <type>bool</type>
          <declname>debug</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>return the momentum at the vertex (which can be 0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="83" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a088ea883f21610bf183c3af2a59be6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::set&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::set&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticles</definition>
        <argsstring>(const xAOD::Photon *ph, bool useBremAssoc=true)</argsstring>
        <name>getTrackParticles</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This is useful when a std::set of the original track Particles is required, which is mainly the case for the. </para>        </briefdescription>
        <detaileddescription>
<para>as it will re-order the elements in pointer order and not best match. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="104" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d4/dba/namespacexAOD_1_1EgammaHelpers_1a3364f5d58577efd2c4bc6ac2b380738c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; const <ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref> * &gt;</type>
        <definition>const std::vector&lt; const xAOD::TrackParticle * &gt; xAOD::EgammaHelpers::getTrackParticlesVec</definition>
        <argsstring>(const xAOD::Photon *ph, bool useBremAssoc=true)</argsstring>
        <name>getTrackParticlesVec</name>
        <param>
          <type>const <ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound">xAOD::Photon</ref> *</type>
          <declname>ph</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBremAssoc</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a list of all or only the best TrackParticle associated to the object. If useBremAssoc is set, get the original TrackParticle This one returns a vector so as to be more &quot;user friendly&quot;,as it retains the original best match ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/PhotonxAODHelpers.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/Root/PhotonxAODHelpers.cxx" bodystart="117" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODEgamma/xAODEgamma/EgammaTruthxAODHelpers.h" line="18"/>
  </compounddef>
</doxygen>
