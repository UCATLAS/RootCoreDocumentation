<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/da9/InDetTrackCut_8cxx" kind="file">
    <compoundname>InDetTrackCut.cxx</compoundname>
    <includes refid="d2/d61/InDetTrackCut_8h" local="yes">src/InDetTrackCut.h</includes>
    <includes refid="d7/de0/InDetTrackSelectionTool_8h" local="yes">InDetTrackSelectionTool/InDetTrackSelectionTool.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="136542">
        <label>list</label>
      </node>
      <node id="136551">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="136536" relation="include">
        </childnode>
        <childnode refid="136543" relation="include">
        </childnode>
        <childnode refid="136527" relation="include">
        </childnode>
        <childnode refid="136532" relation="include">
        </childnode>
        <childnode refid="136473" relation="include">
        </childnode>
      </node>
      <node id="136536">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="136506">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="136558">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="136559" relation="include">
        </childnode>
        <childnode refid="136537" relation="include">
        </childnode>
        <childnode refid="136480" relation="include">
        </childnode>
        <childnode refid="136560" relation="include">
        </childnode>
      </node>
      <node id="136523">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="136472" relation="include">
        </childnode>
        <childnode refid="136474" relation="include">
        </childnode>
        <childnode refid="136480" relation="include">
        </childnode>
        <childnode refid="136481" relation="include">
        </childnode>
      </node>
      <node id="136448">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136449" relation="include">
        </childnode>
        <childnode refid="136450" relation="include">
        </childnode>
      </node>
      <node id="136525">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="136489" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136526" relation="include">
        </childnode>
        <childnode refid="136490" relation="include">
        </childnode>
      </node>
      <node id="136524">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="136453">
        <label>EventPrimitives/EventPrimitives.h</label>
        <link refid="d1/d54/EventPrimitives_8h_source"/>
        <childnode refid="136454" relation="include">
        </childnode>
        <childnode refid="136455" relation="include">
        </childnode>
        <childnode refid="136456" relation="include">
        </childnode>
      </node>
      <node id="136479">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="136481">
        <label>functional</label>
      </node>
      <node id="136533">
        <label>boost/version.hpp</label>
      </node>
      <node id="136478">
        <label>limits</label>
      </node>
      <node id="136526">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="136504">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="136450">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="136475">
        <label>iterator</label>
      </node>
      <node id="136491">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136492" relation="include">
        </childnode>
      </node>
      <node id="136557">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="136563">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="136564" relation="include">
        </childnode>
        <childnode refid="136531" relation="include">
        </childnode>
        <childnode refid="136478" relation="include">
        </childnode>
        <childnode refid="136481" relation="include">
        </childnode>
        <childnode refid="136565" relation="include">
        </childnode>
      </node>
      <node id="136468">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="136469" relation="include">
        </childnode>
        <childnode refid="136482" relation="include">
        </childnode>
        <childnode refid="136483" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136441" relation="include">
        </childnode>
      </node>
      <node id="136604">
        <label>TrkExInterfaces/IExtrapolator.h</label>
      </node>
      <node id="136493">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
      </node>
      <node id="136460">
        <label>stdint.h</label>
      </node>
      <node id="136543">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="136478" relation="include">
        </childnode>
        <childnode refid="136544" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
      </node>
      <node id="136511">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
      </node>
      <node id="136486">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="136578">
        <label>Eigen/Geometry</label>
      </node>
      <node id="136464">
        <label>RVersion.h</label>
      </node>
      <node id="136471">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="136472" relation="include">
        </childnode>
        <childnode refid="136480" relation="include">
        </childnode>
        <childnode refid="136481" relation="include">
        </childnode>
      </node>
      <node id="136443">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="136477">
        <label>cmath</label>
      </node>
      <node id="136530">
        <label>cassert</label>
      </node>
      <node id="136534">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="136553">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="136483">
        <label>stdexcept</label>
      </node>
      <node id="136440">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136442" relation="include">
        </childnode>
      </node>
      <node id="136507">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="136455">
        <label>Eigen/Core</label>
      </node>
      <node id="136540">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="136570">
        <label>xAODTracking/VertexContainerFwd.h</label>
        <link refid="d0/dc4/VertexContainerFwd_8h_source"/>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136571" relation="include">
        </childnode>
      </node>
      <node id="136580">
        <label>xAODTracking/TrackParticleContainerFwd.h</label>
        <link refid="de/dea/TrackParticleContainerFwd_8h_source"/>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136581" relation="include">
        </childnode>
        <childnode refid="136582" relation="include">
        </childnode>
      </node>
      <node id="136434">
        <label>src/InDetTrackCut.h</label>
        <link refid="d2/d61/InDetTrackCut_8h_source"/>
        <childnode refid="136435" relation="include">
        </childnode>
        <childnode refid="136592" relation="include">
        </childnode>
        <childnode refid="136593" relation="include">
        </childnode>
      </node>
      <node id="136548">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="136567">
        <label>TLorentzVector.h</label>
      </node>
      <node id="136437">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="136441">
        <label>string</label>
      </node>
      <node id="136488">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="136469" relation="include">
        </childnode>
        <childnode refid="136489" relation="include">
        </childnode>
        <childnode refid="136491" relation="include">
        </childnode>
        <childnode refid="136493" relation="include">
        </childnode>
        <childnode refid="136495" relation="include">
        </childnode>
        <childnode refid="136497" relation="include">
        </childnode>
        <childnode refid="136498" relation="include">
        </childnode>
        <childnode refid="136499" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136474" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
        <childnode refid="136500" relation="include">
        </childnode>
        <childnode refid="136501" relation="include">
        </childnode>
        <childnode refid="136502" relation="include">
        </childnode>
        <childnode refid="136508" relation="include">
        </childnode>
      </node>
      <node id="136510">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
      </node>
      <node id="136458">
        <label>versions/TrackParticle_v1.h</label>
        <link refid="d2/d7f/TrackParticle__v1_8h_source"/>
        <childnode refid="136459" relation="include">
        </childnode>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136461" relation="include">
        </childnode>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136566" relation="include">
        </childnode>
        <childnode refid="136452" relation="include">
        </childnode>
        <childnode refid="136570" relation="include">
        </childnode>
        <childnode refid="136572" relation="include">
        </childnode>
        <childnode refid="136573" relation="include">
        </childnode>
      </node>
      <node id="136500">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="136595">
        <label>InDetTrackSelectionTool/IInDetTrackSelectionTool.h</label>
        <link refid="d2/d36/IInDetTrackSelectionTool_8h_source"/>
        <childnode refid="136596" relation="include">
        </childnode>
        <childnode refid="136457" relation="include">
        </childnode>
        <childnode refid="136575" relation="include">
        </childnode>
        <childnode refid="136572" relation="include">
        </childnode>
      </node>
      <node id="136545">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="136485" relation="include">
        </childnode>
        <childnode refid="136543" relation="include">
        </childnode>
        <childnode refid="136546" relation="include">
        </childnode>
        <childnode refid="136548" relation="include">
        </childnode>
        <childnode refid="136533" relation="include">
        </childnode>
        <childnode refid="136475" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
      </node>
      <node id="136559">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="136592">
        <label>map</label>
      </node>
      <node id="136560">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="136561" relation="include">
        </childnode>
      </node>
      <node id="136561">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="136465">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="136520">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="136579">
        <label>VxVertex/VxTrackAtVertex.h</label>
      </node>
      <node id="136550">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="136545" relation="include">
        </childnode>
        <childnode refid="136475" relation="include">
        </childnode>
        <childnode refid="136473" relation="include">
        </childnode>
        <childnode refid="136551" relation="include">
        </childnode>
      </node>
      <node id="136501">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="136438">
        <label>AsgTools/Check.h</label>
        <link refid="da/d02/Check_8h_source"/>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136439" relation="include">
        </childnode>
      </node>
      <node id="136517">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="136602">
        <label>GaudiKernel/ServiceHandle.h</label>
      </node>
      <node id="136546">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="136485" relation="include">
        </childnode>
        <childnode refid="136463" relation="include">
        </childnode>
        <childnode refid="136480" relation="include">
        </childnode>
        <childnode refid="136547" relation="include">
        </childnode>
      </node>
      <node id="136528">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="136442">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="136463">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="136464" relation="include">
        </childnode>
        <childnode refid="136465" relation="include">
        </childnode>
      </node>
      <node id="136498">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="136505">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="136582">
        <label>xAODTracking/TrackParticleFwd.h</label>
        <link refid="d1/dc4/TrackParticleFwd_8h_source"/>
      </node>
      <node id="136544">
        <label>limits.h</label>
      </node>
      <node id="136538">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="136539" relation="include">
        </childnode>
      </node>
      <node id="136515">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="136491" relation="include">
        </childnode>
        <childnode refid="136478" relation="include">
        </childnode>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136516" relation="include">
        </childnode>
      </node>
      <node id="136601">
        <label>GaudiKernel/ToolHandle.h</label>
      </node>
      <node id="136469">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136471" relation="include">
        </childnode>
      </node>
      <node id="136462">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="136460" relation="include">
        </childnode>
      </node>
      <node id="136456">
        <label>Eigen/Dense</label>
      </node>
      <node id="136472">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="136473" relation="include">
        </childnode>
        <childnode refid="136474" relation="include">
        </childnode>
        <childnode refid="136475" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
        <childnode refid="136477" relation="include">
        </childnode>
        <childnode refid="136478" relation="include">
        </childnode>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136479" relation="include">
        </childnode>
      </node>
      <node id="136531">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="136530" relation="include">
        </childnode>
      </node>
      <node id="136566">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="136567" relation="include">
        </childnode>
        <childnode refid="136527" relation="include">
        </childnode>
        <childnode refid="136568" relation="include">
        </childnode>
        <childnode refid="136526" relation="include">
        </childnode>
      </node>
      <node id="136568">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="136569" relation="include">
        </childnode>
      </node>
      <node id="136547">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="136543" relation="include">
        </childnode>
        <childnode refid="136531" relation="include">
        </childnode>
      </node>
      <node id="136436">
        <label>AsgTools/StatusCode.h</label>
        <link refid="d4/d5c/AsgTools_2AsgTools_2StatusCode_8h_source"/>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136438" relation="include">
        </childnode>
        <childnode refid="136444" relation="include">
        </childnode>
      </node>
      <node id="136484">
        <label>typeinfo</label>
      </node>
      <node id="136529">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="136500" relation="include">
        </childnode>
        <childnode refid="136530" relation="include">
        </childnode>
      </node>
      <node id="136452">
        <label>xAODTracking/TrackingPrimitives.h</label>
        <link refid="d2/d4c/TrackingPrimitives_8h_source"/>
        <childnode refid="136453" relation="include">
        </childnode>
      </node>
      <node id="136467">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="136468" relation="include">
        </childnode>
        <childnode refid="136485" relation="include">
        </childnode>
        <childnode refid="136486" relation="include">
        </childnode>
        <childnode refid="136487" relation="include">
        </childnode>
        <childnode refid="136536" relation="include">
        </childnode>
        <childnode refid="136537" relation="include">
        </childnode>
        <childnode refid="136543" relation="include">
        </childnode>
        <childnode refid="136545" relation="include">
        </childnode>
        <childnode refid="136549" relation="include">
        </childnode>
        <childnode refid="136550" relation="include">
        </childnode>
        <childnode refid="136546" relation="include">
        </childnode>
        <childnode refid="136552" relation="include">
        </childnode>
        <childnode refid="136463" relation="include">
        </childnode>
        <childnode refid="136553" relation="include">
        </childnode>
        <childnode refid="136554" relation="include">
        </childnode>
        <childnode refid="136548" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136481" relation="include">
        </childnode>
        <childnode refid="136555" relation="include">
        </childnode>
        <childnode refid="136473" relation="include">
        </childnode>
        <childnode refid="136483" relation="include">
        </childnode>
        <childnode refid="136475" relation="include">
        </childnode>
        <childnode refid="136526" relation="include">
        </childnode>
        <childnode refid="136556" relation="include">
        </childnode>
        <childnode refid="136558" relation="include">
        </childnode>
        <childnode refid="136562" relation="include">
        </childnode>
        <childnode refid="136563" relation="include">
        </childnode>
      </node>
      <node id="136584">
        <label>xAODTracking/NeutralParticle.h</label>
        <link refid="d4/daa/NeutralParticle_8h_source"/>
        <childnode refid="136585" relation="include">
        </childnode>
        <childnode refid="136574" relation="include">
        </childnode>
      </node>
      <node id="136459">
        <label>bitset</label>
      </node>
      <node id="136516">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="136466">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="136497">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="136439">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136440" relation="include">
        </childnode>
        <childnode refid="136443" relation="include">
        </childnode>
      </node>
      <node id="136496">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="136460" relation="include">
        </childnode>
      </node>
      <node id="136576">
        <label>xAODTracking/versions/Vertex_v1.h</label>
        <link refid="d7/dcc/Vertex__v1_8h_source"/>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136527" relation="include">
        </childnode>
        <childnode refid="136461" relation="include">
        </childnode>
        <childnode refid="136453" relation="include">
        </childnode>
        <childnode refid="136577" relation="include">
        </childnode>
        <childnode refid="136579" relation="include">
        </childnode>
        <childnode refid="136452" relation="include">
        </childnode>
        <childnode refid="136580" relation="include">
        </childnode>
        <childnode refid="136583" relation="include">
        </childnode>
        <childnode refid="136568" relation="include">
        </childnode>
        <childnode refid="136590" relation="include">
        </childnode>
      </node>
      <node id="136591">
        <label>TrkTrackSummary/TrackSummary.h</label>
      </node>
      <node id="136492">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="136519">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="136537">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="136538" relation="include">
        </childnode>
        <childnode refid="136487" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136479" relation="include">
        </childnode>
        <childnode refid="136540" relation="include">
        </childnode>
        <childnode refid="136518" relation="include">
        </childnode>
        <childnode refid="136541" relation="include">
        </childnode>
      </node>
      <node id="136490">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="136454">
        <label>unistd.h</label>
      </node>
      <node id="136556">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="136557" relation="include">
        </childnode>
      </node>
      <node id="136509">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="136469" relation="include">
        </childnode>
        <childnode refid="136510" relation="include">
        </childnode>
        <childnode refid="136511" relation="include">
        </childnode>
        <childnode refid="136512" relation="include">
        </childnode>
        <childnode refid="136521" relation="include">
        </childnode>
        <childnode refid="136502" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136523" relation="include">
        </childnode>
        <childnode refid="136524" relation="include">
        </childnode>
      </node>
      <node id="136494">
        <label>vector</label>
      </node>
      <node id="136581">
        <label>xAODBase/IParticleContainer.h</label>
        <link refid="dd/d2d/IParticleContainer_8h_source"/>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136566" relation="include">
        </childnode>
        <childnode refid="136490" relation="include">
        </childnode>
      </node>
      <node id="136564">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="136473" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
      </node>
      <node id="136575">
        <label>xAODTracking/Vertex.h</label>
        <link refid="d9/d2d/Vertex_8h_source"/>
        <childnode refid="136576" relation="include">
        </childnode>
      </node>
      <node id="136587">
        <label>xAODTracking/versions/NeutralParticleContainer_v1.h</label>
        <link refid="d6/d5f/NeutralParticleContainer__v1_8h_source"/>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136585" relation="include">
        </childnode>
        <childnode refid="136588" relation="include">
        </childnode>
      </node>
      <node id="136565">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="136474">
        <label>utility</label>
      </node>
      <node id="136562">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="136593">
        <label>array</label>
      </node>
      <node id="136499">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="136447">
        <label>sstream</label>
      </node>
      <node id="136577">
        <label>GeoPrimitives/GeoPrimitives.h</label>
        <link refid="d7/d87/GeoPrimitives_8h_source"/>
        <childnode refid="136454" relation="include">
        </childnode>
        <childnode refid="136578" relation="include">
        </childnode>
      </node>
      <node id="136571">
        <label>xAODTracking/VertexFwd.h</label>
        <link refid="d9/ddd/VertexFwd_8h_source"/>
      </node>
      <node id="136603">
        <label>TrkToolInterfaces/ITrackSummaryTool.h</label>
      </node>
      <node id="136535">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="136503">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="136596">
        <label>PATCore/IAsgSelectionTool.h</label>
        <link refid="d9/dfd/IAsgSelectionTool_8h_source"/>
        <childnode refid="136448" relation="include">
        </childnode>
        <childnode refid="136597" relation="include">
        </childnode>
      </node>
      <node id="136513">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="136502">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="136503" relation="include">
        </childnode>
        <childnode refid="136504" relation="include">
        </childnode>
        <childnode refid="136505" relation="include">
        </childnode>
        <childnode refid="136506" relation="include">
        </childnode>
        <childnode refid="136507" relation="include">
        </childnode>
      </node>
      <node id="136569">
        <label>iosfwd</label>
      </node>
      <node id="136476">
        <label>cstdlib</label>
      </node>
      <node id="136457">
        <label>xAODTracking/TrackParticle.h</label>
        <link refid="d2/d15/TrackParticle_8h_source"/>
        <childnode refid="136458" relation="include">
        </childnode>
        <childnode refid="136574" relation="include">
        </childnode>
      </node>
      <node id="136555">
        <label>iostream</label>
      </node>
      <node id="136482">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="136489">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="136469" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136490" relation="include">
        </childnode>
      </node>
      <node id="136470">
        <label>cstddef</label>
      </node>
      <node id="136451">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="136446">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136447" relation="include">
        </childnode>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136440" relation="include">
        </childnode>
        <childnode refid="136448" relation="include">
        </childnode>
        <childnode refid="136451" relation="include">
        </childnode>
      </node>
      <node id="136597">
        <label>PATCore/TAccept.h</label>
        <link refid="d0/dcf/TAccept_8h_source"/>
        <childnode refid="136598" relation="include">
        </childnode>
        <childnode refid="136592" relation="include">
        </childnode>
        <childnode refid="136459" relation="include">
        </childnode>
      </node>
      <node id="136508">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="136509" relation="include">
        </childnode>
        <childnode refid="136525" relation="include">
        </childnode>
        <childnode refid="136489" relation="include">
        </childnode>
        <childnode refid="136500" relation="include">
        </childnode>
        <childnode refid="136501" relation="include">
        </childnode>
      </node>
      <node id="136449">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="136590">
        <label>xAODCore/BaseInfo.h</label>
        <link refid="d3/d17/BaseInfo_8h_source"/>
        <childnode refid="136526" relation="include">
        </childnode>
      </node>
      <node id="136598">
        <label>TString.h</label>
      </node>
      <node id="136435">
        <label>InDetTrackAccessor.h</label>
        <link refid="d6/d4b/InDetTrackAccessor_8h_source"/>
        <childnode refid="136436" relation="include">
        </childnode>
        <childnode refid="136445" relation="include">
        </childnode>
        <childnode refid="136452" relation="include">
        </childnode>
        <childnode refid="136457" relation="include">
        </childnode>
        <childnode refid="136575" relation="include">
        </childnode>
        <childnode refid="136591" relation="include">
        </childnode>
      </node>
      <node id="136586">
        <label>TrkNeutralParameters/NeutralParameters.h</label>
      </node>
      <node id="136541">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="136485" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136542" relation="include">
        </childnode>
        <childnode refid="136530" relation="include">
        </childnode>
        <childnode refid="136476" relation="include">
        </childnode>
        <childnode refid="136526" relation="include">
        </childnode>
      </node>
      <node id="136512">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="136510" relation="include">
        </childnode>
        <childnode refid="136513" relation="include">
        </childnode>
        <childnode refid="136493" relation="include">
        </childnode>
        <childnode refid="136514" relation="include">
        </childnode>
        <childnode refid="136499" relation="include">
        </childnode>
        <childnode refid="136484" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136473" relation="include">
        </childnode>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136518" relation="include">
        </childnode>
        <childnode refid="136519" relation="include">
        </childnode>
        <childnode refid="136520" relation="include">
        </childnode>
      </node>
      <node id="136572">
        <label>TrkParameters/TrackParameters.h</label>
      </node>
      <node id="136585">
        <label>versions/NeutralParticle_v1.h</label>
        <link refid="da/d85/NeutralParticle__v1_8h_source"/>
        <childnode refid="136461" relation="include">
        </childnode>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136566" relation="include">
        </childnode>
        <childnode refid="136452" relation="include">
        </childnode>
        <childnode refid="136570" relation="include">
        </childnode>
        <childnode refid="136459" relation="include">
        </childnode>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136586" relation="include">
        </childnode>
      </node>
      <node id="136594">
        <label>InDetTrackSelectionTool/InDetTrackSelectionTool.h</label>
        <link refid="d7/de0/InDetTrackSelectionTool_8h_source"/>
        <childnode refid="136595" relation="include">
        </childnode>
        <childnode refid="136599" relation="include">
        </childnode>
        <childnode refid="136601" relation="include">
        </childnode>
        <childnode refid="136602" relation="include">
        </childnode>
        <childnode refid="136603" relation="include">
        </childnode>
        <childnode refid="136604" relation="include">
        </childnode>
        <childnode refid="136592" relation="include">
        </childnode>
        <childnode refid="136478" relation="include">
        </childnode>
      </node>
      <node id="136445">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136446" relation="include">
        </childnode>
        <childnode refid="136439" relation="include">
        </childnode>
      </node>
      <node id="136589">
        <label>xAODTracking/NeutralParticleFwd.h</label>
        <link refid="d4/d90/NeutralParticleFwd_8h_source"/>
      </node>
      <node id="136444">
        <label>GaudiKernel/StatusCode.h</label>
      </node>
      <node id="136518">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="136583">
        <label>xAODTracking/NeutralParticleContainer.h</label>
        <link refid="da/d7f/NeutralParticleContainer_8h_source"/>
        <childnode refid="136584" relation="include">
        </childnode>
        <childnode refid="136587" relation="include">
        </childnode>
        <childnode refid="136574" relation="include">
        </childnode>
      </node>
      <node id="136487">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="136488" relation="include">
        </childnode>
        <childnode refid="136485" relation="include">
        </childnode>
        <childnode refid="136486" relation="include">
        </childnode>
        <childnode refid="136527" relation="include">
        </childnode>
        <childnode refid="136509" relation="include">
        </childnode>
        <childnode refid="136468" relation="include">
        </childnode>
        <childnode refid="136531" relation="include">
        </childnode>
        <childnode refid="136525" relation="include">
        </childnode>
        <childnode refid="136532" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136535" relation="include">
        </childnode>
      </node>
      <node id="136574">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="136490" relation="include">
        </childnode>
      </node>
      <node id="136522">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="136514">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="136513" relation="include">
        </childnode>
        <childnode refid="136515" relation="include">
        </childnode>
        <childnode refid="136499" relation="include">
        </childnode>
        <childnode refid="136494" relation="include">
        </childnode>
        <childnode refid="136517" relation="include">
        </childnode>
      </node>
      <node id="136473">
        <label>algorithm</label>
      </node>
      <node id="136552">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="136573">
        <label>TrkTrack/TrackCollection.h</label>
      </node>
      <node id="136527">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="136528" relation="include">
        </childnode>
        <childnode refid="136489" relation="include">
        </childnode>
        <childnode refid="136525" relation="include">
        </childnode>
        <childnode refid="136495" relation="include">
        </childnode>
        <childnode refid="136509" relation="include">
        </childnode>
        <childnode refid="136488" relation="include">
        </childnode>
        <childnode refid="136493" relation="include">
        </childnode>
        <childnode refid="136468" relation="include">
        </childnode>
        <childnode refid="136500" relation="include">
        </childnode>
        <childnode refid="136470" relation="include">
        </childnode>
        <childnode refid="136529" relation="include">
        </childnode>
      </node>
      <node id="136599">
        <label>AsgTools/AsgTool.h</label>
        <link refid="d4/d29/AsgTool_8h_source"/>
        <childnode refid="136437" relation="include">
        </childnode>
        <childnode refid="136448" relation="include">
        </childnode>
        <childnode refid="136440" relation="include">
        </childnode>
        <childnode refid="136600" relation="include">
        </childnode>
      </node>
      <node id="136495">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136496" relation="include">
        </childnode>
        <childnode refid="136463" relation="include">
        </childnode>
      </node>
      <node id="136549">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="136545" relation="include">
        </childnode>
        <childnode refid="136531" relation="include">
        </childnode>
        <childnode refid="136475" relation="include">
        </childnode>
      </node>
      <node id="136485">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="136461">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="136460" relation="include">
        </childnode>
        <childnode refid="136441" relation="include">
        </childnode>
        <childnode refid="136462" relation="include">
        </childnode>
        <childnode refid="136463" relation="include">
        </childnode>
        <childnode refid="136466" relation="include">
        </childnode>
      </node>
      <node id="136600">
        <label>AsgTools/SetProperty.h</label>
        <link refid="df/db0/SetProperty_8h_source"/>
      </node>
      <node id="136539">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="136554">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="136480">
        <label>memory</label>
      </node>
      <node id="136588">
        <label>xAODTracking/NeutralParticleContainerFwd.h</label>
        <link refid="d2/db4/NeutralParticleContainerFwd_8h_source"/>
        <childnode refid="136467" relation="include">
        </childnode>
        <childnode refid="136581" relation="include">
        </childnode>
        <childnode refid="136589" relation="include">
        </childnode>
      </node>
      <node id="136521">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="136511" relation="include">
        </childnode>
        <childnode refid="136512" relation="include">
        </childnode>
        <childnode refid="136522" relation="include">
        </childnode>
      </node>
      <node id="136433">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/InDetTrackSelectionTool/Root/InDetTrackCut.cxx</label>
        <link refid="InDetTrackCut.cxx"/>
        <childnode refid="136434" relation="include">
        </childnode>
        <childnode refid="136594" relation="include">
        </childnode>
        <childnode refid="136473" relation="include">
        </childnode>
      </node>
      <node id="136532">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="136528" relation="include">
        </childnode>
        <childnode refid="136525" relation="include">
        </childnode>
        <childnode refid="136489" relation="include">
        </childnode>
        <childnode refid="136518" relation="include">
        </childnode>
        <childnode refid="136533" relation="include">
        </childnode>
        <childnode refid="136534" relation="include">
        </childnode>
        <childnode refid="136441" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InDetTrackCuts.cxx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementations<sp/>and<sp/>definitions<sp/>of<sp/>cut<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/InDetTrackCut.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;InDetTrackSelectionTool/InDetTrackSelectionTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>TrackCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">InDet::TrackCut::TrackCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>:<sp/>asg::AsgMessaging(tool)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>,<sp/>m_trackAccessors(nullptr)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>,<sp/>m_selectionTool(tool)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">InDet::TrackCut::~TrackCut()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>function<sp/>is<sp/>a<sp/>friend<sp/>of<sp/>the<sp/>tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">StatusCode<sp/>InDet::TrackCut::initialize()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_selectionTool)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>pointer<sp/>to<sp/>InDetTrackSelectionTool.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>cut<sp/>have<sp/>a<sp/>handle<sp/>on<sp/>the<sp/>tool&apos;s<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>m_trackAccessors<sp/>=<sp/>&amp;(m_selectionTool-&gt;m_trackAccessors);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>OrCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;N&gt;::OrCut</ref>(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">StatusCode<sp/><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;N&gt;::initialize</ref>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cut<sp/>:<sp/>m_cuts)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cut<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>not<sp/>set<sp/>all<sp/>cuts<sp/>in<sp/>OrCut&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ASG_CHECK(cut-&gt;initialize());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;N&gt;::result</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cut<sp/>:<sp/>m_cuts)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cut-&gt;result())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;2&gt;</ref>;<sp/></highlight><highlight class="comment">//<sp/>instantiate<sp/>the<sp/>values<sp/>that<sp/>will<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;3&gt;</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d59/classInDet_1_1OrCut" kindref="compound">InDet::OrCut&lt;4&gt;</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MaxSummaryValueCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">InDet::MaxSummaryValueCut::MaxSummaryValueCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>max)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">InDet::MaxSummaryValueCut::MaxSummaryValueCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>max,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;xAOD::SummaryType&gt;&amp;<sp/>sumTypes)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>,<sp/>m_summaryTypes(sumTypes)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">StatusCode<sp/>InDet::MaxSummaryValueCut::initialize()</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>run<sp/>the<sp/>base<sp/>class<sp/>version<sp/>to<sp/>get<sp/>access<sp/>to<sp/>the<sp/>tool&apos;s<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref><sp/>type<sp/>:<sp/>m_summaryTypes)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>summaryName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>summaryName<sp/>+=<sp/>std::to_string(type);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SummaryAccessor&gt;<sp/>accessor;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>getAccessor(summaryName,<sp/>accessor)<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor-&gt;setSummaryType(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m_summaryAccessors.push_back(<sp/>std::move(accessor)<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MaxSummaryValueCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>Int_t<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::shared_ptr&lt;SummaryAccessor&gt;<sp/>summaryAccessor<sp/>:<sp/>m_summaryAccessors)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!summaryAccessor)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>summaryAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&lt;=<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinSummaryValueCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">InDet::MinSummaryValueCut::MinSummaryValueCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>min)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>,<sp/>m_minValue(min)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">InDet::MinSummaryValueCut::MinSummaryValueCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>min,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;xAOD::SummaryType&gt;&amp;<sp/>sumTypes)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>,<sp/>m_minValue(min)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>,<sp/>m_summaryTypes(sumTypes)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">StatusCode<sp/>InDet::MinSummaryValueCut::initialize()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>run<sp/>the<sp/>base<sp/>class<sp/>version<sp/>to<sp/>get<sp/>access<sp/>to<sp/>the<sp/>tool&apos;s<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref><sp/>type<sp/>:<sp/>m_summaryTypes)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>summaryName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>summaryName<sp/>+=<sp/>std::to_string(type);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SummaryAccessor&gt;<sp/>accessor;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>getAccessor(summaryName,<sp/>accessor)<sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor-&gt;setSummaryType(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>m_summaryAccessors.push_back(<sp/>std::move(accessor)<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinSummaryValueCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="144"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>Int_t<sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::shared_ptr&lt;SummaryAccessor&gt;<sp/>summaryAccessor<sp/>:<sp/>m_summaryAccessors)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!summaryAccessor)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>summaryAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;=<sp/>m_minValue;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>FuncSummaryValueCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;N&gt;::FuncSummaryValueCut</ref>(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;xAOD::SummaryType,N&gt;&amp;&amp;<sp/>sumTypes)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>,<sp/>m_summaryTypes(sumTypes)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">StatusCode<sp/><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;N&gt;::initialize</ref>()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>run<sp/>the<sp/>base<sp/>class<sp/>version<sp/>to<sp/>get<sp/>access<sp/>to<sp/>the<sp/>tool&apos;s<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="da/deb/structN" kindref="compound">N</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>summaryName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>summaryName<sp/>+=<sp/>std::to_string(m_summaryTypes[i]);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SummaryAccessor&gt;<sp/>accessor;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>getAccessor(summaryName,<sp/>accessor)<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor-&gt;setSummaryType(<sp/>m_summaryTypes[i]<sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>m_summaryAccessors[i]<sp/>=<sp/>std::move(accessor);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;N&gt;::result</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="185"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_summaryAccessors[i])<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>m_results[i]<sp/>=<sp/>m_summaryAccessors[i]-&gt;getValue();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_func(m_results);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;2&gt;</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;3&gt;</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;4&gt;</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="da/d66/classInDet_1_1FuncSummaryValueCut" kindref="compound">InDet::FuncSummaryValueCut&lt;6&gt;</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MaxSummaryValueRatioCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">InDet::MaxSummaryValueRatioCut::MaxSummaryValueRatioCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">StatusCode<sp/>InDet::MaxSummaryValueRatioCut::initialize()</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>run<sp/>the<sp/>base<sp/>class<sp/>version<sp/>to<sp/>get<sp/>access<sp/>to<sp/>the<sp/>tool&apos;s<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref><sp/>type<sp/>:<sp/>m_summaryTypesNum)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>summaryName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>summaryName<sp/>+=<sp/>std::to_string(type);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SummaryAccessor&gt;<sp/>accessor;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>getAccessor(summaryName,<sp/>accessor)<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor-&gt;setSummaryType(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>m_summaryAccessorsNum.push_back(<sp/>std::move(accessor)<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286a" kindref="member">xAOD::SummaryType</ref><sp/>type<sp/>:<sp/>m_summaryTypesDen)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>summaryName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>summaryName<sp/>+=<sp/>std::to_string(type);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SummaryAccessor&gt;<sp/>accessor;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>getAccessor(summaryName,<sp/>accessor)<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor-&gt;setSummaryType(<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>m_summaryAccessorsDen.push_back(<sp/>std::move(accessor)<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MaxSummaryValueRatioCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="234"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>Int_t<sp/>numerator<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::shared_ptr&lt;SummaryAccessor&gt;<sp/>summaryAccessor<sp/>:<sp/>m_summaryAccessorsNum)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!summaryAccessor)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>numerator<sp/>+=<sp/>summaryAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>Int_t<sp/>denominator<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::shared_ptr&lt;SummaryAccessor&gt;<sp/>summaryAccessor<sp/>:<sp/>m_summaryAccessorsDen)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!summaryAccessor)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>denominator<sp/>+=<sp/>summaryAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numerator<sp/>&lt;=<sp/>m_maxValue*denominator;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinTrtHitCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">InDet::MinTrtHitCut::MinTrtHitCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>min,<sp/>Double_t<sp/>etaLow,<sp/>Double_t<sp/>etaHigh)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>,<sp/>InDet::MinSummaryValueCut(tool,<sp/>min)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>,<sp/>m_maxTrtEtaAcceptance(etaLow)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>,<sp/>m_maxEtaForCut(etaHigh)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">StatusCode<sp/>InDet::MinTrtHitCut::initialize()</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>MinSummaryValueCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinTrtHitCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="272"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>eta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>absEta<sp/>=<sp/>std::fabs(m_etaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absEta<sp/>&lt;=<sp/>m_maxTrtEtaAcceptance<sp/>||<sp/>absEta<sp/>&gt;<sp/>m_maxEtaForCut)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MinSummaryValueCut::result();</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MaxTrtHitRatioCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">InDet::MaxTrtHitRatioCut::MaxTrtHitRatioCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>ratio,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double_t<sp/>etaLow,<sp/>Double_t<sp/>etaHigh)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>,<sp/>InDet::MaxSummaryValueRatioCut(tool,<sp/>ratio)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>,<sp/>m_maxTrtEtaAcceptance(etaLow)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>,<sp/>m_maxEtaForCut(etaHigh)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">StatusCode<sp/>InDet::MaxTrtHitRatioCut::initialize()</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>MaxSummaryValueRatioCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MaxTrtHitRatioCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="302"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>eta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>absEta<sp/>=<sp/>std::fabs(m_etaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absEta<sp/>&lt;=<sp/>m_maxTrtEtaAcceptance<sp/>||<sp/>absEta<sp/>&gt;<sp/>m_maxEtaForCut)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaxSummaryValueRatioCut::result();</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>D0Cut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">InDet::D0Cut::D0Cut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>,<sp/>m_paramAccessor(nullptr)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">StatusCode<sp/>InDet::D0Cut::initialize()</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;d0&quot;</highlight><highlight class="normal">,<sp/>m_paramAccessor)<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::D0Cut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="330"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramAccessor)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(m_paramAccessor-&gt;getValue())<sp/>&lt;=<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>D0SigmaCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">InDet::D0SigmaCut::D0SigmaCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>maxSigma)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(maxSigma*maxSigma)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>,<sp/>m_paramCovAccessor(nullptr)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">StatusCode<sp/>InDet::D0SigmaCut::initialize()</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaD0&quot;</highlight><highlight class="normal">,<sp/>m_paramCovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::D0SigmaCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="354"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramCovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>covariance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_paramCovAccessor-&gt;getValue()<sp/>&lt;=<sp/>m_maxValueSq;<sp/></highlight><highlight class="comment">//<sp/>max<sp/>value<sp/>is<sp/>squared<sp/>in<sp/>the<sp/>setting<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>D0SignificanceCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">InDet::D0SignificanceCut::D0SignificanceCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(max*max)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>,<sp/>m_paramAccessor(nullptr)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>,<sp/>m_paramCovAccessor(nullptr)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">StatusCode<sp/>InDet::D0SignificanceCut::initialize()</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;d0&quot;</highlight><highlight class="normal">,<sp/>m_paramAccessor)<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaD0&quot;</highlight><highlight class="normal">,<sp/>m_paramCovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::D0SignificanceCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="380"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramAccessor)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramCovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>covariance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_paramAccessor-&gt;getValue()*m_paramAccessor-&gt;getValue()</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;=<sp/>m_maxValueSq*m_paramCovAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0Cut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">InDet::Z0Cut::Z0Cut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>,<sp/>m_paramAccessor(nullptr)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">StatusCode<sp/>InDet::Z0Cut::initialize()</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">,<sp/>m_paramAccessor)<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0Cut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="409"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramAccessor)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(m_paramAccessor-&gt;getValue())<sp/>&lt;=<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0SigmaCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">InDet::Z0SigmaCut::Z0SigmaCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>maxSigma)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(maxSigma*maxSigma)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>,<sp/>m_paramCovAccessor(nullptr)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">StatusCode<sp/>InDet::Z0SigmaCut::initialize()</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_paramCovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0SigmaCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="434"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramCovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>covariance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_paramCovAccessor-&gt;getValue()<sp/>&lt;=<sp/>m_maxValueSq;<sp/></highlight><highlight class="comment">//<sp/>max<sp/>value<sp/>is<sp/>squared<sp/>in<sp/>the<sp/>set<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0SignificanceCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">InDet::Z0SignificanceCut::Z0SignificanceCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(max*max)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>,<sp/>m_paramAccessor(nullptr)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>,<sp/>m_paramCovAccessor(nullptr)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">StatusCode<sp/>InDet::Z0SignificanceCut::initialize()</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">,<sp/>m_paramAccessor)<sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_paramCovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0SignificanceCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="460"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramAccessor)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_paramCovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>parameter<sp/>covariance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_paramAccessor-&gt;getValue()*m_paramAccessor-&gt;getValue()</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;=<sp/>m_maxValueSq*m_paramCovAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0SinThetaCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">InDet::Z0SinThetaCut::Z0SinThetaCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>,<sp/>m_Z0Accessor(nullptr)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>,<sp/>m_ThetaAccessor(nullptr)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">StatusCode<sp/>InDet::Z0SinThetaCut::initialize()</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">,<sp/>m_Z0Accessor)<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/><sp/>m_ThetaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0SinThetaCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="492"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_Z0Accessor)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Z0<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ThetaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Theta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(m_Z0Accessor-&gt;getValue()<sp/>*<sp/>std::sin(m_ThetaAccessor-&gt;getValue()))<sp/>&lt;=<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0SinThetaSigmaCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">InDet::Z0SinThetaSigmaCut::Z0SinThetaSigmaCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>maxSigma)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(maxSigma*maxSigma)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>,<sp/>m_Z0Accessor(nullptr)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>,<sp/>m_Z0VarAccessor(nullptr)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>,<sp/>m_ThetaAccessor(nullptr)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>,<sp/>m_ThetaVarAccessor(nullptr)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>,<sp/>m_CovAccessor(nullptr)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">StatusCode<sp/>InDet::Z0SinThetaSigmaCut::initialize()</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">,<sp/>m_Z0Accessor)<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_Z0VarAccessor)<sp/>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/><sp/>m_ThetaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaTheta&quot;</highlight><highlight class="normal">,<sp/>m_ThetaVarAccessor)<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;covZ0Theta&quot;</highlight><highlight class="normal">,<sp/>m_CovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0SinThetaSigmaCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="528"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_Z0Accessor)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Z0<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_Z0VarAccessor)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Z0<sp/>variance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ThetaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Theta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ThetaVarAccessor)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Theta<sp/>variance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_CovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Covariance<sp/>of<sp/>z0<sp/>and<sp/>theta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>Double_t<sp/>z0<sp/>=<sp/>m_Z0Accessor-&gt;getValue();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>Double_t<sp/>sinTheta<sp/>=<sp/>std::sin(m_ThetaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>Double_t<sp/>cosTheta<sp/>=<sp/>std::cos(m_ThetaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z0*z0*cosTheta*cosTheta*m_ThetaVarAccessor-&gt;getValue()<sp/>+</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2*z0*sinTheta*cosTheta*m_CovAccessor-&gt;getValue()<sp/>+</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sinTheta*sinTheta*m_Z0VarAccessor-&gt;getValue()<sp/>)<sp/>&lt;=<sp/>m_maxValueSq;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Z0SinThetaSignificanceCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">InDet::Z0SinThetaSignificanceCut::Z0SinThetaSignificanceCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValueSq(max*max)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>,<sp/>m_Z0Accessor(nullptr)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>,<sp/>m_Z0VarAccessor(nullptr)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>,<sp/>m_ThetaAccessor(nullptr)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>,<sp/>m_ThetaVarAccessor(nullptr)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>,<sp/>m_CovAccessor(nullptr)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">StatusCode<sp/>InDet::Z0SinThetaSignificanceCut::initialize()</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;z0&quot;</highlight><highlight class="normal">,<sp/>m_Z0Accessor)<sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_Z0VarAccessor)<sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;theta&quot;</highlight><highlight class="normal">,<sp/><sp/>m_ThetaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;sigmaTheta&quot;</highlight><highlight class="normal">,<sp/>m_ThetaVarAccessor)<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;covZ0Theta&quot;</highlight><highlight class="normal">,<sp/>m_CovAccessor)<sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::Z0SinThetaSignificanceCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="583"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_Z0Accessor)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Z0<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_Z0VarAccessor)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Z0<sp/>variance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ThetaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Theta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ThetaVarAccessor)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Theta<sp/>variance<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_CovAccessor)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Covariance<sp/>of<sp/>z0<sp/>and<sp/>theta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>Double_t<sp/>z0<sp/>=<sp/>m_Z0Accessor-&gt;getValue();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>Double_t<sp/>sinTheta<sp/>=<sp/>std::sin(m_ThetaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>Double_t<sp/>cosTheta<sp/>=<sp/>std::cos(m_ThetaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>z0*z0*sinTheta*sinTheta<sp/>&lt;=</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxValueSq*(z0*z0*cosTheta*cosTheta*m_ThetaVarAccessor-&gt;getValue()<sp/>+</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2*z0*sinTheta*cosTheta*m_CovAccessor-&gt;getValue()<sp/>+</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sinTheta*sinTheta*m_Z0VarAccessor-&gt;getValue()<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>EtaDependentChiSqCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">InDet::EtaDependentChiSqCut::EtaDependentChiSqCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>,<sp/>m_fitAccessor(nullptr)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">StatusCode<sp/>InDet::EtaDependentChiSqCut::initialize()</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;fitQuality&quot;</highlight><highlight class="normal">,<sp/>m_fitAccessor)<sp/>);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::EtaDependentChiSqCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="633"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>eta-dependent<sp/>chi<sp/>squared<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_fitAccessor)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Fit<sp/>quality<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>eta-dependent<sp/>chi<sp/>squared<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>Double_t<sp/>eta<sp/>=<sp/>m_etaAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>helper<sp/>function<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>track<sp/>passes<sp/>a<sp/>pseudorapidity<sp/>dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>chi<sp/>squared<sp/>per<sp/>degree<sp/>of<sp/>freedom<sp/>cut.<sp/>The<sp/>current<sp/>implementation<sp/>is<sp/>a<sp/>working</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>definition:<sp/>see<sp/>https://twiki.cern.ch/twiki/bin/view/AtlasProtected/InDetTrackingPerformanceGuidelines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(eta)<sp/>&lt;<sp/>1.9)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_fitAccessor-&gt;getChiSq()<sp/>&lt;=<sp/>m_fitAccessor-&gt;getNumberDoF()<sp/>*<sp/>(<sp/>4.4<sp/>+<sp/>0.32*eta*eta<sp/>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_fitAccessor-&gt;getChiSq()<sp/>&lt;=<sp/>m_fitAccessor-&gt;getNumberDoF()<sp/>*<sp/>(<sp/>26.9<sp/>-<sp/>19.6978*std::fabs(eta)<sp/>+<sp/>4.4534*eta*eta<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinNSiHitsAboveEta<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">InDet::MinNSiHitsAboveEta::MinNSiHitsAboveEta(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>minSi,<sp/>Double_t<sp/>eta)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>,<sp/>m_etaCutoff(eta)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>,<sp/>m_minSiHits(minSi)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>,<sp/>m_pixAccessor(nullptr)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>,<sp/>m_pixDeadAccessor(nullptr)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>,<sp/>m_sctAccessor(nullptr)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>,<sp/>m_sctDeadAccessor(nullptr)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">StatusCode<sp/>InDet::MinNSiHitsAboveEta::initialize()</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>std::string<sp/>pixHits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>pixHits<sp/>+=<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>std::string<sp/>pixDead<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>pixDead<sp/>+=<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>std::string<sp/>sctHits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>sctHits<sp/>+=<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>std::string<sp/>sctDead<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>sctDead<sp/>+=<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(pixHits,<sp/>m_pixAccessor)<sp/>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(pixDead,<sp/>m_pixDeadAccessor)<sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctHits,<sp/>m_sctAccessor)<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctDead,<sp/>m_sctDeadAccessor)<sp/>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>m_pixAccessor-&gt;setSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref><sp/>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>m_pixDeadAccessor-&gt;setSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref><sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>m_sctAccessor-&gt;setSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>m_sctDeadAccessor-&gt;setSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref><sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinNSiHitsAboveEta::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="690"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pixAccessor)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Pixel<sp/>hits<sp/>accessor<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pixDeadAccessor)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Pixel<sp/>dead<sp/>sensors<sp/>accessor<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctAccessor)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>hits<sp/>accessor<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctDeadAccessor)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>dead<sp/>sensor<sp/>accessor<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>accessor<sp/>not<sp/>valid.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;<sp/>in<sp/>MinNSiHitsAboveEta&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(m_etaAccessor-&gt;getValue())<sp/>&lt;=<sp/>m_etaCutoff</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>(m_pixAccessor-&gt;getValue()<sp/>+<sp/>m_pixDeadAccessor-&gt;getValue()</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>m_sctAccessor-&gt;getValue()<sp/>+<sp/>m_sctDeadAccessor-&gt;getValue()<sp/>&gt;=<sp/>m_minSiHits);</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MaxChiSq<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">InDet::MaxChiSq::MaxChiSq(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>,<sp/>m_accessor(nullptr)</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">StatusCode<sp/>InDet::MaxChiSq::initialize()</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(<sp/></highlight><highlight class="stringliteral">&quot;fitQuality&quot;</highlight><highlight class="normal">,<sp/>m_accessor<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MaxChiSq::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="733"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_accessor)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>fit<sp/>quality<sp/>accessor.<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accessor-&gt;getChiSq()<sp/>&lt;=<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MaxChiSqPerNdf<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">InDet::MaxChiSqPerNdf::MaxChiSqPerNdf(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>,<sp/>m_maxValue(max)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>,<sp/>m_accessor(nullptr)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">StatusCode<sp/>InDet::MaxChiSqPerNdf::initialize()</highlight></codeline>
<codeline lineno="750"><highlight class="normal">{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getAccessor(<sp/></highlight><highlight class="stringliteral">&quot;fitQuality&quot;</highlight><highlight class="normal">,<sp/>m_accessor<sp/>);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MaxChiSqPerNdf::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="756"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_accessor)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>fit<sp/>quality<sp/>accessor.<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accessor-&gt;getChiSq()<sp/>&lt;=<sp/>m_accessor-&gt;getNumberDoF()<sp/>*<sp/>m_maxValue;</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinProb<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">InDet::MinProb::MinProb(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>max)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>,<sp/>m_minValue(max)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>,<sp/>m_accessor(nullptr)</highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">StatusCode<sp/>InDet::MinProb::initialize()</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(<sp/></highlight><highlight class="stringliteral">&quot;fitQuality&quot;</highlight><highlight class="normal">,<sp/>m_accessor<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinProb::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="780"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_accessor)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>fit<sp/>quality<sp/>accessor.<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TMath::Prob(m_accessor-&gt;getChiSq(),<sp/>m_accessor-&gt;getNumberDoF())<sp/>&gt;=<sp/>m_minValue;</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinEProbHTCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal">InDet::MinEProbHTCut::MinEProbHTCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Double_t<sp/>min)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>,<sp/>m_minValue(min)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>,<sp/>m_accessor(nullptr)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal">StatusCode<sp/>InDet::MinEProbHTCut::initialize()</highlight></codeline>
<codeline lineno="797"><highlight class="normal">{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eProbHT&quot;</highlight><highlight class="normal">,<sp/>m_accessor)<sp/>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinEProbHTCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="804"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_accessor)<sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;eProbabilityHT<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accessor-&gt;getValue()<sp/>&gt;=<sp/>m_minValue;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>EtaDependentSiliconHitsCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">InDet::EtaDependentSiliconHitsCut::EtaDependentSiliconHitsCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Double_t&gt;<sp/>eta,<sp/>std::vector&lt;Int_t&gt;<sp/>hits)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>,<sp/>m_etaCutoffs(eta)</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>,<sp/>m_siHitCuts(hits)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>,<sp/>m_sctAccessor(nullptr)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>,<sp/>m_pixAccessor(nullptr)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>,<sp/>m_sctDeadAccessor(nullptr)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>,<sp/>m_pixDeadAccessor(nullptr)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">StatusCode<sp/>InDet::EtaDependentSiliconHitsCut::initialize()</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_etaCutoffs.size()<sp/>!=<sp/>m_siHitCuts.size())<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>and<sp/>Silicon<sp/>hit<sp/>cuts<sp/>must<sp/>be<sp/>the<sp/>same<sp/>size&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cuts<sp/>=<sp/>0;<sp/>i_cuts&lt;m_etaCutoffs.size()-1;<sp/>++i_cuts)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(m_etaCutoffs.at(i_cuts))<sp/>&gt;=<sp/>std::fabs(m_etaCutoffs.at(i_cuts+1)))<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>must<sp/>be<sp/>increasing&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>std::string<sp/>sctHits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>std::string<sp/>pixHits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>std::string<sp/>sctDead<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>std::string<sp/>pixDead<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctHits,<sp/>m_sctAccessor)<sp/>);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>m_sctAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(pixHits,<sp/>m_pixAccessor)<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>m_pixAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctDead,<sp/>m_sctDeadAccessor)<sp/>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>m_sctDeadAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(pixDead,<sp/>m_pixDeadAccessor)<sp/>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>m_pixDeadAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::EtaDependentSiliconHitsCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="857"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctAccessor)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>hits<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pixAccessor)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Pixel<sp/>hits<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctDeadAccessor)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>Deadsensors<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pixDeadAccessor)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Pixel<sp/>Deadsensors<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;eta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;in<sp/>eta<sp/>dependent<sp/>hit<sp/>cut&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cutVecSize<sp/>=<sp/>m_etaCutoffs.size();</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;cut<sp/>vec<sp/>size<sp/>&quot;&lt;&lt;cutVecSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trketa<sp/>=<sp/>std::fabs(m_etaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trknHits<sp/>=<sp/><sp/><sp/>m_sctAccessor-&gt;getValue()<sp/>+<sp/>m_pixAccessor-&gt;getValue()<sp/>+<sp/>m_sctDeadAccessor-&gt;getValue()<sp/>+<sp/>m_pixDeadAccessor-&gt;getValue();</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;eta<sp/>of<sp/>track<sp/>&quot;&lt;&lt;trketa&lt;&lt;&quot;<sp/>Si<sp/>hits<sp/>on<sp/>track<sp/>&quot;&lt;&lt;trknHits);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>eta<sp/>cutoff<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_etabin<sp/>=<sp/>cutVecSize-1;<sp/>i_etabin<sp/>&gt;=<sp/>0;<sp/>--i_etabin)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;etabin<sp/>&quot;&lt;&lt;i_etabin&lt;&lt;&quot;<sp/>eta<sp/>cutoff<sp/>&quot;&lt;&lt;std::fabs(m_etaCutoffs.at(i_etabin))&lt;&lt;&quot;<sp/>Hit<sp/>cut<sp/>value<sp/>&quot;&lt;&lt;m_siHitCuts.at(i_etabin)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMax<sp/>=5.0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i_etabin&lt;cutVecSize-1)<sp/>etaMax<sp/>=<sp/>std::fabs(m_etaCutoffs.at(i_etabin+1));</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>(trketa<sp/>&gt;=<sp/>std::fabs(m_etaCutoffs.at(i_etabin))<sp/>&amp;&amp;<sp/>trketa<sp/>&lt;<sp/>etaMax<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trknHits<sp/>&lt;<sp/>m_siHitCuts.at(i_etabin))<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>false&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>true&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>true&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal">InDet::EtaDependentPtCut::EtaDependentPtCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Double_t&gt;<sp/>eta,<sp/>std::vector&lt;Double_t&gt;<sp/>pt)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>,<sp/>m_etaCutoffs(eta)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>,<sp/>m_ptCuts(pt)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>,<sp/>m_etaAccessor(nullptr)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>,<sp/>m_ptAccessor(nullptr)</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">StatusCode<sp/>InDet::EtaDependentPtCut::initialize()</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_etaCutoffs.size()<sp/>!=<sp/>m_ptCuts.size())<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>and<sp/>transverse<sp/>momentum<sp/>cuts<sp/>must<sp/>be<sp/>the<sp/>same<sp/>size&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cuts<sp/>=<sp/>0;<sp/>i_cuts&lt;m_etaCutoffs.size()-1;<sp/>++i_cuts)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(m_etaCutoffs.at(i_cuts))<sp/>&gt;=<sp/>std::fabs(m_etaCutoffs.at(i_cuts+1)))<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>must<sp/>be<sp/>increasing&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">,<sp/>m_etaAccessor)<sp/>);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">,<sp/>m_ptAccessor)<sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::EtaDependentPtCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="945"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_etaAccessor)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;eta<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptAccessor)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;pt<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trkpt<sp/>=<sp/>std::fabs(m_ptAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>trketa<sp/>=<sp/>std::fabs(m_etaAccessor-&gt;getValue());</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cutVecSize<sp/>=<sp/>m_etaCutoffs.size();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_etabin<sp/>=<sp/>cutVecSize-1;<sp/>i_etabin<sp/>&gt;=<sp/>0;<sp/>--i_etabin)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>etaMax<sp/>=5.0;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i_etabin&lt;cutVecSize-1)<sp/>etaMax<sp/>=<sp/>std::fabs(m_etaCutoffs.at(i_etabin+1));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><sp/>(trketa<sp/>&gt;=<sp/>std::fabs(m_etaCutoffs.at(i_etabin))<sp/>&amp;&amp;<sp/>trketa<sp/>&lt;<sp/>etaMax<sp/>))<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>trkpt<sp/>&lt;<sp/>m_ptCuts.at(i_etabin))<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>false&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>true&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>ATH_MSG_INFO(&quot;returning<sp/>true&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>PtDependentSctHitsCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">InDet::PtDependentSctHitsCut::PtDependentSctHitsCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Double_t&gt;<sp/>pt,<sp/>std::vector&lt;Int_t&gt;<sp/>sct)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>,<sp/>m_ptCutoffs(pt)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>,<sp/>m_sctHitCuts(sct)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>,<sp/>m_ptAccessor(nullptr)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>,<sp/>m_sctAccessor(nullptr)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>,<sp/>m_sctDeadAccessor(nullptr)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal">StatusCode<sp/>InDet::PtDependentSctHitsCut::initialize()</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ptCutoffs.size()<sp/>!=<sp/>m_sctHitCuts.size())<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Pt<sp/>cutoffs<sp/>and<sp/>SCT<sp/>hit<sp/>cuts<sp/>must<sp/>be<sp/>the<sp/>same<sp/>size&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cuts<sp/>=<sp/>0;<sp/>i_cuts&lt;m_ptCutoffs.size()-1;<sp/>++i_cuts)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ptCutoffs.at(i_cuts)<sp/>&gt;=<sp/>m_ptCutoffs.at(i_cuts+1))<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Pt<sp/>cutoffs<sp/>must<sp/>be<sp/>increasing&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">,<sp/>m_ptAccessor)<sp/>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>std::string<sp/>sctHits<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>std::string<sp/>sctDead<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;summaryType&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctHits,<sp/>m_sctAccessor)<sp/>);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>m_sctAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(sctDead,<sp/>m_sctDeadAccessor)<sp/>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>m_sctDeadAccessor-&gt;setSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::PtDependentSctHitsCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1021"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctAccessor)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>hits<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_sctDeadAccessor)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;SCT<sp/>dead<sp/>hits<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_ptAccessor)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;pt<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cutVecSize<sp/>=<sp/>m_ptCutoffs.size();</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_ptbin<sp/>=<sp/>cutVecSize-1;<sp/>i_ptbin<sp/>&gt;=<sp/>0;<sp/>--i_ptbin)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_ptAccessor-&gt;getValue()<sp/>&gt;=<sp/>m_ptCutoffs.at(i_ptbin)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(m_sctAccessor-&gt;getValue()<sp/>+<sp/>m_sctDeadAccessor-&gt;getValue()</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;<sp/>m_sctHitCuts.at(i_ptbin)))<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>----------------<sp/>MinSiHitsModTopBottomCut<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">InDet::MinSiHitsModTopBottomCut::MinSiHitsModTopBottomCut(<ref refid="d3/d8c/classInDet_1_1InDetTrackSelectionTool" kindref="compound">InDet::InDetTrackSelectionTool</ref>*<sp/>tool,<sp/>Int_t<sp/>top,<sp/>Int_t<sp/>bottom)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>:<sp/>InDet::TrackCut(tool)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>,<sp/>m_minTop(top)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>,<sp/>m_minBottom(bottom)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal">StatusCode<sp/>InDet::MinSiHitsModTopBottomCut::initialize()</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>TrackCut::initialize()<sp/>);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/>getAccessor(</highlight><highlight class="stringliteral">&quot;siHitsMod&quot;</highlight><highlight class="normal">,<sp/>m_accessor)<sp/>);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InDet::MinSiHitsModTopBottomCut::result()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1063"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>this<sp/>cut<sp/>uses<sp/>an<sp/>alternate<sp/>definition<sp/>of<sp/>Si<sp/>hits,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>pixel<sp/>hits<sp/>count<sp/>twice<sp/>(this<sp/>is<sp/>accounted<sp/>for<sp/>in<sp/>the<sp/>accessor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_accessor)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Top/bottom<sp/>Si<sp/>hits<sp/>accessor<sp/>not<sp/>valid.<sp/>Track<sp/>will<sp/>not<sp/>pass<sp/>this<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_accessor-&gt;getHitsTop()<sp/>&gt;=<sp/>m_minTop)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(m_accessor-&gt;getHitsBottom()<sp/>&gt;=<sp/>m_minBottom);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/InDetTrackSelectionTool/Root/InDetTrackCut.cxx"/>
  </compounddef>
</doxygen>
