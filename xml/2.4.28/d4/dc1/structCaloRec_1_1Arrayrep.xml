<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/dc1/structCaloRec_1_1Arrayrep" kind="class" prot="public">
    <compoundname>CaloRec::Arrayrep</compoundname>
    <derivedcompoundref refid="d3/dd4/classCxxUtils_1_1WritableArrayData" prot="private" virt="non-virtual">CxxUtils::WritableArrayData&lt; N &gt;</derivedcompoundref>
    <includes refid="dd/de3/Arrayrep_8h" local="no">Arrayrep.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; Arrayelt &gt;</type>
        <definition>std::vector&lt;Arrayelt&gt; CaloRec::Arrayrep::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
<para>The array data, stored using the <ref refid="db/db2/structC" kindref="compound">C</ref> array ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="99" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d4/dc1/structCaloRec_1_1Arrayrep_1aeea9324049b2aaf8693a41a3eae55481" prot="public" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; CaloRec::Arrayrep::m_shape</definition>
        <argsstring></argsstring>
        <name>m_shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The array shape. One entry per dimension, giving the size of each dimension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; unsigned int &gt;</type>
        <definition>std::vector&lt;unsigned int&gt; CaloRec::Arrayrep::m_sizes</definition>
        <argsstring></argsstring>
        <name>m_sizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subarray sizes, for faster access. See above. This member could be considered transient. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1acabdbf4626d6a6baa2744e87c1471687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CaloRec::Arrayrep::Arrayrep</definition>
        <argsstring>()</argsstring>
        <name>Arrayrep</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This makes an uninitialized <computeroutput><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1a1b608fa821d53d7a6071ea647ea90570" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CaloRec::Arrayrep::Arrayrep</definition>
        <argsstring>(const std::string &amp;str, const std::string &amp;context=&quot;&quot;)</argsstring>
        <name>Arrayrep</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>context</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Construct from a string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to convert. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional string to use for error reporting.</para></parameterdescription>
</parameteritem>
</parameterlist>
Parse the string and initialize the array. This string should be like `[[1, 2], [3, 4]]&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="198" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1a74e4aca106404f541f91a9a3cf87eda7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CaloRec::Arrayrep::Arrayrep</definition>
        <argsstring>(const std::vector&lt; unsigned int &gt; &amp;shape)</argsstring>
        <name>Arrayrep</name>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Construct an empty array of a given shape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the array.</para></parameterdescription>
</parameteritem>
</parameterlist>
Initialize an array of a given shape. The array will contain all 0&apos;s. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1a5b00a3b58e29a570c3fcc5078ed6d28a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>CaloRec::Arrayrep::Arrayrep</definition>
        <argsstring>(const unsigned int shape[], unsigned int n)</argsstring>
        <name>Arrayrep</name>
        <param>
          <type>const unsigned int</type>
          <declname>shape</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Construct an empty array of a given shape. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the <emphasis>shape</emphasis> array.</para></parameterdescription>
</parameteritem>
</parameterlist>
Initialize an array of a given shape. The array will contain all 0&apos;s. This version is more convenient to call with a constant shape. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="96" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaloRec::Arrayrep::init_sizes</definition>
        <argsstring>(bool resize_data=false)</argsstring>
        <name>init_sizes</name>
        <param>
          <type>bool</type>
          <declname>resize_data</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Initialize the <computeroutput>m_sizes</computeroutput> vector from the <computeroutput>m_shape</computeroutput> vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>resize_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Should <computeroutput>m_data</computeroutput> be resized appropriately?</para></parameterdescription>
</parameteritem>
</parameterlist>
The contents of the <computeroutput>m_sizes</computeroutput> vector are initialized from the contents of the <computeroutput>m_shape</computeroutput> vector. If <computeroutput>resize_data</computeroutput> is true, then the size of <computeroutput>m_data</computeroutput> is changed to the total size indicated by <computeroutput>m_shape</computeroutput>. Otherwise, we verify that <computeroutput>m_data</computeroutput> has the correct size, and raise an assertion if not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="30" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1aea1e8f78970aa6da92e6625c69375d25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaloRec::Arrayrep::write_array</definition>
        <argsstring>(std::ostream &amp;stream) const </argsstring>
        <name>write_array</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Creates a text representation of the array content. </para>        </briefdescription>
        <detaileddescription>
<para>Helper function for write_array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>std::ostream</parametername>
</parameternamelist>
<parameterdescription>
<para>where the text should be written</para></parameterdescription>
</parameteritem>
</parameterlist>
Writes the content of the array to a ostream. The sub-arrays are enclosed by square-brackets and separated by commas.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>where the array should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Current index in <computeroutput>m_data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Current index in <computeroutput>m_shapes</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
Calls itself recursively with dimIndex-1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="241" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="d4/dc1/structCaloRec_1_1Arrayrep_1a41b500eb96c1961721825a96c5fbc6a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CaloRec::Arrayrep::write_subarray</definition>
        <argsstring>(std::ostream &amp;stream, std::vector&lt; Arrayelt &gt;::size_type &amp;idx, unsigned dimIndex) const </argsstring>
        <name>write_subarray</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>std::vector&lt; Arrayelt &gt;::size_type &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>dimIndex</declname>
        </param>
        <briefdescription>
<para>Helper function for write_array. </para>        </briefdescription>
        <detaileddescription>
<para>Creates a text representation of the array content.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>where the array should be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Current index in <computeroutput>m_data</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Current index in <computeroutput>m_shapes</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
Calls itself recursively with dimIndex-1</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>std::ostream</parametername>
</parameternamelist>
<parameterdescription>
<para>where the text should be written</para></parameterdescription>
</parameteritem>
</parameterlist>
Writes the content of the array to a ostream. The sub-arrays are enclosed by square-brackets and separated by commas. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/Arrayrep.cxx" bodystart="275" bodyend="292"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Representation class for Array&apos;s. </para>    </briefdescription>
    <detaileddescription>
<para>This class is used for the implementation of multidimensional array constants. The user interface is provided by the <computeroutput>Array</computeroutput> template class. Given an <computeroutput>Array&lt;N&gt;</computeroutput> <computeroutput>a</computeroutput>, we want <computeroutput>a</computeroutput>[i] to be an <computeroutput>Array&lt;N-1&gt;</computeroutput>. However, we don&apos;t want to have to copy the array data. Thus, the <computeroutput>Array</computeroutput> class just holds a reference to the actual array data. Those data are stored in an instance of <computeroutput><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref></computeroutput>.</para><para>An <computeroutput><ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref></computeroutput> is defined by two vectors: one giving all the array elements, and the second giving the shape of the array. (<ref refid="d4/dc4/structA" kindref="compound">A</ref> shape is a vector with one integer per array dimension, the integers giving the size of the dimensions.)</para><para>We maintain one additional array as an optimization. <computeroutput>m_sizes</computeroutput>[0] contains the total size in elements of the array resulting from a single indexing operation. <computeroutput>m_sizes</computeroutput>[1] contains the size of the array resulting from two indexing operations, and so on. <computeroutput>m_sizes</computeroutput> has the same length as <computeroutput>m_shape</computeroutput>, but the last element is always 1. The function <computeroutput>init_sizes</computeroutput> will initialize the <computeroutput>m_sizes</computeroutput> array from the contents of <computeroutput>m_shape</computeroutput>.</para><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> scalar (0-dimensional array) is represented by <computeroutput>m_shape</computeroutput> (and <computeroutput>m_sizes</computeroutput>) being empty, and <computeroutput>m_data</computeroutput> having a single element.</para><para>If both <computeroutput>m_shape</computeroutput> and <computeroutput>m_data</computeroutput> are empty, then the representation is uninitialized. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="845">
        <label>CaloRec::Arrayrep</label>
        <link refid="d4/dc1/structCaloRec_1_1Arrayrep"/>
      </node>
      <node id="846">
        <label>CxxUtils::WritableArrayData&lt; N &gt;</label>
        <link refid="d3/dd4/classCxxUtils_1_1WritableArrayData"/>
        <childnode refid="845" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Arrayrep.h" bodystart="58" bodyend="142"/>
    <listofallmembers>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1acabdbf4626d6a6baa2744e87c1471687" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>Arrayrep</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1a1b608fa821d53d7a6071ea647ea90570" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>Arrayrep</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1a74e4aca106404f541f91a9a3cf87eda7" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>Arrayrep</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1a5b00a3b58e29a570c3fcc5078ed6d28a" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>Arrayrep</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1ac2816a6be2d6375503cf7799bf12e3e3" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>init_sizes</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1ab1b546c9fac55c1434c2049b0d396b4e" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>m_data</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1aeea9324049b2aaf8693a41a3eae55481" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>m_shape</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1ade60f04732c204d7feb3456699dbf27a" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>m_sizes</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1aea1e8f78970aa6da92e6625c69375d25" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>write_array</name></member>
      <member refid="d4/dc1/structCaloRec_1_1Arrayrep_1a41b500eb96c1961721825a96c5fbc6a5" prot="public" virt="non-virtual"><scope>CaloRec::Arrayrep</scope><name>write_subarray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
