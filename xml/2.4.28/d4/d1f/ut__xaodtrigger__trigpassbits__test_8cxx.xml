<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx" kind="file">
    <compoundname>ut_xaodtrigger_trigpassbits_test.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">vector</includes>
    <includes refid="dd/d39/xAODTrigger_2xAODTrigger_2TrigPassBits_8h" local="yes">xAODTrigger/TrigPassBits.h</includes>
    <incdepgraph>
      <node id="445900">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="445902">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="445859" relation="include">
        </childnode>
        <childnode refid="445861" relation="include">
        </childnode>
        <childnode refid="445852" relation="include">
        </childnode>
        <childnode refid="445868" relation="include">
        </childnode>
      </node>
      <node id="445903">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="445870">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="445855" relation="include">
        </childnode>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445871" relation="include">
        </childnode>
        <childnode refid="445869" relation="include">
        </childnode>
      </node>
      <node id="445867">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="445868">
        <label>functional</label>
      </node>
      <node id="445865">
        <label>limits</label>
      </node>
      <node id="445871">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="445898">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="445862">
        <label>iterator</label>
      </node>
      <node id="445886">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="445866" relation="include">
        </childnode>
        <childnode refid="445887" relation="include">
        </childnode>
      </node>
      <node id="445910">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="445856" relation="include">
        </childnode>
        <childnode refid="445911" relation="include">
        </childnode>
        <childnode refid="445847" relation="include">
        </childnode>
        <childnode refid="445879" relation="include">
        </childnode>
        <childnode refid="445866" relation="include">
        </childnode>
      </node>
      <node id="445883">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445863" relation="include">
        </childnode>
      </node>
      <node id="445851">
        <label>stdint.h</label>
      </node>
      <node id="445880">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445879" relation="include">
        </childnode>
      </node>
      <node id="445875">
        <label>RVersion.h</label>
      </node>
      <node id="445858">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="445859" relation="include">
        </childnode>
        <childnode refid="445852" relation="include">
        </childnode>
        <childnode refid="445868" relation="include">
        </childnode>
      </node>
      <node id="445864">
        <label>cmath</label>
      </node>
      <node id="445913">
        <label>cassert</label>
      </node>
      <node id="445847">
        <label>stdexcept</label>
      </node>
      <node id="445901">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="445866">
        <label>string</label>
      </node>
      <node id="445904">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="445856" relation="include">
        </childnode>
        <childnode refid="445855" relation="include">
        </childnode>
        <childnode refid="445886" relation="include">
        </childnode>
        <childnode refid="445883" relation="include">
        </childnode>
        <childnode refid="445872" relation="include">
        </childnode>
        <childnode refid="445905" relation="include">
        </childnode>
        <childnode refid="445906" relation="include">
        </childnode>
        <childnode refid="445889" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445861" relation="include">
        </childnode>
        <childnode refid="445863" relation="include">
        </childnode>
        <childnode refid="445907" relation="include">
        </childnode>
        <childnode refid="445908" relation="include">
        </childnode>
        <childnode refid="445896" relation="include">
        </childnode>
        <childnode refid="445909" relation="include">
        </childnode>
      </node>
      <node id="445878">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445879" relation="include">
        </childnode>
      </node>
      <node id="445907">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="445876">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="445893">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="445908">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="445850">
        <label>xAODTrigger/versions/TrigPassBits_v1.h</label>
        <link refid="de/d58/TrigPassBits__v1_8h_source"/>
        <childnode refid="445851" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445852" relation="include">
        </childnode>
        <childnode refid="445853" relation="include">
        </childnode>
        <childnode refid="445872" relation="include">
        </childnode>
      </node>
      <node id="445890">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="445854">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="445845">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx</label>
        <link refid="ut_xaodtrigger_trigpassbits_test.cxx"/>
        <childnode refid="445846" relation="include">
        </childnode>
        <childnode refid="445847" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445849" relation="include">
        </childnode>
      </node>
      <node id="445874">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="445875" relation="include">
        </childnode>
        <childnode refid="445876" relation="include">
        </childnode>
      </node>
      <node id="445906">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="445899">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="445885">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="445886" relation="include">
        </childnode>
        <childnode refid="445865" relation="include">
        </childnode>
        <childnode refid="445851" relation="include">
        </childnode>
        <childnode refid="445888" relation="include">
        </childnode>
      </node>
      <node id="445856">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445858" relation="include">
        </childnode>
      </node>
      <node id="445859">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="445860" relation="include">
        </childnode>
        <childnode refid="445861" relation="include">
        </childnode>
        <childnode refid="445862" relation="include">
        </childnode>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445863" relation="include">
        </childnode>
        <childnode refid="445864" relation="include">
        </childnode>
        <childnode refid="445865" relation="include">
        </childnode>
        <childnode refid="445866" relation="include">
        </childnode>
        <childnode refid="445867" relation="include">
        </childnode>
      </node>
      <node id="445879">
        <label>typeinfo</label>
      </node>
      <node id="445912">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="445907" relation="include">
        </childnode>
        <childnode refid="445913" relation="include">
        </childnode>
      </node>
      <node id="445888">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="445905">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="445873">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="445851" relation="include">
        </childnode>
      </node>
      <node id="445887">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="445892">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="445869">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="445877">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="445856" relation="include">
        </childnode>
        <childnode refid="445878" relation="include">
        </childnode>
        <childnode refid="445880" relation="include">
        </childnode>
        <childnode refid="445881" relation="include">
        </childnode>
        <childnode refid="445894" relation="include">
        </childnode>
        <childnode refid="445896" relation="include">
        </childnode>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445879" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445902" relation="include">
        </childnode>
        <childnode refid="445903" relation="include">
        </childnode>
      </node>
      <node id="445848">
        <label>vector</label>
      </node>
      <node id="445861">
        <label>utility</label>
      </node>
      <node id="445889">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="445897">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="445882">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="445896">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="445897" relation="include">
        </childnode>
        <childnode refid="445898" relation="include">
        </childnode>
        <childnode refid="445899" relation="include">
        </childnode>
        <childnode refid="445900" relation="include">
        </childnode>
        <childnode refid="445901" relation="include">
        </childnode>
      </node>
      <node id="445863">
        <label>cstdlib</label>
      </node>
      <node id="445911">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="445846">
        <label>iostream</label>
      </node>
      <node id="445855">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="445856" relation="include">
        </childnode>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445869" relation="include">
        </childnode>
      </node>
      <node id="445857">
        <label>cstddef</label>
      </node>
      <node id="445849">
        <label>xAODTrigger/TrigPassBits.h</label>
        <link refid="dd/d39/xAODTrigger_2xAODTrigger_2TrigPassBits_8h_source"/>
        <childnode refid="445850" relation="include">
        </childnode>
        <childnode refid="445914" relation="include">
        </childnode>
      </node>
      <node id="445909">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="445877" relation="include">
        </childnode>
        <childnode refid="445870" relation="include">
        </childnode>
        <childnode refid="445855" relation="include">
        </childnode>
        <childnode refid="445907" relation="include">
        </childnode>
        <childnode refid="445908" relation="include">
        </childnode>
      </node>
      <node id="445881">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="445878" relation="include">
        </childnode>
        <childnode refid="445882" relation="include">
        </childnode>
        <childnode refid="445883" relation="include">
        </childnode>
        <childnode refid="445884" relation="include">
        </childnode>
        <childnode refid="445889" relation="include">
        </childnode>
        <childnode refid="445879" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445860" relation="include">
        </childnode>
        <childnode refid="445851" relation="include">
        </childnode>
        <childnode refid="445891" relation="include">
        </childnode>
        <childnode refid="445892" relation="include">
        </childnode>
        <childnode refid="445893" relation="include">
        </childnode>
      </node>
      <node id="445891">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="445914">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="445869" relation="include">
        </childnode>
      </node>
      <node id="445895">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="445884">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="445882" relation="include">
        </childnode>
        <childnode refid="445885" relation="include">
        </childnode>
        <childnode refid="445889" relation="include">
        </childnode>
        <childnode refid="445848" relation="include">
        </childnode>
        <childnode refid="445890" relation="include">
        </childnode>
      </node>
      <node id="445860">
        <label>algorithm</label>
      </node>
      <node id="445853">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="445854" relation="include">
        </childnode>
        <childnode refid="445855" relation="include">
        </childnode>
        <childnode refid="445870" relation="include">
        </childnode>
        <childnode refid="445872" relation="include">
        </childnode>
        <childnode refid="445877" relation="include">
        </childnode>
        <childnode refid="445904" relation="include">
        </childnode>
        <childnode refid="445883" relation="include">
        </childnode>
        <childnode refid="445910" relation="include">
        </childnode>
        <childnode refid="445907" relation="include">
        </childnode>
        <childnode refid="445857" relation="include">
        </childnode>
        <childnode refid="445912" relation="include">
        </childnode>
      </node>
      <node id="445872">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="445851" relation="include">
        </childnode>
        <childnode refid="445866" relation="include">
        </childnode>
        <childnode refid="445873" relation="include">
        </childnode>
        <childnode refid="445874" relation="include">
        </childnode>
      </node>
      <node id="445852">
        <label>memory</label>
      </node>
      <node id="445894">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="445880" relation="include">
        </childnode>
        <childnode refid="445881" relation="include">
        </childnode>
        <childnode refid="445895" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="de/d8d/structStructA" prot="public">StructA</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx_1a513a4f712e25194313e2c247591bb2a5" prot="public" static="no">
        <name>SIMPLE_ASSERT</name>
        <param><defname>EXP</defname></param>
        <initializer>do {                                                        \
      const bool result = EXP;                                 \
      if( ! result ) {                                         \
         std::cerr &lt;&lt; __FILE__ &lt;&lt; &quot;:&quot; &lt;&lt; __LINE__              \
                   &lt;&lt; &quot; Failed test: &quot; &lt;&lt; #EXP &lt;&lt; std::endl;   \
         throw std::runtime_error( &quot;Failed &quot; #EXP );           \
      }                                                        \
   } while( 0 )</initializer>
        <briefdescription>
<para>Helper macro for testing the code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" line="20" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx_1a3bec97a483117ccd8f656c8b239c14ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void simpleFunctions</definition>
        <argsstring>()</argsstring>
        <name>simpleFunctions</name>
        <briefdescription>
<para>Testing the non-templated functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" bodystart="27" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx_1aa32b882cace444bc1bc0f92fd7118997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void containerFunctions</definition>
        <argsstring>()</argsstring>
        <name>containerFunctions</name>
        <briefdescription>
<para>Testing the templated functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" bodystart="80" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx_1aa34239a2f9573ea7fe52407a486364e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void helperFunctions</definition>
        <argsstring>()</argsstring>
        <name>helperFunctions</name>
        <briefdescription>
<para>Testing the templated helper functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" bodystart="166" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="d4/d1f/ut__xaodtrigger__trigpassbits__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" line="189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx" bodystart="189" bodyend="198"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>ut_xaodtrigger_trigpassbits_test.cxx<sp/>704009<sp/>2015-10-28<sp/>08:32:05Z<sp/>krasznaa<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>System<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTrigger/TrigPassBits.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="preprocessor">#define<sp/>SIMPLE_ASSERT(<sp/>EXP<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>result<sp/>=<sp/>EXP;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>!<sp/>result<sp/>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/>&quot;:&quot;<sp/>&lt;&lt;<sp/>__LINE__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>Failed<sp/>test:<sp/>&quot;<sp/>&lt;&lt;<sp/>#EXP<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(<sp/>&quot;Failed<sp/>&quot;<sp/>#EXP<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="23" refid="de/d8d/structStructA" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d8d/structStructA" kindref="compound" tooltip="Helper struct.">StructA</ref><sp/>{};</highlight></codeline>
<codeline lineno="24"><highlight class="normal">CLASS_DEF(<sp/>std::vector&lt;<sp/>StructA*<sp/>&gt;,<sp/>12345678,<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">void<sp/>simpleFunctions()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>object<sp/>to<sp/>test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1" kindref="compound">xAOD::TrigPassBits</ref><sp/>bits;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8ba96aecc568d354b9baf92a86fc9892" kindref="member" tooltip="Set the size of the target container.">setSize</ref>(<sp/>40<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a3b66899807ab062d63159bcc9b9514eb" kindref="member" tooltip="Set the internal bitmap directly (not recommended).">setPassBits</ref>(<sp/>std::vector&lt;<sp/>uint32_t<sp/>&gt;(<sp/>2,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>some<sp/>simple<sp/>tests<sp/>on<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>20,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>40;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>i<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>20<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>30,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>40;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>i<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>20<sp/>||</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>==<sp/>30<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>20,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>40;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>i<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>30<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>some<sp/>failure<sp/>modes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>50<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>exceptionThrown<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>60<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>exceptionThrown<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a3b66899807ab062d63159bcc9b9514eb" kindref="member" tooltip="Set the internal bitmap directly (not recommended).">setPassBits</ref>(<sp/>std::vector&lt;<sp/>uint32_t<sp/>&gt;(<sp/>1,<sp/>0<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>35<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>exceptionThrown<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>containerFunctions()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>container<sp/>emulating<sp/>a<sp/>DataVector:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;<sp/>StructA<sp/>&gt;<sp/>structs;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;<sp/>StructA*<sp/>&gt;<sp/>toyDV;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>structs.push_back(<sp/><ref refid="de/d8d/structStructA" kindref="compound" tooltip="Helper struct.">StructA</ref>()<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toyDV.push_back(<sp/>&amp;(<sp/>structs.back()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>object<sp/>to<sp/>test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1" kindref="compound">xAOD::TrigPassBits</ref><sp/>bits;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV,<sp/>0x1234<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>initialisation<sp/>succeeded:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>50<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a8aa554d42ae743e95e43b7633f23b4b3" kindref="member" tooltip="Hashed SG key of the target container.">containerKey</ref>()<sp/>==<sp/>0x1234<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a68618b5d674a66efa03936118e0634a8" kindref="member" tooltip="CLID of the target container.">containerClid</ref>()<sp/>==<sp/>12345678<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>some<sp/>simple<sp/>tests:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>toyDV[<sp/>20<sp/>],<sp/>&amp;toyDV,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>toyDV[<sp/>i<sp/>],<sp/>&amp;toyDV<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>20<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>toyDV[<sp/>30<sp/>],<sp/>&amp;toyDV,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>toyDV[<sp/>i<sp/>],<sp/>&amp;toyDV<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>20<sp/>||</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>==<sp/>30<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>toyDV[<sp/>20<sp/>],<sp/>&amp;toyDV,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>toyDV[<sp/>i<sp/>],<sp/>&amp;toyDV<sp/>)<sp/>==<sp/>(<sp/>i<sp/>==<sp/>30<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>reset:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>toyDV[<sp/>i<sp/>],<sp/>&amp;toyDV<sp/>)<sp/>==<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>some<sp/>failure<sp/>modes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1acd0dc9daa8b1022372b9022bb3f6af39" kindref="member" tooltip="Mark one of the elements of the target container as passing/failing.">markPassing</ref>(<sp/>(<sp/><ref refid="de/d8d/structStructA" kindref="compound" tooltip="Helper struct.">StructA</ref>*<sp/>)<sp/>0x12345678,<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>exceptionThrown<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a282b68e17217ae29465da764e545f85f" kindref="member" tooltip="Check if an element of a container is passing/failing.">isPassing</ref>(<sp/>(<sp/><ref refid="de/d8d/structStructA" kindref="compound" tooltip="Helper struct.">StructA</ref>*<sp/>)<sp/>0x12345678,<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exceptionThrown<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>exceptionThrown<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>initialising<sp/>the<sp/>object<sp/>to<sp/>different<sp/>container<sp/>sizes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>toyDV.resize(<sp/>0,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>toyDV.resize(<sp/>20,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>20<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>toyDV.resize(<sp/>32,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>32<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>toyDV.resize(<sp/>64,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>64<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/>toyDV.resize(<sp/>65,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a623213e4b400bb8bee6cf9dbf75eae56" kindref="member" tooltip="Function configuring and resetting the object for a new target.">reset</ref>(<sp/>&amp;toyDV<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1aed1f0f89a2c6df694b2fef839802fcf6" kindref="member" tooltip="The size of the target container.">size</ref>()<sp/>==<sp/>65<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits.<ref refid="d9/dc1/classxAOD_1_1TrigPassBits__v1_1a728980216eded57ce6bf626fd2094ef4" kindref="member" tooltip="The internal bitmap created with the hypo decisions.">passBits</ref>().size()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>helperFunctions()<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>container<sp/>emulating<sp/>a<sp/>DataVector:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;<sp/>StructA<sp/>&gt;<sp/>structs;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;<sp/>StructA*<sp/>&gt;<sp/>toyDV;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>structs.push_back(<sp/><ref refid="de/d8d/structStructA" kindref="compound" tooltip="Helper struct.">StructA</ref>()<sp/>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toyDV.push_back(<sp/>&amp;(<sp/>structs.back()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>TrigPassBits<sp/>object<sp/>describing<sp/>it:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>std::unique_ptr&lt;<sp/>xAOD::TrigPassBits<sp/>&gt;<sp/>bits<sp/>=</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1a05951db81bcc33e3be1b181918e3c0df" kindref="member" tooltip="Helper function creating a new object to describe a target container.">xAOD::makeTrigPassBits</ref>(<sp/>&amp;toyDV,<sp/>0x1234<sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>initialisation<sp/>succeeded:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits-&gt;size()<sp/>==<sp/>50<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits-&gt;passBits().size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits-&gt;containerKey()<sp/>==<sp/>0x1234<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/>SIMPLE_ASSERT(<sp/>bits-&gt;containerClid()<sp/>==<sp/>12345678<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>tests:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>simpleFunctions();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>containerFunctions();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>helperFunctions();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODTrigger/test/ut_xaodtrigger_trigpassbits_test.cxx"/>
  </compounddef>
</doxygen>
