<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d75/classCxxUtils_1_1ArrayIterator" kind="class" prot="public">
    <compoundname>CxxUtils::ArrayIterator</compoundname>
    <includes refid="df/dd0/Array_8h" local="no">Array.h</includes>
    <innerclass refid="dd/d7c/classCxxUtils_1_1ArrayIterator_1_1pointer" prot="public">CxxUtils::ArrayIterator::pointer</innerclass>
    <templateparamlist>
      <param>
        <type>unsigned int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a895d4b79a337768e0559df2a9dd9e0c5" prot="public" static="no">
        <type>std::iterator&lt; std::random_access_iterator_tag, const <ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref>-1 &gt; &gt;</type>
        <definition>typedef std::iterator&lt;std::random_access_iterator_tag, const Array&lt;N-1&gt; &gt; CxxUtils::ArrayIterator&lt; N &gt;::base_iterator</definition>
        <argsstring></argsstring>
        <name>base_iterator</name>
        <briefdescription>
<para>Shorthand for the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="368" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a59c949ae57c0738fd55a01ad3bde4a7b" prot="public" static="no">
        <type>base_iterator::iterator_category</type>
        <definition>typedef base_iterator::iterator_category CxxUtils::ArrayIterator&lt; N &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
<para>Standard <computeroutput>iterator_category</computeroutput> typedef, from the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="371" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a625645923a91f144e80d10e6f0ef707c" prot="public" static="no">
        <type>base_iterator::value_type</type>
        <definition>typedef base_iterator::value_type CxxUtils::ArrayIterator&lt; N &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>Standard <computeroutput>value_type</computeroutput> typedef, from the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="374" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" prot="public" static="no">
        <type>base_iterator::difference_type</type>
        <definition>typedef base_iterator::difference_type CxxUtils::ArrayIterator&lt; N &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>Standard <computeroutput>difference</computeroutput> typedef, from the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="377" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d75/classCxxUtils_1_1ArrayIterator_1aeb358ed4c749aff7de67d73deb59faff" prot="public" static="no">
        <type>base_iterator::reference</type>
        <definition>typedef base_iterator::reference CxxUtils::ArrayIterator&lt; N &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>Standard <computeroutput>reference</computeroutput> typedef, from the base class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="380" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a0f85cead87f9648f80bd502388ed7d01" prot="private" static="no" mutable="no">
        <type>const <ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref> *</type>
        <definition>const Arrayrep* CxxUtils::ArrayIterator&lt; N &gt;::m_rep</definition>
        <argsstring></argsstring>
        <name>m_rep</name>
        <briefdescription>
<para>The underlying array representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="609" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d4/d75/classCxxUtils_1_1ArrayIterator_1af40d81df04026bb3576dac6c0467b2a7" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int CxxUtils::ArrayIterator&lt; N &gt;::m_offs</definition>
        <argsstring></argsstring>
        <name>m_offs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Offset into the representation&apos;s data array of the first element referred to by this iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="613" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="613" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a7320f356e0368bbd2155327aa3fe56f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::ArrayIterator&lt; N &gt;::ArrayIterator</definition>
        <argsstring>()</argsstring>
        <name>ArrayIterator</name>
        <briefdescription>
<para>Default constructor. Makes an invalid iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="433" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a6fb96cf172586dda0b8f040553d79aff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::ArrayIterator&lt; N &gt;::ArrayIterator</definition>
        <argsstring>(const Arrayrep *rep, unsigned int offs)</argsstring>
        <name>ArrayIterator</name>
        <param>
          <type>const <ref refid="d4/dc1/structCaloRec_1_1Arrayrep" kindref="compound">Arrayrep</ref> *</type>
          <declname>rep</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Constructor from <computeroutput>Arrayrep</computeroutput> and offset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para>The underlying array representation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in the representation of the first element referenced by this iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="442" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a19d05bcdd0dad519e619ac758e0ec41d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator==</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the iterators are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="451" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1afd94f6fd0e60f8927237d80e62bf58bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator!=</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Inequality comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the iterators are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="459" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a334f2868423bd3230bea7886a5905368" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator&lt;</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Less-than comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this iterator is less than <emphasis>other</emphasis>. This will always return false for iterators over different arrays. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="469" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a55aa96160c7d6fb456f726937ec0e903" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator&gt;</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Greater-than comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this iterator is greater than <emphasis>other</emphasis>. This will always return false for iterators over different arrays. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="479" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1ac1f770b1f5f540d8d694da93a7528d9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator&lt;=</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Less-than-or-equal comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this iterator is less than or equal to <emphasis>other</emphasis>. This will always return false for iterators over different arrays. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="489" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1aeb027bed6fafc58a5de51e97e09d9e2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ArrayIterator&lt; N &gt;::operator&gt;=</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Greater-than-or-equal comparison. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object with which to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if this iterator is less than or equal to <emphasis>other</emphasis>. This will always return false for iterators over different arrays. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="499" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a34fd5df6bc476108bf21002f7f2ae525" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a625645923a91f144e80d10e6f0ef707c" kindref="member">value_type</ref></type>
        <definition>ArrayIterator&lt; N &gt;::value_type CxxUtils::ArrayIterator&lt; N &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Dereference the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The value that the iterator points to. Note that this method returns a <computeroutput>value_type</computeroutput>, not a <computeroutput>reference</computeroutput>. (Thus, this class does not quite conform to the iterator requirements.) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="509" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="475" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1abb4469ea0205ddfbee768dacc58c565b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d7c/classCxxUtils_1_1ArrayIterator_1_1pointer" kindref="compound">pointer</ref></type>
        <definition>ArrayIterator&lt; N &gt;::pointer CxxUtils::ArrayIterator&lt; N &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Dereference the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> proxy for the iterator element.</para></simplesect>
This method will return a proxy for the array, which you can then dereference. Note that if you get a C++ <ref refid="dd/d7c/classCxxUtils_1_1ArrayIterator_1_1pointer" kindref="compound">pointer</ref> from this, then it will be valid only until the proxy object gets destroyed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="521" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="492" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1afd8bed88fbdc17dab89ac3280a6f49c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt; &amp;</type>
        <definition>ArrayIterator&lt; N &gt; &amp; CxxUtils::ArrayIterator&lt; N &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Advance the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="528" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="503" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1aca70e75c62c92d63755314b2a05fd296" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt;</type>
        <definition>ArrayIterator&lt; N &gt; CxxUtils::ArrayIterator&lt; N &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Advance the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator before being advanced. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="535" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="515" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1aa50e87556dcfda18e98376801901c8b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt; &amp;</type>
        <definition>ArrayIterator&lt; N &gt; &amp; CxxUtils::ArrayIterator&lt; N &gt;::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Back up the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="542" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="528" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a8b309b95330130f1a19b4f8611058828" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt;</type>
        <definition>ArrayIterator&lt; N &gt; CxxUtils::ArrayIterator&lt; N &gt;::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Back up the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The iterator before being backed up. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="549" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="540" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a3d50c4e9e79e6b66af568cc4ad266b15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a625645923a91f144e80d10e6f0ef707c" kindref="member">value_type</ref></type>
        <definition>ArrayIterator&lt; N &gt;::value_type CxxUtils::ArrayIterator&lt; N &gt;::operator[]</definition>
        <argsstring>(difference_type n) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref> indexing relative to the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The array index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The array item at an offset of <emphasis>n</emphasis> from the current iterator position. Note that this method returns a <computeroutput>value_type</computeroutput>, not a <computeroutput>reference</computeroutput>. (Thus, this class does not quite conform to the iterator requirements.) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="561" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="559" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a56842f4a76b72acf6064c453b6624287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt; &amp;</type>
        <definition>ArrayIterator&lt; N &gt; &amp; CxxUtils::ArrayIterator&lt; N &gt;::operator+=</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Advance the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps by which to advance the iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="569" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="573" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a7f6e466e378413a9a0e983067d4435cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt;</type>
        <definition>ArrayIterator&lt; N &gt; CxxUtils::ArrayIterator&lt; N &gt;::operator+</definition>
        <argsstring>(difference_type n) const </argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return a new iterator pointing <emphasis>n</emphasis> steps ahead. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps by which to advance. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="577" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1ad951f5009d2b3ff418a2f8c2d8ab7a76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt; &amp;</type>
        <definition>ArrayIterator&lt; N &gt; &amp; CxxUtils::ArrayIterator&lt; N &gt;::operator-=</definition>
        <argsstring>(difference_type n)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Back up the iterator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps by which to advance the iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="585" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="598" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1af2e035359cbaddca954e7cfa876f1013" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref>&lt; <ref refid="da/deb/structN" kindref="compound">N</ref> &gt;</type>
        <definition>ArrayIterator&lt; N &gt; CxxUtils::ArrayIterator&lt; N &gt;::operator-</definition>
        <argsstring>(difference_type n) const </argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Return a new iterator pointing <emphasis>n</emphasis> steps behind. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps by which to back up. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new iterator. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="593" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="611" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="d4/d75/classCxxUtils_1_1ArrayIterator_1a18403710980755e76bc466623eddaf3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" kindref="member">difference_type</ref></type>
        <definition>ArrayIterator&lt; N &gt;::difference_type CxxUtils::ArrayIterator&lt; N &gt;::operator-</definition>
        <argsstring>(const ArrayIterator &amp;other) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="d4/d75/classCxxUtils_1_1ArrayIterator" kindref="compound">ArrayIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the difference between two iterators. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other iterator for the comparison. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements difference between this iterator and <emphasis>other</emphasis>. Undefined if the two iterators do not point into the same array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="604" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.icc" bodystart="627" bodyend="630"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterator class for <computeroutput>Array&lt;N&gt;</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>This serves as an iterator class for <computeroutput>Array&lt;N&gt;</computeroutput>, where <computeroutput><ref refid="da/deb/structN" kindref="compound">N</ref></computeroutput> &gt;= 2. It gives a <computeroutput><ref refid="d5/dd9/classCxxUtils_1_1Array" kindref="compound">Array</ref>&lt;N-1&gt;</computeroutput> as <computeroutput>value_type</computeroutput>. Only <computeroutput>const</computeroutput> access is supported.</para><para>This class is almost, but not quite, a random access iterator. <computeroutput>operator*</computeroutput> and <computeroutput>operator</computeroutput>[] returns a <computeroutput>value_type</computeroutput> instead of a <computeroutput>reference</computeroutput>. And <computeroutput>operator-&gt;</computeroutput> returns a proxy. (The issues here are similar to those encountered with <computeroutput>std::vector&lt;bool&gt;</computeroutput>.) But it should mostly work as you expect. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="839">
        <label>CxxUtils::ArrayIterator&lt; N &gt;</label>
        <link refid="d4/d75/classCxxUtils_1_1ArrayIterator"/>
        <childnode refid="840" relation="usage">
          <edgelabel>m_rep</edgelabel>
        </childnode>
      </node>
      <node id="840">
        <label>CaloRec::Arrayrep</label>
        <link refid="d4/dc1/structCaloRec_1_1Arrayrep"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" line="363" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/Array.h" bodystart="361" bodyend="614"/>
    <listofallmembers>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a7320f356e0368bbd2155327aa3fe56f9" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>ArrayIterator</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a6fb96cf172586dda0b8f040553d79aff" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>ArrayIterator</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a895d4b79a337768e0559df2a9dd9e0c5" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>base_iterator</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a603125a33b6ef2413b43a65c3e3adeac" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>difference_type</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a59c949ae57c0738fd55a01ad3bde4a7b" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>iterator_category</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1af40d81df04026bb3576dac6c0467b2a7" prot="private" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>m_offs</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a0f85cead87f9648f80bd502388ed7d01" prot="private" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>m_rep</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1afd94f6fd0e60f8927237d80e62bf58bd" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator!=</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a34fd5df6bc476108bf21002f7f2ae525" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator*</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a7f6e466e378413a9a0e983067d4435cc" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator+</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1afd8bed88fbdc17dab89ac3280a6f49c7" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator++</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1aca70e75c62c92d63755314b2a05fd296" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator++</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a56842f4a76b72acf6064c453b6624287" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator+=</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1af2e035359cbaddca954e7cfa876f1013" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator-</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a18403710980755e76bc466623eddaf3f" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator-</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1aa50e87556dcfda18e98376801901c8b2" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator--</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a8b309b95330130f1a19b4f8611058828" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator--</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1ad951f5009d2b3ff418a2f8c2d8ab7a76" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator-=</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1abb4469ea0205ddfbee768dacc58c565b" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator-&gt;</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a334f2868423bd3230bea7886a5905368" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator&lt;</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1ac1f770b1f5f540d8d694da93a7528d9d" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator&lt;=</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a19d05bcdd0dad519e619ac758e0ec41d" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator==</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a55aa96160c7d6fb456f726937ec0e903" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator&gt;</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1aeb027bed6fafc58a5de51e97e09d9e2a" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator&gt;=</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a3d50c4e9e79e6b66af568cc4ad266b15" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>operator[]</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1aeb358ed4c749aff7de67d73deb59faff" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>reference</name></member>
      <member refid="d4/d75/classCxxUtils_1_1ArrayIterator_1a625645923a91f144e80d10e6f0ef707c" prot="public" virt="non-virtual"><scope>CxxUtils::ArrayIterator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
