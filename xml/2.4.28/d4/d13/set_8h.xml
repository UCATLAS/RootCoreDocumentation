<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d13/set_8h" kind="file">
    <compoundname>set.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108187">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
      <node id="108186">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h</label>
        <link refid="set.h"/>
        <childnode refid="108187" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/d83/struct__SetIterator" prot="public">_SetIterator</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="d4/d13/set_8h_1a54751ca5fcc5cc3aa6eb3595dca11ebc" prot="public" static="no">
        <name>SET_NULL</name>
        <initializer>((void *) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> null <ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" prot="public" static="no">
        <type>struct _Set</type>
        <definition>typedef struct _Set Set</definition>
        <argsstring></argsstring>
        <name>Set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a set of values. Created using the <ref refid="d4/d13/set_8h_1a2e8eaaf7671ae9cbe7704531026cd7c2" kindref="member">set_new</ref> function and destroyed using the <ref refid="d4/d13/set_8h_1af0d8defcb25047c8ca43efbfd26af9d4" kindref="member">set_free</ref> function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1ae9b5d62cf521a563d727907403eabceb" prot="public" static="no">
        <type>struct <ref refid="dc/d83/struct__SetIterator" kindref="compound">_SetIterator</ref></type>
        <definition>typedef struct _SetIterator SetIterator</definition>
        <argsstring></argsstring>
        <name>SetIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An object used to iterate over a set.</para><para><simplesect kind="see"><para><ref refid="d4/d13/set_8h_1aa7f31239ce2ef2e1ef71ce1ffedcfac8" kindref="member">set_iterate</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1a6265eadfce3b2cefc0807fcd2dca65b6" prot="public" static="no">
        <type>struct _SetEntry</type>
        <definition>typedef struct _SetEntry SetEntry</definition>
        <argsstring></argsstring>
        <name>SetEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Internal structure representing an entry in the set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* SetValue</definition>
        <argsstring></argsstring>
        <name>SetValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> value stored in a <ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1a6c7986a2a80d7a3cb7b9d74e1c6fef97" prot="public" static="no">
        <type>unsigned long(*</type>
        <definition>typedef unsigned long(* SetHashFunc)(SetValue value)</definition>
        <argsstring>)(SetValue value)</argsstring>
        <name>SetHashFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hash function. Generates a hash key for values to be stored in a set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1a40fa2c86d5b003c1b0b0e8dd1e4df9f4" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* SetEqualFunc)(SetValue value1, SetValue value2)</definition>
        <argsstring>)(SetValue value1, SetValue value2)</argsstring>
        <name>SetEqualFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Equality function. Compares two values to determine if they are equivalent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d4/d13/set_8h_1a3585d5e8be0346f997939a4f40aa6777" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* SetFreeFunc)(SetValue value)</definition>
        <argsstring>)(SetValue value)</argsstring>
        <name>SetFreeFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function used to free values stored in a set. See <ref refid="d4/d13/set_8h_1ab97f8941a3bd0da545e1f0934472d1a8" kindref="member">set_register_free_function</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/d13/set_8h_1a2e8eaaf7671ae9cbe7704531026cd7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
        <definition>Set* set_new</definition>
        <argsstring>(SetHashFunc hash_func, SetEqualFunc equal_func)</argsstring>
        <name>set_new</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6c7986a2a80d7a3cb7b9d74e1c6fef97" kindref="member">SetHashFunc</ref></type>
          <declname>hash_func</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a40fa2c86d5b003c1b0b0e8dd1e4df9f4" kindref="member">SetEqualFunc</ref></type>
          <declname>equal_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Hash function used on values in the set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>equal_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Compares two values in the set to determine if they are equal. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new set, or NULL if it was not possible to allocate the memory for the set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="127"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1af0d8defcb25047c8ca43efbfd26af9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_free</definition>
        <argsstring>(Set *set)</argsstring>
        <name>set_free</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="135"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1ab97f8941a3bd0da545e1f0934472d1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_register_free_function</definition>
        <argsstring>(Set *set, SetFreeFunc free_func)</argsstring>
        <name>set_register_free_function</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a3585d5e8be0346f997939a4f40aa6777" kindref="member">SetFreeFunc</ref></type>
          <declname>free_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a function to be called when values are removed from the set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when values are removed from the set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="146"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1a1491be18e50fc71a3eed2c4306cb586b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_insert</definition>
        <argsstring>(Set *set, SetValue data)</argsstring>
        <name>set_insert</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a value to a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to add to the set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero (true) if the value was added to the set, zero (false) if it already exists in the set, or if it was not possible to allocate memory for the new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1a3d4a8de4d222919a1e90fc3c2ba6479e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_remove</definition>
        <argsstring>(Set *set, SetValue data)</argsstring>
        <name>set_remove</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a value from a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to remove from the set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero (true) if the value was found and removed from the set, zero (false) if the value was not found in the set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="171"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1a357b868693885672a75c1b429c624273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_query</definition>
        <argsstring>(Set *set, SetValue data)</argsstring>
        <name>set_query</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query if a particular value is in a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to query for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if the value is not in the set, non-zero if the value is in the set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="182"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1ad8fa435d109cf06e34ae9e5c1922e54c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_num_entries</definition>
        <argsstring>(Set *set)</argsstring>
        <name>set_num_entries</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the number of entries in a set</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> count of the number of entries in the set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="191"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1ae0cd8fc789ce4dd20c252202c0bf21ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref> *</type>
        <definition>SetValue* set_to_array</definition>
        <argsstring>(Set *set)</argsstring>
        <name>set_to_array</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array containing all entries in a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array containing all entries in the set, or NULL if it was not possible to allocate memory for the array. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="202"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1ac13af86cc7f609a5b343996676ccb951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
        <definition>Set* set_union</definition>
        <argsstring>(Set *set1, Set *set2)</argsstring>
        <name>set_union</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a union of two sets.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new set containing all values which are in the first or second sets, or NULL if it was not possible to allocate memory for the new set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="214"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1ac813c3c4902394a2c521a641bdb34d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
        <definition>Set* set_intersection</definition>
        <argsstring>(Set *set1, Set *set2)</argsstring>
        <name>set_intersection</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set1</declname>
        </param>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform an intersection of two sets.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> new set containing all values which are in both set, or NULL if it was not possible to allocate memory for the new set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="226"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1aa7f31239ce2ef2e1ef71ce1ffedcfac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_iterate</definition>
        <argsstring>(Set *set, SetIterator *iter)</argsstring>
        <name>set_iterate</name>
        <param>
          <type><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref> *</type>
          <declname>set</declname>
        </param>
        <param>
          <type><ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a <ref refid="d4/d13/set_8h_1ae9b5d62cf521a563d727907403eabceb" kindref="member">SetIterator</ref> structure to iterate over the values in a set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>The set to iterate over. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an iterator structure to initialise. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="236"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1a6ba2210ef92d25a6eacec769940d3529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int set_iter_has_more</definition>
        <argsstring>(SetIterator *iterator)</argsstring>
        <name>set_iter_has_more</name>
        <param>
          <type><ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if there are more values in the set to iterate over.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The set iterator object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if there are no more values in the set to iterate over, non-zero if there are more values to be read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="247"/>
      </memberdef>
      <memberdef kind="function" id="d4/d13/set_8h_1a3b6f908ab255dfd9424e420b123e1cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref></type>
        <definition>SetValue set_iter_next</definition>
        <argsstring>(SetIterator *iterator)</argsstring>
        <name>set_iter_next</name>
        <param>
          <type><ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using a set iterator, retrieve the next value from the set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The set iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next value from the set, or <ref refid="d4/d13/set_8h_1a54751ca5fcc5cc3aa6eb3595dca11ebc" kindref="member">SET_NULL</ref> if no more values are available. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h" line="257"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Set of values. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> set stores a collection of values. Each value can only exist once in the set.</para><para>To create a new set, use <ref refid="d4/d13/set_8h_1a2e8eaaf7671ae9cbe7704531026cd7c2" kindref="member">set_new</ref>. To destroy a set, use <ref refid="d4/d13/set_8h_1af0d8defcb25047c8ca43efbfd26af9d4" kindref="member">set_free</ref>.</para><para>To add a value to a set, use <ref refid="d4/d13/set_8h_1a1491be18e50fc71a3eed2c4306cb586b" kindref="member">set_insert</ref>. To remove a value from a set, use <ref refid="d4/d13/set_8h_1a3d4a8de4d222919a1e90fc3c2ba6479e" kindref="member">set_remove</ref>.</para><para>To find the number of entries in a set, use <ref refid="d4/d13/set_8h_1ad8fa435d109cf06e34ae9e5c1922e54c" kindref="member">set_num_entries</ref>.</para><para>To query if a particular value is in a set, use <ref refid="d4/d13/set_8h_1a357b868693885672a75c1b429c624273" kindref="member">set_query</ref>.</para><para>To iterate over all values in a set, use <ref refid="d4/d13/set_8h_1aa7f31239ce2ef2e1ef71ce1ffedcfac8" kindref="member">set_iterate</ref> to initialise a <ref refid="d4/d13/set_8h_1ae9b5d62cf521a563d727907403eabceb" kindref="member">SetIterator</ref> structure, with <ref refid="d4/d13/set_8h_1a3b6f908ab255dfd9424e420b123e1cac" kindref="member">set_iter_next</ref> and <ref refid="d4/d13/set_8h_1a6ba2210ef92d25a6eacec769940d3529" kindref="member">set_iter_has_more</ref> to read each value in turn.</para><para>Two sets can be combined (union) using <ref refid="d4/d13/set_8h_1ac13af86cc7f609a5b343996676ccb951" kindref="member">set_union</ref>, while the intersection of two sets can be generated using <ref refid="d4/d13/set_8h_1ac813c3c4902394a2c521a641bdb34d53" kindref="member">set_intersection</ref>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_SET_H</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_SET_H</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="59" refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_Set<sp/><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="d4/d13/set_8h_1ae9b5d62cf521a563d727907403eabceb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/d83/struct__SetIterator" kindref="compound">_SetIterator</ref><sp/><ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="d4/d13/set_8h_1a6265eadfce3b2cefc0807fcd2dca65b6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_SetEntry<sp/><ref refid="d4/d13/set_8h_1a6265eadfce3b2cefc0807fcd2dca65b6" kindref="member">SetEntry</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="d4/d13/set_8h_1a914add4a2152bd4c509f48ca1631a974" kindref="member">SetValue</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="dc/d83/struct__SetIterator" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/d83/struct__SetIterator" kindref="compound">_SetIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d13/set_8h_1a6265eadfce3b2cefc0807fcd2dca65b6" kindref="member">SetEntry</ref><sp/>*next_entry;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_chain;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d4/d13/set_8h_1a54751ca5fcc5cc3aa6eb3595dca11ebc" refkind="member"><highlight class="preprocessor">#define<sp/>SET_NULL<sp/>((void<sp/>*)<sp/>0)</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="101" refid="d4/d13/set_8h_1a6c7986a2a80d7a3cb7b9d74e1c6fef97" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long<sp/>(*<ref refid="d4/d13/set_8h_1a6c7986a2a80d7a3cb7b9d74e1c6fef97" kindref="member">SetHashFunc</ref>)(SetValue<sp/>value);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="d4/d13/set_8h_1a40fa2c86d5b003c1b0b0e8dd1e4df9f4" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="d4/d13/set_8h_1a40fa2c86d5b003c1b0b0e8dd1e4df9f4" kindref="member">SetEqualFunc</ref>)(SetValue<sp/>value1,<sp/>SetValue<sp/>value2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="d4/d13/set_8h_1a3585d5e8be0346f997939a4f40aa6777" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="d4/d13/set_8h_1a3585d5e8be0346f997939a4f40aa6777" kindref="member">SetFreeFunc</ref>)(SetValue<sp/>value);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*<ref refid="d4/d13/set_8h_1a2e8eaaf7671ae9cbe7704531026cd7c2" kindref="member">set_new</ref>(<ref refid="d4/d13/set_8h_1a6c7986a2a80d7a3cb7b9d74e1c6fef97" kindref="member">SetHashFunc</ref><sp/>hash_func,<sp/><ref refid="d4/d13/set_8h_1a40fa2c86d5b003c1b0b0e8dd1e4df9f4" kindref="member">SetEqualFunc</ref><sp/>equal_func);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1af0d8defcb25047c8ca43efbfd26af9d4" kindref="member">set_free</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1ab97f8941a3bd0da545e1f0934472d1a8" kindref="member">set_register_free_function</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/><ref refid="d4/d13/set_8h_1a3585d5e8be0346f997939a4f40aa6777" kindref="member">SetFreeFunc</ref><sp/>free_func);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1a1491be18e50fc71a3eed2c4306cb586b" kindref="member">set_insert</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/>SetValue<sp/>data);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1a3d4a8de4d222919a1e90fc3c2ba6479e" kindref="member">set_remove</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/>SetValue<sp/>data);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1a357b868693885672a75c1b429c624273" kindref="member">set_query</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/>SetValue<sp/>data);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1ad8fa435d109cf06e34ae9e5c1922e54c" kindref="member">set_num_entries</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">SetValue<sp/>*<ref refid="d4/d13/set_8h_1ae0cd8fc789ce4dd20c252202c0bf21ed" kindref="member">set_to_array</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*<ref refid="d4/d13/set_8h_1ac13af86cc7f609a5b343996676ccb951" kindref="member">set_union</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*set1,<sp/><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*set2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*<ref refid="d4/d13/set_8h_1ac813c3c4902394a2c521a641bdb34d53" kindref="member">set_intersection</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*set1,<sp/><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*set2);<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1aa7f31239ce2ef2e1ef71ce1ffedcfac8" kindref="member">set_iterate</ref>(<ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref><sp/>*</highlight><highlight class="keyword">set</highlight><highlight class="normal">,<sp/><ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref><sp/>*iter);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d13/set_8h_1a6ba2210ef92d25a6eacec769940d3529" kindref="member">set_iter_has_more</ref>(<ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">SetValue<sp/><ref refid="d4/d13/set_8h_1a3b6f908ab255dfd9424e420b123e1cac" kindref="member">set_iter_next</ref>(<ref refid="dc/d83/struct__SetIterator" kindref="compound">SetIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_SET_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/set.h"/>
  </compounddef>
</doxygen>
