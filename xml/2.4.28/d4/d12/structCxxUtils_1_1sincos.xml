<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d12/structCxxUtils_1_1sincos" kind="struct" prot="public">
    <compoundname>CxxUtils::sincos</compoundname>
    <includes refid="dc/dfa/sincos_8h" local="no">sincos.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double CxxUtils::sincos::sn</definition>
        <argsstring></argsstring>
        <name>sn</name>
        <briefdescription>
<para><formula id="3">$\sin(x)$</formula> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double CxxUtils::sincos::cs</definition>
        <argsstring></argsstring>
        <name>cs</name>
        <briefdescription>
<para><formula id="4">$\cos(x)$</formula> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d4/d12/structCxxUtils_1_1sincos_1a360fd7cd0a002dcf7c3a04efe0ff3b34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CxxUtils::sincos::sincos</definition>
        <argsstring>(double x)</argsstring>
        <name>sincos</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Calculate sine and cosine of x. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="d4/d12/structCxxUtils_1_1sincos_1a5d96fe7c054f051596e3c886ebe95d43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CxxUtils::sincos::apply</definition>
        <argsstring>(double a, double b) const </argsstring>
        <name>apply</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para><formula id="5">$a\sin(x) + b\cos(x)$</formula> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="d4/d12/structCxxUtils_1_1sincos_1ace0338798d1b7f60985b4b2099623667" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CxxUtils::sincos::apply2</definition>
        <argsstring>(double a, double b, double c) const </argsstring>
        <name>apply2</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para><formula id="6">$a\sin^2(x) + b\sin(x)\cos(x) + c\cos^2(x)$</formula> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="96" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="95" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper to simultaneously calculate sin and cos of the same angle. </para>    </briefdescription>
    <detaileddescription>
<para>Instantiate an instance of this object, passing the angle to the constructor. The sin and cos are then available as the sn and cs members. In addition, the <ref refid="d4/d12/structCxxUtils_1_1sincos_1a5d96fe7c054f051596e3c886ebe95d43" kindref="member">apply()</ref> method may be used to calculate a*sin(x) + b*cos(x).</para><para>Implementation notes:</para><para>The i386/x87 architecture has an instruction to do this. So, on that platform, we use that instruction directly. It seems to be a win to use it even if we&apos;re using SSE math, so we&apos;ll use it for x86_64 too. Otherwise, we&apos;ll use <ref refid="d4/d12/structCxxUtils_1_1sincos_1a360fd7cd0a002dcf7c3a04efe0ff3b34" kindref="member">sincos()</ref> if it&apos;s available (it&apos;s a GNU extension). Otherwise, just call sin() and cos() separately.</para><para>Note that the fsincos instruction only works correctly if the input angle is in the range -2^63 ... 2^63. This is not likely to be an issue for us.</para><para>Why prefer using the fsincos instruction directly to calling the <ref refid="d4/d12/structCxxUtils_1_1sincos_1a360fd7cd0a002dcf7c3a04efe0ff3b34" kindref="member">sincos()</ref> library function?</para><para><itemizedlist>
<listitem><para>It turns out to be a little difficult to ensure that <ref refid="d4/d12/structCxxUtils_1_1sincos_1a360fd7cd0a002dcf7c3a04efe0ff3b34" kindref="member">sincos()</ref> actually gets inlined. In general, one needs -ffast-math (which isn&apos;t on for standard Atlas builds), but even that&apos;s not always sufficient.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>The library version includes extra code that we don&apos;t really need to handle the case where abs(angle) &gt; 2^63. (Runtime penalty, though, is moving the FPU status word to $eax and one taken branch.)</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para>Most importantly, though, the library function takes pointers into which the results are stored. Playing with this, i was unable to prevent the calculated values from being spilled to memory. With the definition used below, we don&apos;t necessarily spill to memory. <ref refid="d4/dc4/structA" kindref="compound">A</ref> sequence like</para></listitem></itemizedlist>
</para><para><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound">sincos</ref> sc (ang); double a = sc.apply (x, y)</para><para>can be calculated entirely in the FPU register file, with no spills. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" line="71" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/sincos.h" bodystart="70" bodyend="97"/>
    <listofallmembers>
      <member refid="d4/d12/structCxxUtils_1_1sincos_1a5d96fe7c054f051596e3c886ebe95d43" prot="public" virt="non-virtual"><scope>CxxUtils::sincos</scope><name>apply</name></member>
      <member refid="d4/d12/structCxxUtils_1_1sincos_1ace0338798d1b7f60985b4b2099623667" prot="public" virt="non-virtual"><scope>CxxUtils::sincos</scope><name>apply2</name></member>
      <member refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" prot="public" virt="non-virtual"><scope>CxxUtils::sincos</scope><name>cs</name></member>
      <member refid="d4/d12/structCxxUtils_1_1sincos_1a360fd7cd0a002dcf7c3a04efe0ff3b34" prot="public" virt="non-virtual"><scope>CxxUtils::sincos</scope><name>sincos</name></member>
      <member refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" prot="public" virt="non-virtual"><scope>CxxUtils::sincos</scope><name>sn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
