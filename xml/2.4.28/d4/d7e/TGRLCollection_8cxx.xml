<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d4/d7e/TGRLCollection_8cxx" kind="file">
    <compoundname>TGRLCollection.cxx</compoundname>
    <includes refid="d7/dd9/TGRLCollection_8h" local="yes">GoodRunsLists/TGRLCollection.h</includes>
    <includes refid="db/db8/TMsgLogger_8h" local="yes">GoodRunsLists/TMsgLogger.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="135059">
        <label>string</label>
      </node>
      <node id="135058">
        <label>map</label>
      </node>
      <node id="135051">
        <label>GoodRunsLists/TGoodRunsList.h</label>
        <link refid="d0/db2/TGoodRunsList_8h_source"/>
        <childnode refid="135052" relation="include">
        </childnode>
        <childnode refid="135056" relation="include">
        </childnode>
        <childnode refid="135057" relation="include">
        </childnode>
        <childnode refid="135058" relation="include">
        </childnode>
        <childnode refid="135055" relation="include">
        </childnode>
        <childnode refid="135059" relation="include">
        </childnode>
      </node>
      <node id="135060">
        <label>GoodRunsLists/TMsgLogger.h</label>
        <link refid="db/db8/TMsgLogger_8h_source"/>
        <childnode refid="135059" relation="include">
        </childnode>
        <childnode refid="135061" relation="include">
        </childnode>
        <childnode refid="135058" relation="include">
        </childnode>
        <childnode refid="135054" relation="include">
        </childnode>
        <childnode refid="135057" relation="include">
        </childnode>
      </node>
      <node id="135052">
        <label>GoodRunsLists/TGoodRun.h</label>
        <link refid="df/d5b/TGoodRun_8h_source"/>
        <childnode refid="135053" relation="include">
        </childnode>
        <childnode refid="135054" relation="include">
        </childnode>
        <childnode refid="135055" relation="include">
        </childnode>
      </node>
      <node id="135050">
        <label>GoodRunsLists/TGRLCollection.h</label>
        <link refid="d7/dd9/TGRLCollection_8h_source"/>
        <childnode refid="135051" relation="include">
        </childnode>
        <childnode refid="135054" relation="include">
        </childnode>
        <childnode refid="135055" relation="include">
        </childnode>
      </node>
      <node id="135053">
        <label>GoodRunsLists/TLumiBlockRange.h</label>
        <link refid="d9/df8/TLumiBlockRange_8h_source"/>
        <childnode refid="135054" relation="include">
        </childnode>
        <childnode refid="135055" relation="include">
        </childnode>
      </node>
      <node id="135054">
        <label>TObject.h</label>
      </node>
      <node id="135055">
        <label>vector</label>
      </node>
      <node id="135049">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGRLCollection.cxx</label>
        <link refid="TGRLCollection.cxx"/>
        <childnode refid="135050" relation="include">
        </childnode>
        <childnode refid="135060" relation="include">
        </childnode>
        <childnode refid="135062" relation="include">
        </childnode>
      </node>
      <node id="135061">
        <label>sstream</label>
      </node>
      <node id="135056">
        <label>TNamed.h</label>
      </node>
      <node id="135057">
        <label>TString.h</label>
      </node>
      <node id="135062">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d4/d7e/TGRLCollection_8cxx_1ac10e41e7001b951c70009aa5e315d99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(Root::TGRLCollection) Root</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGRLCollection.cxx" line="14" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGRLCollection.cxx" bodystart="7" bodyend="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TGRLCollection.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TMsgLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">ClassImp(<ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref>)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">Root::TGRLCollection::TGRLCollection(<sp/>Bool_t<sp/>checkGRLInfo<sp/>)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/>:<sp/>std::vector&lt;TGoodRunsList&gt;()</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/>,<sp/>TObject()</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/>,<sp/>m_checkGRLInfo(<sp/>checkGRLInfo<sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">Root::TGRLCollection::~TGRLCollection()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>this-&gt;Reset();</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">Root::TGRLCollection::TGRLCollection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/>:<sp/>std::vector&lt;TGoodRunsList&gt;(other)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/>,<sp/>TObject(other)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/>,<sp/>m_checkGRLInfo(other.m_checkGRLInfo)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref>&amp;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">Root::TGRLCollection::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;other==</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::operator=(other);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>m_checkGRLInfo=other.m_checkGRLInfo;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">Root::TGRLCollection::Reset()</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>this-&gt;clear();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>m_checkGRLInfo=kFALSE;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">Root::TGRLCollection::SetVersion(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>version<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>itr-&gt;SetVersion(version);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">Root::TGRLCollection::SetMetaData(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;TString,TString&gt;&amp;<sp/>metadata<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>itr-&gt;SetMetaData(metadata);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">Root::TGRLCollection::Summary<sp/>(Bool_t<sp/>verbose<sp/></highlight><highlight class="comment">/*=<sp/>kFALSE*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>itr-&gt;Summary(verbose)<sp/>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal">Root::TGRLCollection::HasRun(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>runnr<sp/>)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>Bool_t<sp/>pass(kFALSE);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end<sp/>&amp;&amp;<sp/>!pass;<sp/>++itr)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/>itr-&gt;HasRun(runnr);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pass;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="96"><highlight class="normal">Root::TGRLCollection::HasRunLumiBlock(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>runnr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>lumiblocknr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="97"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>Bool_t<sp/>pass(kFALSE);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end<sp/>&amp;&amp;<sp/>!pass;<sp/>++itr)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/>itr-&gt;HasRunLumiBlock(runnr,lumiblocknr);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pass;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal">Root::TGRLCollection::IsEmpty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>Bool_t<sp/>isEmpty(kTRUE);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>TGoodRunsList<sp/>&gt;::const_iterator<sp/>litr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>litr!=this-&gt;end()<sp/>&amp;&amp;<sp/>isEmpty;<sp/>++litr)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>isEmpty<sp/>=<sp/>isEmpty<sp/>&amp;&amp;<sp/>litr-&gt;IsEmpty();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isEmpty;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal">Root::TGRLCollection::GetMergedGoodRunsList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Root::BoolOperation&amp;<sp/>operation<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>interpreted.<sp/>Return<sp/>empty<sp/>grl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>first<sp/>goodrunslist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>std::vector&lt;Root::TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>grl(*itr);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()==1)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>grl.Compress();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>TMsgLogger<sp/>mylogger(<sp/></highlight><highlight class="stringliteral">&quot;TGRLCollection&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>merging<sp/>GRLs.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>version<sp/>and<sp/>metadata<sp/>when<sp/>merging<sp/>goodrunslists?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>grl.SetCheckGRLInfo(m_checkGRLInfo);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_checkGRLInfo)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Metadata<sp/>and<sp/>other<sp/>info<sp/>not<sp/>required<sp/>to<sp/>be<sp/>identical<sp/>between<sp/>GRLs.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>AND-ing<sp/>or<sp/>OR-ring<sp/>with<sp/>following<sp/>goodrunslists<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++itr;<sp/>itr!=this-&gt;end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(operation)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OR<sp/>:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>grl.HasOverlapWith(*itr,</highlight><highlight class="keyword">false</highlight><highlight class="comment">/*verbose*/</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>MB<sp/>22-june:<sp/>LB<sp/>splitting<sp/>across<sp/>files,<sp/>turn<sp/>off<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mylogger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/>&quot;Merging<sp/>GRLs<sp/>with<sp/>overlapping<sp/>lumi-blocks!<sp/>Overlapping<sp/>LBs<sp/>rejected.&quot;<sp/>&lt;&lt;<sp/>GEndl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mylogger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/>&quot;IMPORTANT<sp/>:<sp/>Check<sp/>your<sp/>analysis<sp/>for<sp/>possible<sp/>duplicate<sp/>events!&quot;<sp/>&lt;&lt;<sp/>GEndl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grl.AddGRL(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AND<sp/>:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grl<sp/>=<sp/>grl.GetOverlapWith(*itr);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>grl.Compress();<sp/></highlight><highlight class="comment">//<sp/>cleanup,<sp/>safe<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grl;<sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal">Root::TGRLCollection::GetGoodRunsList(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>idx.<sp/>Return<sp/>empty<sp/>grl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx&gt;=this-&gt;size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[idx];<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref></highlight></codeline>
<codeline lineno="178"><highlight class="normal">Root::TGRLCollection::GetMergedGRLCollection(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Root::BoolOperation&amp;<sp/>operation<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;empty()<sp/></highlight><highlight class="comment">/*||<sp/>this-&gt;size()==1*/</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>merge,<sp/>return<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>TMsgLogger<sp/>mylogger(<sp/></highlight><highlight class="stringliteral">&quot;TGRLCollection&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>merging<sp/>GRLs<sp/>where<sp/>possible.<sp/>Metadata<sp/>required<sp/>to<sp/>be<sp/>identical.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref><sp/>mergevec;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>mitr;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchFound(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(mitr=mergevec.begin();<sp/>mitr!=mergevec.end()<sp/>&amp;&amp;<sp/>!matchFound<sp/>;<sp/>++mitr)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mitr-&gt;HasSameGRLInfo(*itr))<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(operation)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OR<sp/>:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mitr-&gt;HasOverlapWith(*itr,</highlight><highlight class="keyword">false</highlight><highlight class="comment">/*verbose*/</highlight><highlight class="normal">)<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>//<sp/>MB<sp/>22-june:<sp/>LB<sp/>splitting<sp/>across<sp/>files,<sp/>turn<sp/>off<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mylogger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/>&quot;Merging<sp/>GRLs<sp/>with<sp/>overlapping<sp/>lumi-blocks!<sp/>Overlapping<sp/>LBs<sp/>rejected.&quot;<sp/>&lt;&lt;<sp/>GEndl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//mylogger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/>&quot;IMPORTANT<sp/>:<sp/>Check<sp/>your<sp/>analysis<sp/>for<sp/>possible<sp/>duplicate<sp/>events!&quot;<sp/>&lt;&lt;<sp/>GEndl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mitr-&gt;AddGRL(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AND<sp/>:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*mitr<sp/>=<sp/>mitr-&gt;GetOverlapWith(<sp/>*itr<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mitr-&gt;Compress();<sp/></highlight><highlight class="comment">//<sp/>safe<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matchFound)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergevec.push_back(*itr);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mergevec.rbegin()-&gt;Compress();<sp/></highlight><highlight class="comment">//<sp/>safe<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mergevec;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">std::vector&lt;Root::TGoodRunsList&gt;::iterator<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal">Root::TGRLCollection::find(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>name<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>Bool_t<sp/>found(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>(<sp/>name==TString(itr-&gt;GetName())<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itr;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">std::vector&lt;Root::TGoodRunsList&gt;::const_iterator<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal">Root::TGRLCollection::find(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>Bool_t<sp/>found(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>(<sp/>name==TString(itr-&gt;GetName())<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itr;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="256"><highlight class="normal">Root::TGRLCollection::HasGoodRunsList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>name<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;find(name)!=this-&gt;end());</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref></highlight></codeline>
<codeline lineno="263"><highlight class="normal">Root::TGRLCollection::GetOverlapWith(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="264"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="d9/d9b/classRoot_1_1TGRLCollection" kindref="compound">Root::TGRLCollection</ref><sp/>overlapvec;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>std::vector&lt;TGoodRunsList&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=this-&gt;end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>overlapgrl<sp/>=<sp/>itr-&gt;GetOverlapWith(other);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetName(itr-&gt;GetName());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetVersion(itr-&gt;GetVersion());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetMetaData(itr-&gt;GetMetaData());</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.Compress();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapvec.push_back(overlapgrl);<sp/></highlight><highlight class="comment">//<sp/>also<sp/>push_back<sp/>if<sp/>empty!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overlapvec;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGRLCollection.cxx"/>
  </compounddef>
</doxygen>
