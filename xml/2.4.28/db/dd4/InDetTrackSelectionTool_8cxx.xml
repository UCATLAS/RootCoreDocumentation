<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/dd4/InDetTrackSelectionTool_8cxx" kind="file">
    <compoundname>InDetTrackSelectionTool.cxx</compoundname>
    <includes refid="d7/de0/InDetTrackSelectionTool_8h" local="yes">InDetTrackSelectionTool/InDetTrackSelectionTool.h</includes>
    <includes refid="d2/d61/InDetTrackCut_8h" local="yes">src/InDetTrackCut.h</includes>
    <includes refid="da/d02/Check_8h" local="yes">AsgTools/Check.h</includes>
    <includes refid="d2/d4c/TrackingPrimitives_8h" local="yes">xAODTracking/TrackingPrimitives.h</includes>
    <includes local="yes">TrkTrack/Track.h</includes>
    <includes local="yes">VxVertex/Vertex.h</includes>
    <includes local="yes">TrkTrackSummary/TrackSummary.h</includes>
    <includes local="yes">TrkEventPrimitives/FitQuality.h</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="136703">
        <label>list</label>
      </node>
      <node id="136712">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="136697" relation="include">
        </childnode>
        <childnode refid="136704" relation="include">
        </childnode>
        <childnode refid="136688" relation="include">
        </childnode>
        <childnode refid="136693" relation="include">
        </childnode>
        <childnode refid="136634" relation="include">
        </childnode>
      </node>
      <node id="136697">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="136667">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="136719">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="136720" relation="include">
        </childnode>
        <childnode refid="136698" relation="include">
        </childnode>
        <childnode refid="136641" relation="include">
        </childnode>
        <childnode refid="136721" relation="include">
        </childnode>
      </node>
      <node id="136684">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="136633" relation="include">
        </childnode>
        <childnode refid="136635" relation="include">
        </childnode>
        <childnode refid="136641" relation="include">
        </childnode>
        <childnode refid="136642" relation="include">
        </childnode>
      </node>
      <node id="136610">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136613" relation="include">
        </childnode>
        <childnode refid="136614" relation="include">
        </childnode>
      </node>
      <node id="136686">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="136650" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136687" relation="include">
        </childnode>
        <childnode refid="136651" relation="include">
        </childnode>
      </node>
      <node id="136685">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="136732">
        <label>EventPrimitives/EventPrimitives.h</label>
        <link refid="d1/d54/EventPrimitives_8h_source"/>
        <childnode refid="136733" relation="include">
        </childnode>
        <childnode refid="136734" relation="include">
        </childnode>
        <childnode refid="136735" relation="include">
        </childnode>
      </node>
      <node id="136640">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="136642">
        <label>functional</label>
      </node>
      <node id="136694">
        <label>boost/version.hpp</label>
      </node>
      <node id="136639">
        <label>limits</label>
      </node>
      <node id="136687">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="136665">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="136614">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="136636">
        <label>iterator</label>
      </node>
      <node id="136652">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136653" relation="include">
        </childnode>
      </node>
      <node id="136718">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="136724">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="136725" relation="include">
        </childnode>
        <childnode refid="136692" relation="include">
        </childnode>
        <childnode refid="136639" relation="include">
        </childnode>
        <childnode refid="136642" relation="include">
        </childnode>
        <childnode refid="136726" relation="include">
        </childnode>
      </node>
      <node id="136629">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="136630" relation="include">
        </childnode>
        <childnode refid="136643" relation="include">
        </childnode>
        <childnode refid="136644" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136611" relation="include">
        </childnode>
      </node>
      <node id="136764">
        <label>TrkExInterfaces/IExtrapolator.h</label>
      </node>
      <node id="136654">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
      </node>
      <node id="136621">
        <label>stdint.h</label>
      </node>
      <node id="136704">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="136639" relation="include">
        </childnode>
        <childnode refid="136705" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
      </node>
      <node id="136672">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
      </node>
      <node id="136647">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="136744">
        <label>Eigen/Geometry</label>
      </node>
      <node id="136625">
        <label>RVersion.h</label>
      </node>
      <node id="136632">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="136633" relation="include">
        </childnode>
        <childnode refid="136641" relation="include">
        </childnode>
        <childnode refid="136642" relation="include">
        </childnode>
      </node>
      <node id="136770">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="136638">
        <label>cmath</label>
      </node>
      <node id="136691">
        <label>cassert</label>
      </node>
      <node id="136695">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="136714">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="136644">
        <label>stdexcept</label>
      </node>
      <node id="136758">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136759" relation="include">
        </childnode>
      </node>
      <node id="136668">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="136734">
        <label>Eigen/Core</label>
      </node>
      <node id="136701">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="136736">
        <label>xAODTracking/VertexContainerFwd.h</label>
        <link refid="d0/dc4/VertexContainerFwd_8h_source"/>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136737" relation="include">
        </childnode>
      </node>
      <node id="136765">
        <label>src/InDetTrackCut.h</label>
        <link refid="d2/d61/InDetTrackCut_8h_source"/>
        <childnode refid="136766" relation="include">
        </childnode>
        <childnode refid="136617" relation="include">
        </childnode>
        <childnode refid="136777" relation="include">
        </childnode>
      </node>
      <node id="136746">
        <label>xAODTracking/TrackParticleContainerFwd.h</label>
        <link refid="de/dea/TrackParticleContainerFwd_8h_source"/>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136747" relation="include">
        </childnode>
        <childnode refid="136748" relation="include">
        </childnode>
      </node>
      <node id="136709">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="136728">
        <label>TLorentzVector.h</label>
      </node>
      <node id="136612">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="136611">
        <label>string</label>
      </node>
      <node id="136649">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="136630" relation="include">
        </childnode>
        <childnode refid="136650" relation="include">
        </childnode>
        <childnode refid="136652" relation="include">
        </childnode>
        <childnode refid="136654" relation="include">
        </childnode>
        <childnode refid="136656" relation="include">
        </childnode>
        <childnode refid="136658" relation="include">
        </childnode>
        <childnode refid="136659" relation="include">
        </childnode>
        <childnode refid="136660" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136635" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
        <childnode refid="136661" relation="include">
        </childnode>
        <childnode refid="136662" relation="include">
        </childnode>
        <childnode refid="136663" relation="include">
        </childnode>
        <childnode refid="136669" relation="include">
        </childnode>
      </node>
      <node id="136671">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
      </node>
      <node id="136620">
        <label>versions/TrackParticle_v1.h</label>
        <link refid="d2/d7f/TrackParticle__v1_8h_source"/>
        <childnode refid="136618" relation="include">
        </childnode>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136622" relation="include">
        </childnode>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136727" relation="include">
        </childnode>
        <childnode refid="136731" relation="include">
        </childnode>
        <childnode refid="136736" relation="include">
        </childnode>
        <childnode refid="136738" relation="include">
        </childnode>
        <childnode refid="136739" relation="include">
        </childnode>
      </node>
      <node id="136661">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="136608">
        <label>InDetTrackSelectionTool/IInDetTrackSelectionTool.h</label>
        <link refid="d2/d36/IInDetTrackSelectionTool_8h_source"/>
        <childnode refid="136609" relation="include">
        </childnode>
        <childnode refid="136619" relation="include">
        </childnode>
        <childnode refid="136741" relation="include">
        </childnode>
        <childnode refid="136738" relation="include">
        </childnode>
      </node>
      <node id="136706">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="136646" relation="include">
        </childnode>
        <childnode refid="136704" relation="include">
        </childnode>
        <childnode refid="136707" relation="include">
        </childnode>
        <childnode refid="136709" relation="include">
        </childnode>
        <childnode refid="136694" relation="include">
        </childnode>
        <childnode refid="136636" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
      </node>
      <node id="136720">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="136617">
        <label>map</label>
      </node>
      <node id="136721">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="136722" relation="include">
        </childnode>
      </node>
      <node id="136722">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="136626">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="136681">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="136745">
        <label>VxVertex/VxTrackAtVertex.h</label>
      </node>
      <node id="136711">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="136706" relation="include">
        </childnode>
        <childnode refid="136636" relation="include">
        </childnode>
        <childnode refid="136634" relation="include">
        </childnode>
        <childnode refid="136712" relation="include">
        </childnode>
      </node>
      <node id="136768">
        <label>AsgTools/Check.h</label>
        <link refid="da/d02/Check_8h_source"/>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136769" relation="include">
        </childnode>
      </node>
      <node id="136662">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="136678">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="136762">
        <label>GaudiKernel/ServiceHandle.h</label>
      </node>
      <node id="136707">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="136646" relation="include">
        </childnode>
        <childnode refid="136624" relation="include">
        </childnode>
        <childnode refid="136641" relation="include">
        </childnode>
        <childnode refid="136708" relation="include">
        </childnode>
      </node>
      <node id="136759">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="136689">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="136624">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="136625" relation="include">
        </childnode>
        <childnode refid="136626" relation="include">
        </childnode>
      </node>
      <node id="136659">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="136666">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="136748">
        <label>xAODTracking/TrackParticleFwd.h</label>
        <link refid="d1/dc4/TrackParticleFwd_8h_source"/>
      </node>
      <node id="136705">
        <label>limits.h</label>
      </node>
      <node id="136699">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="136700" relation="include">
        </childnode>
      </node>
      <node id="136676">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="136652" relation="include">
        </childnode>
        <childnode refid="136639" relation="include">
        </childnode>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136677" relation="include">
        </childnode>
      </node>
      <node id="136761">
        <label>GaudiKernel/ToolHandle.h</label>
      </node>
      <node id="136630">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136632" relation="include">
        </childnode>
      </node>
      <node id="136623">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="136621" relation="include">
        </childnode>
      </node>
      <node id="136735">
        <label>Eigen/Dense</label>
      </node>
      <node id="136780">
        <label>TrkEventPrimitives/FitQuality.h</label>
      </node>
      <node id="136606">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/InDetTrackSelectionTool/Root/InDetTrackSelectionTool.cxx</label>
        <link refid="InDetTrackSelectionTool.cxx"/>
        <childnode refid="136607" relation="include">
        </childnode>
        <childnode refid="136765" relation="include">
        </childnode>
        <childnode refid="136768" relation="include">
        </childnode>
        <childnode refid="136731" relation="include">
        </childnode>
        <childnode refid="136778" relation="include">
        </childnode>
        <childnode refid="136779" relation="include">
        </childnode>
        <childnode refid="136776" relation="include">
        </childnode>
        <childnode refid="136780" relation="include">
        </childnode>
        <childnode refid="136641" relation="include">
        </childnode>
      </node>
      <node id="136633">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="136634" relation="include">
        </childnode>
        <childnode refid="136635" relation="include">
        </childnode>
        <childnode refid="136636" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
        <childnode refid="136638" relation="include">
        </childnode>
        <childnode refid="136639" relation="include">
        </childnode>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136640" relation="include">
        </childnode>
      </node>
      <node id="136692">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="136691" relation="include">
        </childnode>
      </node>
      <node id="136727">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="136728" relation="include">
        </childnode>
        <childnode refid="136688" relation="include">
        </childnode>
        <childnode refid="136729" relation="include">
        </childnode>
        <childnode refid="136687" relation="include">
        </childnode>
      </node>
      <node id="136729">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="136730" relation="include">
        </childnode>
      </node>
      <node id="136708">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="136704" relation="include">
        </childnode>
        <childnode refid="136692" relation="include">
        </childnode>
      </node>
      <node id="136767">
        <label>AsgTools/StatusCode.h</label>
        <link refid="d4/d5c/AsgTools_2AsgTools_2StatusCode_8h_source"/>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136768" relation="include">
        </childnode>
        <childnode refid="136771" relation="include">
        </childnode>
      </node>
      <node id="136645">
        <label>typeinfo</label>
      </node>
      <node id="136731">
        <label>xAODTracking/TrackingPrimitives.h</label>
        <link refid="d2/d4c/TrackingPrimitives_8h_source"/>
        <childnode refid="136732" relation="include">
        </childnode>
      </node>
      <node id="136690">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="136661" relation="include">
        </childnode>
        <childnode refid="136691" relation="include">
        </childnode>
      </node>
      <node id="136628">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="136629" relation="include">
        </childnode>
        <childnode refid="136646" relation="include">
        </childnode>
        <childnode refid="136647" relation="include">
        </childnode>
        <childnode refid="136648" relation="include">
        </childnode>
        <childnode refid="136697" relation="include">
        </childnode>
        <childnode refid="136698" relation="include">
        </childnode>
        <childnode refid="136704" relation="include">
        </childnode>
        <childnode refid="136706" relation="include">
        </childnode>
        <childnode refid="136710" relation="include">
        </childnode>
        <childnode refid="136711" relation="include">
        </childnode>
        <childnode refid="136707" relation="include">
        </childnode>
        <childnode refid="136713" relation="include">
        </childnode>
        <childnode refid="136624" relation="include">
        </childnode>
        <childnode refid="136714" relation="include">
        </childnode>
        <childnode refid="136715" relation="include">
        </childnode>
        <childnode refid="136709" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136642" relation="include">
        </childnode>
        <childnode refid="136716" relation="include">
        </childnode>
        <childnode refid="136634" relation="include">
        </childnode>
        <childnode refid="136644" relation="include">
        </childnode>
        <childnode refid="136636" relation="include">
        </childnode>
        <childnode refid="136687" relation="include">
        </childnode>
        <childnode refid="136717" relation="include">
        </childnode>
        <childnode refid="136719" relation="include">
        </childnode>
        <childnode refid="136723" relation="include">
        </childnode>
        <childnode refid="136724" relation="include">
        </childnode>
      </node>
      <node id="136750">
        <label>xAODTracking/NeutralParticle.h</label>
        <link refid="d4/daa/NeutralParticle_8h_source"/>
        <childnode refid="136751" relation="include">
        </childnode>
        <childnode refid="136740" relation="include">
        </childnode>
      </node>
      <node id="136618">
        <label>bitset</label>
      </node>
      <node id="136677">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="136627">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="136658">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="136769">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136758" relation="include">
        </childnode>
        <childnode refid="136770" relation="include">
        </childnode>
      </node>
      <node id="136657">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="136621" relation="include">
        </childnode>
      </node>
      <node id="136742">
        <label>xAODTracking/versions/Vertex_v1.h</label>
        <link refid="d7/dcc/Vertex__v1_8h_source"/>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136688" relation="include">
        </childnode>
        <childnode refid="136622" relation="include">
        </childnode>
        <childnode refid="136732" relation="include">
        </childnode>
        <childnode refid="136743" relation="include">
        </childnode>
        <childnode refid="136745" relation="include">
        </childnode>
        <childnode refid="136731" relation="include">
        </childnode>
        <childnode refid="136746" relation="include">
        </childnode>
        <childnode refid="136749" relation="include">
        </childnode>
        <childnode refid="136729" relation="include">
        </childnode>
        <childnode refid="136756" relation="include">
        </childnode>
      </node>
      <node id="136776">
        <label>TrkTrackSummary/TrackSummary.h</label>
      </node>
      <node id="136653">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="136680">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="136698">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="136699" relation="include">
        </childnode>
        <childnode refid="136648" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136640" relation="include">
        </childnode>
        <childnode refid="136701" relation="include">
        </childnode>
        <childnode refid="136679" relation="include">
        </childnode>
        <childnode refid="136702" relation="include">
        </childnode>
      </node>
      <node id="136651">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="136733">
        <label>unistd.h</label>
      </node>
      <node id="136717">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="136718" relation="include">
        </childnode>
      </node>
      <node id="136670">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="136630" relation="include">
        </childnode>
        <childnode refid="136671" relation="include">
        </childnode>
        <childnode refid="136672" relation="include">
        </childnode>
        <childnode refid="136673" relation="include">
        </childnode>
        <childnode refid="136682" relation="include">
        </childnode>
        <childnode refid="136663" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136684" relation="include">
        </childnode>
        <childnode refid="136685" relation="include">
        </childnode>
      </node>
      <node id="136655">
        <label>vector</label>
      </node>
      <node id="136747">
        <label>xAODBase/IParticleContainer.h</label>
        <link refid="dd/d2d/IParticleContainer_8h_source"/>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136727" relation="include">
        </childnode>
        <childnode refid="136651" relation="include">
        </childnode>
      </node>
      <node id="136725">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="136634" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
      </node>
      <node id="136741">
        <label>xAODTracking/Vertex.h</label>
        <link refid="d9/d2d/Vertex_8h_source"/>
        <childnode refid="136742" relation="include">
        </childnode>
      </node>
      <node id="136753">
        <label>xAODTracking/versions/NeutralParticleContainer_v1.h</label>
        <link refid="d6/d5f/NeutralParticleContainer__v1_8h_source"/>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136751" relation="include">
        </childnode>
        <childnode refid="136754" relation="include">
        </childnode>
      </node>
      <node id="136726">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="136635">
        <label>utility</label>
      </node>
      <node id="136723">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="136777">
        <label>array</label>
      </node>
      <node id="136660">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="136774">
        <label>sstream</label>
      </node>
      <node id="136743">
        <label>GeoPrimitives/GeoPrimitives.h</label>
        <link refid="d7/d87/GeoPrimitives_8h_source"/>
        <childnode refid="136733" relation="include">
        </childnode>
        <childnode refid="136744" relation="include">
        </childnode>
      </node>
      <node id="136737">
        <label>xAODTracking/VertexFwd.h</label>
        <link refid="d9/ddd/VertexFwd_8h_source"/>
      </node>
      <node id="136763">
        <label>TrkToolInterfaces/ITrackSummaryTool.h</label>
      </node>
      <node id="136696">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="136664">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="136609">
        <label>PATCore/IAsgSelectionTool.h</label>
        <link refid="d9/dfd/IAsgSelectionTool_8h_source"/>
        <childnode refid="136610" relation="include">
        </childnode>
        <childnode refid="136615" relation="include">
        </childnode>
      </node>
      <node id="136674">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="136778">
        <label>TrkTrack/Track.h</label>
      </node>
      <node id="136663">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="136664" relation="include">
        </childnode>
        <childnode refid="136665" relation="include">
        </childnode>
        <childnode refid="136666" relation="include">
        </childnode>
        <childnode refid="136667" relation="include">
        </childnode>
        <childnode refid="136668" relation="include">
        </childnode>
      </node>
      <node id="136779">
        <label>VxVertex/Vertex.h</label>
      </node>
      <node id="136730">
        <label>iosfwd</label>
      </node>
      <node id="136637">
        <label>cstdlib</label>
      </node>
      <node id="136619">
        <label>xAODTracking/TrackParticle.h</label>
        <link refid="d2/d15/TrackParticle_8h_source"/>
        <childnode refid="136620" relation="include">
        </childnode>
        <childnode refid="136740" relation="include">
        </childnode>
      </node>
      <node id="136716">
        <label>iostream</label>
      </node>
      <node id="136643">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="136650">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="136630" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136651" relation="include">
        </childnode>
      </node>
      <node id="136631">
        <label>cstddef</label>
      </node>
      <node id="136775">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="136773">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136774" relation="include">
        </childnode>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136758" relation="include">
        </childnode>
        <childnode refid="136610" relation="include">
        </childnode>
        <childnode refid="136775" relation="include">
        </childnode>
      </node>
      <node id="136615">
        <label>PATCore/TAccept.h</label>
        <link refid="d0/dcf/TAccept_8h_source"/>
        <childnode refid="136616" relation="include">
        </childnode>
        <childnode refid="136617" relation="include">
        </childnode>
        <childnode refid="136618" relation="include">
        </childnode>
      </node>
      <node id="136669">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="136670" relation="include">
        </childnode>
        <childnode refid="136686" relation="include">
        </childnode>
        <childnode refid="136650" relation="include">
        </childnode>
        <childnode refid="136661" relation="include">
        </childnode>
        <childnode refid="136662" relation="include">
        </childnode>
      </node>
      <node id="136613">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="136756">
        <label>xAODCore/BaseInfo.h</label>
        <link refid="d3/d17/BaseInfo_8h_source"/>
        <childnode refid="136687" relation="include">
        </childnode>
      </node>
      <node id="136616">
        <label>TString.h</label>
      </node>
      <node id="136766">
        <label>InDetTrackAccessor.h</label>
        <link refid="d6/d4b/InDetTrackAccessor_8h_source"/>
        <childnode refid="136767" relation="include">
        </childnode>
        <childnode refid="136772" relation="include">
        </childnode>
        <childnode refid="136731" relation="include">
        </childnode>
        <childnode refid="136619" relation="include">
        </childnode>
        <childnode refid="136741" relation="include">
        </childnode>
        <childnode refid="136776" relation="include">
        </childnode>
      </node>
      <node id="136752">
        <label>TrkNeutralParameters/NeutralParameters.h</label>
      </node>
      <node id="136702">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="136646" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136703" relation="include">
        </childnode>
        <childnode refid="136691" relation="include">
        </childnode>
        <childnode refid="136637" relation="include">
        </childnode>
        <childnode refid="136687" relation="include">
        </childnode>
      </node>
      <node id="136673">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="136671" relation="include">
        </childnode>
        <childnode refid="136674" relation="include">
        </childnode>
        <childnode refid="136654" relation="include">
        </childnode>
        <childnode refid="136675" relation="include">
        </childnode>
        <childnode refid="136660" relation="include">
        </childnode>
        <childnode refid="136645" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136634" relation="include">
        </childnode>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136679" relation="include">
        </childnode>
        <childnode refid="136680" relation="include">
        </childnode>
        <childnode refid="136681" relation="include">
        </childnode>
      </node>
      <node id="136738">
        <label>TrkParameters/TrackParameters.h</label>
      </node>
      <node id="136751">
        <label>versions/NeutralParticle_v1.h</label>
        <link refid="da/d85/NeutralParticle__v1_8h_source"/>
        <childnode refid="136622" relation="include">
        </childnode>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136727" relation="include">
        </childnode>
        <childnode refid="136731" relation="include">
        </childnode>
        <childnode refid="136736" relation="include">
        </childnode>
        <childnode refid="136618" relation="include">
        </childnode>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136752" relation="include">
        </childnode>
      </node>
      <node id="136772">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136773" relation="include">
        </childnode>
        <childnode refid="136769" relation="include">
        </childnode>
      </node>
      <node id="136607">
        <label>InDetTrackSelectionTool/InDetTrackSelectionTool.h</label>
        <link refid="d7/de0/InDetTrackSelectionTool_8h_source"/>
        <childnode refid="136608" relation="include">
        </childnode>
        <childnode refid="136757" relation="include">
        </childnode>
        <childnode refid="136761" relation="include">
        </childnode>
        <childnode refid="136762" relation="include">
        </childnode>
        <childnode refid="136763" relation="include">
        </childnode>
        <childnode refid="136764" relation="include">
        </childnode>
        <childnode refid="136617" relation="include">
        </childnode>
        <childnode refid="136639" relation="include">
        </childnode>
      </node>
      <node id="136755">
        <label>xAODTracking/NeutralParticleFwd.h</label>
        <link refid="d4/d90/NeutralParticleFwd_8h_source"/>
      </node>
      <node id="136771">
        <label>GaudiKernel/StatusCode.h</label>
      </node>
      <node id="136679">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="136749">
        <label>xAODTracking/NeutralParticleContainer.h</label>
        <link refid="da/d7f/NeutralParticleContainer_8h_source"/>
        <childnode refid="136750" relation="include">
        </childnode>
        <childnode refid="136753" relation="include">
        </childnode>
        <childnode refid="136740" relation="include">
        </childnode>
      </node>
      <node id="136648">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="136649" relation="include">
        </childnode>
        <childnode refid="136646" relation="include">
        </childnode>
        <childnode refid="136647" relation="include">
        </childnode>
        <childnode refid="136688" relation="include">
        </childnode>
        <childnode refid="136670" relation="include">
        </childnode>
        <childnode refid="136629" relation="include">
        </childnode>
        <childnode refid="136692" relation="include">
        </childnode>
        <childnode refid="136686" relation="include">
        </childnode>
        <childnode refid="136693" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136696" relation="include">
        </childnode>
      </node>
      <node id="136740">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="136651" relation="include">
        </childnode>
      </node>
      <node id="136683">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="136675">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="136674" relation="include">
        </childnode>
        <childnode refid="136676" relation="include">
        </childnode>
        <childnode refid="136660" relation="include">
        </childnode>
        <childnode refid="136655" relation="include">
        </childnode>
        <childnode refid="136678" relation="include">
        </childnode>
      </node>
      <node id="136634">
        <label>algorithm</label>
      </node>
      <node id="136713">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="136739">
        <label>TrkTrack/TrackCollection.h</label>
      </node>
      <node id="136688">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="136689" relation="include">
        </childnode>
        <childnode refid="136650" relation="include">
        </childnode>
        <childnode refid="136686" relation="include">
        </childnode>
        <childnode refid="136656" relation="include">
        </childnode>
        <childnode refid="136670" relation="include">
        </childnode>
        <childnode refid="136649" relation="include">
        </childnode>
        <childnode refid="136654" relation="include">
        </childnode>
        <childnode refid="136629" relation="include">
        </childnode>
        <childnode refid="136661" relation="include">
        </childnode>
        <childnode refid="136631" relation="include">
        </childnode>
        <childnode refid="136690" relation="include">
        </childnode>
      </node>
      <node id="136757">
        <label>AsgTools/AsgTool.h</label>
        <link refid="d4/d29/AsgTool_8h_source"/>
        <childnode refid="136612" relation="include">
        </childnode>
        <childnode refid="136610" relation="include">
        </childnode>
        <childnode refid="136758" relation="include">
        </childnode>
        <childnode refid="136760" relation="include">
        </childnode>
      </node>
      <node id="136656">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136657" relation="include">
        </childnode>
        <childnode refid="136624" relation="include">
        </childnode>
      </node>
      <node id="136710">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="136706" relation="include">
        </childnode>
        <childnode refid="136692" relation="include">
        </childnode>
        <childnode refid="136636" relation="include">
        </childnode>
      </node>
      <node id="136646">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="136622">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="136621" relation="include">
        </childnode>
        <childnode refid="136611" relation="include">
        </childnode>
        <childnode refid="136623" relation="include">
        </childnode>
        <childnode refid="136624" relation="include">
        </childnode>
        <childnode refid="136627" relation="include">
        </childnode>
      </node>
      <node id="136760">
        <label>AsgTools/SetProperty.h</label>
        <link refid="df/db0/SetProperty_8h_source"/>
      </node>
      <node id="136700">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="136715">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="136641">
        <label>memory</label>
      </node>
      <node id="136754">
        <label>xAODTracking/NeutralParticleContainerFwd.h</label>
        <link refid="d2/db4/NeutralParticleContainerFwd_8h_source"/>
        <childnode refid="136628" relation="include">
        </childnode>
        <childnode refid="136747" relation="include">
        </childnode>
        <childnode refid="136755" relation="include">
        </childnode>
      </node>
      <node id="136682">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="136672" relation="include">
        </childnode>
        <childnode refid="136673" relation="include">
        </childnode>
        <childnode refid="136683" relation="include">
        </childnode>
      </node>
      <node id="136693">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="136689" relation="include">
        </childnode>
        <childnode refid="136686" relation="include">
        </childnode>
        <childnode refid="136650" relation="include">
        </childnode>
        <childnode refid="136679" relation="include">
        </childnode>
        <childnode refid="136694" relation="include">
        </childnode>
        <childnode refid="136695" relation="include">
        </childnode>
        <childnode refid="136611" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;InDetTrackSelectionTool/InDetTrackSelectionTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;src/InDetTrackCut.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsgTools/Check.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTracking/TrackingPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrkTrack/Track.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VxVertex/Vertex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrkTrackSummary/TrackSummary.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrkEventPrimitives/FitQuality.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>a<sp/>local<sp/>make_unique<sp/>to<sp/>use<sp/>in<sp/>gcc<sp/>version<sp/>&lt;<sp/>4.9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201103L</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::make_unique;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>version<sp/>of<sp/>make_unique<sp/>is<sp/>taken<sp/>from<sp/>Scott<sp/>Meyers<sp/>Effective<sp/>Modern<sp/>C++,<sp/>item<sp/>21</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;T&gt;<sp/>make_unique(Ts&amp;&amp;...<sp/>params)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>(std::forward&lt;Ts&gt;(params)...));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">InDet::InDetTrackSelectionTool::InDetTrackSelectionTool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>cutLevel)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>:<sp/>asg::AsgTool(name)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>,<sp/>m_accept(<sp/></highlight><highlight class="stringliteral">&quot;InDetTrackSelection&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>,<sp/>m_cutLevel(cutLevel)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>,<sp/>m_trackSumTool(</highlight><highlight class="stringliteral">&quot;Trk::TrackSummaryTool/TrackSummaryTool&quot;</highlight><highlight class="normal">,<sp/>this)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>,<sp/>m_extrapolator(</highlight><highlight class="stringliteral">&quot;Trk::Extrapolator/Extrapolator&quot;</highlight><highlight class="normal">,<sp/>this)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">//<sp/>XAOD_ANALYSIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>cut<sp/>selection:<sp/>default<sp/>is<sp/>&quot;no<sp/>cut&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>setCutLevelPrivate(InDet::CutLevel::NoCut);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>declareInterface&lt;IInDetTrackSelectionTool&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;CutLevel&quot;</highlight><highlight class="normal">,<sp/>m_cutLevel);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minPt&quot;</highlight><highlight class="normal">,<sp/>m_minPt,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>transverse<sp/>momentum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minP&quot;</highlight><highlight class="normal">,<sp/>m_minP,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>momentum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxAbsEta&quot;</highlight><highlight class="normal">,<sp/>m_maxAbsEta,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>magnitude<sp/>of<sp/>pseudorapidity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxD0&quot;</highlight><highlight class="normal">,<sp/>m_maxD0,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>transverse<sp/>separation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxZ0&quot;</highlight><highlight class="normal">,<sp/>m_maxZ0,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>longitudinal<sp/>separation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxZ0SinTheta&quot;</highlight><highlight class="normal">,<sp/>m_maxZ0SinTheta,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>|z0|*sin(theta)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxSigmaD0&quot;</highlight><highlight class="normal">,<sp/>m_maxSigmaD0,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>error<sp/>on<sp/>d0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxSigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_maxSigmaZ0,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>error<sp/>on<sp/>z0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxSigmaZ0SinTheta&quot;</highlight><highlight class="normal">,<sp/>m_maxSigmaZ0SinTheta,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>error<sp/>on<sp/>z0*sin(theta)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxD0overSigmaD0&quot;</highlight><highlight class="normal">,<sp/>m_maxD0overSigmaD0,<sp/></highlight><highlight class="stringliteral">&quot;Significance<sp/>cut<sp/>on<sp/>|d0|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxZ0overSigmaZ0&quot;</highlight><highlight class="normal">,<sp/>m_maxZ0overSigmaZ0,<sp/></highlight><highlight class="stringliteral">&quot;Significance<sp/>cut<sp/>on<sp/>|z0|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxZ0SinThetaoverSigmaZ0SinTheta&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxZ0SinThetaoverSigmaZ0SinTheta,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Significance<sp/>cut<sp/>on<sp/>|z0*sin(theta)|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNInnermostLayerHits&quot;</highlight><highlight class="normal">,<sp/>m_minNInnermostLayerHits,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Required<sp/>hits<sp/>on<sp/>the<sp/>innermost<sp/>pixel<sp/>layer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNNextToInnermostLayerHits&quot;</highlight><highlight class="normal">,<sp/>m_minNNextToInnermostLayerHits,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Required<sp/>hits<sp/>on<sp/>the<sp/>next<sp/>to<sp/>innermost<sp/>pixel<sp/>layer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNBothInnermostLayersHits&quot;</highlight><highlight class="normal">,<sp/>m_minNBothInnermostLayersHits,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Required<sp/>hits<sp/>on<sp/>two<sp/>innermost<sp/>pixel<sp/>layers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNInnermostLayerSharedHits&quot;</highlight><highlight class="normal">,<sp/>m_maxNInnermostLayerSharedHits,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>shared<sp/>hits<sp/>in<sp/>innermost<sp/>pixel<sp/>layer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;useMinBiasInnermostLayersCut&quot;</highlight><highlight class="normal">,<sp/>m_useMinBiasInnermostLayersCut,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IBL<sp/>hit<sp/>if<sp/>expected,<sp/>otherwise<sp/>next<sp/>layer<sp/>hit<sp/>if<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHits&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHits,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>silicon<sp/>(pixel<sp/>+<sp/>SCT)<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNSiSharedHits&quot;</highlight><highlight class="normal">,<sp/>m_maxNSiSharedHits,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>silicon<sp/>(pixel<sp/>+<sp/>SCT)<sp/>sensors<sp/>shared<sp/>with<sp/>other<sp/>track&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsIfSiSharedHits&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsIfSiSharedHits,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>number<sp/>of<sp/>silicon<sp/>hits<sp/>if<sp/>there<sp/>are<sp/>any<sp/>shared<sp/>silicon<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNSiHoles&quot;</highlight><highlight class="normal">,<sp/>m_maxNSiHoles,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>silicon<sp/>(pixel<sp/>+<sp/>SCT)<sp/>holes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNPixelHits&quot;</highlight><highlight class="normal">,<sp/>m_minNPixelHits,<sp/></highlight><highlight class="stringliteral">&quot;Required<sp/>pixel<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNPixelSharedHits&quot;</highlight><highlight class="normal">,<sp/>m_maxNPixelSharedHits,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>pixels<sp/>shared<sp/>with<sp/>other<sp/>tracks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNPixelHoles&quot;</highlight><highlight class="normal">,<sp/>m_maxNPixelHoles,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>number<sp/>of<sp/>missed<sp/>layers<sp/>in<sp/>pixel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minEtaForStrictNSiHitsCut&quot;</highlight><highlight class="normal">,<sp/>m_minEtaForStrictNSiHitsCut,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoff<sp/>for<sp/>strict<sp/>silicon<sp/>hits<sp/>cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsAboveEtaCutoff&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsAboveEtaCutoff,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>silicon<sp/>hits<sp/>at<sp/>large<sp/>pseudorapidity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxOneSharedModule&quot;</highlight><highlight class="normal">,<sp/>m_maxOneSharedModule,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Allow<sp/>only<sp/>1<sp/>shared<sp/>pixel<sp/>hit<sp/>or<sp/>2<sp/>shared<sp/>SCT<sp/>hits,<sp/>not<sp/>both&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;useEtaDependentMaxChiSq&quot;</highlight><highlight class="normal">,<sp/>m_useEtaDependentMaxChiSq,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Whether<sp/>or<sp/>not<sp/>to<sp/>use<sp/>the<sp/>eta-dependent<sp/>chi<sp/>squared<sp/>per<sp/>degree<sp/>of<sp/>freedom<sp/>cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsPhysical&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsPhysical,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>physical<sp/>silicon<sp/>hits<sp/>(i.e.<sp/>dead<sp/>sensors<sp/>do<sp/>not<sp/>count)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNPixelHitsPhysical&quot;</highlight><highlight class="normal">,<sp/>m_minNPixelHitsPhysical,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>physical<sp/>pixel<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSctHitsPhysical&quot;</highlight><highlight class="normal">,<sp/>m_minNSctHitsPhysical,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>physical<sp/>SCT<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSctHits&quot;</highlight><highlight class="normal">,<sp/>m_minNSctHits,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>SCT<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNSctSharedHits&quot;</highlight><highlight class="normal">,<sp/>m_maxNSctSharedHits,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>SCT<sp/>hits<sp/>shared<sp/>with<sp/>other<sp/>track&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNSctHoles&quot;</highlight><highlight class="normal">,<sp/>m_maxNSctHoles,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>SCT<sp/>holes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxNSctDoubleHoles&quot;</highlight><highlight class="normal">,<sp/>m_maxNSctDoubleHoles,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>SCT<sp/>double<sp/>holes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxTrtEtaAcceptance&quot;</highlight><highlight class="normal">,<sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>eta<sp/>that<sp/>ignores<sp/>TRT<sp/>hit<sp/>cuts&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxEtaForTrtHitCuts&quot;</highlight><highlight class="normal">,<sp/>m_maxEtaForTrtHitCuts,<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>above<sp/>which<sp/>TRT<sp/>hit<sp/>cuts<sp/>are<sp/>not<sp/>applied.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNTrtHits&quot;</highlight><highlight class="normal">,<sp/>m_minNTrtHits,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>TRT<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNTrtHitsPlusOutliers&quot;</highlight><highlight class="normal">,<sp/>m_minNTrtHitsPlusOutliers,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>TRT<sp/>hits<sp/>including<sp/>outliers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNTrtHighThresholdHits&quot;</highlight><highlight class="normal">,<sp/>m_minNTrtHighThresholdHits,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>high<sp/>E<sp/>TRT<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNTrtHighThresholdHitsPlusOutliers&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_minNTrtHighThresholdHitsPlusOutliers,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>high<sp/>E<sp/>TRT<sp/>hits<sp/>including<sp/>outliers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxTrtHighEFraction&quot;</highlight><highlight class="normal">,<sp/>m_maxTrtHighEFraction,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>TRT<sp/>hits<sp/>that<sp/>are<sp/>above<sp/>high<sp/>energy<sp/>threshold&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxTrtHighEFractionWithOutliers&quot;</highlight><highlight class="normal">,<sp/>m_maxTrtHighEFractionWithOutliers,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>TRT<sp/>hits<sp/>that<sp/>are<sp/>above<sp/>high<sp/>energy<sp/>threshold<sp/>including<sp/>outliers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxTrtOutlierFraction&quot;</highlight><highlight class="normal">,<sp/>m_maxTrtOutlierFraction,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>fraction<sp/>of<sp/>TRT<sp/>outliers<sp/>over<sp/>TRT<sp/>hits<sp/>plus<sp/>outliers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxChiSq&quot;</highlight><highlight class="normal">,<sp/>m_maxChiSq,<sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>chi<sp/>squared&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minProb&quot;</highlight><highlight class="normal">,<sp/>m_minProb,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>p(chi^2,<sp/>Ndof)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;maxChiSqperNdf&quot;</highlight><highlight class="normal">,<sp/>m_maxChiSqperNdf,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Maximum<sp/>chi<sp/>squared<sp/>per<sp/>degree<sp/>of<sp/>freedom&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minPtForProbCut&quot;</highlight><highlight class="normal">,<sp/>m_minPtForProbCut,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>pt<sp/>for<sp/>chi-sq<sp/>probability<sp/>cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minProbAbovePtCutoff&quot;</highlight><highlight class="normal">,<sp/>m_minProbAbovePtCutoff,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>chi-sq<sp/>probability<sp/>above<sp/>a<sp/>pt<sp/>cutoff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNUsedHitsdEdx&quot;</highlight><highlight class="normal">,<sp/>m_minNUsedHitsdEdx,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>hits<sp/>used<sp/>for<sp/>dEdx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNOverflowHitsdEdx&quot;</highlight><highlight class="normal">,<sp/>m_minNOverflowHitsdEdx,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>overflow<sp/>hits<sp/>in<sp/>IBL<sp/>for<sp/>dEdx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minEProbabilityHT&quot;</highlight><highlight class="normal">,<sp/>m_minEProbabilityHT,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>High<sp/>Threshold<sp/>electron<sp/>probability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;eProbHTonlyForXe&quot;</highlight><highlight class="normal">,<sp/>m_eProbHTonlyForXe,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Flag<sp/>whether<sp/>to<sp/>apply<sp/>the<sp/>eProbabilityHT<sp/>cut<sp/>only<sp/>when<sp/>all<sp/>TRT<sp/>hits<sp/>are<sp/>Xenon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecEtaCutoffsForSiHitsCut&quot;</highlight><highlight class="normal">,<sp/>m_vecEtaCutoffsForSiHitsCut,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>eta<sp/>cutoffs<sp/>for<sp/>each<sp/>Silicon<sp/>hit<sp/>cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecMinNSiHitsAboveEta&quot;</highlight><highlight class="normal">,<sp/>m_vecMinNSiHitsAboveEta,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>Silicon<sp/>hits<sp/>above<sp/>each<sp/>eta<sp/>cutoff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecEtaCutoffsForPtCut&quot;</highlight><highlight class="normal">,<sp/>m_vecEtaCutoffsForPtCut,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>eta<sp/>cutoffs<sp/>for<sp/>each<sp/>pT<sp/>cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecMinPtAboveEta&quot;</highlight><highlight class="normal">,<sp/>m_vecMinPtAboveEta,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>transverse<sp/>momentum<sp/>above<sp/>each<sp/>eta<sp/>cutoff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecPtCutoffsForSctHitsCut&quot;</highlight><highlight class="normal">,<sp/>m_vecPtCutoffsForSctHitsCut,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>pt<sp/>cutoffs<sp/>for<sp/>each<sp/>SCT<sp/>hits&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;vecMinNSctHitsAbovePt&quot;</highlight><highlight class="normal">,<sp/>m_vecMinNSctHitsAbovePt,<sp/></highlight><highlight class="stringliteral">&quot;Minimum<sp/>SCT<sp/>hits<sp/>above<sp/>each<sp/>pt<sp/>cutoff&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;useExperimentalInnermostLayersCut&quot;</highlight><highlight class="normal">,<sp/>m_useExperimentalInnermostLayersCut,<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>experimental<sp/>cut<sp/>on<sp/>pixel<sp/>holes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsMod&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsMod);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsModTop&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsModTop);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;minNSiHitsModBottom&quot;</highlight><highlight class="normal">,<sp/>m_minNSiHitsModBottom);<sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;UseTrkTrackTools&quot;</highlight><highlight class="normal">,<sp/>m_initTrkTools);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;TrackSummaryTool&quot;</highlight><highlight class="normal">,<sp/>m_trackSumTool);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;Extrapolator&quot;</highlight><highlight class="normal">,<sp/>m_extrapolator);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>must<sp/>define<sp/>the<sp/>destructor<sp/>in<sp/>order<sp/>to<sp/>use<sp/>forward-declaration<sp/>with<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">InDet::InDetTrackSelectionTool::~InDetTrackSelectionTool()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">StatusCode<sp/>InDet::InDetTrackSelectionTool::initialize()<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>haven&apos;t<sp/>already<sp/>been<sp/>initialized<sp/>-<sp/>this<sp/>would<sp/>be<sp/>a<sp/>sign<sp/>of<sp/>improper<sp/>usage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isInitialized)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Tool<sp/>has<sp/>already<sp/>been<sp/>initialized.<sp/>This<sp/>is<sp/>illegitimate.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>call<sp/>to<sp/>initialize()<sp/>will<sp/>do<sp/>nothing.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Greet<sp/>the<sp/>user:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Initializing<sp/>track<sp/>selection<sp/>tool.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>ATH_CHECK(<sp/><ref refid="d5/dbb/classasg_1_1AsgTool_1a55b3c013a3e54ae4c1d0d76de8e1e726" kindref="member">asg::AsgTool::initialize</ref>()<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>CutLevel<sp/>string<sp/>is<sp/>set<sp/>to<sp/>something<sp/>recognizable,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>do<sp/>a<sp/>soft<sp/>set<sp/>on<sp/>the<sp/>cuts<sp/>(i.e.<sp/>not<sp/>overwriting<sp/>those<sp/>already<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cutLevel<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>InDet::CutLevel&gt;::const_iterator<sp/>it_mapCutLevel<sp/>=<sp/>s_mapCutLevel.find(m_cutLevel);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it_mapCutLevel<sp/>==<sp/>s_mapCutLevel.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>string<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_cutLevel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>is<sp/>not<sp/>recognized<sp/>as<sp/>a<sp/>cut<sp/>level.<sp/>No<sp/>cuts<sp/>will<sp/>be<sp/>changed.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Cut<sp/>level<sp/>options<sp/>are:&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>opt<sp/>:<sp/>s_mapCutLevel)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>opt.first<sp/>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Cut<sp/>level<sp/>set<sp/>to<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it_mapCutLevel-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>will<sp/>not<sp/>overwrite<sp/>other<sp/>cuts<sp/>that<sp/>have<sp/>been<sp/>set.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setCutLevelPrivate(<sp/>it_mapCutLevel-&gt;second,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_initTrkTools)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackSumToolAvailable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_trackSumTool.empty())<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>m_trackSumTool.retrieve()<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>summary<sp/>tool<sp/>retrieved.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackSumToolAvailable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>m_extrapolator.retrieve()<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Retrieved<sp/>tool<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_extrapolator<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>helper<sp/>functions<sp/>to<sp/>determine<sp/>if<sp/>a<sp/>maximum<sp/>cut<sp/>should<sp/>be<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>the<sp/>user<sp/>to<sp/>be<sp/>able<sp/>to<sp/>set<sp/>a<sp/>maximum<sp/>cut<sp/>to<sp/>a<sp/>negative<sp/>number<sp/>to<sp/>unset<sp/>it<sp/>from<sp/>a<sp/>pre-defined<sp/>cut<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>break<sp/>down<sp/>if<sp/>there<sp/>is<sp/>ever<sp/>a<sp/>legitimate<sp/>reason<sp/>to<sp/>restrict<sp/>a<sp/>value<sp/>to<sp/>be<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxDoubleIsSet<sp/>=<sp/>[&amp;](Double_t<sp/>cutValue){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cutValue<sp/>&lt;<sp/>LOCAL_MAX_DOUBLE<sp/>&amp;&amp;<sp/>cutValue<sp/>&gt;=<sp/>0.;};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxIntIsSet<sp/>=<sp/>[&amp;](Int_t<sp/>cutValue){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cutValue<sp/>&lt;<sp/>LOCAL_MAX_INT<sp/>&amp;&amp;<sp/>cutValue<sp/>&gt;=<sp/>0;};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>cuts<sp/>and<sp/>initialize<sp/>them<sp/>(which<sp/>will<sp/>create<sp/>the<sp/>necessary<sp/>accessors).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>the<sp/>user<sp/>which<sp/>cuts<sp/>are<sp/>recognized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minPt<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>Pt:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minPt<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Pt&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MinCut&lt;double,<sp/>&amp;xAOD::TrackParticle::pt&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minPt,<sp/></highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxAbsEta))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>|Eta|:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxAbsEta<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Eta&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;<sp/>MaxAbsCut&lt;double,<sp/>&amp;xAOD::TrackParticle::eta&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxAbsEta,<sp/></highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minP<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>P:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minP<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;<sp/>MaxAbsCut&lt;float,<sp/>&amp;xAOD::TrackParticle::qOverP&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>1./m_minP,<sp/></highlight><highlight class="stringliteral">&quot;qOverP&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxD0))<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>d0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxD0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;D0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;D0Cut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxD0));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxZ0))<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>z0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxZ0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0Cut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxZ0));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxZ0SinTheta))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>z0*sin(theta):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxZ0SinTheta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0SinTheta&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0SinThetaCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxZ0SinTheta));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxSigmaD0))<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>uncertainty<sp/>on<sp/>d0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxSigmaD0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;D0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;D0SigmaCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxSigmaD0));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxSigmaZ0))<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>uncertainty<sp/>on<sp/>z0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxSigmaZ0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0SigmaCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxSigmaZ0));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxSigmaZ0SinTheta))<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>uncertainty<sp/>on<sp/>z0*sin(theta):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_maxSigmaZ0SinTheta<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mm&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0SinTheta&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0SinThetaSigmaCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxSigmaZ0SinTheta));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxD0overSigmaD0))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>significance<sp/>on<sp/>d0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxD0overSigmaD0<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;D0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;D0SignificanceCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxD0overSigmaD0));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxZ0overSigmaZ0))<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>significance<sp/>on<sp/>z0:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxZ0overSigmaZ0<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0SignificanceCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxZ0overSigmaZ0));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxZ0SinThetaoverSigmaZ0SinTheta))<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>significance<sp/>on<sp/>z0*sin(theta):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_maxZ0SinThetaoverSigmaZ0SinTheta<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Z0SinTheta&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;Z0SinThetaSignificanceCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxZ0SinThetaoverSigmaZ0SinTheta));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNInnermostLayerHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>hits<sp/>from<sp/>innermost<sp/>pixel<sp/>layer:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNInnermostLayerHits<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(Track<sp/>will<sp/>pass<sp/>if<sp/>no<sp/>hit<sp/>is<sp/>expected.)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minInnermostLayerHits<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,2&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac74426cbd9c6d46d01222ccd2dd33d39" kindref="member" tooltip="these are the hits in the 0th pixel layer?">xAOD::numberOfInnermostPixelLayerHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa06c0bb644b3a4f67491b7f5b3cc61cab" kindref="member" tooltip="Do we expect a 0th-layer hit for this track?">xAOD::expectInnermostPixelLayerHit</ref>}));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>minInnermostLayerHits-&gt;setFunction(<sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>2&gt;<sp/>vals)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!vals[1]<sp/>||<sp/>vals[0]<sp/>&gt;=<sp/>m_minNInnermostLayerHits;}<sp/>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;InnermostLayersHits&quot;</highlight><highlight class="normal">].push_back(std::move(minInnermostLayerHits));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNNextToInnermostLayerHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>hits<sp/>from<sp/>next<sp/>to<sp/>innermost<sp/>pixel<sp/>layer:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNNextToInnermostLayerHits<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(Track<sp/>will<sp/>pass<sp/>if<sp/>no<sp/>hit<sp/>is<sp/>expected.)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minNextToInnermostLayerHits<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,2&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa75317c5a2915d0affbd0b48a36875f8f" kindref="member" tooltip="these are the hits in the 1st pixel layer">xAOD::numberOfNextToInnermostPixelLayerHits</ref>,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaa97033897cd90fe07637a1a52512aa60" kindref="member" tooltip="Do we expect a 1st-layer hit for this track?">xAOD::expectNextToInnermostPixelLayerHit</ref>})<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>minNextToInnermostLayerHits-&gt;setFunction(<sp/>[=]<sp/>(std::array&lt;uint8_t,<sp/>2&gt;<sp/>vals)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!vals[1]<sp/>||<sp/>vals[0]<sp/>&gt;=<sp/>m_minNNextToInnermostLayerHits;}<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;InnermostLayersHits&quot;</highlight><highlight class="normal">].push_back(std::move(minNextToInnermostLayerHits));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNBothInnermostLayersHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>hits<sp/>from<sp/>both<sp/>innermost<sp/>pixel<sp/>layers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNBothInnermostLayersHits<sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(If<sp/>a<sp/>layer<sp/>has<sp/>no<sp/>hits<sp/>but<sp/>one<sp/>is<sp/>not<sp/>expected,<sp/>the&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>hits<sp/>in<sp/>that<sp/>layer<sp/>will<sp/>be<sp/>taken<sp/>to<sp/>be<sp/>1.)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNBothInnermostLayersHits<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>value<sp/>of<sp/>minNBothInnermostLayersHits<sp/>above<sp/>2<sp/>does<sp/>not<sp/>make<sp/>sense.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Use<sp/>1<sp/>for<sp/>\&quot;or\&quot;<sp/>or<sp/>2<sp/>for<sp/>\&quot;and\&quot;.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minInnerHits<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;4&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,4&gt;(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac74426cbd9c6d46d01222ccd2dd33d39" kindref="member" tooltip="these are the hits in the 0th pixel layer?">xAOD::numberOfInnermostPixelLayerHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa75317c5a2915d0affbd0b48a36875f8f" kindref="member" tooltip="these are the hits in the 1st pixel layer">xAOD::numberOfNextToInnermostPixelLayerHits</ref>,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa06c0bb644b3a4f67491b7f5b3cc61cab" kindref="member" tooltip="Do we expect a 0th-layer hit for this track?">xAOD::expectInnermostPixelLayerHit</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaa97033897cd90fe07637a1a52512aa60" kindref="member" tooltip="Do we expect a 1st-layer hit for this track?">xAOD::expectNextToInnermostPixelLayerHit</ref>})<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>minInnerHits-&gt;setFunction(<sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>4&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::max(vals[0],<sp/>(uint8_t)<sp/>!vals[2])</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::max(vals[1],<sp/>(uint8_t)<sp/>!vals[3])</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>m_minNBothInnermostLayersHits;<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;InnermostLayersHits&quot;</highlight><highlight class="normal">].push_back(std::move(minInnerHits));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useMinBiasInnermostLayersCut<sp/>&gt;<sp/>0<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>less<sp/>than<sp/>zero<sp/>indicates<sp/>this<sp/>cut<sp/>is<sp/>manually<sp/>turned<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>An<sp/>innermost<sp/>layer<sp/>hit<sp/>is<sp/>required<sp/>if<sp/>expected,<sp/>otherwise&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>a<sp/>next-to-innermost<sp/>layer<sp/>hit<sp/>is<sp/>required<sp/>if<sp/>it<sp/>is<sp/>expected.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minInnerHits<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;4&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,4&gt;(<sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac74426cbd9c6d46d01222ccd2dd33d39" kindref="member" tooltip="these are the hits in the 0th pixel layer?">xAOD::numberOfInnermostPixelLayerHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa75317c5a2915d0affbd0b48a36875f8f" kindref="member" tooltip="these are the hits in the 1st pixel layer">xAOD::numberOfNextToInnermostPixelLayerHits</ref>,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa06c0bb644b3a4f67491b7f5b3cc61cab" kindref="member" tooltip="Do we expect a 0th-layer hit for this track?">xAOD::expectInnermostPixelLayerHit</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaa97033897cd90fe07637a1a52512aa60" kindref="member" tooltip="Do we expect a 1st-layer hit for this track?">xAOD::expectNextToInnermostPixelLayerHit</ref>})<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>minInnerHits-&gt;setFunction(<sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,4&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vals[2]<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>vals[0]<sp/>&gt;=<sp/>1)<sp/>||</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vals[2]<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(vals[3]<sp/>==<sp/>0<sp/>||<sp/>vals[1]<sp/>&gt;=<sp/>1));}<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;InnermostLayersHits&quot;</highlight><highlight class="normal">].push_back(std::move(minInnerHits));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNInnermostLayerSharedHits))<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>shared<sp/>hits<sp/>in<sp/>innermost<sp/>pixel<sp/>layer:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNInnermostLayerSharedHits<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;InnermostLayersHits&quot;</highlight><highlight class="normal">].push_back</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(make_unique&lt;MaxSummaryValueCut&gt;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNInnermostLayerSharedHits,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;xAOD::SummaryType&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa5b31419936b9e644f1000f491706823d" kindref="member" tooltip="number of Pixel 0th layer hits shared by several tracks.">xAOD::numberOfInnermostPixelLayerSharedHits</ref>})<sp/>));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNPixelHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>pixel<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNPixelHits<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;PixelHits&quot;</highlight><highlight class="normal">].push_back</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(make_unique&lt;MinSummaryValueCut&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNPixelHits,<sp/>std::vector&lt;xAOD::SummaryType&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref>})<sp/>));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNPixelHitsPhysical<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>physical<sp/>pixel<sp/>hits<sp/>(i.e.<sp/>dead<sp/>sensors<sp/>do<sp/>not<sp/>count):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNPixelHitsPhysical<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minPixelPhysHits<sp/>=<sp/>make_unique&lt;MinSummaryValueCut&gt;<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNPixelHitsPhysical<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>minPixelPhysHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;PixelHits&quot;</highlight><highlight class="normal">].push_back(std::move(minPixelPhysHits));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNPixelHoles))<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>pixel<sp/>holes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNPixelHoles<sp/>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxPixHoles<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNPixelHoles);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>maxPixHoles-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa32879c7c56a05554ae78f56a59c37ded" kindref="member" tooltip="number of pixel layers on track with absence of hits [unit8_t].">xAOD::numberOfPixelHoles</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;PixelHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxPixHoles));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNPixelSharedHits))<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>pixel<sp/>shared<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNPixelSharedHits<sp/>);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxPixSharedHits<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNPixelSharedHits);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>maxPixSharedHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aacc2b83cb1470747d4419177d5b5d364a" kindref="member" tooltip="number of Pixel all-layer hits shared by several tracks [unit8_t].">xAOD::numberOfPixelSharedHits</ref>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;PixelHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxPixSharedHits));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSctHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>SCT<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNSctHits<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(make_unique&lt;MinSummaryValueCut&gt;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSctHits,<sp/>std::vector&lt;xAOD::SummaryType&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>})<sp/>));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSctHitsPhysical<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>physical<sp/>SCT<sp/>hits<sp/>(i.e.<sp/>dead<sp/>sensors<sp/>do<sp/>not<sp/>count):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSctHitsPhysical<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minSctPhysHits<sp/>=<sp/>make_unique&lt;MinSummaryValueCut&gt;<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSctHitsPhysical<sp/>);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>minSctPhysHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back(std::move(minSctPhysHits));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNSctHoles))<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>SCT<sp/>holes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNSctHoles<sp/>);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSctHoles<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNSctHoles);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSctHoles-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aafda4eda04287f300bf1e3dfff1642863" kindref="member" tooltip="number of SCT holes [unit8_t].">xAOD::numberOfSCTHoles</ref><sp/>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxSctHoles));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNSctSharedHits))<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>SCT<sp/>shared<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNSctSharedHits<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSctSharedHits<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNSctSharedHits);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSctSharedHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad258b27ca6a49e24c17c5737f8617c70" kindref="member" tooltip="number of SCT hits shared by several tracks [unit8_t].">xAOD::numberOfSCTSharedHits</ref><sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxSctSharedHits));</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNSctDoubleHoles))<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>SCT<sp/>double<sp/>holes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNSctDoubleHoles<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSctDoubleHoles<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNSctDoubleHoles);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSctDoubleHoles-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaba4ee7cc10e58a25cf50e83374e56f15" kindref="member" tooltip="number of Holes in both sides of a SCT module [unit8_t].">xAOD::numberOfSCTDoubleHoles</ref><sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxSctDoubleHoles));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSiHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>silicon<sp/>(pixel<sp/>+<sp/>SCT)<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNSiHits<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minSiHits<sp/>=<sp/>make_unique&lt;MinSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSiHits);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref><sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref><sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref><sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(minSiHits));</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSiHitsPhysical<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>physical<sp/>silicon<sp/>hits<sp/>(i.e.<sp/>dead<sp/>sensors<sp/>do<sp/>not<sp/>count):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSiHitsPhysical<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minSiHitsPhys<sp/>=<sp/>make_unique&lt;MinSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSiHitsPhysical);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHitsPhys-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref><sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>minSiHitsPhys-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(minSiHitsPhys));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNSiHoles))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>silicon<sp/>holes:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNSiHoles<sp/>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSiHoles<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNSiHoles);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSiHoles-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa32879c7c56a05554ae78f56a59c37ded" kindref="member" tooltip="number of pixel layers on track with absence of hits [unit8_t].">xAOD::numberOfPixelHoles</ref><sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSiHoles-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aafda4eda04287f300bf1e3dfff1642863" kindref="member" tooltip="number of SCT holes [unit8_t].">xAOD::numberOfSCTHoles</ref><sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxSiHoles));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxIntIsSet(m_maxNSiSharedHits))<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>silicon<sp/>shared<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxNSiSharedHits<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSiSharedHits<sp/>=<sp/>make_unique&lt;MaxSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxNSiSharedHits);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSiSharedHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aacc2b83cb1470747d4419177d5b5d364a" kindref="member" tooltip="number of Pixel all-layer hits shared by several tracks [unit8_t].">xAOD::numberOfPixelSharedHits</ref><sp/>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>maxSiSharedHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad258b27ca6a49e24c17c5737f8617c70" kindref="member" tooltip="number of SCT hits shared by several tracks [unit8_t].">xAOD::numberOfSCTSharedHits</ref><sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxSiSharedHits));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxOneSharedModule)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>No<sp/>more<sp/>than<sp/>one<sp/>shared<sp/>module:&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>i.e.<sp/>max<sp/>1<sp/>shared<sp/>pixel<sp/>hit<sp/>or&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>2<sp/>shared<sp/>SCT<sp/>hits,<sp/>and<sp/>not<sp/>both.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oneSharedModule<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,<sp/>2&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aacc2b83cb1470747d4419177d5b5d364a" kindref="member" tooltip="number of Pixel all-layer hits shared by several tracks [unit8_t].">xAOD::numberOfPixelSharedHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad258b27ca6a49e24c17c5737f8617c70" kindref="member" tooltip="number of SCT hits shared by several tracks [unit8_t].">xAOD::numberOfSCTSharedHits</ref>})<sp/>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>oneSharedModule-&gt;setFunction(<sp/>[=]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>2&gt;<sp/>vals)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals[0]<sp/>+<sp/>vals[1]/2<sp/>&lt;=<sp/>1;}<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(oneSharedModule));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSiHitsIfSiSharedHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>silicon<sp/>hits<sp/>if<sp/>the<sp/>track<sp/>has<sp/>shared<sp/>hits:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSiHitsIfSiSharedHits<sp/>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>siHits<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;6&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,<sp/>6&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaed52645632f89e89813e4e5f14c83540" kindref="member" tooltip="number of dead pixel sensors crossed [unit8_t].">xAOD::numberOfPixelDeadSensors</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7fce0259f3a0d566e104077748ceb4a7" kindref="member" tooltip="number of dead SCT sensors crossed [unit8_t].">xAOD::numberOfSCTDeadSensors</ref>,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aacc2b83cb1470747d4419177d5b5d364a" kindref="member" tooltip="number of Pixel all-layer hits shared by several tracks [unit8_t].">xAOD::numberOfPixelSharedHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad258b27ca6a49e24c17c5737f8617c70" kindref="member" tooltip="number of SCT hits shared by several tracks [unit8_t].">xAOD::numberOfSCTSharedHits</ref>})<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>siHits-&gt;setFunction(<sp/>[=]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>6&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vals[4]<sp/>+<sp/>vals[5]<sp/>==<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vals[0]<sp/>+<sp/>vals[1]<sp/>+<sp/>vals[2]<sp/>+<sp/>vals[3]</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;=<sp/>m_minNSiHitsIfSiSharedHits);}<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(siHits));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_minEtaForStrictNSiHitsCut)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_minNSiHitsAboveEtaCutoff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Require<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNSiHitsAboveEtaCutoff</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>silicon<sp/>hits<sp/>above<sp/>eta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minEtaForStrictNSiHitsCut<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MinNSiHitsAboveEta&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSiHitsAboveEtaCutoff,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_minEtaForStrictNSiHitsCut));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useExperimentalInnermostLayersCut)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Zero<sp/>pixel<sp/>holes<sp/>allowed,<sp/>except<sp/>one<sp/>pix<sp/>hole<sp/>is<sp/>allowed<sp/>if<sp/>there<sp/>is<sp/>a<sp/>physical<sp/>IBL<sp/>hit<sp/>and<sp/>a<sp/>BLayer<sp/>hit<sp/>is<sp/>expected<sp/>but<sp/>there<sp/>is<sp/>no<sp/>BLayer<sp/>hit.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pixHoles<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;4&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,<sp/>4&gt;({<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa32879c7c56a05554ae78f56a59c37ded" kindref="member" tooltip="number of pixel layers on track with absence of hits [unit8_t].">xAOD::numberOfPixelHoles</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac74426cbd9c6d46d01222ccd2dd33d39" kindref="member" tooltip="these are the hits in the 0th pixel layer?">xAOD::numberOfInnermostPixelLayerHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aaa97033897cd90fe07637a1a52512aa60" kindref="member" tooltip="Do we expect a 1st-layer hit for this track?">xAOD::expectNextToInnermostPixelLayerHit</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa75317c5a2915d0affbd0b48a36875f8f" kindref="member" tooltip="these are the hits in the 1st pixel layer">xAOD::numberOfNextToInnermostPixelLayerHits</ref>})<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>pixHoles-&gt;setFunction(<sp/>[=](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>4&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vals[0]<sp/>==<sp/>0)<sp/>||<sp/>(vals[0]<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>vals[1]<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>vals[2]<sp/>&amp;&amp;<sp/>vals[3]<sp/>==<sp/>0);});</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;PixHits&quot;</highlight><highlight class="normal">].push_back(std::move(pixHoles));</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSiHitsMod<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>modified<sp/>Si<sp/>hits<sp/>(2*pix<sp/>+<sp/>sct)<sp/>(does<sp/>not<sp/>include<sp/>dead<sp/>sensors)=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSiHitsMod<sp/>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>siHits<sp/>=<sp/>make_unique&lt;MinSummaryValueCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSiHitsMod);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>siHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>siHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aac9135b8ddfaa5a9bc727bf21d396f556" kindref="member" tooltip="these are the pixel hits, including the b-layer [unit8_t].">xAOD::numberOfPixelHits</ref>);<sp/></highlight><highlight class="comment">//<sp/>pixel<sp/>hits<sp/>count<sp/>twice<sp/>in<sp/>this<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>siHits-&gt;addSummaryType(<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aab24f8cfe1b239d03666babf80ec9bee2" kindref="member" tooltip="number of hits in SCT [unit8_t].">xAOD::numberOfSCTHits</ref>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(siHits));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNSiHitsModTop<sp/>&gt;<sp/>0<sp/>||<sp/>m_minNSiHitsModBottom<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>modified<sp/>Si<sp/>hits<sp/>in<sp/>top<sp/>half<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSiHitsModTop<sp/>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>modified<sp/>Si<sp/>hits<sp/>in<sp/>bottom<sp/>half<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNSiHitsModBottom<sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MinSiHitsModTopBottomCut&gt;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNSiHitsModTop,<sp/>m_minNSiHitsModTop));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxEtaForTrtHitCuts<sp/>&gt;<sp/>0.<sp/>&amp;&amp;<sp/>m_maxTrtEtaAcceptance<sp/>&lt;<sp/>m_maxEtaForTrtHitCuts)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>--<sp/>TRT<sp/>hit<sp/>cuts<sp/>applied<sp/>above<sp/>eta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxTrtEtaAcceptance</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>below<sp/>eta<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxEtaForTrtHitCuts<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNTrtHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Minimum<sp/>TRT<sp/>hits<sp/>outside<sp/>eta<sp/>acceptance:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNTrtHits<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minTrtHits<sp/>=<sp/>make_unique&lt;MinTrtHitCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNTrtHits,<sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(minTrtHits));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNTrtHitsPlusOutliers<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Minimum<sp/>TRT<sp/>hits<sp/>outside<sp/>eta<sp/>acceptance<sp/>including<sp/>outliers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNTrtHitsPlusOutliers<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minTrtHits<sp/>=<sp/>make_unique&lt;MinTrtHitCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNTrtHitsPlusOutliers,<sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aae3e8f5c06c93710179d2c9694ceeb0f4" kindref="member" tooltip="number of TRT outliers [unit8_t].">xAOD::numberOfTRTOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(minTrtHits));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNTrtHighThresholdHits<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Minimum<sp/>TRT<sp/>hits<sp/>outside<sp/>eta<sp/>acceptance<sp/>above<sp/>high<sp/>energy<sp/>threshold:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNTrtHighThresholdHits<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minTrtHits<sp/>=<sp/>make_unique&lt;MinTrtHitCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNTrtHighThresholdHits,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance,<sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad910d8b5d0bfad7f401e027609e5fe18" kindref="member" tooltip="number of TRT hits which pass the high threshold (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdHits</ref><sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(minTrtHits));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNTrtHighThresholdHitsPlusOutliers<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Minimum<sp/>TRT<sp/>hits<sp/>outside<sp/>eta<sp/>acceptance<sp/>above<sp/>high<sp/>energy<sp/>threshold<sp/>including<sp/>outliers:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_minNTrtHighThresholdHitsPlusOutliers<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minTrtHits<sp/>=<sp/>make_unique&lt;MinTrtHitCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNTrtHighThresholdHitsPlusOutliers,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance,<sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad910d8b5d0bfad7f401e027609e5fe18" kindref="member" tooltip="number of TRT hits which pass the high threshold (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdHits</ref><sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>minTrtHits-&gt;addSummaryType(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa4bea5f7873c88e6a4a57887248c88edb" kindref="member" tooltip="number of TRT high threshold outliers (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(minTrtHits));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxTrtHighEFraction))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>this<sp/>condition<sp/>could<sp/>be<sp/>instead<sp/>that<sp/>it<sp/>is<sp/>between<sp/>0<sp/>and<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Maximum<sp/>ratio<sp/>of<sp/>high<sp/>threshold<sp/>to<sp/>regular<sp/>TRT<sp/>hits<sp/>outside<sp/>eta<sp/>acceptance:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_maxTrtHighEFraction);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxTrtRatio<sp/>=<sp/>make_unique&lt;MaxTrtHitRatioCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxTrtHighEFraction,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeNumerator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad910d8b5d0bfad7f401e027609e5fe18" kindref="member" tooltip="number of TRT hits which pass the high threshold (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdHits</ref><sp/>);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeDenominator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxTrtRatio));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxTrtHighEFractionWithOutliers))<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Maximum<sp/>ratio<sp/>of<sp/>high<sp/>threshold<sp/>to<sp/>regular<sp/>TRT<sp/>hits<sp/>above<sp/>eta<sp/>acceptance<sp/>including<sp/>outliers:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_maxTrtHighEFractionWithOutliers);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxTrtRatio<sp/>=<sp/>make_unique&lt;MaxTrtHitRatioCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxTrtHighEFractionWithOutliers,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeNumerator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aad910d8b5d0bfad7f401e027609e5fe18" kindref="member" tooltip="number of TRT hits which pass the high threshold (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdHits</ref><sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeNumerator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa4bea5f7873c88e6a4a57887248c88edb" kindref="member" tooltip="number of TRT high threshold outliers (only xenon counted) [unit8_t].">xAOD::numberOfTRTHighThresholdOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeDenominator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeDenominator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aae3e8f5c06c93710179d2c9694ceeb0f4" kindref="member" tooltip="number of TRT outliers [unit8_t].">xAOD::numberOfTRTOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxTrtRatio));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_maxTrtOutlierFraction<sp/>&lt;<sp/>1.<sp/>&amp;&amp;<sp/>m_maxTrtOutlierFraction<sp/>&gt;=<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Maximum<sp/>fraction<sp/>of<sp/>TRT<sp/>hits<sp/>that<sp/>are<sp/>outliers:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxTrtOutlierFraction<sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxTrtRatio<sp/>=<sp/>make_unique&lt;MaxTrtHitRatioCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxTrtOutlierFraction,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeNumerator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aae3e8f5c06c93710179d2c9694ceeb0f4" kindref="member" tooltip="number of TRT outliers [unit8_t].">xAOD::numberOfTRTOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeDenominator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref><sp/>);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxTrtRatio-&gt;addSummaryTypeDenominator(<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aae3e8f5c06c93710179d2c9694ceeb0f4" kindref="member" tooltip="number of TRT outliers [unit8_t].">xAOD::numberOfTRTOutliers</ref><sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;TrtHits&quot;</highlight><highlight class="normal">].push_back(std::move(maxTrtRatio));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_useEtaDependentMaxChiSq)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Using<sp/>pre-defined<sp/>eta-dependent<sp/>maximum<sp/>chi<sp/>squared<sp/>(no<sp/>longer<sp/>recommended).&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;FitQuality&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;EtaDependentChiSqCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxChiSq))<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>chi<sp/>squared:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxChiSq<sp/>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;FitQuality&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MaxChiSq&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxChiSq));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_maxChiSqperNdf))<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Maximum<sp/>chi<sp/>squared<sp/>per<sp/>degree<sp/>of<sp/>freedom:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_maxChiSqperNdf<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;FitQuality&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MaxChiSqPerNdf&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_maxChiSqperNdf));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minProb<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>chi<sp/>squared<sp/>probability:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minProb<sp/>);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;FitQuality&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MinProb&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minProb));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDoubleIsSet(m_minPtForProbCut)<sp/>&amp;&amp;<sp/>m_minProbAbovePtCutoff<sp/>&gt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>chi-sq<sp/>probability<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minProbAbovePtCutoff</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>above<sp/>pt<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minPtForProbCut*1e-3<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>GeV.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lowPtOrAboveProb<sp/>=<sp/>make_unique&lt;<sp/>OrCut&lt;2&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>lowPtOrAboveProb-&gt;Cut(0)<sp/>=<sp/>make_unique&lt;<sp/>MaxCut&lt;double,<sp/>&amp;xAOD::TrackParticle::pt&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minPtForProbCut,<sp/></highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>lowPtOrAboveProb-&gt;Cut(1)<sp/>=<sp/>make_unique&lt;MinProb&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minProbAbovePtCutoff);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;FitQuality&quot;</highlight><highlight class="normal">].push_back(std::move(lowPtOrAboveProb));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNUsedHitsdEdx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>used<sp/>hits<sp/>for<sp/>dEdx:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNUsedHitsdEdx<sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;dEdxHits&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;<sp/>MinCut&lt;uint8_t,<sp/>&amp;xAOD::TrackParticle::numberOfUsedHitsdEdx&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNUsedHitsdEdx,<sp/></highlight><highlight class="stringliteral">&quot;usedHitsdEdx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minNOverflowHitsdEdx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>IBL<sp/>overflow<sp/>hits<sp/>for<sp/>dEdx:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minNOverflowHitsdEdx<sp/>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;dEdxHits&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;<sp/>MinCut&lt;uint8_t,<sp/>&amp;xAOD::TrackParticle::numberOfIBLOverflowsdEdx&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minNOverflowHitsdEdx,<sp/></highlight><highlight class="stringliteral">&quot;overflowHitsdEdx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_minEProbabilityHT<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Minimum<sp/>high<sp/>threshold<sp/>electron<sp/>probability:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_minEProbabilityHT<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_eProbHTonlyForXe)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>(only<sp/>applied<sp/>on<sp/>tracks<sp/>where<sp/>all<sp/>TRT<sp/>hits<sp/>are<sp/>Xenon)&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>notAllXeOrEProb<sp/>=<sp/>make_unique&lt;<sp/>OrCut&lt;2&gt;<sp/>&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>notAllXe<sp/>=<sp/>make_unique&lt;<sp/>FuncSummaryValueCut&lt;3&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::array&lt;xAOD::SummaryType,3&gt;{<ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa7299409936cab78c06b800211034aa47" kindref="member" tooltip="number of TRT hits [unit8_t].">xAOD::numberOfTRTHits</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aae3e8f5c06c93710179d2c9694ceeb0f4" kindref="member" tooltip="number of TRT outliers [unit8_t].">xAOD::numberOfTRTOutliers</ref>,<sp/><ref refid="dd/d44/namespacexAOD_1ae3c28999f91d7b9b98c4142a0eb8286aa70dd4a4a3eac94848887f97583ee2814" kindref="member" tooltip="number of TRT hits on track in straws with xenon [unit8_t].">xAOD::numberOfTRTXenonHits</ref>});</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>notAllXe-&gt;setFunction(<sp/>[=]<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>3&gt;&amp;<sp/>vals)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vals[0]<sp/>+<sp/>vals[1]<sp/>&gt;<sp/>vals[2];}<sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>notAllXeOrEProb-&gt;setCut(0,<sp/>std::move(notAllXe));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>notAllXeOrEProb-&gt;Cut(1)<sp/>=<sp/>make_unique&lt;MinEProbHTCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minEProbabilityHT);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;eProbHT&quot;</highlight><highlight class="normal">].push_back(std::move(notAllXeOrEProb));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;eProbHT&quot;</highlight><highlight class="normal">].push_back(make_unique&lt;MinEProbHTCut&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_minEProbabilityHT));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_vecEtaCutoffsForSiHitsCut.empty()<sp/>||<sp/>!m_vecMinNSiHitsAboveEta.empty())<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cutSize<sp/>=<sp/>m_vecEtaCutoffsForSiHitsCut.size();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutSize<sp/>!=<sp/>m_vecMinNSiHitsAboveEta.size())<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>and<sp/>Silicon<sp/>hit<sp/>cuts<sp/>must<sp/>be<sp/>vectors<sp/>of<sp/>the<sp/>same<sp/>length.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cut=0;<sp/>i_cut&lt;cutSize-1;<sp/>++i_cut)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForSiHitsCut.at(i_cut)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>eta<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForSiHitsCut.at(i_cut+1)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,Silicon<sp/>hits<sp/><sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinNSiHitsAboveEta.at(i_cut)<sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>eta<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForSiHitsCut.at(cutSize-1)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,Silicon<sp/>hits<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinNSiHitsAboveEta.at(cutSize-1)<sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>siHitCut<sp/>=<sp/>make_unique&lt;EtaDependentSiliconHitsCut&gt;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_vecEtaCutoffsForSiHitsCut,<sp/>m_vecMinNSiHitsAboveEta);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SiHits&quot;</highlight><highlight class="normal">].push_back(std::move(siHitCut));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_vecEtaCutoffsForPtCut.empty()<sp/>||<sp/>!m_vecMinPtAboveEta.empty())<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cutSize<sp/>=<sp/>m_vecEtaCutoffsForPtCut.size();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutSize<sp/>!=<sp/>m_vecMinPtAboveEta.size())<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Eta<sp/>cutoffs<sp/>and<sp/>pT<sp/>cuts<sp/>must<sp/>be<sp/>vectors<sp/>of<sp/>the<sp/>same<sp/>length.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cut=0;<sp/>i_cut&lt;cutSize-1;<sp/>++i_cut)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForPtCut.at(i_cut)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>eta<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForPtCut.at(i_cut+1)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,transverse<sp/>momentum<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinPtAboveEta.at(i_cut)<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>eta<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecEtaCutoffsForPtCut.at(cutSize-1)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>,transverse<sp/>momentum<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinPtAboveEta.at(cutSize-1)<sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptCut<sp/>=<sp/>make_unique&lt;EtaDependentPtCut&gt;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_vecEtaCutoffsForPtCut,<sp/>m_vecMinPtAboveEta);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;Pt&quot;</highlight><highlight class="normal">].push_back(std::move(ptCut));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_vecPtCutoffsForSctHitsCut.empty()<sp/>||<sp/>!m_vecMinNSctHitsAbovePt.empty())<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cutSize<sp/>=<sp/>m_vecPtCutoffsForSctHitsCut.size();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutSize<sp/>!=<sp/>m_vecMinNSctHitsAbovePt.size())<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Pt<sp/>cutoffs<sp/>and<sp/>SCT<sp/>hit<sp/>cuts<sp/>must<sp/>be<sp/>vectors<sp/>of<sp/>the<sp/>same<sp/>length.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_cut=0;<sp/>i_cut&lt;cutSize-1;<sp/>++i_cut)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecPtCutoffsForSctHitsCut.at(i_cut)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;<sp/>pt<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecPtCutoffsForSctHitsCut.at(i_cut+1)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV,\tSCT<sp/>hits<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinNSctHitsAbovePt.at(i_cut)<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>for<sp/>pt<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecPtCutoffsForSctHitsCut.at(cutSize-1)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MeV,\t\tSCT<sp/>hits<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_vecMinNSctHitsAbovePt.at(cutSize-1)<sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sctCut<sp/>=<sp/>make_unique&lt;PtDependentSctHitsCut&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_vecPtCutoffsForSctHitsCut,<sp/>m_vecMinNSctHitsAbovePt);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackCuts[</highlight><highlight class="stringliteral">&quot;SctHits&quot;</highlight><highlight class="normal">].push_back(std::move(sctCut));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>cuts<sp/>and<sp/>set<sp/>up<sp/>the<sp/>TAccept<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cutFamily<sp/>:<sp/>m_trackCuts)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cut<sp/>:<sp/>cutFamily.second)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_CHECK(<sp/>cut-&gt;initialize()<sp/>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>cutFamilyName<sp/>=<sp/>cutFamily.first;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>m_numTracksPassedCuts.push_back(0);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a8fe4266652720e50d1198fc44770dcdf" kindref="member">addCut</ref>(<sp/>cutFamilyName,<sp/></highlight><highlight class="stringliteral">&quot;Selection<sp/>of<sp/>tracks<sp/>according<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>cutFamilyName<sp/>)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>cut<sp/>family<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cutFamilyName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>because<sp/>the<sp/>TAccept<sp/>object<sp/>is<sp/>full.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(</highlight><highlight class="stringliteral">&quot;Adding<sp/>cut<sp/>family<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cutFamilyName);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>m_isInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="664"><highlight class="normal">StatusCode<sp/>InDet::InDetTrackSelectionTool::finalize()</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Finalizing<sp/>track<sp/>selection<sp/>tool.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isInitialized)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>are<sp/>attempting<sp/>to<sp/>finalize<sp/>a<sp/>tool<sp/>that<sp/>has<sp/>not<sp/>been<sp/>initialized().&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_numTracksProcessed<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>tracks<sp/>processed<sp/>in<sp/>selection<sp/>tool.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(<sp/>m_numTracksPassed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_numTracksProcessed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_numTracksPassed*100./m_numTracksProcessed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>passed<sp/>all<sp/>cuts.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cutFamily<sp/>:<sp/>m_trackCuts)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>ULong64_t<sp/>numPassed<sp/>=<sp/>m_numTracksPassedCuts.at(m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1ad02afe504541ff83c7a9db44dbaf82d3" kindref="member">getCutPosition</ref>(cutFamily.first));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/>numPassed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numPassed*100./m_numTracksProcessed<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>passed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cutFamily.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cut.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/classRoot_1_1TAccept" kindref="compound">Root::TAccept</ref>&amp;<sp/>InDet::InDetTrackSelectionTool::getTAccept()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="690"><highlight class="keyword"></highlight><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/classRoot_1_1TAccept" kindref="compound">Root::TAccept</ref>&amp;</highlight></codeline>
<codeline lineno="706"><highlight class="normal">InDet::InDetTrackSelectionTool::accept(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">xAOD::IParticle</ref>*<sp/>p<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="707"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>result:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a9ff1c28e6b71cc20cd656628d689197c" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>track:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>p-&gt;<ref refid="d5/d4c/classxAOD_1_1IParticle_1a852e62cdcea85eb9f99461898c301e02" kindref="member" tooltip="The type of the object as a simple enumeration.">type</ref>()<sp/>!=<sp/><ref refid="dd/dc8/namespacexAOD_1_1Type_1a96c48d2d85466ace623036af49f84434ab58838237ad48f68b7dad0298ab4db1b" kindref="member" tooltip="The object is a charged track particle.">xAOD::Type::TrackParticle</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;accept(...)<sp/>Function<sp/>received<sp/>a<sp/>non-track&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cast<sp/>it<sp/>to<sp/>a<sp/>track<sp/>(we<sp/>have<sp/>already<sp/>checked<sp/>its<sp/>type<sp/>so<sp/>we<sp/>do<sp/>not<sp/>have<sp/>to<sp/>dynamic_cast):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>*<sp/>trk<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>specific<sp/>function<sp/>do<sp/>the<sp/>work:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accept(<sp/>*trk,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/classRoot_1_1TAccept" kindref="compound">Root::TAccept</ref>&amp;<sp/>InDet::InDetTrackSelectionTool::accept(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>&amp;<sp/>trk,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref>*<sp/>vtx<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="752"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isInitialized)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_warnInit)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Tool<sp/>is<sp/>not<sp/>initialized!<sp/>Calling<sp/>accept()<sp/>will<sp/>not<sp/>be<sp/>very<sp/>helpful.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_warnInit<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>result:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a9ff1c28e6b71cc20cd656628d689197c" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passAll<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>all<sp/>the<sp/>track<sp/>properties<sp/>we<sp/>will<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>accessor<sp/>:<sp/>m_trackAccessors<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!accessor.second-&gt;access(<sp/>trk,<sp/>vtx<sp/>).isSuccess())<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Track<sp/>access<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>accessor.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unsuccessful.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>all<sp/>cuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>UShort_t<sp/>cutFamilyIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cutFamily<sp/>:<sp/>m_trackCuts<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pass<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>cutFamilyName<sp/>=<sp/>cutFamily.first;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>auto&amp;<sp/>cut1<sp/>=<sp/>cutFamily.second;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>ATH_MSG_INFO(&quot;cut/value<sp/>&quot;&lt;&lt;cutFamilyName&lt;&lt;&quot;:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cut<sp/>:<sp/>cutFamily.second<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cut-&gt;result()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>passAll<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a74a43e3214e7a911a62b5b937321c9e4" kindref="member">setCutResult</ref>(<sp/>cutFamilyIndex,<sp/>pass<sp/>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass)<sp/>m_numTracksPassedCuts.at(cutFamilyIndex)++;<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>tracks<sp/>that<sp/>pass<sp/>each<sp/>cut<sp/>family</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>cutFamilyIndex++;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passAll)<sp/>m_numTracksPassed++;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>m_numTracksProcessed++;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor">const<sp/>Root::TAccept&amp;</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"></highlight><highlight class="normal">InDet::InDetTrackSelectionTool::accept(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trk::Track&amp;<sp/>track,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trk::Vertex*<sp/>vertex<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="807"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isInitialized)<sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Tool<sp/>is<sp/>not<sp/>initialized!<sp/>Calling<sp/>accept()<sp/>will<sp/>not<sp/>be<sp/>very<sp/>helpful.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a9ff1c28e6b71cc20cd656628d689197c" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trk::TrackParameters*<sp/>perigee<sp/>=<sp/>track.perigeeParameters();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>perigee<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>!perigee-&gt;covariance()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>preselection:<sp/>Zero<sp/>pointer<sp/>to<sp/>parameterbase*<sp/>received<sp/>(most<sp/>likely<sp/>a<sp/>track<sp/>without<sp/>perigee).<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass<sp/>any<sp/>cuts.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;const<sp/>Trk::TrackParameters&gt;<sp/>paramsAtVertex;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>Trk::PerigeeSurface<sp/>perigeeSurface(vertex-&gt;position());</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>paramsAtVertex.reset(m_extrapolator-&gt;extrapolate(*perigee,perigeeSurface,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trk::anyDirection,</highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track.info().particleHypothesis())<sp/>);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>perigee<sp/>=<sp/>paramsAtVertex.get();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>perigee<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/>!perigee-&gt;covariance()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>preselection:<sp/>cannot<sp/>make<sp/>a<sp/>measured<sp/>perigee.<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass<sp/>any<sp/>cuts.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_initTrkTools)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>user<sp/>should<sp/>set<sp/>\&quot;UseTrkTrackTools\&quot;<sp/>to<sp/>true<sp/>if<sp/>they<sp/>want<sp/>the<sp/>extrapolation<sp/>tool<sp/>to<sp/>try<sp/>to<sp/>get<sp/>a<sp/>perigee.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Trk::TrackSummary*<sp/>summary<sp/>=<sp/>track.trackSummary();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(summary<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>m_trackSumToolAvailable)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunately<sp/>the<sp/>const<sp/>must<sp/>be<sp/>cast<sp/>away<sp/>because<sp/>the<sp/>tool<sp/>needs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>update<sp/>the<sp/>track<sp/>to<sp/>make<sp/>a<sp/>summary<sp/>(it<sp/>is<sp/>a<sp/>friend<sp/>of<sp/>the<sp/>track)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>Trk::Track&amp;<sp/>nonConstTrack<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Trk::Track&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(track);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>m_trackSumTool-&gt;updateTrack(nonConstTrack);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>get<sp/>the<sp/>summary<sp/>from<sp/>the<sp/>track<sp/>(the<sp/>track<sp/>has<sp/>ownership)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>summary<sp/>=<sp/>nonConstTrack.trackSummary();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(summary<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>preselection:<sp/>cannot<sp/>get<sp/>a<sp/>track<sp/>summary.<sp/>This<sp/>track<sp/>will<sp/>not<sp/>pass<sp/>any<sp/>cuts.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_initTrkTools)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Trk::Track<sp/>tools<sp/>were<sp/>not<sp/>set<sp/>to<sp/>be<sp/>initialized.<sp/>The<sp/>user<sp/>should<sp/>set<sp/>the<sp/>property<sp/>\&quot;UseTrkTrackTools\&quot;<sp/>to<sp/>true<sp/>if<sp/>they<sp/>wish<sp/>to<sp/>use<sp/>the<sp/>summary<sp/>tool.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passAll<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>all<sp/>the<sp/>track<sp/>properties<sp/>we<sp/>will<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>accessor<sp/>:<sp/>m_trackAccessors<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!accessor.second-&gt;access(<sp/>track,<sp/>perigee,<sp/>summary<sp/>).isSuccess())<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Track<sp/>access<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>accessor.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unsuccessful.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>faster<sp/>lookup<sp/>in<sp/>setCutResult<sp/>we<sp/>will<sp/>keep<sp/>track<sp/>of<sp/>the<sp/>index<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>UShort_t<sp/>cutFamilyIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cutFamily<sp/>:<sp/>m_trackCuts<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pass<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cut<sp/>:<sp/>cutFamily.second<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cut-&gt;result()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>passAll<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>m_accept.<ref refid="d0/d75/classRoot_1_1TAccept_1a74a43e3214e7a911a62b5b937321c9e4" kindref="member">setCutResult</ref>(<sp/>cutFamilyIndex,<sp/>pass<sp/>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pass)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_numTracksPassedCuts.at(cutFamilyIndex)++;<sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>number<sp/>of<sp/>tracks<sp/>that<sp/>passed<sp/>this<sp/>cut<sp/>family</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>cutFamilyIndex++;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(passAll)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>m_numTracksPassed++;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>m_numTracksProcessed++;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_accept;</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="899"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InDet::InDetTrackSelectionTool::setCutLevel(InDet::CutLevel<sp/>level,<sp/>Bool_t<sp/>overwrite<sp/>)</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;InDetTrackSelectionTool::setCutLevel()<sp/>is<sp/>not<sp/>designed<sp/>to<sp/>be<sp/>called<sp/>manually<sp/>in<sp/>Athena.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;It<sp/>may<sp/>not<sp/>behave<sp/>as<sp/>intended.<sp/>Instead,<sp/>configure<sp/>it<sp/>in<sp/>the<sp/>job<sp/>options<sp/>through<sp/>the<sp/>CutLevel<sp/>property.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="905"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cutLevel<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Cut<sp/>level<sp/>already<sp/>set<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_cutLevel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/><sp/>Calling<sp/>setCutLevel()<sp/>is<sp/>not<sp/>expected.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>setCutLevelPrivate(level,<sp/>overwrite);</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InDet::InDetTrackSelectionTool::setCutLevelPrivate(InDet::CutLevel<sp/>level,<sp/>Bool_t<sp/>overwrite)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::NoCut<sp/>:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isInitialized)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>check<sp/>is<sp/>in<sp/>here<sp/>so<sp/>that<sp/>it<sp/>only<sp/>happens<sp/>once<sp/>per<sp/>call<sp/>to<sp/>setCutLevel,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>will<sp/>still<sp/>warn<sp/>if<sp/>only<sp/>the<sp/>private<sp/>version<sp/>is<sp/>called<sp/>somehow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>set<sp/>cut<sp/>level<sp/>while<sp/>the<sp/>tool<sp/>is<sp/>already<sp/>initialized.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>will<sp/>almost<sp/>certainly<sp/>not<sp/>exhibit<sp/>intended<sp/>behavior.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>cuts<sp/>will<sp/>default<sp/>to<sp/>-1,<sp/>so<sp/>if<sp/>a<sp/>user<sp/>wishes<sp/>to<sp/>remove<sp/>a<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>from<sp/>a<sp/>preset<sp/>level<sp/>they<sp/>can<sp/>do<sp/>so<sp/>by<sp/>setting<sp/>the<sp/>minimum<sp/>to<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>cuts<sp/>can<sp/>be<sp/>removed<sp/>from<sp/>a<sp/>preset<sp/>level<sp/>by<sp/>setting<sp/>them<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minPt<sp/>=<sp/>-1.;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>MeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minP<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxAbsEta<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxZ0SinTheta<sp/>=<sp/>LOCAL_MAX_DOUBLE;<sp/></highlight><highlight class="comment">//<sp/>in<sp/>mm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxZ0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxD0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxSigmaD0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxSigmaZ0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxSigmaZ0SinTheta<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxD0overSigmaD0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxZ0overSigmaZ0<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxZ0SinThetaoverSigmaZ0SinTheta<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNInnermostLayerHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNNextToInnermostLayerHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNBothInnermostLayersHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNInnermostLayerSharedHits<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_useMinBiasInnermostLayersCut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNPixelHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNPixelHitsPhysical<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNPixelSharedHits<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNPixelHoles<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSctHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSctHitsPhysical<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNSctHoles<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNSctSharedHits<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNSctDoubleHoles<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsPhysical<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNSiSharedHits<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsIfSiSharedHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxNSiHoles<sp/>=<sp/>LOCAL_MAX_INT;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minEtaForStrictNSiHitsCut<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsAboveEtaCutoff<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxOneSharedModule<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtEtaAcceptance<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxEtaForTrtHitCuts<sp/>=<sp/>-1.;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>really<sp/>a<sp/>minimum<sp/>eta<sp/>above<sp/>which<sp/>cuts<sp/>are<sp/>not<sp/>applied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNTrtHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNTrtHitsPlusOutliers<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNTrtHighThresholdHits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNTrtHighThresholdHitsPlusOutliers<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtHighEFraction<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtHighEFractionWithOutliers<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxTrtOutlierFraction<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxChiSq<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minProb<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_maxChiSqperNdf<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minPtForProbCut<sp/>=<sp/>LOCAL_MAX_DOUBLE;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minProbAbovePtCutoff<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_useEtaDependentMaxChiSq<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNUsedHitsdEdx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNOverflowHitsdEdx<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minEProbabilityHT<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_eProbHTonlyForXe<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_ANALYSIS</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsMod<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsModTop<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minNSiHitsModBottom<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecEtaCutoffsForSiHitsCut.clear();</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecMinNSiHitsAboveEta.clear();</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecEtaCutoffsForPtCut.clear();</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecMinPtAboveEta.clear();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecPtCutoffsForSctHitsCut.clear();</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecMinNSctHitsAbovePt.clear();</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::Loose<sp/>:</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>hard<sp/>overwrite,<sp/>reset<sp/>all<sp/>cuts<sp/>first.<sp/>will<sp/>do<sp/>nothing<sp/>if<sp/>!overwrite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>change<sp/>the<sp/>cuts<sp/>if<sp/>a<sp/>hard<sp/>overwrite<sp/>is<sp/>asked<sp/>for<sp/>or<sp/>if<sp/>the<sp/>cuts<sp/>are<sp/>unset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHits<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxOneSharedModule<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNSiHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNSiHoles<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNPixelHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNPixelHoles<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::LoosePrimary<sp/>:</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);<sp/></highlight><highlight class="comment">//<sp/>implement<sp/>loose<sp/>cuts<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHits<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxOneSharedModule<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNSiHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNSiHoles<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNPixelHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNPixelHoles<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHitsIfSiSharedHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHitsIfSiSharedHits<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::TightPrimary<sp/>:</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHits<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>m_maxOneSharedModule<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNSiHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNSiHoles<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNPixelHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNPixelHoles<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minEtaForStrictNSiHitsCut<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_minEtaForStrictNSiHitsCut<sp/>=<sp/>1.65;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHitsAboveEtaCutoff<sp/>&lt;<sp/>0)<sp/>m_minNSiHitsAboveEtaCutoff<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNBothInnermostLayersHits<sp/>&lt;<sp/>0)<sp/>m_minNBothInnermostLayersHits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::LooseMuon<sp/>:</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>cuts<sp/>unless<sp/>we<sp/>are<sp/>doing<sp/>a<sp/>soft<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSctHits<sp/>&lt;<sp/>0)<sp/>m_minNSctHits<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxNSiHoles<sp/>&gt;=<sp/>LOCAL_MAX_INT)<sp/>m_maxNSiHoles<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxTrtEtaAcceptance<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE<sp/>)<sp/>m_maxTrtEtaAcceptance<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxEtaForTrtHitCuts<sp/>&lt;<sp/>0.)<sp/>m_maxEtaForTrtHitCuts<sp/>=<sp/>1.9;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNTrtHitsPlusOutliers<sp/>&lt;<sp/>0)<sp/>m_minNTrtHitsPlusOutliers<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxTrtOutlierFraction<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxTrtOutlierFraction<sp/>=<sp/>0.9;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::LooseElectron<sp/>:</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHits<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::LooseTau<sp/>:</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minPt<sp/>&lt;<sp/>0.0)<sp/>m_minPt<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSiHits<sp/>&lt;<sp/>0)<sp/>m_minNSiHits<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxD0<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxD0<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxZ0<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxZ0<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::MinBias<sp/>:</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_useMinBiasInnermostLayersCut<sp/>&gt;=<sp/>0)<sp/>m_useMinBiasInnermostLayersCut<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>less<sp/>than<sp/>0,<sp/>it<sp/>is<sp/>turned<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNSctHits<sp/>&lt;<sp/>0)<sp/>m_minNSctHits<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minProbAbovePtCutoff<sp/>&lt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minPtForProbCut<sp/>=<sp/>10000.;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_minProbAbovePtCutoff<sp/>=<sp/>.01;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxD0<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxD0<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxZ0SinTheta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxZ0SinTheta<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minPt<sp/>&lt;<sp/>0.)<sp/>m_minPt<sp/>=<sp/>500.0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::HILoose:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HILoose<sp/>is<sp/>similar<sp/>to<sp/>MinBias,<sp/>but<sp/>not<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_useMinBiasInnermostLayersCut<sp/>&gt;=<sp/>0)<sp/>m_useMinBiasInnermostLayersCut<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>(m_vecPtCutoffsForSctHitsCut.empty()</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_vecMinNSctHitsAbovePt.empty()))<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecPtCutoffsForSctHitsCut<sp/>=<sp/>{0.0,<sp/>300.0,<sp/>400.0};</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecMinNSctHitsAbovePt<sp/>=<sp/>{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxD0<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxD0<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxZ0SinTheta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxZ0SinTheta<sp/>=<sp/>1.5;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CutLevel::HITight:</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HITight<sp/>is<sp/>like<sp/>HILoose<sp/>but<sp/>we<sp/>require<sp/>8<sp/>SCT<sp/>hits<sp/>and<sp/>2<sp/>pixel<sp/>hits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>setCutLevelPrivate(CutLevel::NoCut,<sp/>overwrite);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxAbsEta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxAbsEta<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_useMinBiasInnermostLayersCut<sp/>&gt;=<sp/>0)<sp/>m_useMinBiasInnermostLayersCut<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_minNPixelHits<sp/>&lt;<sp/>0)<sp/>m_minNPixelHits<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>(m_vecPtCutoffsForSctHitsCut.empty()</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>m_vecMinNSctHitsAbovePt.empty()))<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecPtCutoffsForSctHitsCut<sp/>=<sp/>{0.0,<sp/>300.0,<sp/>400.0};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_vecMinNSctHitsAbovePt<sp/>=<sp/>{4,<sp/>6,<sp/>8};</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxD0<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxD0<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxZ0SinTheta<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxZ0SinTheta<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overwrite<sp/>||<sp/>m_maxChiSqperNdf<sp/>&gt;=<sp/>LOCAL_MAX_DOUBLE)<sp/>m_maxChiSqperNdf<sp/>=<sp/>6.0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;CutLevel<sp/>not<sp/>recognized.<sp/>Cut<sp/>selection<sp/>will<sp/>remain<sp/>unchanged.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>map<sp/>from<sp/>strings<sp/>to<sp/>cut<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>InDet::CutLevel&gt;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">InDet::InDetTrackSelectionTool::s_mapCutLevel<sp/>=</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;NoCut&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::NoCut},</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Loose&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::Loose},</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;LoosePrimary&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::LoosePrimary},</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;TightPrimary&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::TightPrimary},</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;LooseMuon&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::LooseMuon},</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;LooseElectron&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::LooseElectron},</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;LooseTau&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::LooseTau},</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MinBias&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::MinBias},</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;HILoose&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::HILoose},</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;HITight&quot;</highlight><highlight class="normal">,<sp/>InDet::CutLevel::HITight}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/InDetTrackSelectionTool/Root/InDetTrackSelectionTool.cxx"/>
  </compounddef>
</doxygen>
