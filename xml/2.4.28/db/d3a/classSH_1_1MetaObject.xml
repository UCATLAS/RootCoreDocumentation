<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/d3a/classSH_1_1MetaObject" kind="class" prot="public">
    <compoundname>SH::MetaObject</compoundname>
    <includes refid="d7/d50/MetaObject_8h" local="no">MetaObject.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" prot="public" static="no">
        <name>CastMode</name>
        <enumvalue id="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bbace19baf87745099c84fed8b2153b4b7a" prot="public">
          <name>CAST_ERROR_THROW</name>
          <briefdescription>
<para>cast and throw if the cast fails (not if the input is not found) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bba3c8a4569260db9a9f8bbc96374ce49ca" prot="public">
          <name>CAST_ERROR_DEFAULT</name>
          <briefdescription>
<para>cast and return the default value if the cast fails </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bbaf486deb6eb90198af10145e50cabbafa" prot="public">
          <name>CAST_NOCAST_THROW</name>
          <briefdescription>
<para>do not cast and throw if the input has the wrong type (not if the input is not found) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bba2392a63dd21d6cc72eb3c3e85c06a82b" prot="public">
          <name>CAST_NOCAST_DEFAULT</name>
          <briefdescription>
<para>cast and return the default value if the input has the wrong type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the different modes for casts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" bodystart="60" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="db/d3a/classSH_1_1MetaObject_1abba4e6b13ade71dceb54c6bdef640ff2" prot="private" static="no" mutable="no">
        <type>TList *</type>
        <definition>TList* SH::MetaObject::m_dataList</definition>
        <argsstring></argsstring>
        <name>m_dataList</name>
        <briefdescription>
<para>the actual meta-data list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="474" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" bodystart="474" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a39015ff6490722aa49830d465d763782" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="85"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a966912f52e1b205a9096cb7dc9810b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::MetaObject::MetaObject</definition>
        <argsstring>()</argsstring>
        <name>MetaObject</name>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a639ef5a0838f2b1cc6a4eacca98c63be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::MetaObject::MetaObject</definition>
        <argsstring>(const MetaObject &amp;that)</argsstring>
        <name>MetaObject</name>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard copy constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="105"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a13d3b67db627da13433835b29e642c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual SH::MetaObject::~MetaObject</definition>
        <argsstring>()</argsstring>
        <name>~MetaObject</name>
        <briefdescription>
<para>standard destructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1abb9be1cc030b4fe2cf6ba0a29bd04c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
        <definition>MetaObject&amp; SH::MetaObject::operator=</definition>
        <argsstring>(const MetaObject &amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard assignment operator </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Returns</title><para>this </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="125"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a810234b81e92ac98c7df779249e7a14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::swap</definition>
        <argsstring>(MetaObject &amp;that)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard swap </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="133"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a5693d2b9d9da06821ccd0b24f23c2cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::remove</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>remove all meta-information with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the meta-data name to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may only delete some entries </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="144"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a128be2f78554a3fccbb0e70459dedf51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::addReplace</definition>
        <argsstring>(TNamed *meta_swallow)</argsstring>
        <name>addReplace</name>
        <param>
          <type>TNamed *</type>
          <declname>meta_swallow</declname>
        </param>
        <briefdescription>
<para>add a meta-data object and remove any existing meta-data with the same name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta_swallow</parametername>
</parameternamelist>
<parameterdescription>
<para>the meta-object to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>meta_swallow != 0 </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>basic, may delete some entries without adding the new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a1890e870d0f1b5f395f2061653afd588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TObject *</type>
        <definition>TObject* SH::MetaObject::get</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>the meta-data object with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data object with the given name, or NULL if there is no such entry </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="169"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1aa786c75bb2cfbf24fac36bf7e2bfd2c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const TObject *</type>
        <definition>const TObject* SH::MetaObject::get</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1aa29b14d40faae569899b3fa4fd49a8ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SH::MetaObject::getDouble</definition>
        <argsstring>(const std::string &amp;name, double def_val=0) const </argsstring>
        <name>getDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>def_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>the meta-data double with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a97c5ec269f429200d946c6d8a372d40f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::MetaObject::getString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;def_val=&quot;&quot;) const </argsstring>
        <name>getString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>def_val</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>the meta-data string with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>I return the string by value, because returning by reference seems to break the python binding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="203"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1afe97eef7cc6c4f41b2c5a2ff0a75a0fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
        <definition>T SH::MetaObject::castT</definition>
        <argsstring>(const std::string &amp;name, T def_val, CastMode mode) const </argsstring>
        <name>castT</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>def_val</declname>
        </param>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" kindref="member">CastMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>the meta-data element with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="218"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a8215d56cd61535948e0b280eeac0f575" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SH::MetaObject::castDouble</definition>
        <argsstring>(const std::string &amp;name, double def_val=0, CastMode mode=CAST_ERROR_THROW) const </argsstring>
        <name>castDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>def_val</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" kindref="member">CastMode</ref></type>
          <declname>mode</declname>
          <defval>CAST_ERROR_THROW</defval>
        </param>
        <briefdescription>
<para>the meta-data double with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="233"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::MetaObject::castString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;def_val=&quot;&quot;, CastMode mode=CAST_ERROR_THROW) const </argsstring>
        <name>castString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>def_val</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" kindref="member">CastMode</ref></type>
          <declname>mode</declname>
          <defval>CAST_ERROR_THROW</defval>
        </param>
        <briefdescription>
<para>the meta-data string with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>I return the string by value, because returning by reference seems to break the python binding. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="251"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1ac4f3159ddb480c449e4d40406d735214" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SH::MetaObject::castInteger</definition>
        <argsstring>(const std::string &amp;name, int def_val=0, CastMode mode=CAST_ERROR_THROW) const </argsstring>
        <name>castInteger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>def_val</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" kindref="member">CastMode</ref></type>
          <declname>mode</declname>
          <defval>CAST_ERROR_THROW</defval>
        </param>
        <briefdescription>
<para>the meta-data integer with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="266"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a6e8f9ea5a2acadaa05c4fd65604ff055" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SH::MetaObject::castBool</definition>
        <argsstring>(const std::string &amp;name, bool def_val=false, CastMode mode=CAST_ERROR_THROW) const </argsstring>
        <name>castBool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_val</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" kindref="member">CastMode</ref></type>
          <declname>mode</declname>
          <defval>CAST_ERROR_THROW</defval>
        </param>
        <briefdescription>
<para>the meta-data boolean with the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="281"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a56f734fd246e6143d8861312221063e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::setDouble</definition>
        <argsstring>(const std::string &amp;name, double value)</argsstring>
        <name>setDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data double with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="292"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::setString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value)</argsstring>
        <name>setString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data string with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="303"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a3724cd79e078d0860345a6cd843dc488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::setInteger</definition>
        <argsstring>(const std::string &amp;name, int value)</argsstring>
        <name>setInteger</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data integer with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="314"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1ad80a9e464f1acff9c83ec538b5242365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::setBool</definition>
        <argsstring>(const std::string &amp;name, bool value)</argsstring>
        <name>setBool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data boolean with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a09fb969691651419d9960459b2330a73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SH::MetaObject::setT</definition>
        <argsstring>(const std::string &amp;name, T value)</argsstring>
        <name>setT</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the meta-data element with the given name </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="336" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a21f2956caca7a0362ed9a9a1c0a50acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::fetch</definition>
        <argsstring>(const MetaObject &amp;source)</argsstring>
        <name>fetch</name>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>fetch the meta-data from the given sample. </para>        </briefdescription>
        <detaileddescription>
<para>fields that have a name that starts with &quot;nc_&quot; are not copied.</para><para><simplesect kind="par"><title>Guarantee</title><para>basic, may only fetch some meta-data </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Rationale this is used by EventLoop, to copy the</title><para>meta-data from the input samples to the output samples. the prefix &quot;nc_&quot; is used to indicate meta-data entries that only apply to the current sample, or are options to the specific EventLoop job. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="355"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::fetchDefaults</definition>
        <argsstring>(const MetaObject &amp;source)</argsstring>
        <name>fetchDefaults</name>
        <param>
          <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>fetch the meta-data from the given sample not present in this sample. ignores any meta-data without name. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may only fetch some meta-data </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="366"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a61f7981357c3559d2bc0a6b3974f9c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::MetaObject::fetchFromString</definition>
        <argsstring>(const std::string &amp;source)</argsstring>
        <name>fetchFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>fetch the meta-data from a given string </para>        </briefdescription>
        <detaileddescription>
<para>individual pieces of data may be given as key=value, key=&apos;value&apos;, key=&quot;value&quot; spurious spaces will be ignored, commas inside values are not allowed</para><para><simplesect kind="par"><title>Guarantee</title><para>weak, may throw runtime exceptions if string cannot be parsed </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>malformed input </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="381"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a1f293d029f71636e12b000ce546908aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::MetaObject::dumpToString</definition>
        <argsstring>()</argsstring>
        <name>dumpToString</name>
        <briefdescription>
<para>dump the meta-data to a string </para>        </briefdescription>
        <detaileddescription>
<para>string will be suitable for fetchFromString <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failues</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="392"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1abb31772b010d4df51164af61d2296cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SH::MetaObject::Add</definition>
        <argsstring>(TObject *meta_swallow)</argsstring>
        <name>Add</name>
        <param>
          <type>TObject *</type>
          <declname>meta_swallow</declname>
        </param>
        <briefdescription>
<para>add another object to the collection </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>meta_swallow != 0 </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>basic, argument is always swallowed </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="407"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1ac36338fb911cc03f33d46a4dcebf07bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SH::MetaObject::Clear</definition>
        <argsstring>(Option_t *option=&quot;&quot;)</argsstring>
        <name>Clear</name>
        <param>
          <type>Option_t *</type>
          <declname>option</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>clear out the content of the collection </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="415"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a19904275732777e4b03b9edf3427cec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SH::MetaObject::Delete</definition>
        <argsstring>(Option_t *option=&quot;&quot;)</argsstring>
        <name>Delete</name>
        <param>
          <type>Option_t *</type>
          <declname>option</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>clear out the content of the collection </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="423"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a4f402defcf37a3dbf9fc3be4222a5b30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Int_t</type>
        <definition>virtual Int_t SH::MetaObject::GetEntries</definition>
        <argsstring>() const </argsstring>
        <name>GetEntries</name>
        <briefdescription>
<para>return the number of entries of this collection </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="431"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a43dff86ec4a607dc240326900696654f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>TObject **</type>
        <definition>virtual TObject** SH::MetaObject::GetObjectRef</definition>
        <argsstring>(const TObject *meta) const </argsstring>
        <name>GetObjectRef</name>
        <param>
          <type>const TObject *</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>return pointer to pointer of object meta </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>meta != 0 </para></simplesect>
<simplesect kind="post"><para>result != 0 </para><simplesectsep/><para>*result == meta </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>meta not in collection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="444"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1aff0f9315e28ad5c83e81323fadede716" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>TIterator *</type>
        <definition>virtual TIterator* SH::MetaObject::MakeIterator</definition>
        <argsstring>(Bool_t dir=kIterForward) const </argsstring>
        <name>MakeIterator</name>
        <param>
          <type>Bool_t</type>
          <declname>dir</declname>
          <defval>kIterForward</defval>
        </param>
        <briefdescription>
<para>make a new iterator for this collection </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="post"><para>result != 0 </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="455"/>
      </memberdef>
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1ae5b841ec2dda6f33c94469e7b141d03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>TObject *</type>
        <definition>virtual TObject* SH::MetaObject::Remove</definition>
        <argsstring>(TObject *meta)</argsstring>
        <name>Remove</name>
        <param>
          <type>TObject *</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
<para>remove the given object from the list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>meta != 0 </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>meta not in list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="466"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="db/d3a/classSH_1_1MetaObject_1a7a54dd31f149b864ad2b67c75149e0fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::MetaObject::ClassDef</definition>
        <argsstring>(MetaObject, 1)</argsstring>
        <name>ClassDef</name>
        <param>
          <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="476"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> class that manages meta-data to be associated with an object. </para>    </briefdescription>
    <detaileddescription>
<para>Originally this was just to be used for meta-data of a sample, but it is now also used for specifying the options for an EventLoop job. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/MetaObject.h" bodystart="52" bodyend="477"/>
    <listofallmembers>
      <member refid="db/d3a/classSH_1_1MetaObject_1abb31772b010d4df51164af61d2296cbd" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>Add</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a128be2f78554a3fccbb0e70459dedf51" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>addReplace</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bba3c8a4569260db9a9f8bbc96374ce49ca" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>CAST_ERROR_DEFAULT</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bbace19baf87745099c84fed8b2153b4b7a" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>CAST_ERROR_THROW</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bba2392a63dd21d6cc72eb3c3e85c06a82b" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>CAST_NOCAST_DEFAULT</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bbaf486deb6eb90198af10145e50cabbafa" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>CAST_NOCAST_THROW</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a6e8f9ea5a2acadaa05c4fd65604ff055" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>castBool</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a8215d56cd61535948e0b280eeac0f575" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>castDouble</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1ac4f3159ddb480c449e4d40406d735214" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>castInteger</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1bdb2cbff0679856ec6ac8cc95fde2bb" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>CastMode</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1ad4c368fbcb5b4cd769115de352492f55" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>castString</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1afe97eef7cc6c4f41b2c5a2ff0a75a0fa" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>castT</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a7a54dd31f149b864ad2b67c75149e0fc" prot="private" virt="non-virtual"><scope>SH::MetaObject</scope><name>ClassDef</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1ac36338fb911cc03f33d46a4dcebf07bc" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>Clear</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a19904275732777e4b03b9edf3427cec5" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>Delete</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1f293d029f71636e12b000ce546908aa" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>dumpToString</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a21f2956caca7a0362ed9a9a1c0a50acd" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>fetch</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a0bdfe4c526a7ac14652892d84b47f5b0" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>fetchDefaults</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a61f7981357c3559d2bc0a6b3974f9c1f" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>fetchFromString</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a1890e870d0f1b5f395f2061653afd588" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>get</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1aa786c75bb2cfbf24fac36bf7e2bfd2c2" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>get</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1aa29b14d40faae569899b3fa4fd49a8ce" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>getDouble</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a4f402defcf37a3dbf9fc3be4222a5b30" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>GetEntries</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a43dff86ec4a607dc240326900696654f" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>GetObjectRef</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a97c5ec269f429200d946c6d8a372d40f" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>getString</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1abba4e6b13ade71dceb54c6bdef640ff2" prot="private" virt="non-virtual"><scope>SH::MetaObject</scope><name>m_dataList</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1aff0f9315e28ad5c83e81323fadede716" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>MakeIterator</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a966912f52e1b205a9096cb7dc9810b3b" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>MetaObject</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a639ef5a0838f2b1cc6a4eacca98c63be" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>MetaObject</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1abb9be1cc030b4fe2cf6ba0a29bd04c77" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>operator=</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a5693d2b9d9da06821ccd0b24f23c2cd7" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>remove</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1ae5b841ec2dda6f33c94469e7b141d03c" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>Remove</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1ad80a9e464f1acff9c83ec538b5242365" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>setBool</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a56f734fd246e6143d8861312221063e6" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>setDouble</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a3724cd79e078d0860345a6cd843dc488" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>setInteger</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a6077aad08f456b8c7bca7c8859124732" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>setString</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a09fb969691651419d9960459b2330a73" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>setT</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a810234b81e92ac98c7df779249e7a14a" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>swap</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a39015ff6490722aa49830d465d763782" prot="public" virt="non-virtual"><scope>SH::MetaObject</scope><name>testInvariant</name></member>
      <member refid="db/d3a/classSH_1_1MetaObject_1a13d3b67db627da13433835b29e642c43" prot="public" virt="virtual"><scope>SH::MetaObject</scope><name>~MetaObject</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
