<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/dd6/TElectronLikelihoodTool_8cxx" kind="file">
    <compoundname>TElectronLikelihoodTool.cxx</compoundname>
    <includes refid="dd/d2c/TElectronLikelihoodTool_8h" local="yes">ElectronPhotonSelectorTools/TElectronLikelihoodTool.h</includes>
    <includes local="no">cmath</includes>
    <includes local="yes">TSystem.h</includes>
    <includes local="yes">TROOT.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">fstream</includes>
    <includes refid="d0/dcf/TAccept_8h" local="yes">PATCore/TAccept.h</includes>
    <includes refid="de/d64/TResult_8h" local="yes">PATCore/TResult.h</includes>
    <includes local="yes">TFile.h</includes>
    <includes local="yes">TH1.h</includes>
    <includes local="yes">TString.h</includes>
    <incdepgraph>
      <node id="125472">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="125466" relation="include">
        </childnode>
        <childnode refid="125467" relation="include">
        </childnode>
        <childnode refid="125473" relation="include">
        </childnode>
        <childnode refid="125474" relation="include">
        </childnode>
      </node>
      <node id="125474">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="125477">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="125478">
        <label>cmath</label>
      </node>
      <node id="125462">
        <label>PATCore/TSelectorToolBase.h</label>
        <link refid="d4/d82/TSelectorToolBase_8h_source"/>
        <childnode refid="125458" relation="include">
        </childnode>
        <childnode refid="125463" relation="include">
        </childnode>
      </node>
      <node id="125470">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="125466" relation="include">
        </childnode>
        <childnode refid="125467" relation="include">
        </childnode>
        <childnode refid="125471" relation="include">
        </childnode>
      </node>
      <node id="125467">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="125466">
        <label>string</label>
      </node>
      <node id="125460">
        <label>map</label>
      </node>
      <node id="125455">
        <label>fstream</label>
      </node>
      <node id="125471">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="125453">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonSelectorTools/Root/TElectronLikelihoodTool.cxx</label>
        <link refid="TElectronLikelihoodTool.cxx"/>
        <childnode refid="125454" relation="include">
        </childnode>
        <childnode refid="125478" relation="include">
        </childnode>
        <childnode refid="125479" relation="include">
        </childnode>
        <childnode refid="125480" relation="include">
        </childnode>
        <childnode refid="125481" relation="include">
        </childnode>
        <childnode refid="125482" relation="include">
        </childnode>
        <childnode refid="125455" relation="include">
        </childnode>
        <childnode refid="125463" relation="include">
        </childnode>
        <childnode refid="125459" relation="include">
        </childnode>
        <childnode refid="125483" relation="include">
        </childnode>
        <childnode refid="125484" relation="include">
        </childnode>
        <childnode refid="125458" relation="include">
        </childnode>
      </node>
      <node id="125484">
        <label>TH1.h</label>
      </node>
      <node id="125457">
        <label>PATCore/TCalculatorToolBase.h</label>
        <link refid="de/d54/TCalculatorToolBase_8h_source"/>
        <childnode refid="125458" relation="include">
        </childnode>
        <childnode refid="125459" relation="include">
        </childnode>
      </node>
      <node id="125454">
        <label>ElectronPhotonSelectorTools/TElectronLikelihoodTool.h</label>
        <link refid="dd/d2c/TElectronLikelihoodTool_8h_source"/>
        <childnode refid="125455" relation="include">
        </childnode>
        <childnode refid="125456" relation="include">
        </childnode>
        <childnode refid="125457" relation="include">
        </childnode>
        <childnode refid="125462" relation="include">
        </childnode>
        <childnode refid="125465" relation="include">
        </childnode>
        <childnode refid="125466" relation="include">
        </childnode>
        <childnode refid="125461" relation="include">
        </childnode>
      </node>
      <node id="125480">
        <label>TROOT.h</label>
      </node>
      <node id="125464">
        <label>bitset</label>
      </node>
      <node id="125476">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="125467" relation="include">
        </childnode>
        <childnode refid="125470" relation="include">
        </childnode>
        <childnode refid="125477" relation="include">
        </childnode>
      </node>
      <node id="125479">
        <label>TSystem.h</label>
      </node>
      <node id="125461">
        <label>vector</label>
      </node>
      <node id="125483">
        <label>TFile.h</label>
      </node>
      <node id="125469">
        <label>sstream</label>
      </node>
      <node id="125459">
        <label>TResult.h</label>
        <link refid="de/d64/TResult_8h_source"/>
        <childnode refid="125458" relation="include">
        </childnode>
        <childnode refid="125460" relation="include">
        </childnode>
        <childnode refid="125461" relation="include">
        </childnode>
      </node>
      <node id="125456">
        <label>iostream</label>
      </node>
      <node id="125475">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="125468">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="125466" relation="include">
        </childnode>
        <childnode refid="125469" relation="include">
        </childnode>
        <childnode refid="125467" relation="include">
        </childnode>
        <childnode refid="125470" relation="include">
        </childnode>
        <childnode refid="125472" relation="include">
        </childnode>
        <childnode refid="125475" relation="include">
        </childnode>
      </node>
      <node id="125463">
        <label>TAccept.h</label>
        <link refid="d0/dcf/TAccept_8h_source"/>
        <childnode refid="125458" relation="include">
        </childnode>
        <childnode refid="125460" relation="include">
        </childnode>
        <childnode refid="125464" relation="include">
        </childnode>
      </node>
      <node id="125473">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="125458">
        <label>TString.h</label>
      </node>
      <node id="125465">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="125466" relation="include">
        </childnode>
        <childnode refid="125467" relation="include">
        </childnode>
        <childnode refid="125468" relation="include">
        </childnode>
        <childnode refid="125476" relation="include">
        </childnode>
      </node>
      <node id="125482">
        <label>algorithm</label>
      </node>
      <node id="125481">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ElectronPhotonSelectorTools/TElectronLikelihoodTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TSystem.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>char_traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PATCore/TAccept.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TAccept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PATCore/TResult.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TResult</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TFile.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TH1.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TH1F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TString.h&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>TString</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1acf2e3f744164e51d72361079934bf43c" kindref="member" tooltip="Standard constructor.">Root::TElectronLikelihoodTool::TElectronLikelihoodTool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="d9/d42/classTCalculatorToolBase" kindref="compound" tooltip="Bsse class for tools to retrieve efficiencies, scale factors,... for objects in pure...">TCalculatorToolBase</ref>(name),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="d6/d25/classTSelectorToolBase" kindref="compound" tooltip="Base class for tools to select objects in pure ROOT.">TSelectorToolBase</ref>(name),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>asg::AsgMessaging(std::string(name)),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>doCutConversion(false),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>doRemoveF3AtHighEt(false),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>doRemoveTRTPIDAtHighEt(false),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>doSmoothBinInterpolation(false),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>useHighETLHBinning(false),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>useOneExtraHighETLHBin(false),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>HighETBinThreshold(125),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>doPileupTransform(false),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>doCentralityTransform(false),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>DiscMaxForPileupTransform(2.0),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>PileupMaxForPileupTransform(50),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>VariableNames(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>PdfFileName(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>m_variableBitMask(0x0),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>m_ipBinning(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>m_pdfFile(0),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>m_resultPrefix(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>m_resultName(</highlight><highlight class="stringliteral">&quot;likelihood&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>m_cutPosition_kinematic(-9),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_cutPosition_NSilicon(-9),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>m_cutPosition_NPixel(-9),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_cutPosition_NBlayer(-9),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>m_cutPosition_conversion(-9),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>m_cutPosition_LH(-9),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>m_cutPositionTrackA0(-9),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>m_cutPositionTrackMatchEta(-9),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>m_cutPositionTrackMatchPhiRes(-9),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>m_cutPositionWstotAtHighET(-9),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>m_cutPositionEoverPAtHighET(-9),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>m_resultPosition_LH(-9)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varIndex<sp/>=<sp/>0;<sp/>varIndex<sp/>&lt;<sp/>fnVariables;<sp/>varIndex++){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_or_b<sp/>=<sp/>0;<sp/>s_or_b<sp/>&lt;<sp/>2;<sp/>s_or_b++){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip<sp/>=<sp/>0;<sp/>ip<sp/>&lt;<sp/>IP_BINS;<sp/>ip++){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>et<sp/>=<sp/>0;<sp/>et<sp/>&lt;<sp/>fnEtBinsHist;<sp/>et++){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>0;<sp/>eta<sp/>&lt;<sp/>fnEtaBins;<sp/>eta++){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPDFbins[s_or_b][ip][et][eta][varIndex]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1aa641c9e2c9d6ebf82bf13e32cdb3dae2" kindref="member" tooltip="Standard destructor.">Root::TElectronLikelihoodTool::~TElectronLikelihoodTool</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varIndex<sp/>=<sp/>0;<sp/>varIndex<sp/>&lt;<sp/>fnVariables;<sp/>varIndex++){</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_or_b<sp/>=<sp/>0;<sp/>s_or_b<sp/>&lt;<sp/>2;<sp/>s_or_b++){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip<sp/>=<sp/>0;<sp/>ip<sp/>&lt;<sp/>IP_BINS;<sp/>ip++){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>et<sp/>=<sp/>0;<sp/>et<sp/>&lt;<sp/>fnEtBinsHist;<sp/>et++){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>0;<sp/>eta<sp/>&lt;<sp/>fnEtaBins;<sp/>eta++){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fPDFbins[s_or_b][ip][et][eta][varIndex]){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>fPDFbins[s_or_b][ip][et][eta][varIndex];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPDFbins[s_or_b][ip][et][eta][varIndex]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1a62e8e8c1803d62c8c8c250f5fe2aea11" kindref="member" tooltip="Initialize this class.">Root::TElectronLikelihoodTool::initialize</ref>()</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(<sp/></highlight><highlight class="stringliteral">&quot;TElectronLikelihoodTool<sp/>initialize.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>an<sp/>int<sp/>as<sp/>a<sp/>StatusCode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sc(1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>all<sp/>needed<sp/>variables<sp/>are<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>PdfFileName.empty()<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;You<sp/>need<sp/>to<sp/>specify<sp/>the<sp/>input<sp/>PDF<sp/>file<sp/>name<sp/>before<sp/>you<sp/>call<sp/>initialize()<sp/>with<sp/>setPDFFileName(&apos;your/file/name.root&apos;)<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sc<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>NOT<sp/>initialize!<sp/>Please<sp/>fix<sp/>the<sp/>errors<sp/>mentioned<sp/>above...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>the<sp/>cuts<sp/>and<sp/>check<sp/>that<sp/>the<sp/>registration<sp/>worked:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>THE<sp/>ORDER<sp/>IS<sp/>IMPORTANT!!!<sp/>Cut0<sp/>corresponds<sp/>to<sp/>bit<sp/>0,<sp/>Cut1<sp/>to<sp/>bit<sp/>1,...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(<sp/>m_cutPosition_nSCTMin<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;<sp/>//<sp/>Exceeded<sp/>the<sp/>number<sp/>of<sp/>allowed<sp/>cuts<sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cut<sp/>position<sp/>for<sp/>the<sp/>kineatic<sp/>pre-selection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>m_cutPosition_kinematic<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;kinematic&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>kinematic&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_kinematic<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NSilicon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>m_cutPosition_NSilicon<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;NSilicon&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>NSilicon&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_NSilicon<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NPixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>m_cutPosition_NPixel<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;NPixel&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>NPixel&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_NPixel<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NBlayer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>m_cutPosition_NBlayer<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;NBlayer&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>NBlayer&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_NBlayer<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>m_cutPosition_conversion<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;conversion&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>conversion&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_conversion<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cut<sp/>position<sp/>for<sp/>the<sp/>likelihood<sp/>selection<sp/>-<sp/>DO<sp/>NOT<sp/>CHANGE<sp/>ORDER!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>m_cutPosition_LH<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;passLH&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pass<sp/>Likelihood&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPosition_LH<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>D0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>m_cutPositionTrackA0<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;TrackA0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A0<sp/>(aka<sp/>d0)<sp/>wrt<sp/>beam<sp/>spot<sp/>&lt;<sp/>Cut&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPositionTrackA0<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deltaeta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>m_cutPositionTrackMatchEta<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(</highlight><highlight class="stringliteral">&quot;TrackMatchEta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>match<sp/>deta<sp/>in<sp/>1st<sp/>sampling<sp/>&lt;<sp/>Cut&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPositionTrackMatchEta<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deltaphi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>m_cutPositionTrackMatchPhiRes<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;TrackMatchPhiRes&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Track<sp/>match<sp/>dphi<sp/>in<sp/>2nd<sp/>sampling,<sp/>rescaled<sp/>&lt;<sp/>Cut&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPositionTrackMatchPhiRes<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wstot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>m_cutPositionWstotAtHighET<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;WstotAtHighET&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Above<sp/>HighETBinThreshold,<sp/>Wstot<sp/>&lt;<sp/>Cut&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPositionWstotAtHighET<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EoverP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>m_cutPositionEoverPAtHighET<sp/>=<sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.addCut(<sp/></highlight><highlight class="stringliteral">&quot;EoverPAtHighET&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Above<sp/>HighETBinThreshold,<sp/>EoverP<sp/>&lt;<sp/>Cut&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_cutPositionEoverPAtHighET<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>the<sp/>cuts<sp/>and<sp/>check<sp/>that<sp/>the<sp/>registration<sp/>worked:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>THE<sp/>ORDER<sp/>IS<sp/>IMPORTANT!!!<sp/>Cut0<sp/>corresponds<sp/>to<sp/>bit<sp/>0,<sp/>Cut1<sp/>to<sp/>bit<sp/>1,...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>m_resultPosition_LH<sp/>=<sp/>m_result.addResult(<sp/>(m_resultPrefix+m_resultName).c_str(),<sp/></highlight><highlight class="stringliteral">&quot;electron<sp/>likelihood&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_resultPosition_LH<sp/>&lt;<sp/>0<sp/>)<sp/>sc<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Exceeded<sp/>the<sp/>number<sp/>of<sp/>allowed<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>result<sp/>to<sp/>a<sp/>defaul<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>m_result.setResult(<sp/>m_resultPosition_LH,<sp/>-9999.0<sp/><sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>got<sp/>everything<sp/>OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sc<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;!<sp/>Something<sp/>went<sp/>wrong<sp/>with<sp/>the<sp/>setup<sp/>of<sp/>the<sp/>return<sp/>objects...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>correct<sp/>bit<sp/>mask<sp/>for<sp/>the<sp/>current<sp/>likelihood<sp/>operating<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>m_variableBitMask<sp/>=<sp/>GetLikelihoodBitmask(VariableNames);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//----------File/Histo<sp/>operation------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>ROOT<sp/>file<sp/>containing<sp/>the<sp/>PDFs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>TString<sp/>tmpString(PdfFileName);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>gSystem-&gt;ExpandPathName(tmpString);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>std::string<sp/>fname(tmpString.Data());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>m_pdfFile<sp/>=<sp/>TFile::Open(<sp/>fname.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>we<sp/>could<sp/>load<sp/>the<sp/>ROOT<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_pdfFile<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;<sp/>No<sp/>ROOT<sp/>file<sp/>found<sp/>here:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PdfFileName);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Load<sp/>the<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varIndex<sp/>=<sp/>0;<sp/>varIndex<sp/>&lt;<sp/>fnVariables;<sp/>varIndex++){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>vstr<sp/>=<sp/>fVariables[varIndex];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>the<sp/>loading<sp/>of<sp/>PDFs<sp/>for<sp/>variables<sp/>we<sp/>don&apos;t<sp/>care<sp/>about<sp/>for<sp/>this<sp/>operating<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>string<sp/>is<sp/>empty<sp/>(which<sp/>is<sp/>true<sp/>in<sp/>the<sp/>default<sp/>2012<sp/>case),<sp/>load<sp/>all<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(VariableNames.find(vstr)<sp/>==<sp/>std::string::npos<sp/>&amp;&amp;<sp/>!VariableNames.empty()){</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>LoadVarHistograms(vstr,varIndex);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TFile<sp/>close<sp/>does<sp/>not<sp/>free<sp/>the<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>m_pdfFile-&gt;Close();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//We<sp/>need<sp/>the<sp/>destructor<sp/>to<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>m_pdfFile;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//----------End<sp/>File/Histo<sp/>operation------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Initialization<sp/>complete<sp/>for<sp/>a<sp/>LH<sp/>tool<sp/>with<sp/>these<sp/>specs:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>PdfFileName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>PdfFileName</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>Result<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(m_resultPrefix+m_resultName).c_str()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>Variable<sp/>bitmask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_variableBitMask);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>VariableNames<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>VariableNames</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutBL<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutBL.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutPi<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutPi.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutSi<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutSi.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doCutConversion<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doCutConversion<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doRemoveF3AtHighEt<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doRemoveF3AtHighEt<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doRemoveTRTPIDAtHighEt<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doRemoveTRTPIDAtHighEt<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doSmoothBinInterpolation<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doSmoothBinInterpolation<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)useHighETLHBinning<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(useHighETLHBinning<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)useOneExtraHighETLHBin(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(useOneExtraHighETLHBin<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(double)HighETBinThreshold<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>HighETBinThreshold</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doPileupTransform<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doPileupTransform<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)doCentralityTransform<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(doCentralityTransform<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutLikelihood<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutLikelihood.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutLikelihoodPileupCorrection<sp/>(yes/no)<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutLikelihoodPileupCorrection.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutA0<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutA0.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutDeltaEta<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutDeltaEta.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutDeltaPhiRes<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutDeltaPhiRes.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutWstotAtHighET<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutWstotAtHighET.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>-<sp/>(bool)CutEoverPAtHighET<sp/>(yes/no)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(CutEoverPAtHighET.size()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1a0d6cd7cfd2b88565f12040cecb79f857" kindref="member" tooltip="Load the variable histograms from the pdf file.">Root::TElectronLikelihoodTool::LoadVarHistograms</ref>(std::string<sp/>vstr,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>varIndex){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_or_b<sp/>=<sp/>0;<sp/>s_or_b<sp/>&lt;<sp/>2;<sp/>s_or_b++){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip<sp/>=<sp/>0;<sp/>ip<sp/>&lt;<sp/>IP_BINS;<sp/>ip++){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>et<sp/>=<sp/>0;<sp/>et<sp/>&lt;<sp/>fnEtBinsHist;<sp/>et++){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>0;<sp/>eta<sp/>&lt;<sp/>fnEtaBins;<sp/>eta++){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sig_bkg<sp/>=<sp/>(s_or_b==0)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;sig&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;bkg&quot;</highlight><highlight class="normal"><sp/>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Because<sp/>eta<sp/>bins<sp/>in<sp/>the<sp/>root<sp/>file<sp/>don&apos;t<sp/>match<sp/>up<sp/>exactly<sp/>with<sp/>cut<sp/>menu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>definitions,<sp/>the<sp/>second<sp/>eta<sp/>bin<sp/>is<sp/>an<sp/>exact<sp/>copy<sp/>of<sp/>the<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>all<sp/>subsequent<sp/>eta<sp/>bins<sp/>are<sp/>pushed<sp/>back<sp/>by<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eta_tmp<sp/>=<sp/>(eta<sp/>&gt;<sp/>0)<sp/>?<sp/>eta-1<sp/>:<sp/>eta<sp/>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>7-10<sp/>GeV,<sp/>crack<sp/>bin<sp/>uses<sp/>the<sp/>10-15<sp/>Gev<sp/>pdfs.<sp/>WE<sp/>DO<sp/>NOT<sp/>DO<sp/>THIS<sp/>ANYMORE!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>et_tmp<sp/>=<sp/>(eta<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>et<sp/>==<sp/>1)<sp/>?<sp/>1<sp/>:<sp/>et;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>et_tmp<sp/>=<sp/>et;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>binname[200];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getBinName(<sp/>binname,<sp/>et_tmp,<sp/>eta_tmp,<sp/>ip,<sp/>m_ipBinning<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((std::string(binname).find(</highlight><highlight class="stringliteral">&quot;2.37&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos))<sp/>&amp;&amp;<sp/>(vstr.find(</highlight><highlight class="stringliteral">&quot;el_f3&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((std::string(binname).find(</highlight><highlight class="stringliteral">&quot;2.01&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>||<sp/>(std::string(binname).find(</highlight><highlight class="stringliteral">&quot;2.37&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(vstr.find(</highlight><highlight class="stringliteral">&quot;TRT&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pdfdir[500];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(pdfdir,</highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,vstr.c_str(),sig_bkg.c_str());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pdf[500];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(pdf,</highlight><highlight class="stringliteral">&quot;%s_%s_smoothed_hist_from_KDE_%s&quot;</highlight><highlight class="normal">,vstr.c_str(),sig_bkg.c_str(),binname);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pdf_newname[500];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(pdf_newname,</highlight><highlight class="stringliteral">&quot;%s_%s_%s_LHtool_copy_%s&quot;</highlight><highlight class="normal">,<ref refid="db/d66/classRoot_1_1TSelectorToolBase_1a09a70f02f48de7a83589682f97674649" kindref="member">Root::TSelectorToolBase::getName</ref>(),vstr.c_str(),sig_bkg.c_str(),binname);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_pdfFile-&gt;GetListOfKeys()-&gt;Contains(vstr.c_str())){</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>skipping<sp/>variable<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vstr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>because<sp/>the<sp/>folder<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((TDirectory*)m_pdfFile-&gt;Get(vstr.c_str()))-&gt;GetListOfKeys()-&gt;Contains(sig_bkg.c_str())){</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>skipping<sp/>variable<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vstr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>because<sp/>the<sp/>folder<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>backwards<sp/>compatibility:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>not<sp/>using<sp/>the<sp/>high<sp/>ET<sp/>LH<sp/>binning,<sp/>we<sp/>only<sp/>need<sp/>to<sp/>load<sp/>PDFs<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>to<sp/>a<sp/>certain<sp/>ET<sp/>value<sp/>(40<sp/>GeV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!useHighETLHBinning<sp/>&amp;&amp;<sp/>et<sp/>&gt;<sp/>fnEtBinsHistOrig-1){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>0th<sp/>et<sp/>bin<sp/>(4-7<sp/>GeV)<sp/>histogram<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>the<sp/>root<sp/>file,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>just<sp/>use<sp/>the<sp/>7-10<sp/>GeV<sp/>bin<sp/>histogram.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>preserve<sp/>backward<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!((TDirectory*)m_pdfFile-&gt;Get(pdfdir))-&gt;GetListOfKeys()-&gt;Contains(pdf))<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Info:<sp/>using<sp/>7<sp/>GeV<sp/>bin<sp/>in<sp/>place<sp/>of<sp/>4<sp/>GeV<sp/>bin.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getBinName(<sp/>binname,<sp/>et_tmp+1,<sp/>eta_tmp,<sp/>ip,<sp/>m_ipBinning<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(pdf,</highlight><highlight class="stringliteral">&quot;%s_%s_smoothed_hist_from_KDE_%s&quot;</highlight><highlight class="normal">,vstr.c_str(),sig_bkg.c_str(),binname);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(pdf_newname,</highlight><highlight class="stringliteral">&quot;%s_%s_%s_LHtool_copy4GeV_%s&quot;</highlight><highlight class="normal">,<ref refid="db/d66/classRoot_1_1TSelectorToolBase_1a09a70f02f48de7a83589682f97674649" kindref="member">Root::TSelectorToolBase::getName</ref>(),vstr.c_str(),sig_bkg.c_str(),binname);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((TDirectory*)m_pdfFile-&gt;Get(pdfdir))-&gt;GetListOfKeys()-&gt;Contains(pdf))<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1F*<sp/>hist<sp/>=<sp/>(TH1F*)(((TDirectory*)m_pdfFile-&gt;Get(pdfdir))-&gt;Get(pdf));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPDFbins[s_or_b][ip][et][eta][varIndex]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TElectronLikelihoodTool::SafeTH1(hist);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>hist;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Object<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pdf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;Skipping<sp/>all<sp/>other<sp/>histograms<sp/>with<sp/>this<sp/>variable.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/classRoot_1_1TAccept" kindref="compound">Root::TAccept</ref>&amp;<sp/><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1af165c222c14188626101046a4e0fa6e2" kindref="member" tooltip="The main accept method: the actual cuts are applied here.">Root::TElectronLikelihoodTool::accept</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>likelihood,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSiHitsPlusDeadSensors,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPixHitsPlusDeadSensors,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passBLayerRequirement,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>convBit,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaEta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaphires,<sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wstot,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EoverP,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="325"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="d2/d58/structLikeEnum_1_1LHAcceptVars__t" kindref="compound">LikeEnum::LHAcceptVars_t</ref><sp/>vars;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>vars.likelihood<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>likelihood;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>vars.eta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eta;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>vars.eT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eT;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>vars.nSiHitsPlusDeadSensors<sp/><sp/>=<sp/>nSiHitsPlusDeadSensors;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>vars.nPixHitsPlusDeadSensors<sp/>=<sp/>nPixHitsPlusDeadSensors;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>vars.passBLayerRequirement<sp/><sp/><sp/>=<sp/>passBLayerRequirement;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>vars.convBit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>convBit;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>vars.d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>d0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>vars.deltaEta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>deltaEta;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>vars.deltaphires<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>deltaphires;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>vars.wstot<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>wstot;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>vars.EoverP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>EoverP;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>vars.ip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ip;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d6/d1b/classRoot_1_1TPhotonIsEMSelector_1a907530be9e9bef1f932af60dbb7e7c7a" kindref="member">accept</ref>(vars);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>calculates<sp/>if<sp/>the<sp/>current<sp/>electron<sp/>passes<sp/>the<sp/>requested<sp/>likelihood<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d75/classRoot_1_1TAccept" kindref="compound">Root::TAccept</ref>&amp;<sp/><ref refid="d4/d50/classRoot_1_1TElectronLikelihoodTool_1af165c222c14188626101046a4e0fa6e2" kindref="member" tooltip="The main accept method: the actual cuts are applied here.">Root::TElectronLikelihoodTool::accept</ref>(<sp/><ref refid="d2/d58/structLikeEnum_1_1LHAcceptVars__t" kindref="compound">LikeEnum::LHAcceptVars_t</ref>&amp;<sp/>vars_struct<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="347"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>cut<sp/>result<sp/>bits<sp/>to<sp/>zero<sp/>(=<sp/>fail<sp/>cut)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.clear();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>the<sp/>individual<sp/>cuts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passKine(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passNSilicon(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passNPixel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passNBlayer(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passConversion(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passLH(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passTrackA0(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passDeltaEta(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passDeltaPhiRes(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passWstotAtHighET(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>passEoverPAtHighET(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(vars_struct.eta)<sp/>&gt;<sp/>2.47)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;This<sp/>electron<sp/>is<sp/>fabs(eta)&gt;2.47<sp/>Returning<sp/>False.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>passKine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etbin<sp/>=<sp/>getLikelihoodEtDiscBin(vars_struct.eT);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(vars_struct.eta);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//unsigned<sp/>int<sp/>ipbin<sp/><sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sanity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin<sp/><sp/>&gt;=<sp/>fnDiscEtBins)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>evaluate<sp/>likelihood<sp/>for<sp/>Et<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vars_struct.eT&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Returning<sp/>false..&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>passKine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>if<sp/>the<sp/>kinematic<sp/>requirements<sp/>are<sp/>not<sp/>fulfilled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_kinematic,<sp/>passKine<sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!passKine<sp/>){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>;<sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doCutConversion<sp/>&amp;&amp;<sp/>vars_struct.convBit){</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Conversion<sp/>Bit<sp/>Failed.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passConversion<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>blayer<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutBL.size()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CutBL[etabin]<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>!vars_struct.passBLayerRequirement)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Blayer<sp/>cut<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passNBlayer<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pixel<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutPi.size()){</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars_struct.nPixHitsPlusDeadSensors<sp/>&lt;<sp/>CutPi[etabin]){</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Pixels<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passNPixel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>silicon<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutSi.size()){</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars_struct.nSiHitsPlusDeadSensors<sp/>&lt;<sp/>CutSi[etabin]){</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/></highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Silicon<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passNSilicon<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutDiscriminant;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>etbin*10+etabin;<sp/></highlight><highlight class="comment">//<sp/>Must<sp/>change<sp/>if<sp/>number<sp/>of<sp/>eta<sp/>bins<sp/>changes!.<sp/>Also<sp/>starts<sp/>from<sp/>7-10<sp/>GeV<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CutLikelihood.size()){</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>protect<sp/>against<sp/>a<sp/>binning<sp/>mismatch,<sp/>which<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ibin_combined<sp/>&gt;<sp/>CutLikelihood.size()){</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Somehow<sp/>the<sp/>desired<sp/>bin<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>range<sp/>specified<sp/>by<sp/>the<sp/>conf<sp/>file!<sp/>This<sp/>should<sp/>never<sp/>happen!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doSmoothBinInterpolation){</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>=<sp/>InterpolateCuts(CutLikelihood,CutLikelihood4GeV,vars_struct.eT,vars_struct.eta);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doPileupTransform<sp/>&amp;&amp;<sp/>CutLikelihoodPileupCorrection.size()<sp/>&amp;&amp;<sp/>CutLikelihoodPileupCorrection4GeV.size())</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>+=<sp/>vars_struct.ip*InterpolateCuts(CutLikelihoodPileupCorrection,CutLikelihoodPileupCorrection4GeV,vars_struct.eT,vars_struct.eta);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars_struct.eT<sp/>&gt;<sp/>7000.<sp/>||<sp/>!CutLikelihood4GeV.size()){</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>=<sp/>CutLikelihood[ibin_combined];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>doPileupTransform,<sp/>then<sp/>correct<sp/>the<sp/>discriminant<sp/>itself<sp/>instead<sp/>of<sp/>the<sp/>cut<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doPileupTransform<sp/>&amp;&amp;<sp/>CutLikelihoodPileupCorrection.size())<sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>+=<sp/>vars_struct.ip*CutLikelihoodPileupCorrection[ibin_combined];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>=<sp/>CutLikelihood4GeV[etabin];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!doPileupTransform<sp/>&amp;&amp;<sp/>CutLikelihoodPileupCorrection4GeV.size())<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutDiscriminant<sp/>+=<sp/>vars_struct.ip*CutLikelihoodPileupCorrection4GeV[etabin];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>if<sp/>the<sp/>calculated<sp/>likelihood<sp/>value<sp/>passes<sp/>the<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Discriminant:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>vars_struct.likelihood<sp/>&lt;<sp/>cutDiscriminant<sp/>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>Disciminant<sp/>Cut<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passLH<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d0<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutA0.size()){</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(vars_struct.d0)<sp/>&gt;<sp/>CutA0[ibin_combined]){</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>D0<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passTrackA0<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deltaEta<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutDeltaEta.size()){</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fabs(vars_struct.deltaEta)<sp/>&gt;<sp/>CutDeltaEta[ibin_combined]){</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>deltaEta<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passDeltaEta<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deltaPhiRes<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutDeltaPhiRes.size()){</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fabs(vars_struct.deltaphires)<sp/>&gt;<sp/>CutDeltaPhiRes[ibin_combined]){</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>deltaphires<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>passDeltaPhiRes<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>do<sp/>this<sp/>above<sp/>HighETBinThreshold<sp/>[in<sp/>GeV]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(vars_struct.eT<sp/>&gt;<sp/>HighETBinThreshold*1000){</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wstot<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutWstotAtHighET.size()){</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fabs(vars_struct.wstot)<sp/>&gt;<sp/>CutWstotAtHighET[etabin]){</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>wstot<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passWstotAtHighET<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EoverP<sp/>cut</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CutEoverPAtHighET.size()){</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fabs(vars_struct.EoverP)<sp/>&gt;<sp/>CutEoverPAtHighET[etabin]){</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>macro:<sp/>EoverP<sp/>Failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passEoverPAtHighET<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>individual<sp/>cut<sp/>bits<sp/>in<sp/>the<sp/>return<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_NSilicon,<sp/>passNSilicon<sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_NPixel,<sp/>passNPixel<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_NBlayer,<sp/>passNBlayer<sp/>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_conversion,<sp/>passConversion<sp/>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPosition_LH,<sp/>passLH<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPositionTrackA0,<sp/>passTrackA0<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPositionTrackMatchEta,<sp/>passDeltaEta<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPositionTrackMatchPhiRes,<sp/>passDeltaPhiRes<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPositionWstotAtHighET,<sp/>passWstotAtHighET<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>.setCutResult(<sp/>m_cutPositionEoverPAtHighET,<sp/>passEoverPAtHighET<sp/>);<sp/><sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d66/classRoot_1_1TSelectorToolBase_1ab401d691e3a8b672560259832bc83d74" kindref="member">m_accept</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d94/classRoot_1_1TResult" kindref="compound">Root::TResult</ref>&amp;<sp/>Root::TElectronLikelihoodTool::calculate(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rHad,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rHad1,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Reta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eratio,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaEta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d0sigma,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rphi,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaPoverP<sp/>,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaphires,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TRT_PID,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip<sp/>)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="513"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="d0/d17/structLikeEnum_1_1LHCalcVars__t" kindref="compound">LikeEnum::LHCalcVars_t</ref><sp/>vars;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>vars.eta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>vars.eT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>vars.f3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>f3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>vars.rHad<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rHad<sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>vars.rHad1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rHad1<sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>vars.Reta<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Reta<sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>vars.w2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>w2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>vars.f1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>f1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>vars.eratio<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>eratio<sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>vars.deltaEta<sp/><sp/><sp/><sp/>=<sp/>deltaEta<sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>vars.d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>d0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>vars.d0sigma<sp/><sp/><sp/><sp/><sp/>=<sp/>d0sigma<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>vars.rphi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rphi<sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>vars.deltaPoverP<sp/>=<sp/>deltaPoverP;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>vars.deltaphires<sp/>=<sp/>deltaphires;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>vars.TRT_PID<sp/><sp/><sp/><sp/><sp/>=<sp/>TRT_PID<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>vars.ip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ip<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>calculate(vars);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>public<sp/>method<sp/>to<sp/>actually<sp/>calculate<sp/>the<sp/>likelihood<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/d94/classRoot_1_1TResult" kindref="compound">Root::TResult</ref>&amp;<sp/>Root::TElectronLikelihoodTool::calculate(<ref refid="d0/d17/structLikeEnum_1_1LHCalcVars__t" kindref="compound">LikeEnum::LHCalcVars_t</ref>&amp;<sp/>vars_struct)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="540"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>results<sp/>to<sp/>defaul<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>m_result.<ref refid="d1/d94/classRoot_1_1TResult_1a43f51dba755377b723d13ebdd2be73af" kindref="member">setResult</ref>(<sp/>m_resultPosition_LH,<sp/>-999.0<sp/><sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(vars_struct.eta);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhad_corr;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(etabin<sp/>==<sp/>3<sp/>||<sp/>etabin<sp/>==<sp/>4)<sp/>rhad_corr<sp/>=<sp/>vars_struct.rHad;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>rhad_corr<sp/>=<sp/>vars_struct.rHad1;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d0significance<sp/>=<sp/>vars_struct.d0sigma<sp/>==<sp/>0<sp/>?<sp/>0.<sp/>:<sp/>fabs(vars_struct.d0)/vars_struct.d0sigma;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arr[]<sp/>=<sp/>{d0significance,vars_struct.eratio,vars_struct.deltaEta</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,vars_struct.f1,vars_struct.f3</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,vars_struct.Reta,rhad_corr,vars_struct.rphi</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,vars_struct.d0,vars_struct.w2</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,vars_struct.deltaPoverP,vars_struct.deltaphires</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,vars_struct.TRT_PID};</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>vec<sp/>(arr,<sp/>arr<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(arr)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>actual<sp/>likelihood<sp/>value<sp/>and<sp/>fill<sp/>the<sp/>return<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhVal<sp/>=<sp/>this-&gt;EvaluateLikelihood(vec,vars_struct.eT,vars_struct.eta,vars_struct.ip);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>m_result.setResult(<sp/>m_resultPosition_LH,<sp/>lhVal<sp/><sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_result;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::EvaluateLikelihood(std::vector&lt;float&gt;<sp/>varVector,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>et,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="569"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>vec;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0;<sp/>var<sp/>&lt;<sp/>fnVariables;<sp/>var++){</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>vec.push_back(varVector[var]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EvaluateLikelihood(vec,et,eta,ip);</highlight><highlight class="comment">//,mask);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::EvaluateLikelihood(std::vector&lt;double&gt;<sp/>varVector,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>et,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="580"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etbin<sp/>=<sp/>getLikelihoodEtHistBin(et);<sp/></highlight><highlight class="comment">//<sp/>hist<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(eta);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipbin<sp/><sp/>=<sp/>getIpBin(ip);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;et:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>et<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eta:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eta<sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>etbin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etbin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>etabin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etabin);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin<sp/>&gt;=<sp/>fnEtBinsHist)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;skipping<sp/>etbin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etbin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>et<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>et);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-999.;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etabin<sp/>&gt;=<sp/>fnEtaBins)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;skipping<sp/>etabin<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>etabin<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>eta<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>eta);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-999.;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(varVector.size()<sp/>!=<sp/>fnVariables)<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Error!<sp/>Variable<sp/>vector<sp/>size<sp/>mismatch!<sp/>Check<sp/>your<sp/>vector!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SigmaS<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SigmaB<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>some<sp/>string<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>TRT_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TRT&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>el_f3_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;el_f3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>el_TRT_PID_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;el_TRT_PID&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0;<sp/>var<sp/>&lt;<sp/>fnVariables;<sp/>var++){</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>varstr<sp/>=<sp/>fVariables[var];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>variables<sp/>that<sp/>are<sp/>masked<sp/>off<sp/>(not<sp/>used)<sp/>in<sp/>the<sp/>likelihood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(m_variableBitMask<sp/>&amp;<sp/>(0x1<sp/>&lt;&lt;<sp/>var))){</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>TRT<sp/>for<sp/>outer<sp/>eta<sp/>bins<sp/>(2.01,2.37)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((etabin<sp/>==<sp/>8)<sp/>||<sp/>(etabin<sp/>==<sp/>9))<sp/>&amp;&amp;<sp/>(varstr.find(TRT_string)<sp/>!=<sp/>std::string::npos)){</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>f3<sp/>for<sp/>outer<sp/>eta<sp/>bin<sp/>(2.37)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((etabin<sp/>==<sp/>9)<sp/>&amp;&amp;<sp/>(varstr.find(el_f3_string)<sp/>!=<sp/>std::string::npos)){</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>f3<sp/>for<sp/>high<sp/>et<sp/>(&gt;80<sp/>GeV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doRemoveF3AtHighEt<sp/>&amp;&amp;<sp/>(et<sp/>&gt;<sp/>80*GeV)<sp/>&amp;&amp;<sp/>(varstr.find(el_f3_string)<sp/>!=<sp/>std::string::npos)){</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>use<sp/>TRTPID<sp/>for<sp/>high<sp/>et<sp/>(&gt;80<sp/>GeV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doRemoveTRTPIDAtHighEt<sp/>&amp;&amp;<sp/>(et<sp/>&gt;<sp/>80*GeV)<sp/>&amp;&amp;<sp/>(varstr.find(el_TRT_PID_string)<sp/>!=<sp/>std::string::npos)){</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_or_b=0;<sp/>s_or_b&lt;2;s_or_b++)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>fPDFbins[s_or_b][ipbin][etbin][etabin][var]-&gt;FindBin(varVector[var]);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doSmoothBinInterpolation)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>InterpolatePdfs(s_or_b,ipbin,et,eta,bin,var);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin][etabin][var]-&gt;Integral());</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(integral<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Error!<sp/>PDF<sp/>integral<sp/>==<sp/>0!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.35;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin][etabin][var]-&gt;GetBinContent(bin))<sp/>/<sp/>integral;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/>(s_or_b<sp/>==<sp/>0)<sp/>SigmaS<sp/>*=<sp/>prob;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s_or_b<sp/>==<sp/>1)<sp/>SigmaB<sp/>*=<sp/>prob;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TransformLikelihoodOutput(<sp/>SigmaS,<sp/>SigmaB,<sp/>ip,<sp/>et,<sp/>eta<sp/>);</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::TransformLikelihoodOutput(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ps,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>et,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>transformed<sp/>or<sp/>non-transformed<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(Taken<sp/>mostly<sp/>from<sp/>TMVA<sp/>likelihood<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fEpsilon<sp/>=<sp/>1e-99;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>both<sp/>signal<sp/>and<sp/>bkg<sp/>are<sp/>0,<sp/>we<sp/>want<sp/>it<sp/>to<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ps<sp/>&lt;<sp/>fEpsilon)<sp/>ps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pb<sp/>&lt;<sp/>fEpsilon)<sp/>pb<sp/>=<sp/>fEpsilon;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc<sp/>=<sp/>ps/double(ps<sp/>+<sp/>pb);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disc<sp/>&gt;=<sp/>1.0)<sp/>disc<sp/>=<sp/>1.<sp/>-<sp/>1.e-15;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(disc<sp/>&lt;=<sp/>0.0)<sp/>disc<sp/>=<sp/>fEpsilon;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tau<sp/>=<sp/>15.0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>disc<sp/>=<sp/>-<sp/>log(1.0/disc<sp/>-<sp/>1.0)*(1./double(tau));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Linearly<sp/>transform<sp/>the<sp/>discriminant<sp/>as<sp/>a<sp/>function<sp/>of<sp/>pileup,<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>old<sp/>scheme<sp/>of<sp/>changing<sp/>the<sp/>cut<sp/>value<sp/>based<sp/>on<sp/>pileup.<sp/>This<sp/>is<sp/>simpler<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>tuning,<sp/>as<sp/>well<sp/>as<sp/>ensuring<sp/>subsets<sp/>/<sp/>making<sp/>discriminants<sp/>more<sp/>transparent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>HI<sp/>case,<sp/>a<sp/>quadratic<sp/>centrality<sp/>transform<sp/>is<sp/>applied<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doPileupTransform){</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>variables<sp/>used<sp/>by<sp/>the<sp/>transform:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>hard_cut_ref<sp/>=<sp/>extremely<sp/>tight<sp/>discriminant<sp/>cut<sp/>as<sp/>reference<sp/>to<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pileup<sp/>correction<sp/>for<sp/>looser<sp/>menus<sp/>is<sp/>less<sp/>than<sp/>for<sp/>tighter<sp/>menus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>loose_ref<sp/>=<sp/>a<sp/>loose<sp/>menu<sp/>with<sp/>no<sp/>pileup<sp/>correction.<sp/>Any<sp/>tighter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>menu<sp/>with<sp/>same<sp/>inputs<sp/>will<sp/>necessarily<sp/>have<sp/>pileup<sp/>dependence<sp/>built<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>disc_max<sp/>=<sp/>max<sp/>disc<sp/>value<sp/>for<sp/>which<sp/>pileup<sp/>correction<sp/>is<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>pileup_max<sp/>=<sp/>max<sp/>nvtx<sp/>or<sp/>mu<sp/>for<sp/>calculating<sp/>the<sp/>transform.<sp/>Any<sp/>larger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pileup<sp/>values<sp/>will<sp/>use<sp/>this<sp/>maximum<sp/>value<sp/>in<sp/>the<sp/>transform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>DiscHardCutForPileupTransform.size()<sp/>==<sp/>0<sp/>||<sp/>DiscHardCutSlopeForPileupTransform.size()<sp/>==<sp/>0<sp/>||<sp/>DiscLooseForPileupTransform.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>needed<sp/>for<sp/>pileup-dependent<sp/>transform<sp/>not<sp/>correctly<sp/>filled!<sp/>Skipping<sp/>the<sp/>transform.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disc;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doCentralityTransform<sp/>&amp;&amp;<sp/>DiscHardCutQuadForPileupTransform.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>needed<sp/>for<sp/>centrality-dependent<sp/>transform<sp/>not<sp/>correctly<sp/>filled!<sp/>Skipping<sp/>the<sp/>transform.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disc;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(eta);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_hard_cut_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_hard_cut_ref_slope<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_hard_cut_ref_quad<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>used<sp/>for<sp/>heavy<sp/>ion<sp/>implementation<sp/>of<sp/>the<sp/>LH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_loose_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_max<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DiscMaxForPileupTransform;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pileup_max<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PileupMaxForPileupTransform;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doSmoothBinInterpolation){</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>InterpolateCuts(DiscHardCutForPileupTransform,DiscHardCutForPileupTransform4GeV,et,eta);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref_slope<sp/>=<sp/>InterpolateCuts(DiscHardCutSlopeForPileupTransform,DiscHardCutSlopeForPileupTransform4GeV,et,eta);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doCentralityTransform)<sp/>disc_hard_cut_ref_quad<sp/>=<sp/>InterpolateCuts(DiscHardCutQuadForPileupTransform,DiscHardCutQuadForPileupTransform4GeV,et,eta);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disc_loose_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>InterpolateCuts(DiscLooseForPileupTransform,DiscLooseForPileupTransform4GeV,et,eta);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>situation,<sp/>in<sp/>the<sp/>case<sp/>where<sp/>4-7<sp/>GeV<sp/>bin<sp/>is<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&gt;<sp/>7000.<sp/>||<sp/>!DiscHardCutForPileupTransform4GeV.size()){</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etfinebin<sp/>=<sp/>getLikelihoodEtDiscBin(et);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>etfinebin*10+etabin;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DiscHardCutForPileupTransform[ibin_combined];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref_slope<sp/>=<sp/>DiscHardCutSlopeForPileupTransform[ibin_combined];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doCentralityTransform)<sp/>disc_hard_cut_ref_quad<sp/><sp/>=<sp/>DiscHardCutQuadForPileupTransform[ibin_combined];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_loose_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DiscLooseForPileupTransform[ibin_combined];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>DiscHardCutForPileupTransform4GeV.size()<sp/>==<sp/>0<sp/>||<sp/>DiscHardCutSlopeForPileupTransform4GeV.size()<sp/>==<sp/>0<sp/>||<sp/>DiscLooseForPileupTransform4GeV.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>needed<sp/>for<sp/>pileup-dependent<sp/>transform<sp/>not<sp/>correctly<sp/>filled<sp/>for<sp/>4-7<sp/>GeV<sp/>bin!<sp/>Skipping<sp/>the<sp/>transform.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disc;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doCentralityTransform<sp/>&amp;&amp;<sp/>DiscHardCutQuadForPileupTransform4GeV.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;Vectors<sp/>needed<sp/>for<sp/>centrality-dependent<sp/>transform<sp/>not<sp/>correctly<sp/>filled<sp/>for<sp/>4-7<sp/>GeV<sp/>bin!<sp/>Skipping<sp/>the<sp/>transform.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disc;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DiscHardCutForPileupTransform4GeV[etabin];</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_hard_cut_ref_slope<sp/>=<sp/>DiscHardCutSlopeForPileupTransform4GeV[etabin];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doCentralityTransform)<sp/>disc_hard_cut_ref_quad<sp/><sp/>=<sp/>DiscHardCutQuadForPileupTransform4GeV[etabin];</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disc_loose_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>DiscLooseForPileupTransform4GeV[etabin];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip_for_corr<sp/>=<sp/>std::min(ip,pileup_max);<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>correction<sp/>for<sp/>values<sp/>&gt;<sp/>pileup_max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>disc_hard_cut_ref_prime<sp/>=<sp/>disc_hard_cut_ref<sp/>+<sp/>disc_hard_cut_ref_slope<sp/>*<sp/>ip_for_corr<sp/>+<sp/>disc_hard_cut_ref_quad<sp/>*<sp/>ip_for_corr<sp/>*<sp/>ip_for_corr;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(disc<sp/>&lt;=<sp/>disc_loose_ref){</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>threshold<sp/>for<sp/>applying<sp/>pileup<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//disc<sp/>=<sp/>disc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(disc<sp/>&lt;=<sp/>disc_hard_cut_ref_prime){</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Between<sp/>the<sp/>loose<sp/>and<sp/>hard<sp/>cut<sp/>reference<sp/>points<sp/>for<sp/>pileup<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>double(disc_hard_cut_ref_prime<sp/>-<sp/>disc_loose_ref);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(denom<sp/>&lt;<sp/>0.001)<sp/>denom<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disc<sp/>=<sp/>disc_loose_ref<sp/>+<sp/>(disc<sp/>-<sp/>disc_loose_ref)<sp/>*<sp/>(disc_hard_cut_ref<sp/>-<sp/>disc_loose_ref)<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(disc_hard_cut_ref_prime<sp/>&lt;<sp/>disc<sp/>&amp;&amp;<sp/>disc<sp/>&lt;=<sp/>disc_max){</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Between<sp/>the<sp/>hard<sp/>cut<sp/>and<sp/>max<sp/>reference<sp/>points<sp/>for<sp/>pileup<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>double(disc_max<sp/>-<sp/>disc_hard_cut_ref_prime);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(denom<sp/>&lt;<sp/>0.001)<sp/>denom<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disc<sp/>=<sp/>disc_hard_cut_ref<sp/>+<sp/>(disc<sp/>-<sp/>disc_hard_cut_ref_prime)<sp/>*<sp/>(disc_max<sp/>-<sp/>disc_hard_cut_ref)<sp/>/<sp/>denom;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Above<sp/>threshold<sp/>where<sp/>pileup<sp/>correction<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//disc<sp/>=<sp/>disc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(<sp/></highlight><highlight class="stringliteral">&quot;disc<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>disc<sp/>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>disc;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::fIpBounds[IP_BINS+1]<sp/>=<sp/>{0.,500.};</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>IP<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::getIpBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipBin<sp/>=<sp/>0;<sp/>ipBin<sp/>&lt;<sp/>IP_BINS;<sp/>++ipBin){</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ip<sp/>&lt;<sp/>fIpBounds[ipBin+1])</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ipBin;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>Eta<sp/>bin<sp/>[0-9]<sp/>given<sp/>the<sp/>eta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::getLikelihoodEtaBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtaBins<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>etaBins[nEtaBins]<sp/>=<sp/>{0.1,0.6,0.8,1.15,1.37,1.52,1.81,2.01,2.37,2.47};</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etaBin<sp/>=<sp/>0;<sp/>etaBin<sp/>&lt;<sp/>nEtaBins;<sp/>++etaBin){</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(eta)<sp/>&lt;<sp/>etaBins[etaBin])</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>etaBin;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>9;</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>histogram<sp/>Et<sp/>bin<sp/>given<sp/>the<sp/>et<sp/>(MeV)<sp/>--<sp/>corrresponds<sp/>to<sp/>fnEtBinsHist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::getLikelihoodEtHistBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useHighETLHBinning){</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>fnEtBinsHist;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{7*GeV,10*GeV,15*GeV,20*GeV,30*GeV,40*GeV,100*GeV,6000*GeV};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEtBins-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>fnEtBinsHistOrig;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{7*GeV,10*GeV,15*GeV,20*GeV,30*GeV,40*GeV,50*GeV};</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEtBins-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>Et<sp/>bin<sp/>[0-10]<sp/>given<sp/>the<sp/>et<sp/>(MeV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::getLikelihoodEtDiscBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eT)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useHighETLHBinning){</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>fnDiscEtBins;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{10*GeV,15*GeV,20*GeV,25*GeV,30*GeV,35*GeV,40*GeV,45*GeV</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,100*GeV,150*GeV,200*GeV,250*GeV,300*GeV,350*GeV,400*GeV</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,450*GeV,500*GeV,600*GeV,700*GeV,800*GeV,900*GeV,1000*GeV</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,1200*GeV,1400*GeV,1600*GeV,1800*GeV,2000*GeV,2200*GeV</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,2400*GeV,2600*GeV,2800*GeV,3000*GeV,6000*GeV};</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEtBins-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useOneExtraHighETLHBin){</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>fnDiscEtBinsOneExtra;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{10*GeV,15*GeV,20*GeV,25*GeV,30*GeV,35*GeV,40*GeV,45*GeV,HighETBinThreshold*GeV,6000*GeV};</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEtBins-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEtBins<sp/>=<sp/>fnDiscEtBinsOrig;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[nEtBins]<sp/>=<sp/>{10*GeV,15*GeV,20*GeV,25*GeV,30*GeV,35*GeV,40*GeV,45*GeV,50*GeV};</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eTBin<sp/>=<sp/>0;<sp/>eTBin<sp/>&lt;<sp/>nEtBins;<sp/>++eTBin){</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(eT<sp/>&lt;<sp/>eTBins[eTBin])</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eTBin;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEtBins-1;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>last<sp/>bin<sp/>if<sp/>&gt;<sp/>the<sp/>last<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>bin<sp/>name.<sp/>Given<sp/>the<sp/>HISTOGRAM<sp/>binning<sp/>(fnEtBinsHist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::getBinName(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etbin,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipbin,<sp/>std::string<sp/>iptype)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta_bounds[9]<sp/>=<sp/>{0.0,0.6,0.8,1.15,1.37,1.52,1.81,2.01,2.37};</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>et_bounds[fnEtBinsHist]<sp/>=<sp/>{4,7,10,15,20,30,40,100};</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iptype.empty())</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s%det%02deta%0.2f&quot;</highlight><highlight class="normal">,<sp/>iptype.c_str(),<sp/>int(fIpBounds[ipbin]),<sp/>et_bounds[etbin],<sp/>eta_bounds[etabin]);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;et%deta%0.2f&quot;</highlight><highlight class="normal">,<sp/>et_bounds[etbin],<sp/>eta_bounds[etabin]);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::GetLikelihoodBitmask(std::string<sp/>vars)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>0x0;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;Variables<sp/>to<sp/>be<sp/>used:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0;<sp/>var<sp/>&lt;<sp/>fnVariables;<sp/>var++){</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars.find(fVariables[var])<sp/>!=<sp/>std::string::npos){</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>fVariables[var]<sp/>);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>=<sp/>mask<sp/>|<sp/>0x1<sp/>&lt;&lt;<sp/>var;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;mask:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mask);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>will<sp/>only<sp/>perform<sp/>the<sp/>cut<sp/>interpolation<sp/>up<sp/>to<sp/>~45<sp/>GeV,<sp/>so<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>smoothing<sp/>is<sp/>done<sp/>above<sp/>this<sp/>for<sp/>the<sp/>high<sp/>ET<sp/>LH<sp/>binning<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::InterpolateCuts(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>cuts,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>cuts_4gev,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>et,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etbin<sp/>=<sp/>getLikelihoodEtDiscBin(et);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(eta);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ibin_combined<sp/>=<sp/>etbin*10+etabin;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cut<sp/>=<sp/>cuts.at(ibin_combined);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cuts_4gev.size()<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>7000.)<sp/>cut<sp/>=<sp/>cuts_4gev.at(etabin);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&gt;<sp/>47500.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cut;<sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>stops<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cuts_4gev.size()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>8500.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cut;<sp/></highlight><highlight class="comment">//<sp/>stops<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cuts_4gev.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>6000.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cut;<sp/></highlight><highlight class="comment">//<sp/>stops<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_width<sp/>=<sp/>5000.;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(7000.<sp/>&lt;<sp/>et<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>10000.)<sp/>bin_width<sp/>=<sp/>3000.;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&lt;<sp/>7000.)<sp/>bin_width<sp/>=<sp/>2000.;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;<sp/></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTBins[9]<sp/>=<sp/>{8.5*GeV,12.5*GeV,17.5*GeV,22.5*GeV,27.5*GeV,32.5*GeV,37.5*GeV,42.5*GeV,47.5*GeV};</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_center<sp/>=<sp/>eTBins[etbin];</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&gt;<sp/>bin_center)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cut_next<sp/>=<sp/>cut;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin+1&lt;=8)<sp/>cut_next<sp/>=<sp/>cuts.at((etbin+1)*10+etabin);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cut+(cut_next-cut)*(et-bin_center)/(bin_width);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>else<sp/>if<sp/>et<sp/>&lt;<sp/>bin_center<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cut_before<sp/>=<sp/>cut;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin-1&gt;=0)<sp/>cut_before<sp/>=<sp/>cuts.at((etbin-1)*10+etabin);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>cuts_4gev.size())<sp/>cut_before<sp/>=<sp/>cuts_4gev.at(etabin);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cut-(cut-cut_before)*(bin_center-et)/(bin_width);</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>will<sp/>only<sp/>perform<sp/>the<sp/>PDF<sp/>interpolation<sp/>up<sp/>to<sp/>~45<sp/>GeV,<sp/>so<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>smoothing<sp/>is<sp/>done<sp/>above<sp/>this<sp/>for<sp/>the<sp/>high<sp/>ET<sp/>LH<sp/>binning<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::InterpolatePdfs(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s_or_b,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipbin,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>et,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>histograms<sp/>exist<sp/>for<sp/>the<sp/>following<sp/>bins:<sp/>4,<sp/>7,<sp/>10,<sp/>15,<sp/>20,<sp/>30,<sp/>40.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Interpolation<sp/>between<sp/>histograms<sp/>must<sp/>follow<sp/>fairly<sp/>closely<sp/>the<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scheme<sp/>between<sp/>cuts<sp/>-<sp/>so<sp/>be<sp/>careful!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etbin<sp/>=<sp/>getLikelihoodEtHistBin(et);<sp/></highlight><highlight class="comment">//<sp/>hist<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>etabin<sp/>=<sp/>getLikelihoodEtaBin(eta);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin][etabin][var]-&gt;Integral());</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin][etabin][var]-&gt;GetBinContent(bin))<sp/>/<sp/>integral;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&gt;<sp/>42500.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob;<sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>stops<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&lt;<sp/>6000.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob;<sp/></highlight><highlight class="comment">//<sp/>interpolation<sp/>stops<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(22500.<sp/>&lt;<sp/>et<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>27500.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob;<sp/></highlight><highlight class="comment">//<sp/>region<sp/>of<sp/>non-interpolation<sp/>for<sp/>pdfs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(32500.<sp/>&lt;<sp/>et<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>37500.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob;<sp/></highlight><highlight class="comment">//<sp/>region<sp/>of<sp/>non-interpolation<sp/>for<sp/>pdfs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_width<sp/>=<sp/>5000.;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(7000.<sp/>&lt;<sp/>et<sp/>&amp;&amp;<sp/>et<sp/>&lt;<sp/>10000.)<sp/>bin_width<sp/>=<sp/>3000.;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&lt;<sp/>7000.)<sp/>bin_width<sp/>=<sp/>2000.;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GeV<sp/>=<sp/>1000;<sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eTHistBins[7]<sp/>=<sp/>{6.*GeV,8.5*GeV,12.5*GeV,17.5*GeV,22.5*GeV,32.5*GeV,42.5*GeV};</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_center<sp/>=<sp/>eTHistBins[etbin];</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>et<sp/>&gt;=<sp/>27500.)<sp/>bin_center<sp/>=<sp/>27500.;<sp/></highlight><highlight class="comment">//<sp/>special:<sp/>interpolate<sp/>starting<sp/>from<sp/>27.5<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin<sp/>==<sp/>5<sp/>&amp;&amp;<sp/>et<sp/>&gt;=<sp/>37500.)<sp/>bin_center<sp/>=<sp/>37500.;<sp/></highlight><highlight class="comment">//<sp/>special:<sp/>interpolate<sp/>starting<sp/>from<sp/>37.5<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(et<sp/>&gt;<sp/>bin_center){</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob_next<sp/>=<sp/>prob;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin+1&lt;=6)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral_next<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin+1][etabin][var]-&gt;Integral());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prob_next<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin+1][etabin][var]-&gt;GetBinContent(bin))<sp/>/<sp/>integral_next;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob+(prob_next-prob)*(et-bin_center)/(bin_width);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>else<sp/>if<sp/>et<sp/>&lt;<sp/>bin_center<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob_before<sp/>=<sp/>prob;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(etbin-1&gt;=0)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integral_before<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin-1][etabin][var]-&gt;Integral());</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>prob_before<sp/>=<sp/>double(fPDFbins[s_or_b][ipbin][etbin-1][etabin][var]-&gt;GetBinContent(bin))<sp/>/<sp/>integral_before;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob-(prob-prob_before)*(bin_center-et)/(bin_width);</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>variables<sp/>availalble<sp/>in<sp/>the<sp/>likelihood.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>Root::TElectronLikelihoodTool::fVariables[fnVariables]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;el_d0significance&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_eratio&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_deltaeta1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_f1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_f3&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_reta&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_rhad&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_rphi&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_trackd0pvunbiased&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_weta2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_DeltaPoverP&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_deltaphiRescaled&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>,</highlight><highlight class="stringliteral">&quot;el_TRT_PID&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SafeTH1,<sp/>to<sp/>allow<sp/>us<sp/>to<sp/>immediately<sp/>free<sp/>the<sp/>ROOT<sp/>TH1<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">Root::TElectronLikelihoodTool::SafeTH1::SafeTH1(TH1F*<sp/>roothist){</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins<sp/>=<sp/>roothist-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>m_binContent.resize(nbins,0);<sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>PDF<sp/>over/underflows<sp/>are<sp/>unused<sp/>and<sp/>thus<sp/>unrepresented<sp/>here!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>++i){</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>m_binContent[i]<sp/>=<sp/>roothist-&gt;GetBinContent(i+1);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>m_firstBinLowEdge<sp/>=<sp/>roothist-&gt;GetBinLowEdge(1);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>m_lastBinLowEdge<sp/><sp/>=<sp/>roothist-&gt;GetBinLowEdge(nbins);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>m_binWidth<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(m_lastBinLowEdge<sp/>-<sp/>m_firstBinLowEdge)<sp/>/<sp/>(GetNbinsX()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>m_integral<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>roothist-&gt;Integral(1,nbins);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">Root::TElectronLikelihoodTool::SafeTH1::~SafeTH1(){</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::SafeTH1::GetNbinsX(){</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>m_binContent.size();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::SafeTH1::FindBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&lt;<sp/>m_firstBinLowEdge){</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>first<sp/>bin<sp/>of<sp/>m_binContent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>&gt;<sp/>m_lastBinLowEdge){</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetNbinsX()<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>last<sp/>bin<sp/>of<sp/>m_binContent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>double<sp/>rather<sp/>than<sp/>float<sp/>due<sp/>to<sp/>incorrect<sp/>rounding<sp/>in<sp/>O(1/10000)<sp/>cases<sp/>if<sp/>float<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bin_double<sp/>=<sp/>(value<sp/>-<sp/>m_firstBinLowEdge)<sp/>/<sp/>m_binWidth;<sp/></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bin_double);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bin;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::SafeTH1::GetBinContent(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin){</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_binContent[bin];</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::SafeTH1::GetBinLowEdge(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin){</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_firstBinLowEdge<sp/>+<sp/>m_binWidth*bin;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Root::TElectronLikelihoodTool::SafeTH1::Integral(){</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_integral;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonSelectorTools/Root/TElectronLikelihoodTool.cxx"/>
  </compounddef>
</doxygen>
