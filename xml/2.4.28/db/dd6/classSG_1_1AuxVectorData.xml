<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/dd6/classSG_1_1AuxVectorData" kind="class" prot="public">
    <compoundname>SG::AuxVectorData</compoundname>
    <derivedcompoundref refid="dc/dfb/classSG_1_1AuxElementData" prot="public" virt="non-virtual">SG::AuxElementData</derivedcompoundref>
    <derivedcompoundref refid="dd/da5/classSG_1_1AuxVectorBase" prot="public" virt="non-virtual">SG::AuxVectorBase</derivedcompoundref>
    <derivedcompoundref refid="dd/da5/classSG_1_1AuxVectorBase" prot="public" virt="non-virtual">SG::AuxVectorBase</derivedcompoundref>
    <derivedcompoundref refid="d6/d8d/classSG_1_1AuxVectorData__test" prot="public" virt="non-virtual">SG::AuxVectorData_test</derivedcompoundref>
    <includes refid="d9/df2/AuxVectorData_8h" local="no">AuxVectorData.h</includes>
    <innerclass refid="d2/d68/classSG_1_1AuxVectorData_1_1Cache" prot="private">SG::AuxVectorData::Cache</innerclass>
      <sectiondef kind="user-defined">
      <header>Data access.</header>
      <description><para><anchor id="_1amgrp0bc7aca0073ece7ced04c518991fb513"/> </para></description>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1a95f42871b1d206674b8f49a8cd73ae55" prot="protected" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t SG::AuxVectorData::s_minCacheLen</definition>
        <argsstring></argsstring>
        <name>s_minCacheLen</name>
        <initializer> 1024</initializer>
        <briefdescription>
<para>Minimum length to use for the cache vector. </para>        </briefdescription>
        <detaileddescription>
<para>Minimum length to use for the cache vector. This can be changed for regression tests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="562" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref> &amp;</type>
        <definition>const SG::auxid_set_t &amp; SG::AuxVectorData::getAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getAuxIDs</name>
        <briefdescription>
<para>Return a set of identifiers for existing data items in store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para>This will include identifiers for all items, const and non-const. If no store is associated with this object, this will return an empty set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="387" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a52d2ca97c7546abb52972902ff47a275" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref> &amp;</type>
        <definition>const SG::auxid_set_t &amp; SG::AuxVectorData::getWritableAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getWritableAuxIDs</name>
        <briefdescription>
<para>Return a set of identifiers for writable data items in this store. </para>        </briefdescription>
        <detaileddescription>
<para>This will include only non-const identifiers. If no store is associated with this object, this will return an empty set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="398" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1aff7bce34ddc38433ed057fab2b0e9280" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailable</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailable</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test to see if a variable exists in the store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="405" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a920fb71ea0559e29aecfff38519c8947" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailable</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Test to see if a variable exists in the store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="415" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a02bd683426600b15e16ae9d7ba88b589" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritable</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailableWritable</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test to see if a variable is available for writing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="422" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1afd5160ac3f0febfdb253c9bc3609fbbe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritable</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailableWritable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Test to see if a variable is available for writing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="432" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a3f2136a2be890f5cf9e12b01342d50de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritableAsDecoration</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailableWritableAsDecoration</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Test to see if a variable is available for writing as a decoration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="439" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a101c4c4aabc8168d97421793265a32a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritableAsDecoration</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;) const </argsstring>
        <name>isAvailableWritableAsDecoration</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Test to see if a variable is available for writing as a decoration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="449" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxVectorData::getData</definition>
        <argsstring>(SG::auxid_t auxid, size_t ndx)</argsstring>
        <name>getData</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndx</declname>
        </param>
        <briefdescription>
<para>Return reference to an aux data item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a reference to element <computeroutput>ndx</computeroutput> of aux data item <computeroutput>auxid</computeroutput>. If the aux data item does not exist, it will be created. Errors are signaled by raising an exception.</para><para>Warning: no type checking is done. You should usually access the data via <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AuxElement::Accessor</ref></computeroutput> or <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">AuxElement::ConstAccessor</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a reference to element <computeroutput>ndx</computeroutput> of aux data item <computeroutput>auxid</computeroutput>. If the aux data item does not exist, it will be created. Errors are signaled by raising an exception.</para><para>Warning: no type checking is done. You should usually access the data via <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AuxElement::Accessor</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="466" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ae0345e56110a7ccefdb3b3e4dbc20f7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::const_reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::const_reference_type SG::AuxVectorData::getData</definition>
        <argsstring>(SG::auxid_t auxid, size_t ndx) const </argsstring>
        <name>getData</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndx</declname>
        </param>
        <briefdescription>
<para>Return const reference to an aux data item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a reference to element <computeroutput>ndx</computeroutput> of aux data item <computeroutput>auxid</computeroutput>. Errors are signaled by raising an exception.</para><para>Warning: no type checking is done. You should usually access the data via <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AuxElement::Accessor</ref></computeroutput> or <computeroutput><ref refid="dd/d86/classSG_1_1AuxElement_1_1ConstAccessor" kindref="compound">AuxElement::ConstAccessor</ref></computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a reference to element <computeroutput>ndx</computeroutput> of aux data item <computeroutput>auxid</computeroutput>. If the aux data item does not exist, it will be created. Errors are signaled by raising an exception.</para><para>Warning: no type checking is done. You should usually access the data via <computeroutput><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">AuxElement::Accessor</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="482" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ac135f8f7454737b3640aaa05cc1d4a95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d6e/classSG_1_1AuxDataTraits" kindref="compound">AuxDataTraits</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;::reference_type</type>
        <definition>AuxDataTraits&lt; T &gt;::reference_type SG::AuxVectorData::getDecoration</definition>
        <argsstring>(SG::auxid_t auxid, size_t ndx) const </argsstring>
        <name>getDecoration</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ndx</declname>
        </param>
        <briefdescription>
<para>Return reference to an aux decoration item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux decoration item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the element to return.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a reference to element <computeroutput>ndx</computeroutput> of aux decoration item <computeroutput>auxid</computeroutput>. If the aux data item does not exist, it will be created. Errors are signaled by raising an exception.</para><para>Warning: no type checking is done. You should usually access the data via <computeroutput><ref refid="d3/d59/classSG_1_1AuxElement_1_1Decorator" kindref="compound">AuxElement::Decorator</ref></computeroutput>.</para><para>The difference between <computeroutput>getDecoration</computeroutput> and <computeroutput>getData</computeroutput> is that <computeroutput>getDecoration</computeroutput> takes a const container as input, but returns a non-const reference. This will only succeed if either the container is not locked or the item was first accessed as a decoration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="506" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ac60d418d024c0970f058e147b2e0ee6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxVectorData::getDataArray</definition>
        <argsstring>(SG::auxid_t auxid) const </argsstring>
        <name>getDataArray</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return a const pointer to the start of an aux data vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a pointer to the start of the data for aux data item <computeroutput>auxid</computeroutput>. Errors are signaled by raising an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="517" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ae5ef17864033f73d8b7d4a516241a138" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxVectorData::getDataArrayAllowMissing</definition>
        <argsstring>(SG::auxid_t auxid) const </argsstring>
        <name>getDataArrayAllowMissing</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return a const pointer to the start of an aux data vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a pointer to the start of the data for aux data item <computeroutput>auxid</computeroutput>. If the item does not exist, this will return nullptr rather than raising an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="528" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a9d9f283f683d509706b255b47f80719f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * SG::AuxVectorData::getDataArray</definition>
        <argsstring>(SG::auxid_t auxid)</argsstring>
        <name>getDataArray</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the start of an aux data vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a pointer to the start of the data for aux data item <computeroutput>auxid</computeroutput>. If the item doesn&apos;t exist, it will be created. Errors are signaled by raising an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="540" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a42670ce61a36909d86c7cda581c38535" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * SG::AuxVectorData::getDecorationArray</definition>
        <argsstring>(SG::auxid_t auxid) const </argsstring>
        <name>getDecorationArray</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return a pointer to the start of an aux data vector for a decoration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired aux data item.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will return a pointer to the start of the data for aux data item <computeroutput>auxid</computeroutput>. If the item doesn&apos;t exist, it will be created. Errors are signaled by raising an exception.</para><para>The difference between <computeroutput>getDecorationArray</computeroutput> and <computeroutput>getDataArray</computeroutput> is that <computeroutput>getDecorationArray</computeroutput> takes a const container as input, but returns a non-const pointer. This will only succeed if either the container is not locked or the item was first accessed as a decoration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="557" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="295" bodyend="298"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Aux store management.</header>
      <description><para><anchor id="_1amgrp6cde9651e6ca25527e9c91c6a129aa40"/> </para></description>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
        <definition>const SG::IConstAuxStore * SG::AuxVectorData::getConstStore</definition>
        <argsstring>() const </argsstring>
        <name>getConstStore</name>
        <briefdescription>
<para>Return the current store, as a const interface. </para>        </briefdescription>
        <detaileddescription>
<para>This will be non-zero if either a const or non-const store is associated with this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="219" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="28" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
        <definition>SG::IAuxStore * SG::AuxVectorData::getStore</definition>
        <argsstring>() const </argsstring>
        <name>getStore</name>
        <briefdescription>
<para>Return the current store, as a non-const interface. </para>        </briefdescription>
        <detaileddescription>
<para>This will be non-zero if a non-const store is associated with this object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="227" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::hasStore</definition>
        <argsstring>() const </argsstring>
        <name>hasStore</name>
        <briefdescription>
<para>Return true if this object has an associated store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="233" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::hasNonConstStore</definition>
        <argsstring>() const </argsstring>
        <name>hasNonConstStore</name>
        <briefdescription>
<para>Return true if this object has an associated non-const store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="239" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1adad5487f0cdf6cd0d7de68dd84570324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(auxid_t id, const AuxDataOption &amp;option)</argsstring>
        <name>setOption</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">AuxDataOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable for which we want to set the option. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option setting to make.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="251" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a6f683bea801877c1001faa8116679ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const AuxDataOption &amp;option)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">AuxDataOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option setting to make.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="264" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ab49a59f74e1b4e28fc637d0fbfc8ec80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname, const AuxDataOption &amp;option)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">AuxDataOption</ref> &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option setting to make.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="279" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ac8ee26ce4d687f9cb2f05ef1ecf3adff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(auxid_t id, const std::string &amp;optname, T arg)</argsstring>
        <name>setOption</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>optname</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable for which we want to set the option. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The option value to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="505" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a51e648949c78a087367e8788dca149f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;optname, int arg)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>optname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The option value to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="308" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ae2f4c954520372ce1381365cf0f8bee4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;optname, float arg)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>optname</declname>
        </param>
        <param>
          <type>float</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="311" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="531" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a9bf14a816b4340b01e21b19fe76e8d4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;optname, double arg)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>optname</declname>
        </param>
        <param>
          <type>double</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="314" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="538" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a0a24bbef37c5f3cfcac02fceda56d943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::AuxVectorData::setOption</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname, const std::string &amp;optname, T arg)</argsstring>
        <name>setOption</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>optname</declname>
        </param>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref></type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Set an option for an auxiliary data variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the variable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the associated class. May be blank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optname</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The option value to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of <computeroutput>option</computeroutput> depends on the associated auxiliary store. See <ref refid="d4/d43/PackedParameters_8h" kindref="compound">PackedParameters.h</ref> for option settings for writing packed data. Returns <computeroutput>true</computeroutput> on success, <computeroutput>false</computeroutput> otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="332" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="558" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1af6e2da3c14ea74935120cd1b5a37f021" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::setStore</definition>
        <argsstring>(const SG::IConstAuxStore *store)</argsstring>
        <name>setStore</name>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1aa21603645adb97780ff75af26630bfad">setStore</reimplementedby>
        <param>
          <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will clear the non-const store pointer, and also clear the cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will clear the non-const store pointer, and also clear the cache. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="349" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a1980ceb02ed996944d1f2508d128d91c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::setStore</definition>
        <argsstring>(SG::IAuxStore *store)</argsstring>
        <name>setStore</name>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1a58659470f0f2e27560cbe691eefce9c3">setStore</reimplementedby>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will set both the const and non-const store pointers, and also clear the cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will set both the const and non-const store pointers, and also clear the cache. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="359" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="113" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a49c013e89eb83e984483ee34fc91d68c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::setStore</definition>
        <argsstring>(const DataLink&lt; SG::IConstAuxStore &gt; &amp;store)</argsstring>
        <name>setStore</name>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1a2893a7ee3b1f5c7bc7d5cc5ce65d6e16">setStore</reimplementedby>
        <param>
          <type>const <ref refid="da/da2/classDataLink" kindref="compound">DataLink</ref>&lt; <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> &gt; &amp;</type>
          <declname>store</declname>
        </param>
        <briefdescription>
<para>Set the store associated with this object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>The new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will clear the non-const store pointer, and also clear the cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new store.</para></parameterdescription>
</parameteritem>
</parameterlist>
This will clear the non-const store pointer, and also clear the cache. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="369" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="129" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other operations.</header>
      <description><para><anchor id="_1amgrp693a58baae3558d5fd65f9f758ee279c"/> </para></description>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1aea4d64e4a85beda13d1243ece5d210e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::swap</definition>
        <argsstring>(AuxVectorData &amp;other)</argsstring>
        <name>swap</name>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1a1413cec813bba2f0cba00cd3136e7131">swap</reimplementedby>
        <param>
          <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this instance with another. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other instance with which to swap. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="576" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="309" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a5d6d9eefd8811b373b3eeda823e5c0ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::clearCache</definition>
        <argsstring>()</argsstring>
        <name>clearCache</name>
        <briefdescription>
<para>Clear the cached aux data pointers. </para>        </briefdescription>
        <detaileddescription>
<para>You should call this any time something changes in the aux store that could invalidate the vector pointers.</para><para>You should call this anytime something changes in the aux store that could invalidate the vector pointers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="585" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.icc" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a4379058b2eb0522291c4c20076ef7967" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::lock</definition>
        <argsstring>() ATH_OVERRIDE</argsstring>
        <name>lock</name>
        <briefdescription>
<para>Lock the container. </para>        </briefdescription>
        <detaileddescription>
<para>After this, only decorations can be changed/modified. If the container is already locked, this is a no-op. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="601" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="521" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a35c86d28fd74648ddae868dc5fa005d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::AuxVectorData::clearDecorations</definition>
        <argsstring>() const </argsstring>
        <name>clearDecorations</name>
        <briefdescription>
<para>Clear all decorations. </para>        </briefdescription>
        <detaileddescription>
<para>Erase all decorations from the store, restoring the state to when <computeroutput>lock</computeroutput> was called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="610" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="538" bodyend="556"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="db/dd6/classSG_1_1AuxVectorData_1aa2bd47371bd3c785bfad17fb2e0609d2" prot="private" static="no">
        <type>AthContainers_detail::mutex</type>
        <definition>typedef AthContainers_detail::mutex SG::AuxVectorData::mutex_t</definition>
        <argsstring></argsstring>
        <name>mutex_t</name>
        <briefdescription>
<para>Mutex used to synchronize modifications to the cache vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="856" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="db/dd6/classSG_1_1AuxVectorData_1ab0f5223f326dd4b7a6e07afdef46ee37" prot="private" static="no">
        <type>AthContainers_detail::lock_guard&lt; mutex_t &gt;</type>
        <definition>typedef AthContainers_detail::lock_guard&lt;mutex_t&gt; SG::AuxVectorData::guard_t</definition>
        <argsstring></argsstring>
        <name>guard_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="857" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="db/dd6/classSG_1_1AuxVectorData_1ac9d22b110b724211d946d911ecacdf64" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Cache</definition>
        <argsstring></argsstring>
        <name>Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="758" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="db/dd6/classSG_1_1AuxVectorData_1aa54bfa91c82dd2b4071d28c52baf4b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SG::AuxElement</definition>
        <argsstring></argsstring>
        <name>SG::AuxElement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="766" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1ac5501fb3429567fa8cab02a5e7f7052a" prot="private" static="no" mutable="yes">
        <type>Cache</type>
        <definition>Cache SG::AuxVectorData::m_cache</definition>
        <argsstring></argsstring>
        <name>m_cache</name>
        <briefdescription>
<para>Cached pointers to the start of aux data vectors, non-const. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="834" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1aa06ce0753e831cd6ad75a12acec0c836" prot="private" static="no" mutable="yes">
        <type>Cache</type>
        <definition>Cache SG::AuxVectorData::m_constCache</definition>
        <argsstring></argsstring>
        <name>m_constCache</name>
        <briefdescription>
<para>Cached pointers to the start of aux data vectors, const. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="837" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1a62b4ef668a0e21b0510478b2b43aa772" prot="private" static="no" mutable="yes">
        <type>Cache</type>
        <definition>Cache SG::AuxVectorData::m_decorCache</definition>
        <argsstring></argsstring>
        <name>m_decorCache</name>
        <briefdescription>
<para>Cached pointers to the start of aux data vectors, decorations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="840" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1a5553ef93c62c03545a8b43db9f67edf6" prot="private" static="no" mutable="no">
        <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
        <definition>SG::IAuxStore* SG::AuxVectorData::m_store</definition>
        <argsstring></argsstring>
        <name>m_store</name>
        <reimplementedby refid="da/d62/classSG_1_1AuxElementPrivateData_1a4149f8205b9b40dedde985481af4bf67">m_store</reimplementedby>
        <briefdescription>
<para>Associated store, non-const. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="844" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1ab476bcbf4047f95adaf3bfd697d9c78b" prot="private" static="no" mutable="no">
        <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> *</type>
        <definition>const SG::IConstAuxStore* SG::AuxVectorData::m_constStore</definition>
        <argsstring></argsstring>
        <name>m_constStore</name>
        <briefdescription>
<para>Associated store, const. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="848" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1a283bc718a6948aaf4904a28b992807f8" prot="private" static="no" mutable="no">
        <type><ref refid="da/da2/classDataLink" kindref="compound">DataLink</ref>&lt; <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> &gt;</type>
        <definition>DataLink&lt; SG::IConstAuxStore &gt; SG::AuxVectorData::m_constStoreLink</definition>
        <argsstring></argsstring>
        <name>m_constStoreLink</name>
        <briefdescription>
<para>Associated store link, const. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="852" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1abdd5f58ce660515948b9d1785fae385d" prot="private" static="no" mutable="yes">
        <type>mutex_t</type>
        <definition>mutex_t SG::AuxVectorData::m_mutex</definition>
        <argsstring></argsstring>
        <name>m_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="858" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="858" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="db/dd6/classSG_1_1AuxVectorData_1a54025d66dd0f586986c9f50c830378e1" prot="private" static="yes" mutable="no">
        <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref></type>
        <definition>SG::auxid_set_t SG::AuxVectorData::s_emptySet</definition>
        <argsstring></argsstring>
        <name>s_emptySet</name>
        <briefdescription>
<para>Empty auxid set, used for a return value when we have no associated store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="861" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="861" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ac03d380d92722ca597c92da17ed08972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::AuxVectorData::AuxVectorData</definition>
        <argsstring>()</argsstring>
        <name>AuxVectorData</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ad2c4723c7dd4279ff096d77b4832eb99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>SG::AuxVectorData::~AuxVectorData</definition>
        <argsstring>()</argsstring>
        <name>~AuxVectorData</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a72f56c76a3c92d48d8364723c0161af3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t SG::AuxVectorData::size_v</definition>
        <argsstring>() const =0</argsstring>
        <name>size_v</name>
        <reimplementedby refid="d1/daa/classmyvec2_1ace96982b38e658c8d586e715608ecdad">size_v</reimplementedby>
        <reimplementedby refid="d6/d8d/classSG_1_1AuxVectorData__test_1ae4c6a90d1ad764572d6d15a69ec03368">size_v</reimplementedby>
        <reimplementedby refid="d8/db3/classSG_1_1AuxVectorBase__test_1a1d585341390c46dcdfe0b257af171858">size_v</reimplementedby>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1acb5fc1c8f606bd9fe52610b48ebb4c34">size_v</reimplementedby>
        <reimplementedby refid="dc/dfb/classSG_1_1AuxElementData_1a5521e3f733358f3f5f97993d6d1766b1">size_v</reimplementedby>
        <reimplementedby refid="d0/d91/classDataVector_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a258f5c8833dc8e1d659960784c468f25">size_v</reimplementedby>
        <briefdescription>
<para>Return the size of the container. </para>        </briefdescription>
        <detaileddescription>
<para>This is used when we need to create a new aux data vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="197"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1aa05239b04a4e91b0bcc8da201f2cccaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t SG::AuxVectorData::capacity_v</definition>
        <argsstring>() const =0</argsstring>
        <name>capacity_v</name>
        <reimplementedby refid="d1/daa/classmyvec2_1a552da2700707da09ee2441da8dac3a09">capacity_v</reimplementedby>
        <reimplementedby refid="d6/d8d/classSG_1_1AuxVectorData__test_1a29972d73e174308991213df92daa44cd">capacity_v</reimplementedby>
        <reimplementedby refid="d8/db3/classSG_1_1AuxVectorBase__test_1a8fc5d6bb424ff267020798b274a1c24b">capacity_v</reimplementedby>
        <reimplementedby refid="dd/da5/classSG_1_1AuxVectorBase_1ad2ff11b7c4c2099a845990132dd76e4f">capacity_v</reimplementedby>
        <reimplementedby refid="dc/dfb/classSG_1_1AuxElementData_1a299e4488cfcb6a08e7611fde899defbc">capacity_v</reimplementedby>
        <reimplementedby refid="d0/d91/classDataVector_3_01T_00_01DataModel__detail_1_1NoBase_01_4_1a236a9f58b14de59ef54c5107dfcff5dc">capacity_v</reimplementedby>
        <briefdescription>
<para>Return the capacity of the container. </para>        </briefdescription>
        <detaileddescription>
<para>This is used when we need to create a new aux data vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1aa2acc3f3b68629cccffaa203b99303d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::AuxVectorData::AuxVectorData</definition>
        <argsstring>(const AuxVectorData &amp;)</argsstring>
        <name>AuxVectorData</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy not allowed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="762"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a81c294095c599763d58f40244a3dc928" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
        <definition>AuxVectorData&amp; SG::AuxVectorData::operator=</definition>
        <argsstring>(const AuxVectorData &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="db/dd6/classSG_1_1AuxVectorData" kindref="compound">AuxVectorData</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="763"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1af346a31e1b7c3bf8639d368e3d360d43" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableOol</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailableOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of isAvailable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="773" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="228" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a74f83472fa98ced9cc9ceb2f3bfb6219" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritableOol</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailableWritableOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of isAvailableWritable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="780" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="248" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a1c6f2a49c9d890cc05693571d6c68f82" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::AuxVectorData::isAvailableWritableAsDecorationOol</definition>
        <argsstring>(auxid_t id) const </argsstring>
        <name>isAvailableWritableAsDecorationOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of isAvailableWritableAsDecoration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="787" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="261" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1a28a84d0647da5a93836920f5134e0db4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * SG::AuxVectorData::getDataOol</definition>
        <argsstring>(SG::auxid_t auxid, bool allowMissing)</argsstring>
        <name>getDataOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowMissing</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of data access. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>aux data item being accessed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowMissing</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, then return nullptr if the variable is missing rather than throwing an exception.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function returns, the cache entry <computeroutput>m_cache</computeroutput>[auxid] will be valid. That entry is also returned. If there&apos;s an error, the function will throw an exception rather than returning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="800" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="287" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1abb6f6bca94b3d4391829a594569d1120" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * SG::AuxVectorData::getDataOol</definition>
        <argsstring>(SG::auxid_t auxid, bool allowMissing) const </argsstring>
        <name>getDataOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allowMissing</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of data access (const version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>aux data item being accessed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowMissing</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, then return nullptr if the variable is missing rather than throwing an exception.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function returns, the cache entry <computeroutput>m_constCache</computeroutput>[auxid] will be valid. That entry is also returned. If there&apos;s an error, the function will throw an exception rather than returning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="813" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="326" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="db/dd6/classSG_1_1AuxVectorData_1ad1fdb045e66555c42b6b557db7ef2035" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * SG::AuxVectorData::getDecorationOol</definition>
        <argsstring>(SG::auxid_t auxid) const </argsstring>
        <name>getDecorationOol</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Out-of-line portion of data access (decorator version). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>aux data item being accessed.</para></parameterdescription>
</parameteritem>
</parameterlist>
When this function returns, the cache entry <computeroutput>m_cache</computeroutput>[auxid] will be valid. That entry is also returned. If there&apos;s an error, the function will throw an exception rather than returning.</para><para>The difference between <computeroutput>getDecorationOol</computeroutput> and <computeroutput>getDataOol</computeroutput> is that <computeroutput>getDecorationOol</computeroutput> takes a const container as input, but returns a non-const pointer. This will only succeed if either the container is not locked or the item was first accessed as a decoration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="830" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/AuxVectorData.cxx" bodystart="363" bodyend="393"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Manage lookup of vectors of auxiliary data. </para>    </briefdescription>
    <detaileddescription>
<para>An object, usually a <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput>, can have vectors of auxiliary data associated with it. This class manages this association.</para><para>An auxiliary data item is identified by an integer of type <computeroutput><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></computeroutput>. The <computeroutput>getData</computeroutput> methods can be used to get a reference to one auxiliary data element given the <computeroutput>auxid</computeroutput> and the vector index. However, <computeroutput>getData</computeroutput> does not do type checking, so it should generally not be used. (Use instead the <computeroutput>Accessor</computeroutput> or <computeroutput>ConstAccessor</computeroutput> classes defined in <computeroutput><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">AuxElement</ref></computeroutput>.)</para><para>The auxiliary data is not managed by this class, but rather by a separate `aux store&apos; class, to which we hold a pointer. Actually, there can be two pointers. We define two interfaces for an aux store, <computeroutput><ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">IConstAuxStore</ref></computeroutput>, which defines operations for accessing data read-only, and <computeroutput><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">IAuxStore</ref></computeroutput>, which defines operations for modifying data. If we have a const store, only the pointer to the const interface is set; if we have non-const store, then both pointers are set (to the same object).</para><para>To speed up access to aux data, we cache pointers to the start of the data for each vector. There are separate caches for const and non-const pointers. If you make any changes to the aux store behind the back of this container object, you should call <computeroutput>clearCache</computeroutput>.</para><para>We also support adding `decorations&apos; to a const container. These are new auxiliary data items that don&apos;t conflict with existing ones. See <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">IConstAuxStore</ref> for more information.</para><para>Notes on thread safety:</para><para>It&apos;s a little tricky to make this class thread-safe without spoiling the optimizations in getDataArray. This section outlines some of the considerations that went into the chosen solution.</para><para>First, by `thread-safe&apos;, we mean that getDataArray can be called in different threads without problems. This is necessary to allow simultaneous reads of the container. We make no attempt to any synchronization on modifications to the container, such as adding elements. Such operations must be synchronized externally. This is the same sort of thread semantics that the STL containers supply. So our considerations of thread-safety involve only the management of the cache vector.</para><para>Second, reads (of the cache vector) are very common (and inlined), while modifications of it are uncommon (and handled by out-of-line code). Thus, we would like reading to be entirely lock-free. If we need to make modifications, though, we can do whatever locking we need. Making the reader lock-free, though, is complicated by the fact that the cache vector may relocate in memory if is expanded.</para><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> way forward is suggested by read-copy-update (<ref refid="d9/d83/namespaceRCU" kindref="compound">RCU</ref>) synchronization. The idea there is that when you want to change some structure, you copy it and work on the copy. When the modifications are done, the new structure is copied to the old one in such a manner that at any instant in time, any reader will see a consistent version of the structure (even though it may not be the most recent one).</para><para>For this case, we can store the vector as a length and a pointer to the beginning. When we want to access AUXID, we first compare it to the length. If that&apos;s ok, then we test the pointer at index AUXID. If that&apos;s non-null, we go ahead and use it; if either test fails, we go to the out-of-line code.</para><para>The out-of-line code can then take out a lock and will in the new pointer in the vector. If it is necessary to expand the the vector, we allocate a new one and copy the old vector to the new one. Then we update the values: first, the pointer, then the length. This ensures that the inline code will always see something consistent. Then we must delay freeing the old vector until we&apos;re sure that no thread can possibly be using it anymore. For now, we just avoid deleting the old vectors until the container itself is deleted; the memory wasted by this should be negligible in the context of reconstruction.</para><para>This allows the inline part of the code to avoid locking. However, there is an additional critical <ref refid="dd/d39/namespacedetail" kindref="compound">detail</ref>. We have a test like this:</para><para>m_cache_length &lt;= auxid || !m_cache[auxid]</para><para>As long as the length is read before the cache pointer itself, everything&apos;s fine, even if those reads were some time in the past. But if the reads can be in the other order, we could face disaster. While the short-circuit operator should prevent the array indexing from happening before the length is read, there is nothing a priori to prevent a speculative read of m_cache before the length. For the cognoscenti, this is a `control dependency&apos; (rather than a `data dependency&apos;), which implies no ordering guarantees.</para><para>Now, we can deal with this by inserting a read barrier between the two loads. That should be correct in all cases. However, that tends to destroy the optimization below for repeated references to the same aux data item (see the use of <computeroutput>ATHCONTAINERS_ASSUME</computeroutput> in <computeroutput>getDataArray</computeroutput> in the icc file).</para><para>It turns out that on x86 machines, memory ordering guarantees are relatively strong. In particular, loads cannot be reordered with other loads, and stores from one CPU are seen in the same order by all other CPUs. So in this case, no barrier is actually needed --- provided that the compiler emits the loads in the correct order. The supported way to do this with gcc is to use `asm volatile (&quot;&quot;:::&quot;memory&quot;)&apos; --- however, that explicitly clobbers member, which again spoils our optimization.</para><para>While it seems unlikely that the compiler would actually find it worthwhile to reorder the loads on an x86 machine, some extra safety would be nice. We try to prevent this reordering by adding an explicit data dependency. Instead of a single m_cache pointer, we have an array of two pointers (which will be identical) and use m_cache[m_cache_len&amp;1]. This provides an explicit data dependency which should prevent reading the pointer before the length; the cost is an added and operation and adding an index register to the dereference operation.</para><para>Actually, this is not completely watertight; the compiler could in principle decide to speculate the reads of both pointers, or speculate one and then throw it away if it guessed wrong. This seems sufficiently unlikely to be an issue that we&apos;ll live with it for now --- though it might be worth having something to validate the generated code. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2041">
        <label>SG::AuxVectorBase</label>
        <link refid="dd/da5/classSG_1_1AuxVectorBase"/>
        <childnode refid="2037" relation="public-inheritance">
        </childnode>
        <childnode refid="2037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2044">
        <label>SG::AuxVectorBase_test</label>
        <link refid="d8/db3/classSG_1_1AuxVectorBase__test"/>
        <childnode refid="2041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2040">
        <label>SG::AuxElementStandaloneData</label>
        <link refid="d5/dde/classSG_1_1AuxElementStandaloneData"/>
        <childnode refid="2038" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2038">
        <label>SG::AuxElementData</label>
        <link refid="dc/dfb/classSG_1_1AuxElementData"/>
        <childnode refid="2037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2042">
        <label>DataVector&lt; T, DataModel_detail::NoBase &gt;</label>
        <link refid="d0/d91/classDataVector_3_01T_00_01DataModel__detail_1_1NoBase_01_4"/>
        <childnode refid="2041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2045">
        <label>SG::AuxVectorData_test</label>
        <link refid="d6/d8d/classSG_1_1AuxVectorData__test"/>
        <childnode refid="2037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2043">
        <label>myvec2</label>
        <link refid="d1/daa/classmyvec2"/>
        <childnode refid="2041" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2039">
        <label>SG::AuxElementPrivateData</label>
        <link refid="da/d62/classSG_1_1AuxElementPrivateData"/>
        <childnode refid="2038" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2037">
        <label>SG::AuxVectorData</label>
        <link refid="db/dd6/classSG_1_1AuxVectorData"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2056">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="2057">
        <label>Internal::hash_code_base&lt;Value , Value , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="2052">
        <label>xAOD::TVirtualEvent</label>
        <link refid="de/daf/classxAOD_1_1TVirtualEvent"/>
      </node>
      <node id="2055">
        <label>SG::hashtable&lt; Value, Value, Alloc, Internal::identity&lt; Value &gt;, Pred, Hash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, cache_hash_code, true, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="2056" relation="public-inheritance">
        </childnode>
        <childnode refid="2057" relation="public-inheritance">
        </childnode>
        <childnode refid="2058" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2050">
        <label>SelectNoInstance</label>
        <link refid="d9/dec/classSelectNoInstance"/>
      </node>
      <node id="2051">
        <label>DataLinkBase</label>
        <link refid="dd/d9d/classDataLinkBase"/>
      </node>
      <node id="2048">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="2049">
        <label>DataLink&lt; SG::IConstAuxStore &gt;</label>
        <link refid="da/da2/classDataLink"/>
        <childnode refid="2050" relation="public-inheritance">
        </childnode>
        <childnode refid="2051" relation="public-inheritance">
        </childnode>
        <childnode refid="2052" relation="usage">
          <edgelabel>m_event</edgelabel>
        </childnode>
        <childnode refid="2048" relation="usage">
          <edgelabel>m_object</edgelabel>
        </childnode>
      </node>
      <node id="2047">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="2048" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2054">
        <label>SG::unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt;</label>
        <link refid="dd/dac/classSG_1_1unordered__set"/>
        <childnode refid="2055" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2058">
        <label>Internal::map_base&lt;Value , Value , Internal::identity&lt; Value &gt; , unique_keys, hashtable&lt;Value , Value , Alloc , Internal::identity&lt; Value &gt; , Pred , Hash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="2059">
        <label>SG::AuxVectorData::Cache</label>
        <childnode refid="2060" relation="usage">
          <edgelabel>m_cache</edgelabel>
        </childnode>
      </node>
      <node id="2053">
        <label>mutex</label>
      </node>
      <node id="2060">
        <label>void</label>
      </node>
      <node id="2046">
        <label>SG::AuxVectorData</label>
        <link refid="db/dd6/classSG_1_1AuxVectorData"/>
        <childnode refid="2047" relation="usage">
          <edgelabel>m_store</edgelabel>
        </childnode>
        <childnode refid="2049" relation="usage">
          <edgelabel>m_constStoreLink</edgelabel>
        </childnode>
        <childnode refid="2048" relation="usage">
          <edgelabel>m_constStore</edgelabel>
        </childnode>
        <childnode refid="2053" relation="usage">
          <edgelabel>m_mutex</edgelabel>
        </childnode>
        <childnode refid="2054" relation="usage">
          <edgelabel>s_emptySet</edgelabel>
        </childnode>
        <childnode refid="2059" relation="usage">
          <edgelabel>m_cache</edgelabel>
          <edgelabel>m_constCache</edgelabel>
          <edgelabel>m_decorCache</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" line="166" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxVectorData.h" bodystart="162" bodyend="862"/>
    <listofallmembers>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac03d380d92722ca597c92da17ed08972" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>AuxVectorData</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aa2acc3f3b68629cccffaa203b99303d6" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>AuxVectorData</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac9d22b110b724211d946d911ecacdf64" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>Cache</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aa05239b04a4e91b0bcc8da201f2cccaa" prot="public" virt="pure-virtual"><scope>SG::AuxVectorData</scope><name>capacity_v</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a5d6d9eefd8811b373b3eeda823e5c0ad" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>clearCache</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a35c86d28fd74648ddae868dc5fa005d2" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>clearDecorations</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1abe342233ecc5416805b44a47db63815a" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getAuxIDs</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getConstStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a6b6d4b6086f084692acf9529835b25e2" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getData</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ae0345e56110a7ccefdb3b3e4dbc20f7a" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getData</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac60d418d024c0970f058e147b2e0ee6c" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDataArray</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a9d9f283f683d509706b255b47f80719f" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDataArray</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ae5ef17864033f73d8b7d4a516241a138" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDataArrayAllowMissing</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a28a84d0647da5a93836920f5134e0db4" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDataOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1abb6f6bca94b3d4391829a594569d1120" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDataOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac135f8f7454737b3640aaa05cc1d4a95" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDecoration</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a42670ce61a36909d86c7cda581c38535" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDecorationArray</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ad1fdb045e66555c42b6b557db7ef2035" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getDecorationOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1af1d8f5f0dd148fbf2041560f77ab0113" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a52d2ca97c7546abb52972902ff47a275" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>getWritableAuxIDs</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ab0f5223f326dd4b7a6e07afdef46ee37" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>guard_t</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a97b5279b30e60d9b099cb6496404c1aa" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>hasNonConstStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a7ae11026ce063feb9b55456698ef2a4f" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>hasStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aff7bce34ddc38433ed057fab2b0e9280" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailable</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a920fb71ea0559e29aecfff38519c8947" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailable</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1af346a31e1b7c3bf8639d368e3d360d43" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a02bd683426600b15e16ae9d7ba88b589" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritable</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1afd5160ac3f0febfdb253c9bc3609fbbe" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritable</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a3f2136a2be890f5cf9e12b01342d50de" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritableAsDecoration</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a101c4c4aabc8168d97421793265a32a0" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritableAsDecoration</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a1c6f2a49c9d890cc05693571d6c68f82" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritableAsDecorationOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a74f83472fa98ced9cc9ceb2f3bfb6219" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>isAvailableWritableOol</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a4379058b2eb0522291c4c20076ef7967" prot="public" virt="virtual"><scope>SG::AuxVectorData</scope><name>lock</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac5501fb3429567fa8cab02a5e7f7052a" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_cache</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aa06ce0753e831cd6ad75a12acec0c836" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_constCache</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ab476bcbf4047f95adaf3bfd697d9c78b" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_constStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a283bc718a6948aaf4904a28b992807f8" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_constStoreLink</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a62b4ef668a0e21b0510478b2b43aa772" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_decorCache</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1abdd5f58ce660515948b9d1785fae385d" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_mutex</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a5553ef93c62c03545a8b43db9f67edf6" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>m_store</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aa2bd47371bd3c785bfad17fb2e0609d2" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>mutex_t</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a81c294095c599763d58f40244a3dc928" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>operator=</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a54025d66dd0f586986c9f50c830378e1" prot="private" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>s_emptySet</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a95f42871b1d206674b8f49a8cd73ae55" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>s_minCacheLen</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1adad5487f0cdf6cd0d7de68dd84570324" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a6f683bea801877c1001faa8116679ac4" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ab49a59f74e1b4e28fc637d0fbfc8ec80" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ac8ee26ce4d687f9cb2f05ef1ecf3adff" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a51e648949c78a087367e8788dca149f2" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ae2f4c954520372ce1381365cf0f8bee4" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a9bf14a816b4340b01e21b19fe76e8d4a" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a0a24bbef37c5f3cfcac02fceda56d943" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setOption</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1af6e2da3c14ea74935120cd1b5a37f021" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a1980ceb02ed996944d1f2508d128d91c" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a49c013e89eb83e984483ee34fc91d68c" prot="protected" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>setStore</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aa54bfa91c82dd2b4071d28c52baf4b7c" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>SG::AuxElement</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1a72f56c76a3c92d48d8364723c0161af3" prot="public" virt="pure-virtual"><scope>SG::AuxVectorData</scope><name>size_v</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1aea4d64e4a85beda13d1243ece5d210e2" prot="public" virt="non-virtual"><scope>SG::AuxVectorData</scope><name>swap</name></member>
      <member refid="db/dd6/classSG_1_1AuxVectorData_1ad2c4723c7dd4279ff096d77b4832eb99" prot="public" virt="virtual"><scope>SG::AuxVectorData</scope><name>~AuxVectorData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
