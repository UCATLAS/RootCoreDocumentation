<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/d28/TGoodRunsListWriter_8cxx" kind="file">
    <compoundname>TGoodRunsListWriter.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">TROOT.h</includes>
    <includes refid="d3/dca/TGoodRunsListWriter_8h" local="yes">GoodRunsLists/TGoodRunsListWriter.h</includes>
    <includes refid="d0/db2/TGoodRunsList_8h" local="yes">GoodRunsLists/TGoodRunsList.h</includes>
    <includes refid="df/d5b/TGoodRun_8h" local="yes">GoodRunsLists/TGoodRun.h</includes>
    <includes refid="d9/df8/TLumiBlockRange_8h" local="yes">GoodRunsLists/TLumiBlockRange.h</includes>
    <includes local="no">libxml/encoding.h</includes>
    <includes local="no">libxml/xmlwriter.h</includes>
    <incdepgraph>
      <node id="135047">
        <label>libxml/xmlwriter.h</label>
      </node>
      <node id="135029">
        <label>stdlib.h</label>
      </node>
      <node id="135034">
        <label>TList.h</label>
      </node>
      <node id="135038">
        <label>string</label>
      </node>
      <node id="135040">
        <label>map</label>
      </node>
      <node id="135027">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsListWriter.cxx</label>
        <link refid="TGoodRunsListWriter.cxx"/>
        <childnode refid="135028" relation="include">
        </childnode>
        <childnode refid="135029" relation="include">
        </childnode>
        <childnode refid="135030" relation="include">
        </childnode>
        <childnode refid="135031" relation="include">
        </childnode>
        <childnode refid="135032" relation="include">
        </childnode>
        <childnode refid="135041" relation="include">
        </childnode>
        <childnode refid="135042" relation="include">
        </childnode>
        <childnode refid="135043" relation="include">
        </childnode>
        <childnode refid="135046" relation="include">
        </childnode>
        <childnode refid="135047" relation="include">
        </childnode>
      </node>
      <node id="135041">
        <label>GoodRunsLists/TGoodRunsList.h</label>
        <link refid="d0/db2/TGoodRunsList_8h_source"/>
        <childnode refid="135042" relation="include">
        </childnode>
        <childnode refid="135044" relation="include">
        </childnode>
        <childnode refid="135036" relation="include">
        </childnode>
        <childnode refid="135040" relation="include">
        </childnode>
        <childnode refid="135033" relation="include">
        </childnode>
        <childnode refid="135038" relation="include">
        </childnode>
      </node>
      <node id="135046">
        <label>libxml/encoding.h</label>
      </node>
      <node id="135037">
        <label>GoodRunsLists/TMsgLogger.h</label>
        <link refid="db/db8/TMsgLogger_8h_source"/>
        <childnode refid="135038" relation="include">
        </childnode>
        <childnode refid="135039" relation="include">
        </childnode>
        <childnode refid="135040" relation="include">
        </childnode>
        <childnode refid="135035" relation="include">
        </childnode>
        <childnode refid="135036" relation="include">
        </childnode>
      </node>
      <node id="135042">
        <label>GoodRunsLists/TGoodRun.h</label>
        <link refid="df/d5b/TGoodRun_8h_source"/>
        <childnode refid="135043" relation="include">
        </childnode>
        <childnode refid="135035" relation="include">
        </childnode>
        <childnode refid="135033" relation="include">
        </childnode>
      </node>
      <node id="135031">
        <label>TROOT.h</label>
      </node>
      <node id="135030">
        <label>string.h</label>
      </node>
      <node id="135045">
        <label>GoodRunsLists/TGRLCollection.h</label>
        <link refid="d7/dd9/TGRLCollection_8h_source"/>
        <childnode refid="135041" relation="include">
        </childnode>
        <childnode refid="135035" relation="include">
        </childnode>
        <childnode refid="135033" relation="include">
        </childnode>
      </node>
      <node id="135043">
        <label>GoodRunsLists/TLumiBlockRange.h</label>
        <link refid="d9/df8/TLumiBlockRange_8h_source"/>
        <childnode refid="135035" relation="include">
        </childnode>
        <childnode refid="135033" relation="include">
        </childnode>
      </node>
      <node id="135035">
        <label>TObject.h</label>
      </node>
      <node id="135033">
        <label>vector</label>
      </node>
      <node id="135039">
        <label>sstream</label>
      </node>
      <node id="135028">
        <label>iostream</label>
      </node>
      <node id="135032">
        <label>GoodRunsLists/TGoodRunsListWriter.h</label>
        <link refid="d3/dca/TGoodRunsListWriter_8h_source"/>
        <childnode refid="135033" relation="include">
        </childnode>
        <childnode refid="135031" relation="include">
        </childnode>
        <childnode refid="135034" relation="include">
        </childnode>
        <childnode refid="135035" relation="include">
        </childnode>
        <childnode refid="135036" relation="include">
        </childnode>
        <childnode refid="135037" relation="include">
        </childnode>
        <childnode refid="135041" relation="include">
        </childnode>
        <childnode refid="135045" relation="include">
        </childnode>
      </node>
      <node id="135044">
        <label>TNamed.h</label>
      </node>
      <node id="135036">
        <label>TString.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="db/d28/TGoodRunsListWriter_8cxx_1aa177b7adacdb1fb5fdadeea57617e24d" prot="public" static="no">
        <name>MY_ENCODING</name>
        <initializer>&quot;ISO-8859-1&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsListWriter.cxx" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsListWriter.cxx" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="db/d28/TGoodRunsListWriter_8cxx_1a70d80646795c6dcfcab2b4864e6c0030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(Root::TGoodRunsListWriter) using namespace std</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="dc/de4/classRoot_1_1TGoodRunsListWriter" kindref="compound">Root::TGoodRunsListWriter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsListWriter.cxx" line="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************************</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Class<sp/><sp/>:<sp/>TGoodRunsListWriter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Authors<sp/>(alphabetical):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Max<sp/>Baak<sp/>&lt;mbaak@cern.ch&gt;<sp/>-<sp/>CERN,<sp/>Switzerland<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Inspiration<sp/>from:<sp/>http://194.199.20.115/examples/testWriter.c</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>**********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TGoodRunsListWriter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TGoodRunsList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TGoodRun.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TLumiBlockRange.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>LIBXML_ATTR_ALLOC_SIZE(x)</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/encoding.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;libxml/xmlwriter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_ENCODING<sp/>&quot;ISO-8859-1&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">ClassImp(<ref refid="dc/de4/classRoot_1_1TGoodRunsListWriter" kindref="compound">Root::TGoodRunsListWriter</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">Root::TGoodRunsListWriter::TGoodRunsListWriter()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/>:<sp/>TObject()</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/>,<sp/>m_logger<sp/><sp/><sp/><sp/><sp/>(<sp/>&quot;TGoodRunsListWriter&quot;<sp/>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/>,<sp/>m_mergegrls(false)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/>,<sp/>m_individuals(false)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">Root::TGoodRunsListWriter::TGoodRunsListWriter(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;<sp/>goodrunslist,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/>dataCardName<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/>:<sp/>TObject()</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/>,<sp/>m_dataCardName(<sp/>dataCardName<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/>,<sp/>m_logger<sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;TGoodRunsListWriter&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/>,<sp/>m_mergegrls(false)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/>,<sp/>m_individuals(false)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>m_grlvec.push_back(goodrunslist);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">Root::TGoodRunsListWriter::~TGoodRunsListWriter()</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>this-&gt;reset();</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">Root::TGoodRunsListWriter::reset()</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>m_grlvec.Reset();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_grl.clear();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>m_mergegrls<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>m_individuals<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>m_prefix=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>m_xmlstring=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>m_xmlstringVec.clear();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="dc/de4/classRoot_1_1TGoodRunsListWriter_1ac630c91acc897e5bc60746b3b66756ce" kindref="member">Root::TGoodRunsListWriter::WriteXMLFiles</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_grlvec.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsList<sp/>is<sp/>empty<sp/>-<sp/>nothing<sp/>to<sp/>write.<sp/>Return<sp/>false.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>m_individuals=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>TString<sp/>olddatacardname=m_dataCardName;<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>Root::TGoodRunsList<sp/>&gt;::const_iterator<sp/>litr<sp/>=<sp/>m_grlvec.begin();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>litr!=m_grlvec.end();<sp/>++litr,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>m_grl<sp/>=<sp/>(*litr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>xml<sp/>for<sp/>this<sp/>goodrunslist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dataCardName<sp/>=<sp/>m_prefix<sp/>+<sp/>Form(</highlight><highlight class="stringliteral">&quot;merged_%d_&quot;</highlight><highlight class="normal">,i)<sp/>+<sp/>litr-&gt;GetSuggestedName()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.xml&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>this-&gt;WriteXMLFile();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>back<sp/>to<sp/>original<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>m_individuals=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>m_dataCardName=olddatacardname;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal">Root::TGoodRunsListWriter::WriteXMLFile()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_grlvec.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsList<sp/>is<sp/>empty<sp/>-<sp/>nothing<sp/>to<sp/>write<sp/>to<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_dataCardName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;.<sp/>Return<sp/>false.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dataCardName.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>filename<sp/>not<sp/>set.<sp/>Will<sp/>be<sp/>generated<sp/>automatically.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>xmlTextWriterPtr<sp/>writer;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>xmlDocPtr<sp/>doc;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>XmlWriter<sp/>for<sp/>DOM,<sp/>with<sp/>no<sp/>compression.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>writer<sp/>=<sp/>xmlNewTextWriterDoc(&amp;doc,<sp/>0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>creating<sp/>the<sp/>xml<sp/>writer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>out<sp/>goodrunslist<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>this-&gt;WriteLumiRangeCollection(writer);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>we<sp/>could<sp/>close<sp/>the<sp/>elements<sp/>NamedLumiRange<sp/>and<sp/>LumiRangeCollection<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>*<sp/>function<sp/>xmlTextWriterEndElement,<sp/>but<sp/>since<sp/>we<sp/>do<sp/>not<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>*<sp/>write<sp/>any<sp/>other<sp/>elements,<sp/>we<sp/>simply<sp/>call<sp/>xmlTextWriterEndDocument,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*<sp/>which<sp/>will<sp/>do<sp/>all<sp/>the<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndDocument(writer);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterEndDocument&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>xmlFreeTextWriter(writer);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//xmlSaveFileEnc(m_dataCardName.Data(),<sp/>doc,<sp/>MY_ENCODING);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>xmlSaveFormatFile(m_dataCardName.Data(),<sp/>doc,<sp/>1);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>xmlFreeDoc(doc);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsList<sp/>stored<sp/>as<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_dataCardName<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TString&gt;&amp;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="dc/de4/classRoot_1_1TGoodRunsListWriter_1abb65ebb6d7a27a0fe924df5cd170ee13" kindref="member">Root::TGoodRunsListWriter::GetXMLStrings</ref>()</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>m_xmlstringVec.clear();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_grlvec.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsList<sp/>is<sp/>empty<sp/>-<sp/>nothing<sp/>to<sp/>write.<sp/>Return<sp/>false.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstringVec;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>individual<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>m_individuals=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>Root::TGoodRunsList<sp/>&gt;::const_iterator<sp/>litr<sp/>=<sp/>m_grlvec.begin();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>litr!=m_grlvec.end();<sp/>++litr,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>m_grl<sp/>=<sp/>(*litr);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>xml<sp/>string<sp/>for<sp/>this<sp/>goodrunslist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>m_xmlstringVec.push_back(<sp/>this-&gt;GetXMLString()<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>back<sp/>to<sp/>original<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>m_individuals=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstringVec;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString&amp;<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal">Root::TGoodRunsListWriter::GetXMLString()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>m_xmlstring=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_grlvec.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsList<sp/>is<sp/>empty<sp/>-<sp/>nothing<sp/>to<sp/>write.<sp/>Return<sp/>false.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstring;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>xmlTextWriterPtr<sp/>writer;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>xmlBufferPtr<sp/>buf;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>XML<sp/>buffer,<sp/>to<sp/>which<sp/>the<sp/>XML<sp/>document<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/>*<sp/>written<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>buf<sp/>=<sp/>xmlBufferCreate();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterMemory:<sp/>Error<sp/>creating<sp/>the<sp/>xml<sp/>buffer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstring;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>new<sp/>XmlWriter<sp/>for<sp/>memory,<sp/>with<sp/>no<sp/>compression.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Remark:<sp/>there<sp/>is<sp/>no<sp/>compression<sp/>for<sp/>this<sp/>kind<sp/>of<sp/>xmlTextWriter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>writer<sp/>=<sp/>xmlNewTextWriterMemory(buf,<sp/>0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(writer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterMemory:<sp/>Error<sp/>creating<sp/>the<sp/>xml<sp/>writer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstring;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>out<sp/>goodrunslist<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>this-&gt;WriteLumiRangeCollection(writer);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>we<sp/>could<sp/>close<sp/>the<sp/>elements<sp/>ORDER<sp/>and<sp/>EXAMPLE<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/>*<sp/>function<sp/>xmlTextWriterEndElement,<sp/>but<sp/>since<sp/>we<sp/>do<sp/>not<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*<sp/>write<sp/>any<sp/>other<sp/>elements,<sp/>we<sp/>simply<sp/>call<sp/>xmlTextWriterEndDocument,</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*<sp/>which<sp/>will<sp/>do<sp/>all<sp/>the<sp/>work.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndDocument(writer);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterMemory:<sp/>Error<sp/>at<sp/>xmlTextWriterEndDocument&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstring;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>xmlFreeTextWriter(writer);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>m_xmlstring<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>buf-&gt;content;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>xmlBufferFree(buf);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_xmlstring;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal">Root::TGoodRunsListWriter::WriteLumiRangeCollection(xmlTextWriterPtr<sp/>writer)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>xmlChar<sp/>*tmp;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>the<sp/>document<sp/>with<sp/>the<sp/>xml<sp/>default<sp/>for<sp/>the<sp/>version,</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/>*<sp/>default<sp/>encoding,<sp/>and<sp/>the<sp/>default<sp/>for<sp/>the<sp/>standalone<sp/>declaration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterStartDocument(writer,<sp/>NULL,<sp/>NULL</highlight><highlight class="comment">/*MY_ENCODING*/</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterStartDocument&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>DTD<sp/>section<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>xmlTextWriterWriteDTD(writer,<sp/>(xmlChar<sp/>*)</highlight><highlight class="stringliteral">&quot;LumiRangeCollection&quot;</highlight><highlight class="normal">,<sp/>NULL,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(xmlChar<sp/>*)</highlight><highlight class="stringliteral">&quot;http://atlas-runquery.cern.ch/LumiRangeCollection.dtd&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>a<sp/>comment<sp/>as<sp/>child<sp/>of<sp/>LumiRangeCollection.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Please<sp/>observe,<sp/>that<sp/>the<sp/>input<sp/>to<sp/>the<sp/>xmlTextWriter<sp/>functions</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/>*<sp/>HAS<sp/>to<sp/>be<sp/>in<sp/>UTF-8,<sp/>even<sp/>if<sp/>the<sp/>output<sp/>XML<sp/>is<sp/>encoded</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/>*<sp/>in<sp/>iso-8859-1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>ConvertInput(</highlight><highlight class="stringliteral">&quot;This<sp/>document<sp/>is<sp/>created<sp/>by<sp/>GoodRunsListWriter.&quot;</highlight><highlight class="normal">,<sp/>MY_ENCODING);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterWriteComment(writer,<sp/>tmp);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterWriteComment&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>!=<sp/>NULL)<sp/>xmlFree(tmp);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>an<sp/>element<sp/>named<sp/>&quot;LumiRangeCollection&quot;.<sp/>Since<sp/>thist<sp/>is<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/>*<sp/>element,<sp/>this<sp/>will<sp/>be<sp/>the<sp/>root<sp/>element<sp/>of<sp/>the<sp/>document.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterStartElement(writer,<sp/>BAD_CAST<sp/></highlight><highlight class="stringliteral">&quot;LumiRangeCollection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterStartElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>actual<sp/>goodrunslist<sp/>here.<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Use<sp/>m_grl<sp/>as<sp/>global<sp/>grl<sp/>currently<sp/>processed<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_individuals)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_grl<sp/>has<sp/>already<sp/>been<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;WriteNamedLumiRange(writer);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_grl<sp/>is<sp/>set<sp/>here<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_mergegrls)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>Root::TGoodRunsList<sp/>&gt;::const_iterator<sp/>litr<sp/>=<sp/>m_grlvec.begin();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>litr!=m_grlvec.end();<sp/>++litr)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_grl<sp/>=<sp/>(*litr);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;WriteNamedLumiRange(writer);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_grl<sp/>=<sp/>this-&gt;GetMergedGoodRunsList();<sp/></highlight><highlight class="comment">//<sp/>OR<sp/>merging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;WriteNamedLumiRange(writer);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>the<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndElement(writer);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterEndElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="317"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal">Root::TGoodRunsListWriter::WriteNamedLumiRange(xmlTextWriterPtr<sp/>writer)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dataCardName.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dataCardName<sp/>=<sp/>m_prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;merged_&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_grl.GetSuggestedName()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.xml&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>an<sp/>element<sp/>named<sp/>&quot;NamedLumiRange&quot;<sp/>as<sp/>child<sp/>of<sp/>LumiRangeCollection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterStartElement(writer,<sp/>BAD_CAST<sp/></highlight><highlight class="stringliteral">&quot;NamedLumiRange&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterStartElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compress<sp/>grl<sp/>before<sp/>writing<sp/>to<sp/>file<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>m_grl.Compress();<sp/></highlight><highlight class="comment">//<sp/>safe<sp/>space,<sp/>remove<sp/>duplicates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>element<sp/>named<sp/>&quot;NAME&quot;<sp/>as<sp/>child<sp/>of<sp/>NamedLumiRange.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">,m_grl.GetName());</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>element<sp/>named<sp/>&quot;VERSION&quot;<sp/>as<sp/>child<sp/>of<sp/>NamedLumiRange.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_grl.GetVersion().Length()&gt;0)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;Version&quot;</highlight><highlight class="normal">,m_grl.GetVersion().Data());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;Version&gt;<sp/>written<sp/>to<sp/>xml<sp/>file<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_dataCardName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>Metadata<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_grl.GetMetaData().empty())<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>mitr<sp/>=<sp/>m_grl.GetMetaData().begin();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mitr!=m_grl.GetMetaData().end();<sp/>++mitr)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;Metadata&quot;</highlight><highlight class="normal">,mitr-&gt;second.Data(),</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">,mitr-&gt;first.Data());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;Metadata&gt;<sp/>written<sp/>to<sp/>xml<sp/>file<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_dataCardName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/>}<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>loop<sp/>over<sp/>goodruns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>gitr<sp/>=<sp/>m_grl.begin();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>gitr!=m_grl.end();<sp/>++gitr)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;WriteLumiBlockCollection(writer,gitr-&gt;second);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>the<sp/>element<sp/>named<sp/>NamedLumiRange.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndElement(writer);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterEndElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="384"><highlight class="normal">Root::TGoodRunsListWriter::WriteLumiBlockCollection(xmlTextWriterPtr<sp/>writer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref>&amp;<sp/>goodrun)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>an<sp/>element<sp/>named<sp/>&quot;NamedLumiRange&quot;<sp/>as<sp/>child<sp/>of<sp/>LumiRangeCollection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterStartElement(writer,<sp/>BAD_CAST<sp/></highlight><highlight class="stringliteral">&quot;LumiBlockCollection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterStartElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!goodrun.IsEmpty())<sp/>{<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Runnumber<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;Run&quot;</highlight><highlight class="normal">,Form(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,goodrun.GetRunNumber()));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>an<sp/>element<sp/>named<sp/>&quot;LBRange&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TLumiBlockRange&gt;::const_iterator<sp/>litr<sp/>=<sp/>goodrun.begin();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>litr!=goodrun.end();<sp/>++litr)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!litr-&gt;IsEmpty())<sp/>{<sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(litr-&gt;End()!=2147483647)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;LBRange&quot;</highlight><highlight class="normal">,0,</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">,Form(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,litr-&gt;Begin()),</highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">,Form(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,litr-&gt;End()));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;WriteElement(writer,</highlight><highlight class="stringliteral">&quot;LBRange&quot;</highlight><highlight class="normal">,0,</highlight><highlight class="stringliteral">&quot;Start&quot;</highlight><highlight class="normal">,Form(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,litr-&gt;Begin()));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>the<sp/>element<sp/>named<sp/>Metadata.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndElement(writer);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterEndElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="429"><highlight class="normal">Root::TGoodRunsListWriter::WriteElement(xmlTextWriterPtr<sp/>writer,<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,<sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>atr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>atr2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val2)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>an<sp/>element<sp/>named<sp/>&apos;name&apos;<sp/>as<sp/>child<sp/>of<sp/>previous<sp/>element.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterStartElement(writer,<sp/>BAD_CAST<sp/>(name));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterStartElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>an<sp/>attribute<sp/>&apos;atr1&apos;<sp/>and<sp/>value<sp/>&apos;val1&apos;<sp/>to<sp/>element.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atr1!=0)<sp/>&amp;&amp;<sp/>(val1!=0))<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterWriteAttribute(writer,<sp/>BAD_CAST<sp/>(atr1),<sp/>BAD_CAST<sp/>(val1));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterWriteAttribute&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>an<sp/>attribute<sp/>&apos;atr2&apos;<sp/>and<sp/>value<sp/>&apos;val2&apos;<sp/>to<sp/>element.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((atr2!=0)<sp/>&amp;&amp;<sp/>(val2!=0))<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterWriteAttribute(writer,<sp/>BAD_CAST<sp/>(atr2),<sp/>BAD_CAST<sp/>(val2));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterWriteAttribute&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>value<sp/>&apos;value&apos;<sp/>to<sp/>the<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((value!=0))<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterWriteString(writer,<sp/>BAD_CAST<sp/>(value));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterWriteString&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Close<sp/>the<sp/>element<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>rc<sp/>=<sp/>xmlTextWriterEndElement(writer);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testXmlwriterDoc:<sp/>Error<sp/>at<sp/>xmlTextWriterEndElement&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">xmlChar<sp/>*</highlight></codeline>
<codeline lineno="495"><highlight class="normal">Root::TGoodRunsListWriter::ConvertInput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*in,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*encoding)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>xmlChar*<sp/>out(0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NOLIBXML__</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_size;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>xmlCharEncodingHandlerPtr<sp/>handler;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>handler<sp/>=<sp/>xmlFindCharEncodingHandler(encoding);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!handler)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConvertInput:<sp/>no<sp/>encoding<sp/>handler<sp/>found<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(encoding<sp/>?<sp/>encoding<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>(int)<sp/>strlen(in)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>out_size<sp/>=<sp/>size<sp/>*<sp/>2<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>xmlMalloc((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>out_size);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>handler-&gt;input(out,<sp/>&amp;out_size,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xmlChar<sp/>*)<sp/>in,<sp/>&amp;temp);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>&lt;<sp/>0)<sp/>||<sp/>(temp<sp/>-<sp/>size<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConvertInput:<sp/>conversion<sp/>wasn&apos;t<sp/>successful.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConvertInput:<sp/>conversion<sp/>wasn&apos;t<sp/>successful.<sp/>Converted:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>temp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>octets.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xmlFree(out);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>xmlRealloc(out,<sp/>out_size<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[out_size]<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*null<sp/>terminating<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ConvertInput:<sp/>no<sp/>mem&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GoodRunsLists<sp/>package<sp/>compiled<sp/>without<sp/>libxml2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can<sp/>not<sp/>write<sp/>out<sp/>GoodRunsList&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsListWriter.cxx"/>
  </compounddef>
</doxygen>
