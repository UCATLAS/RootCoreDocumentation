<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/ded/ConstDataList_8h" kind="file">
    <compoundname>ConstDataList.h</compoundname>
    <includes refid="d1/d43/DataList_8h" local="yes">AthContainers/DataList.h</includes>
    <includes local="yes">SGTools/ClassID_traits.h</includes>
    <includes refid="db/d38/ConstDataList_8icc" local="yes">AthContainers/ConstDataList.icc</includes>
    <includedby refid="dc/da5/DataList__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DataList_test.cxx</includedby>
    <includedby refid="d4/de3/DVLDataBucket__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLDataBucket_test.cxx</includedby>
    <incdepgraph>
      <node id="32160">
        <label>list</label>
      </node>
      <node id="32257">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="32187" relation="include">
        </childnode>
        <childnode refid="32250" relation="include">
        </childnode>
        <childnode refid="32235" relation="include">
        </childnode>
        <childnode refid="32240" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
      </node>
      <node id="32214">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="32187">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="32246">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="32247" relation="include">
        </childnode>
        <childnode refid="32188" relation="include">
        </childnode>
        <childnode refid="32184" relation="include">
        </childnode>
        <childnode refid="32248" relation="include">
        </childnode>
      </node>
      <node id="32231">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="32177" relation="include">
        </childnode>
        <childnode refid="32178" relation="include">
        </childnode>
        <childnode refid="32184" relation="include">
        </childnode>
        <childnode refid="32162" relation="include">
        </childnode>
      </node>
      <node id="32233">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32169" relation="include">
        </childnode>
        <childnode refid="32194" relation="include">
        </childnode>
      </node>
      <node id="32232">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="32183">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="32162">
        <label>functional</label>
      </node>
      <node id="32241">
        <label>boost/version.hpp</label>
      </node>
      <node id="32181">
        <label>limits</label>
      </node>
      <node id="32169">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="32212">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="32165">
        <label>iterator</label>
      </node>
      <node id="32195">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="32182" relation="include">
        </childnode>
        <childnode refid="32196" relation="include">
        </childnode>
      </node>
      <node id="32262">
        <label>SGTools/ClassID_traits.h</label>
      </node>
      <node id="32171">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="32173">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="32174" relation="include">
        </childnode>
        <childnode refid="32185" relation="include">
        </childnode>
        <childnode refid="32186" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32182" relation="include">
        </childnode>
      </node>
      <node id="32197">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
      </node>
      <node id="32200">
        <label>stdint.h</label>
      </node>
      <node id="32250">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="32181" relation="include">
        </childnode>
        <childnode refid="32251" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
      </node>
      <node id="32234">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="32219">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
      </node>
      <node id="32203">
        <label>RVersion.h</label>
      </node>
      <node id="32176">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="32177" relation="include">
        </childnode>
        <childnode refid="32184" relation="include">
        </childnode>
        <childnode refid="32162" relation="include">
        </childnode>
      </node>
      <node id="32180">
        <label>cmath</label>
      </node>
      <node id="32238">
        <label>cassert</label>
      </node>
      <node id="32242">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="32166">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="32186">
        <label>stdexcept</label>
      </node>
      <node id="32215">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="32259">
        <label>AthContainers/DataList.icc</label>
        <link refid="d5/ddf/DataList_8icc"/>
        <childnode refid="32260" relation="include">
        </childnode>
        <childnode refid="32239" relation="include">
        </childnode>
        <childnode refid="32181" relation="include">
        </childnode>
        <childnode refid="32261" relation="include">
        </childnode>
      </node>
      <node id="32244">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="32168">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="32182">
        <label>string</label>
      </node>
      <node id="32192">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="32174" relation="include">
        </childnode>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32195" relation="include">
        </childnode>
        <childnode refid="32197" relation="include">
        </childnode>
        <childnode refid="32199" relation="include">
        </childnode>
        <childnode refid="32205" relation="include">
        </childnode>
        <childnode refid="32206" relation="include">
        </childnode>
        <childnode refid="32207" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32178" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
        <childnode refid="32208" relation="include">
        </childnode>
        <childnode refid="32209" relation="include">
        </childnode>
        <childnode refid="32210" relation="include">
        </childnode>
        <childnode refid="32216" relation="include">
        </childnode>
      </node>
      <node id="32218">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
      </node>
      <node id="32208">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="32159">
        <label>AthContainers/DataList.h</label>
        <link refid="d1/d43/DataList_8h"/>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32162" relation="include">
        </childnode>
        <childnode refid="32163" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32166" relation="include">
        </childnode>
        <childnode refid="32167" relation="include">
        </childnode>
        <childnode refid="32168" relation="include">
        </childnode>
        <childnode refid="32169" relation="include">
        </childnode>
        <childnode refid="32170" relation="include">
        </childnode>
        <childnode refid="32171" relation="include">
        </childnode>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32173" relation="include">
        </childnode>
        <childnode refid="32187" relation="include">
        </childnode>
        <childnode refid="32188" relation="include">
        </childnode>
        <childnode refid="32246" relation="include">
        </childnode>
        <childnode refid="32250" relation="include">
        </childnode>
        <childnode refid="32252" relation="include">
        </childnode>
        <childnode refid="32255" relation="include">
        </childnode>
        <childnode refid="32256" relation="include">
        </childnode>
        <childnode refid="32253" relation="include">
        </childnode>
        <childnode refid="32258" relation="include">
        </childnode>
        <childnode refid="32202" relation="include">
        </childnode>
        <childnode refid="32259" relation="include">
        </childnode>
      </node>
      <node id="32252">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32250" relation="include">
        </childnode>
        <childnode refid="32253" relation="include">
        </childnode>
        <childnode refid="32168" relation="include">
        </childnode>
        <childnode refid="32241" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
      </node>
      <node id="32247">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="32248">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="32249" relation="include">
        </childnode>
      </node>
      <node id="32249">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="32204">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="32228">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="32256">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="32252" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32257" relation="include">
        </childnode>
      </node>
      <node id="32209">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="32225">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="32253">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32202" relation="include">
        </childnode>
        <childnode refid="32184" relation="include">
        </childnode>
        <childnode refid="32254" relation="include">
        </childnode>
      </node>
      <node id="32236">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="32202">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="32203" relation="include">
        </childnode>
        <childnode refid="32204" relation="include">
        </childnode>
      </node>
      <node id="32206">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="32213">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="32251">
        <label>limits.h</label>
      </node>
      <node id="32189">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="32190" relation="include">
        </childnode>
      </node>
      <node id="32223">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="32195" relation="include">
        </childnode>
        <childnode refid="32181" relation="include">
        </childnode>
        <childnode refid="32200" relation="include">
        </childnode>
        <childnode refid="32224" relation="include">
        </childnode>
      </node>
      <node id="32174">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32176" relation="include">
        </childnode>
      </node>
      <node id="32177">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32178" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
        <childnode refid="32180" relation="include">
        </childnode>
        <childnode refid="32181" relation="include">
        </childnode>
        <childnode refid="32182" relation="include">
        </childnode>
        <childnode refid="32183" relation="include">
        </childnode>
      </node>
      <node id="32239">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="32238" relation="include">
        </childnode>
      </node>
      <node id="32254">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="32250" relation="include">
        </childnode>
        <childnode refid="32239" relation="include">
        </childnode>
      </node>
      <node id="32161">
        <label>typeinfo</label>
      </node>
      <node id="32237">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="32208" relation="include">
        </childnode>
        <childnode refid="32238" relation="include">
        </childnode>
      </node>
      <node id="32224">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="32205">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="32201">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="32200" relation="include">
        </childnode>
      </node>
      <node id="32196">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="32227">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="32188">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
        <childnode refid="32191" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32183" relation="include">
        </childnode>
        <childnode refid="32244" relation="include">
        </childnode>
        <childnode refid="32226" relation="include">
        </childnode>
        <childnode refid="32245" relation="include">
        </childnode>
      </node>
      <node id="32194">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="32217">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="32174" relation="include">
        </childnode>
        <childnode refid="32218" relation="include">
        </childnode>
        <childnode refid="32219" relation="include">
        </childnode>
        <childnode refid="32220" relation="include">
        </childnode>
        <childnode refid="32229" relation="include">
        </childnode>
        <childnode refid="32210" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32231" relation="include">
        </childnode>
        <childnode refid="32232" relation="include">
        </childnode>
      </node>
      <node id="32198">
        <label>vector</label>
      </node>
      <node id="32260">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
      </node>
      <node id="32261">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="32178">
        <label>utility</label>
      </node>
      <node id="32170">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="32207">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="32243">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="32211">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="32221">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="32210">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="32211" relation="include">
        </childnode>
        <childnode refid="32212" relation="include">
        </childnode>
        <childnode refid="32213" relation="include">
        </childnode>
        <childnode refid="32214" relation="include">
        </childnode>
        <childnode refid="32215" relation="include">
        </childnode>
      </node>
      <node id="32179">
        <label>cstdlib</label>
      </node>
      <node id="32185">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="32163">
        <label>iostream</label>
      </node>
      <node id="32193">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="32174" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32194" relation="include">
        </childnode>
      </node>
      <node id="32175">
        <label>cstddef</label>
      </node>
      <node id="32216">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="32217" relation="include">
        </childnode>
        <childnode refid="32233" relation="include">
        </childnode>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32208" relation="include">
        </childnode>
        <childnode refid="32209" relation="include">
        </childnode>
      </node>
      <node id="32245">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32238" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
        <childnode refid="32169" relation="include">
        </childnode>
      </node>
      <node id="32220">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="32218" relation="include">
        </childnode>
        <childnode refid="32221" relation="include">
        </childnode>
        <childnode refid="32197" relation="include">
        </childnode>
        <childnode refid="32222" relation="include">
        </childnode>
        <childnode refid="32207" relation="include">
        </childnode>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32200" relation="include">
        </childnode>
        <childnode refid="32226" relation="include">
        </childnode>
        <childnode refid="32227" relation="include">
        </childnode>
        <childnode refid="32228" relation="include">
        </childnode>
      </node>
      <node id="32226">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="32191">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="32192" relation="include">
        </childnode>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32234" relation="include">
        </childnode>
        <childnode refid="32235" relation="include">
        </childnode>
        <childnode refid="32217" relation="include">
        </childnode>
        <childnode refid="32173" relation="include">
        </childnode>
        <childnode refid="32239" relation="include">
        </childnode>
        <childnode refid="32233" relation="include">
        </childnode>
        <childnode refid="32240" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32243" relation="include">
        </childnode>
      </node>
      <node id="32230">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="32222">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="32221" relation="include">
        </childnode>
        <childnode refid="32223" relation="include">
        </childnode>
        <childnode refid="32207" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32225" relation="include">
        </childnode>
      </node>
      <node id="32164">
        <label>algorithm</label>
      </node>
      <node id="32258">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="32158">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h</label>
        <link refid="ConstDataList.h"/>
        <childnode refid="32159" relation="include">
        </childnode>
        <childnode refid="32262" relation="include">
        </childnode>
        <childnode refid="32263" relation="include">
        </childnode>
      </node>
      <node id="32235">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="32236" relation="include">
        </childnode>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32233" relation="include">
        </childnode>
        <childnode refid="32199" relation="include">
        </childnode>
        <childnode refid="32217" relation="include">
        </childnode>
        <childnode refid="32192" relation="include">
        </childnode>
        <childnode refid="32197" relation="include">
        </childnode>
        <childnode refid="32173" relation="include">
        </childnode>
        <childnode refid="32208" relation="include">
        </childnode>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32237" relation="include">
        </childnode>
      </node>
      <node id="32199">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="32200" relation="include">
        </childnode>
        <childnode refid="32182" relation="include">
        </childnode>
        <childnode refid="32201" relation="include">
        </childnode>
        <childnode refid="32202" relation="include">
        </childnode>
      </node>
      <node id="32255">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="32252" relation="include">
        </childnode>
        <childnode refid="32239" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
      </node>
      <node id="32172">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="32190">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="32184">
        <label>memory</label>
      </node>
      <node id="32167">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="32229">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="32219" relation="include">
        </childnode>
        <childnode refid="32220" relation="include">
        </childnode>
        <childnode refid="32230" relation="include">
        </childnode>
      </node>
      <node id="32240">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="32236" relation="include">
        </childnode>
        <childnode refid="32233" relation="include">
        </childnode>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32226" relation="include">
        </childnode>
        <childnode refid="32241" relation="include">
        </childnode>
        <childnode refid="32242" relation="include">
        </childnode>
        <childnode refid="32182" relation="include">
        </childnode>
      </node>
      <node id="32263">
        <label>AthContainers/ConstDataList.icc</label>
        <link refid="db/d38/ConstDataList_8icc"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32265">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/DVLDataBucket_test.cxx</label>
        <link refid="d4/de3/DVLDataBucket__test_8cxx"/>
      </node>
      <node id="32264">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h</label>
        <link refid="ConstDataList.h"/>
        <childnode refid="32265" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d3/d7c/classConstDataList" prot="public">ConstDataList</innerclass>
    <innerclass refid="dc/da5/structClassID__traits_3_01ConstDataList_3_01DL_01_4_01_4" prot="public">ClassID_traits&lt; ConstDataList&lt; DL &gt; &gt;</innerclass>
    <innerclass refid="de/d27/classSG_1_1DVLConstDataListBucket" prot="public">SG::DVLConstDataListBucket</innerclass>
    <innerclass refid="d7/dfa/structSG_1_1DataBucketTrait_3_01ConstDataList_3_01T_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; ConstDataList&lt; T &gt;, U &gt;</innerclass>
    <innerclass refid="da/d43/classSG_1_1BaseInfo_3_01ConstDataList_3_01T_01_4_01_4" prot="public">SG::BaseInfo&lt; ConstDataList&lt; T &gt; &gt;</innerclass>
    <innernamespace refid="dd/d59/namespaceSG">SG</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(ConstDataList&lt; T &gt; &amp;a, ConstDataList&lt; T &gt; &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>See <computeroutput><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member">DataList&lt;T, BASE&gt;::swap()</ref></computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h" line="649" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.icc" bodystart="740" bodyend="743"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> adapter that acts like it holds const pointers. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2011 <ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput> acts as a container of <computeroutput>T*</computeroutput>. This means, though, that one cannot put a <computeroutput>const T*</computeroutput> into a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput>. However, one sometimes wants to do that. <ref refid="d4/dc4/structA" kindref="compound">A</ref> typical case is that one retrieves a const <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> from StoreGate, filters the contents, and then stores them in a new <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. Recall that a const <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> will return <computeroutput>const T*</computeroutput>. So the pointers one gets from a const <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> cannot be inserted into another <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>. (The root cause of this is that we don&apos;t want to have to deal with distinct <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput> and <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref>&lt;const <ref refid="d1/def/classT" kindref="compound">T</ref>&gt;</computeroutput> types, and thus <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> [and StoreGate] don&apos;t have standard const semantics.)</para></simplesect>
To solve this, we introduce the template class <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref>&lt;DL&gt;</computeroutput>. The template argument should be a <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class or something that derives from one. (The reason the template argument is the <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput> class rather than the element type <computeroutput><ref refid="d1/def/classT" kindref="compound">T</ref></computeroutput> is to allow for types that derive from <computeroutput><ref refid="d9/dfb/classDataList" kindref="compound">DataList</ref></computeroutput>.) <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref>&lt;DL&gt;</computeroutput> derives from <computeroutput>DL</computeroutput>, but privately --- so it is a <computeroutput>DL</computeroutput>, but clients cannot use it as a <computeroutput>DL</computeroutput>. Instead, we provide only methods that retrieve const pointers. Further, the insertion methods will take const rather than non-const pointers.</para><para>There are two ways (short of casting) to convert a <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref>&lt;DL&gt;</computeroutput> to a <computeroutput>const DL</computeroutput>. The <computeroutput>asDataList</computeroutput> method will directly do this conversion. Also, if the object is recorded in StoreGate, it will automatically be made const, so a retrieval will get a <computeroutput>const DL</computeroutput>. <ref refid="d4/dc4/structA" kindref="compound">A</ref> <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput> should not convert to a non-const <computeroutput>DL</computeroutput>.</para><para>So, for example, filtering might look something like this:</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;</ref>*<sp/>v_in<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CHECK(<sp/>sg-&gt;retrieve<sp/>(v_in)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;T&gt;</ref><sp/>&gt;*<sp/>v_out<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;DataList&lt;T&gt;</ref><sp/>&gt;<sp/>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CHECK(<sp/>sg-&gt;record<sp/>(v_out,<sp/></highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/def/classT" kindref="compound">T</ref>*<sp/>t<sp/>:<sp/>*v_in)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter<sp/>(*it))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v_out-&gt;push_back<sp/>(*it);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>Note that if you are not recording the result in StoreGate, it may well be preferable to just use a <computeroutput>std::list&lt;const T*&gt;</computeroutput> rather than <computeroutput><ref refid="d3/d7c/classConstDataList" kindref="compound">ConstDataList</ref></computeroutput>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>This<sp/>file&apos;s<sp/>extension<sp/>implies<sp/>that<sp/>it&apos;s<sp/>C,<sp/>but<sp/>it&apos;s<sp/>really<sp/>-*-<sp/>C++<sp/>-*-.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>$Id:<sp/>ConstDataList.h<sp/>610620<sp/>2014-08-06<sp/>21:15:52Z<sp/>ssnyder<sp/>$</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight><highlight class="preprocessor">#ifndef<sp/>ATHCONTAINERS_CONSTDATALIST_H</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ATHCONTAINERS_CONSTDATALIST_H</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d43/DataList_8h" kindref="compound" tooltip="An STL list of pointers that by default owns its pointed-to elements.">AthContainers/DataList.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SGTools/ClassID_traits.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="71" refid="d3/d7c/classConstDataList" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>DL</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76" refid="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::size_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" kindref="member" tooltip="Basic types, forwarded from the base.">size_type</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::difference_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference_type;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::allocator_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_type;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::base_value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base_value_type;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::BaseContainer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseContainer;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::DVL_BASE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DVL_BASE;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_iterator;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_reverse_iterator<sp/><sp/><sp/>const_reverse_iterator;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_value_type;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::const_value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_pointer;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="d3/d7c/classConstDataList_1a2800438170494904c77ffedf0168a180" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a2800438170494904c77ffedf0168a180" kindref="member" tooltip="This needs to be forwarded from the base as well.">has_virtual</ref><sp/>=<sp/>DL::has_virtual;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="d3/d7c/classConstDataList_1af84acc7a30d354ac6bd80f1f65d1431e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy&lt;ConstDataList&gt;</ref><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="d3/d7c/classConstDataList_1a974b2c9af8f296c8ce652ed4760d6f35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">DataModel_detail::iterator&lt;ConstDataList&gt;</ref><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;</highlight></codeline>
<codeline lineno="107" refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::size;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::max_size;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::resize;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::empty;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::pop_front;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::pop_back;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::clear;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::sort;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::ownPolicy;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::reverse;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::remove_if;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::unique;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::testInsert;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::begin;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::end;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::rbegin;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::rend;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::front;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>DL::back;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1afb1e74a8172dcb25956590ce0eacb962" kindref="member" tooltip="Default constructor.">ConstDataList</ref>(<ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1afb1e74a8172dcb25956590ce0eacb962" kindref="member" tooltip="Default constructor.">ConstDataList</ref>(<ref refid="d3/d7c/classConstDataList_1a28ce8eda8aea0cec78c8cc4e08809c17" kindref="member" tooltip="Basic types, forwarded from the base.">size_type</ref><sp/>n,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" kindref="member" tooltip="this data object owns its elements">SG::OWN_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList_1afb1e74a8172dcb25956590ce0eacb962" kindref="member" tooltip="Default constructor.">ConstDataList</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" kindref="member" tooltip="describes the possible element ownership policies (see e.g. DataVector)">SG::OwnershipPolicy</ref><sp/>ownPolicy<sp/>=<sp/><ref refid="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" kindref="member" tooltip="this data object is a view, it does not own its elmts">SG::VIEW_ELEMENTS</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/><ref refid="d3/d7c/classConstDataList_1ad9251f196b1aebb16e047d7280b1823c" kindref="member" tooltip="Assignment operator.">operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1ac0c08c41c7ebc0b2c523523e85e7c3a2" kindref="member" tooltip="Assign from iterators.">assign</ref>(InputIterator<sp/>first,<sp/>InputIterator<sp/>last);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="214"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d3/d7c/classConstDataList_1acfdf1abac9c271dedf043a5921b09449" kindref="member" tooltip="Access the first element in the collection as an lvalue.">front</ref><sp/>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/><ref refid="d3/d7c/classConstDataList_1a32b3ec7e4346932f507bcd8a94bb7939" kindref="member" tooltip="Access the last element in the collection as an lvalue.">back</ref><sp/>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="242"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a1edb94e7a0cdb6c5be73eced7327537e" kindref="member" tooltip="Return an iterator pointing at the beginning of the collection.">begin</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" kindref="member" tooltip="Return an iterator pointing past the end of the collection.">end</ref>();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" kindref="member">reverse_iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a16dc5885f7ce298aa50957e33b33cb7f" kindref="member" tooltip="Return a reverse_iterator pointing past the end of the collection.">rbegin</ref>();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="d3/d7c/classConstDataList_1a028da3e06465b1480067d55a59cffdac" kindref="member">reverse_iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a69f1437665f9f391e66741f7e6e3df2f" kindref="member" tooltip="Return a reverse_iterator pointing at the beginning of the collection.">rend</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="296"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1aeea2c88b84cbd273e03fb618b50bca73" kindref="member" tooltip="Add an element at the beginning of the collection.">push_front</ref>(<ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref><sp/>pElem);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a998045e29b9246d5d4ee4b3576be63d0" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(<ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref><sp/>pElem);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a9fb7c36dbe43b9b18df9f0c01b72b710" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref><sp/>pElem);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a9fb7c36dbe43b9b18df9f0c01b72b710" kindref="member" tooltip="Add a new element to the collection.">insert</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/>InputIterator<sp/>first,<sp/>InputIterator<sp/>last);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="359"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1aabafc4d3f83f205d63dab57c10792fbe" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1aabafc4d3f83f205d63dab57c10792fbe" kindref="member" tooltip="Remove element at a given position.">erase</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="390"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a655f54075595ed86221b36b68a19d567" kindref="member" tooltip="Swap this collection with another.">swap</ref>(<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a12cfc85b3bf78b3e09b1c42646a722f1" kindref="member" tooltip="Swap the referents of two DataVector iterators.">iter_swap</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>a,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>b);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a492b529115f5d654c41943b178d3ae57" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a492b529115f5d654c41943b178d3ae57" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>l,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>i<sp/>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a492b529115f5d654c41943b178d3ae57" kindref="member" tooltip="Insert contents of another list.">splice</ref>(<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>position,<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>l,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>first,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>last<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref>&amp;<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1aae112b3acc86d27dfd222bd9ada73c67" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>l<sp/>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>COMPARE&gt;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1aae112b3acc86d27dfd222bd9ada73c67" kindref="member" tooltip="Merge sorted lists.">merge</ref>(<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>l,<sp/>COMPARE<sp/>predicate<sp/>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="502"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a439d1898975457653b5e0e07f83d8de9" kindref="member" tooltip="Swap one element out of the container.">swapElement</ref>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>pos,<sp/><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref><sp/>newElem,<sp/>reference<sp/>oldElem);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DL*<sp/><ref refid="d3/d7c/classConstDataList_1a5ecbdc336fe36cffafe71d3f54735901" kindref="member" tooltip="Return a pointer to this object, as a const DataList.">asDataList</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1ad8df5a10d717e6ed3e686581fb8f2bf6" kindref="member" tooltip="Reset indices / reorder aux data after elements have been permuted.">resortAux</ref><sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>beg,<sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/><ref refid="d3/d7c/classConstDataList_1a31ee3602aa3eef896962945b7c667b44" kindref="member" tooltip="Return an iterator pointing past the end of the collection.">end</ref>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="545"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a750bfd459a188b4a9ec969dc840d0af6" kindref="member" tooltip="List ordering relation.">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1ac38ddeff504d2d2581cbfa6ec3cfb8cf" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1ad92f2e272b4d06b801f66474b5e33c6a" kindref="member" tooltip="Based on operator&amp;lt;.">operator&lt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a9d17dec912b0e58ad3671df9f405bdb5" kindref="member" tooltip="Based on operator&amp;lt;.">operator&gt;= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1affdee6e680364931593625b26f90ab6b" kindref="member" tooltip="List equality comparison.">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList_1a4a7a9341453b16d3391a69eb51a22595" kindref="member" tooltip="Based on operator==.">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&amp;<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//========================================================================</highlight></codeline>
<codeline lineno="590"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">DataModel_detail::ElementProxy</ref>&lt;<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&gt;;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2_assignelement1&lt;ConstDataList&gt;();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assignElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,<sp/><ref refid="d3/d7c/classConstDataList_1afbd8897e570093eb839750370fb1c904" kindref="member">value_type</ref><sp/>newElem);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>assignBaseElement<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>pos,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::value_type<sp/>newElem);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>to_base_iterator<sp/>(<ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>it);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><ref refid="d5/d70/classDataModel__detail_1_1iterator" kindref="compound" tooltip="(Non-const) Iterator class for DataVector/DataList. ">iterator</ref><sp/>to_my_iterator<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DL::iterator<sp/>it);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><ref refid="d7/d05/classDataModel__detail_1_1ElementProxy" kindref="compound" tooltip="Proxy for lvalue access to DataVector/DataList elements.">ElementProxy</ref><sp/>to_element_proxy<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseContainer::iterator<sp/>i);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/ded/ConstDataList_8h_1a67766f262856f1e197e15fec33b60bac" kindref="member" tooltip="See DataList&amp;lt;T, BASE&amp;gt;::swap().">swap</ref>(<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;T&gt;</ref>&amp;<sp/>a,<sp/><ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;T&gt;</ref>&amp;<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>DL&gt;</highlight></codeline>
<codeline lineno="657" refid="dc/da5/structClassID__traits_3_01ConstDataList_3_01DL_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&lt;DL&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d0/dbd/structClassID__traits" kindref="compound">ClassID_traits</ref>&lt;DL&gt;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>BOOST_STATIC_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>s_isConst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">SG<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="678" refid="de/d27/classSG_1_1DVLConstDataListBucket" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="de/d27/classSG_1_1DVLConstDataListBucket" kindref="compound" tooltip="DataBucket class for ConstDataList.">DVLConstDataListBucket</ref></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d6/d33/classSG_1_1DVLDataBucket" kindref="compound" tooltip="A DataBucket specialized for DataVector/DataList. ">DVLDataBucket</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="de/d27/classSG_1_1DVLConstDataListBucket_1ae4d429531ca009debda525e149322470" kindref="member" tooltip="Constructor from a payload object.">DVLConstDataListBucket</ref><sp/>(<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;T&gt;</ref>*<sp/>data);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>&gt;<sp/>201100</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="de/d27/classSG_1_1DVLConstDataListBucket_1ae4d429531ca009debda525e149322470" kindref="member" tooltip="Constructor from a payload object.">DVLConstDataListBucket</ref><sp/>(std::unique_ptr&lt;<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList&lt;T&gt;</ref><sp/>&gt;<sp/>data);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="707" refid="d7/dfa/structSG_1_1DataBucketTrait_3_01ConstDataList_3_01T_01_4_00_01U_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DataBucketTrait&lt;<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;,<sp/>U&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="de/d27/classSG_1_1DVLConstDataListBucket" kindref="compound" tooltip="DataBucket class for ConstDataList.">SG::DVLConstDataListBucket&lt;T&gt;</ref><sp/><ref refid="de/d27/classSG_1_1DVLConstDataListBucket" kindref="compound" tooltip="DataBucket class for ConstDataList.">type</ref>;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init()<sp/>{<sp/><ref refid="d9/dfb/classDataList" kindref="compound" tooltip="Derived DataList&amp;lt;T&amp;gt;.">DataList&lt;T&gt;::dvlinfo</ref>();<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="719" refid="da/d43/classSG_1_1BaseInfo_3_01ConstDataList_3_01T_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BaseInfo&lt;<ref refid="d3/d7c/classConstDataList" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">ConstDataList</ref>&lt;<ref refid="d1/def/classT" kindref="compound">T</ref>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>BaseInfo&lt;T&gt;</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>SG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d38/ConstDataList_8icc" kindref="compound" tooltip="DataList adapter that acts like it holds const pointers.">AthContainers/ConstDataList.icc</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>ATHCONTAINERS_CONSTDATALIST_H</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/ConstDataList.h"/>
  </compounddef>
</doxygen>
