<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="db/df2/GeoPrimitivesHelpers_8h" kind="file">
    <compoundname>GeoPrimitivesHelpers.h</compoundname>
    <includes refid="d7/d87/GeoPrimitives_8h" local="yes">GeoPrimitives/GeoPrimitives.h</includes>
    <includes refid="db/d81/GeoPrimitivesCompare_8h" local="yes">GeoPrimitives/GeoPrimitivesCompare.h</includes>
    <includes refid="dc/dfa/sincos_8h" local="yes">CxxUtils/sincos.h</includes>
    <includes local="yes">cmath</includes>
    <includes local="no">vector</includes>
    <includes local="no">set</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="134342">
        <label>Eigen/Geometry</label>
      </node>
      <node id="134345">
        <label>cmath</label>
      </node>
      <node id="134344">
        <label>CxxUtils/sincos.h</label>
        <link refid="dc/dfa/sincos_8h"/>
        <childnode refid="134345" relation="include">
        </childnode>
      </node>
      <node id="134339">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h</label>
        <link refid="GeoPrimitivesHelpers.h"/>
        <childnode refid="134340" relation="include">
        </childnode>
        <childnode refid="134343" relation="include">
        </childnode>
        <childnode refid="134344" relation="include">
        </childnode>
        <childnode refid="134345" relation="include">
        </childnode>
        <childnode refid="134346" relation="include">
        </childnode>
        <childnode refid="134347" relation="include">
        </childnode>
        <childnode refid="134348" relation="include">
        </childnode>
      </node>
      <node id="134343">
        <label>GeoPrimitives/GeoPrimitivesCompare.h</label>
        <link refid="db/d81/GeoPrimitivesCompare_8h_source"/>
        <childnode refid="134340" relation="include">
        </childnode>
      </node>
      <node id="134341">
        <label>unistd.h</label>
      </node>
      <node id="134346">
        <label>vector</label>
      </node>
      <node id="134340">
        <label>GeoPrimitives/GeoPrimitives.h</label>
        <link refid="d7/d87/GeoPrimitives_8h_source"/>
        <childnode refid="134341" relation="include">
        </childnode>
        <childnode refid="134342" relation="include">
        </childnode>
      </node>
      <node id="134348">
        <label>iostream</label>
      </node>
      <node id="134347">
        <label>set</label>
      </node>
    </incdepgraph>
    <innernamespace refid="da/d8a/namespaceAmg">Amg</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>GeoPrimitivesHelpers.h,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GEOPRIMITIVES_GEOPRIMITIVESHELPERS_H</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GEOPRIMITIVES_GEOPRIMITIVESHELPERS_H</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GeoPrimitives/GeoPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GeoPrimitives/GeoPrimitivesCompare.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dc/dfa/sincos_8h" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils/sincos.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cmath&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Amg<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;Amg::Vector3D,<sp/>Vector3DComparer&gt;<sp/>SetVector3D;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;<sp/>std::vector&lt;<sp/>Amg::Vector3D&gt;,<sp/>VectorVector3DComparer&gt;<sp/>SetVectorVector3D;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" kindref="member">angle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dp<sp/>=<sp/>v1.dot(v2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>dp<sp/>/=<sp/>v1.mag()<sp/>*<sp/>v2.mag();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dp<sp/>&lt;<sp/>-1)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dp<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acos(dp);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="da/d8a/namespaceAmg_1aa0f4029ecd7272b77a312afecafde6cd" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1aa0f4029ecd7272b77a312afecafde6cd" kindref="member">distance2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>p2.x()-p1.x(),<sp/>dy<sp/>=<sp/>p2.y()-p1.y(),<sp/>dz<sp/>=<sp/>p2.z()-p1.z();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dx*dx<sp/>+<sp/>dy*dy<sp/>+<sp/>dz*dz;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="da/d8a/namespaceAmg_1abdeeee38def6888fed4ea2c380f01e8d" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1abdeeee38def6888fed4ea2c380f01e8d" kindref="member">distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<sp/><ref refid="da/d8a/namespaceAmg_1aa0f4029ecd7272b77a312afecafde6cd" kindref="member">distance2</ref>(p1,<sp/>p2)<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="da/d8a/namespaceAmg_1ad8c15db71f45500e7c19c2e48c02ad0b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setPhi(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy<sp/>=<sp/>v.perp();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils::sincos</ref><sp/>sc(phi);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>xy<sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>v[1]<sp/>=<sp/>xy<sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="da/d8a/namespaceAmg_1ae28ddd4619b52add45fbf403208bd17b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1ae28ddd4619b52add45fbf403208bd17b" kindref="member">setThetaPhi</ref>(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mag<sp/>=<sp/>v.mag();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils::sincos</ref><sp/>sc(phi);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils::sincos</ref><sp/>sct(theta);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>mag<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref><sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>v[1]<sp/>=<sp/>mag<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref><sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>v[2]<sp/>=<sp/>mag<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="da/d8a/namespaceAmg_1a18cc37e2d149e42911c8d5412c25b89c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a18cc37e2d149e42911c8d5412c25b89c" kindref="member">setRThetaPhi</ref>(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils::sincos</ref><sp/>sc(phi);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d12/structCxxUtils_1_1sincos" kindref="compound" tooltip="Helper to simultaneously calculate sin and cos of the same angle.">CxxUtils::sincos</ref><sp/>sct(theta);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>v[0]<sp/>=<sp/>r<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref><sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>v[1]<sp/>=<sp/>r<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref><sp/>*<sp/>sc.<ref refid="d4/d12/structCxxUtils_1_1sincos_1af680c43742211b585dd51db1451354ec" kindref="member">sn</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>v[2]<sp/>=<sp/>r<sp/>*<sp/>sct.<ref refid="d4/d12/structCxxUtils_1_1sincos_1a6d73d707c724370867a33a2577ecb67a" kindref="member">cs</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="da/d8a/namespaceAmg_1ade79aae0f917021639486d7ab8317c53" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1ade79aae0f917021639486d7ab8317c53" kindref="member">setTheta</ref>(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ae28ddd4619b52add45fbf403208bd17b" kindref="member">setThetaPhi</ref>(v,<sp/>theta,<sp/>v.phi());</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="da/d8a/namespaceAmg_1aa1d4c3b1bfef39ab527d32f4d5daf947" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1aa1d4c3b1bfef39ab527d32f4d5daf947" kindref="member">setPerp</ref>(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>perp)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>v.perp();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>perp<sp/>/<sp/>p;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[0]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[1]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="da/d8a/namespaceAmg_1a7dd738de754bcaba44d797cfc4b559cc" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a7dd738de754bcaba44d797cfc4b559cc" kindref="member">setMag</ref>(Amg::Vector3D&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mag)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>v.mag();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>mag<sp/>/<sp/>p;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[0]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[1]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[2]<sp/>*=<sp/>scale;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaPhi(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dphi<sp/>=<sp/>v2.phi()<sp/>-<sp/>v1.phi();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dphi<sp/>&gt;<sp/>M_PI)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dphi<sp/>-=<sp/>M_PI*2;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dphi<sp/>&lt;=<sp/>-M_PI)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dphi<sp/>+=<sp/>M_PI*2;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dphi;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaR(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v2){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v1.eta()<sp/>-<sp/>v2.eta();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>deltaPhi(v1,v2);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(a*a<sp/>+<sp/>b*b);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="da/d8a/namespaceAmg_1a02d6e49c4573648ece7f9e5301bd0ac4" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a02d6e49c4573648ece7f9e5301bd0ac4" kindref="member">setVector3DCartesian</ref>(Amg::Vector3D&amp;<sp/>v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z1)<sp/>{<sp/>v1[0]<sp/>=<sp/>x1;<sp/>v1[1]<sp/>=<sp/>y1;<sp/>v1[2]<sp/>=<sp/>z1;<sp/>}</highlight></codeline>
<codeline lineno="140" refid="da/d8a/namespaceAmg_1a121bbe7974b91f503d488f0a943a0b46" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a121bbe7974b91f503d488f0a943a0b46" kindref="member">mag2Vector3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1.x()*v1.x()<sp/>+<sp/>v1.y()*v1.y()<sp/>+<sp/>v1.z()*v1.z();<sp/>}</highlight></codeline>
<codeline lineno="144" refid="da/d8a/namespaceAmg_1adabf55102c4101e7bc7beacb45f716f4" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1adabf55102c4101e7bc7beacb45f716f4" kindref="member">magVector3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="da/d8a/namespaceAmg_1a121bbe7974b91f503d488f0a943a0b46" kindref="member">mag2Vector3D</ref>(v1));<sp/>}</highlight></codeline>
<codeline lineno="148" refid="da/d8a/namespaceAmg_1a456b4536a15b0dff63a8c1b6583bf142" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a456b4536a15b0dff63a8c1b6583bf142" kindref="member">rVector3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Vector3D&amp;<sp/>v1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1adabf55102c4101e7bc7beacb45f716f4" kindref="member">magVector3D</ref>(v1);<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="da/d8a/namespaceAmg_1acf056cae7010a2fcb74fac91880c0f87" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Vector3D<sp/><ref refid="da/d8a/namespaceAmg_1acf056cae7010a2fcb74fac91880c0f87" kindref="member">transform</ref>(<sp/>Amg::Vector3D&amp;<sp/>v,<sp/>Amg::Transform3D&amp;<sp/>tr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Vector3D<sp/>vect;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx<sp/>=<sp/>v.x(),<sp/>vy<sp/>=<sp/>v.y(),<sp/>vz<sp/>=<sp/>v.z();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1a02d6e49c4573648ece7f9e5301bd0ac4" kindref="member">setVector3DCartesian</ref>(<sp/>vect,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr(0,0)*vx<sp/>+<sp/>tr(0,1)*vy<sp/>+<sp/>tr(0,2)*vz<sp/>+<sp/>tr(0,3),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr(1,0)*vx<sp/>+<sp/>tr(1,1)*vy<sp/>+<sp/>tr(1,2)*vz<sp/>+<sp/>tr(1,3),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr(2,0)*vx<sp/>+<sp/>tr(2,1)*vy<sp/>+<sp/>tr(2,2)*vz<sp/>+<sp/>tr(2,3));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vect;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>the<sp/>analogous<sp/>to<sp/>CLHEP<sp/>HepGeom::Transform3D<sp/>trans<sp/>(localRot,<sp/>theSurface.transform().translation());</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Transform3D<sp/>getTransformFromRotTransl(Amg::RotationMatrix3D<sp/>rot,<sp/>Amg::Vector3D<sp/>transl_vec<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Transform3D<sp/>trans<sp/>=<sp/>Amg::Transform3D::Identity();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>trans<sp/>=<sp/>trans<sp/>*<sp/>rot;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>trans.translation()<sp/>=<sp/>transl_vec;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trans;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>Replacing<sp/>the<sp/>CLHEP::HepRotation::getAngleAxis()<sp/>functionality</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>Note:</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>CLHEP<sp/>has<sp/>a<sp/>&apos;HepRotation::getAngleAxis()&apos;<sp/>function,<sp/>e.g.:</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>---</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>CLHEP::HepRotation<sp/>rotation<sp/><sp/><sp/>=<sp/>transform.getRotation();</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>CLHEP::Hep3Vector<sp/><sp/>rotationAxis;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/><sp/><sp/><sp/><sp/>rotationAngle;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>rotation.getAngleAxis(rotationAngle,rotationAxis);</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>---</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getAngleAxisFromRotation(Amg::RotationMatrix3D&amp;<sp/>rotation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>rotationAngle,<sp/>Amg::Vector3D&amp;<sp/>rotationAxis)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>rotationAngle<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx<sp/>=<sp/>rotation(0,0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yy<sp/>=<sp/>rotation(1,1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zz<sp/>=<sp/>rotation(2,2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosa<sp/><sp/>=<sp/>0.5<sp/>*<sp/>(xx<sp/>+<sp/>yy<sp/>+<sp/>zz<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosa1<sp/>=<sp/>1<sp/>-<sp/>cosa;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cosa1<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationAngle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationAxis<sp/><sp/>=<sp/>Amg::Vector3D(0,0,1);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x=0,<sp/>y=0,<sp/>z=0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&gt;<sp/>cosa)<sp/>x<sp/>=<sp/>sqrt((xx-cosa)/cosa1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yy<sp/>&gt;<sp/>cosa)<sp/>y<sp/>=<sp/>sqrt((yy-cosa)/cosa1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zz<sp/>&gt;<sp/>cosa)<sp/>z<sp/>=<sp/>sqrt((zz-cosa)/cosa1);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotation(2,1)<sp/>&lt;<sp/>rotation(1,2))<sp/>x<sp/>=<sp/>-x;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotation(0,2)<sp/>&lt;<sp/>rotation(2,0))<sp/>y<sp/>=<sp/>-y;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rotation(1,0)<sp/>&lt;<sp/>rotation(0,1))<sp/>z<sp/>=<sp/>-z;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationAngle<sp/>=<sp/>(cosa<sp/>&lt;<sp/>-1.)<sp/>?<sp/>acos(-1.)<sp/>:<sp/>acos(cosa);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotationAxis<sp/><sp/>=<sp/>Amg::Vector3D(x,y,z);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="da/d8a/namespaceAmg_1a285c616e33fcf3957df3fbc4b5c1e0d0" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Vector3D<sp/><ref refid="da/d8a/namespaceAmg_1a285c616e33fcf3957df3fbc4b5c1e0d0" kindref="member">getTranslationVectorFromTransform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Amg::Transform3D&amp;<sp/>tr)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Amg::Vector3D(tr(0,3),tr(1,3),tr(2,3));</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>check!<sp/>it&apos;s<sp/>perhaps<sp/>useless,<sp/>you<sp/>acn<sp/>use<sp/>the<sp/>transform.translation()<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="da/d8a/namespaceAmg_1ace6d4038ab7a8389cc2999339d024242" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Rotation3D<sp/><ref refid="da/d8a/namespaceAmg_1ace6d4038ab7a8389cc2999339d024242" kindref="member">getRotation3DfromAngleAxis</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" kindref="member">angle</ref>,<sp/>Amg::Vector3D&amp;<sp/>axis)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>AngleAxis3D<sp/>t;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>Eigen::AngleAxis&lt;double&gt;(angle,axis);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Rotation3D<sp/>rot;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="da/d8a/namespaceAmg_1a0042bf159392d5398787c110a9835718" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Transform3D<sp/><ref refid="da/d8a/namespaceAmg_1a0042bf159392d5398787c110a9835718" kindref="member">getRotateX3D</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" kindref="member">angle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Transform3D<sp/>transf;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::AngleAxis3D<sp/>angleaxis(angle,<sp/>Amg::Vector3D(1.,0.,0.));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>transf<sp/>=<sp/>angleaxis;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transf;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261" refid="da/d8a/namespaceAmg_1ad89955c172f4b566e6767aeed5d4d792" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Transform3D<sp/><ref refid="da/d8a/namespaceAmg_1ad89955c172f4b566e6767aeed5d4d792" kindref="member">getRotateY3D</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" kindref="member">angle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Transform3D<sp/>transf;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::AngleAxis3D<sp/>angleaxis(angle,<sp/>Amg::Vector3D(0.,1.,0.));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>transf<sp/>=<sp/>angleaxis;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transf;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270" refid="da/d8a/namespaceAmg_1ab48686d34bbba1b17c387e711d4e958f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Amg::Transform3D<sp/><ref refid="da/d8a/namespaceAmg_1ab48686d34bbba1b17c387e711d4e958f" kindref="member">getRotateZ3D</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" kindref="member">angle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::Transform3D<sp/>transf;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Amg::AngleAxis3D<sp/>angleaxis(angle,<sp/>Amg::Vector3D(0.,0.,1.));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>transf<sp/>=<sp/>angleaxis;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transf;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>Amg<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h"/>
  </compounddef>
</doxygen>
