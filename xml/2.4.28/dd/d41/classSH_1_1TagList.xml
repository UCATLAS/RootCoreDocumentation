<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d41/classSH_1_1TagList" kind="class" prot="public">
    <compoundname>SH::TagList</compoundname>
    <includes refid="d2/de6/TagList_8h" local="no">TagList.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="dd/d41/classSH_1_1TagList_1aa16c7f8cb84c143e7e30acebb52cdd14" prot="public" static="no">
        <type>std::set&lt; std::string &gt;::const_iterator</type>
        <definition>typedef std::set&lt;std::string&gt;::const_iterator SH::TagList::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>the iterator to use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="dd/d41/classSH_1_1TagList_1a2491d74e7804fc993e68025dae6a1d0a" prot="private" static="no">
        <type>std::set&lt; std::string &gt;::const_iterator</type>
        <definition>typedef std::set&lt;std::string&gt;::const_iterator SH::TagList::TagsIter</definition>
        <argsstring></argsstring>
        <name>TagsIter</name>
        <briefdescription>
<para>the iterator for m_tags </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="146" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/d41/classSH_1_1TagList_1a3f8558ef9f87fe7a962cbfae1f0996ad" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt;std::string&gt; SH::TagList::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
<para>the list of tags </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1ac27866c0a94328fa50f9b0aa60052309" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::TagList::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="43" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a38a1645ff0c690ab294cea5c4398e2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::TagList::TagList</definition>
        <argsstring>()</argsstring>
        <name>TagList</name>
        <briefdescription>
<para>standard default constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a9f4048fb91e0ed924cf90a76f9b6f680" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::TagList::TagList</definition>
        <argsstring>(const std::string &amp;tags, char separator= &apos;:&apos;)</argsstring>
        <name>TagList</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>char</type>
          <declname>separator</declname>
          <defval>&apos;:&apos;</defval>
        </param>
        <briefdescription>
<para>create a tag-list from a string </para>        </briefdescription>
        <detaileddescription>
<para>param tags the given list of tags param separator the character by which tags are separated in the list <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="65" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a77a0a14771c9e6ecec01721da072fb41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SH::TagList::has</definition>
        <argsstring>(const std::string &amp;tag) const </argsstring>
        <name>has</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>whether we have the given tag </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether we have the given tag </para></simplesect>
<simplesect kind="pre"><para>!tag.empty() </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a1d4270253cffcb1a18691fc2c08ffb28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d41/classSH_1_1TagList_1aa16c7f8cb84c143e7e30acebb52cdd14" kindref="member">iterator</ref></type>
        <definition>TagList::iterator SH::TagList::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>the begin iterator to use </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a8aaa8c0196b9d7ecc7a896ed0683581d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d41/classSH_1_1TagList_1aa16c7f8cb84c143e7e30acebb52cdd14" kindref="member">iterator</ref></type>
        <definition>TagList::iterator SH::TagList::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>the end iterator to use </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1affebece404460b7cda8bb23f75eba43a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::TagList::join</definition>
        <argsstring>(char separator= &apos;:&apos;) const </argsstring>
        <name>join</name>
        <param>
          <type>char</type>
          <declname>separator</declname>
          <defval>&apos;:&apos;</defval>
        </param>
        <briefdescription>
<para>join all the tags together into a string </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the joined tags </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>the separator to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 separator used within tag </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="121" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="113" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/classSH_1_1TagList_1a1ab19a382153e1edae2197813e1bdc61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::TagList::add</definition>
        <argsstring>(const std::string &amp;tag)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>add a tag to the list </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>the tag to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="132" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/Root/TagList.cxx" bodystart="133" bodyend="138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> class that manages a list of tags for identifying samples. </para>    </briefdescription>
    <detaileddescription>
<para>The idea is to use the marker to group samples according to their type. This is a bit of an old mechanism, and personally I prefer to rely on meta-data instead. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/TagList.h" bodystart="43" bodyend="147"/>
    <listofallmembers>
      <member refid="dd/d41/classSH_1_1TagList_1a1ab19a382153e1edae2197813e1bdc61" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>add</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a1d4270253cffcb1a18691fc2c08ffb28" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>begin</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a8aaa8c0196b9d7ecc7a896ed0683581d" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>end</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a77a0a14771c9e6ecec01721da072fb41" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>has</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1aa16c7f8cb84c143e7e30acebb52cdd14" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>iterator</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1affebece404460b7cda8bb23f75eba43a" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>join</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a3f8558ef9f87fe7a962cbfae1f0996ad" prot="private" virt="non-virtual"><scope>SH::TagList</scope><name>m_tags</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a38a1645ff0c690ab294cea5c4398e2c1" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>TagList</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a9f4048fb91e0ed924cf90a76f9b6f680" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>TagList</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1a2491d74e7804fc993e68025dae6a1d0a" prot="private" virt="non-virtual"><scope>SH::TagList</scope><name>TagsIter</name></member>
      <member refid="dd/d41/classSH_1_1TagList_1ac27866c0a94328fa50f9b0aa60052309" prot="public" virt="non-virtual"><scope>SH::TagList</scope><name>testInvariant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
