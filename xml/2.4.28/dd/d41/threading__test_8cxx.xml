<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d41/threading__test_8cxx" kind="file">
    <compoundname>threading_test.cxx</compoundname>
    <includes refid="d7/d22/threading_8h" local="yes">AthContainers/tools/threading.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includedby refid="da/d20/threading__nothreads__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_nothreads_test.cxx</includedby>
    <incdepgraph>
      <node id="74365">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="74363">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="74368">
        <label>cassert</label>
      </node>
      <node id="74366">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="74364">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="74362">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="74361">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="74362" relation="include">
        </childnode>
        <childnode refid="74363" relation="include">
        </childnode>
        <childnode refid="74364" relation="include">
        </childnode>
        <childnode refid="74365" relation="include">
        </childnode>
        <childnode refid="74366" relation="include">
        </childnode>
      </node>
      <node id="74367">
        <label>iostream</label>
      </node>
      <node id="74360">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx</label>
        <link refid="threading_test.cxx"/>
        <childnode refid="74361" relation="include">
        </childnode>
        <childnode refid="74367" relation="include">
        </childnode>
        <childnode refid="74368" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="74370">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_nothreads_test.cxx</label>
        <link refid="da/d20/threading__nothreads__test_8cxx"/>
      </node>
      <node id="74369">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx</label>
        <link refid="threading_test.cxx"/>
        <childnode refid="74370" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d3/d5f/classtest__mutex" prot="public">test_mutex</innerclass>
    <innerclass refid="d5/df3/structPayload" prot="public">Payload</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/d41/threading__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/threading__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" bodystart="47" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/threading__test_8cxx_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" bodystart="71" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/threading__test_8cxx_1a327d8cef466a7560ead5eb3995c0cbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test4</definition>
        <argsstring>()</argsstring>
        <name>test4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" bodystart="92" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="dd/d41/threading__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" line="111" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx" bodystart="110" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for threading. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Sep, 2013 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d22/threading_8h" kindref="compound" tooltip="Threading definitions.">AthContainers/tools/threading.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d9/d35/classAthContainers__detail_1_1strict__shared__lock" kindref="compound" tooltip="Lock object for taking out shared locks.">AthContainers_detail::strict_shared_lock</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">AthContainers_detail::upgrading_lock</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::upgrade_mutex;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::mutex;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::lock_guard;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::fence_acq_rel;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::fence_seq_cst;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>AthContainers_detail::thread_specific_ptr;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="d3/d5f/classtest__mutex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/d5f/classtest__mutex" kindref="compound">test_mutex</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock_shared()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lock_shared\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock_shared()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unlock_shared\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock_upgrade()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lock_upgrade\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock_upgrade()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unlock_upgrade\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lock\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unlock\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock_upgrade_and_lock()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unlock_upgrade_and_lock\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="d3/d5f/classtest__mutex" kindref="compound">test_mutex</ref><sp/>m;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="d9/d35/classAthContainers__detail_1_1strict__shared__lock" kindref="compound" tooltip="Lock object for taking out shared locks.">strict_shared_lock&lt;test_mutex&gt;</ref><sp/>lock<sp/>(m);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test2\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="d3/d5f/classtest__mutex" kindref="compound">test_mutex</ref><sp/>m;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">upgrading_lock&lt;test_mutex&gt;</ref><sp/>lock<sp/>(m);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">upgrading_lock&lt;test_mutex&gt;</ref><sp/>lock<sp/>(m);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">upgrading_lock&lt;test_mutex&gt;</ref><sp/>lock<sp/>(m);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>upgrade_mutex<sp/>mm;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="d4/ddc/classAthContainers__detail_1_1upgrading__lock" kindref="compound" tooltip="Lock object for taking out upgradable locks.">upgrading_lock&lt;upgrade_mutex&gt;</ref><sp/>lock<sp/>(mm);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>lock.upgrade();</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test3()</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>fence_acq_rel();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>fence_seq_cst();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>mutex<sp/>m;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>lock_guard&lt;mutex&gt;<sp/>g<sp/>(m);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>:<sp/>m_i(i)<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ctor<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>~<ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>()<sp/>{<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dtor<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_i;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test4()</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test4\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>thread_specific_ptr&lt;Payload&gt;<sp/>p;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>assert<sp/>(p.get()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>assert<sp/>(p.release()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>p.reset<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>(1));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>assert<sp/>(p.get()-&gt;m_i<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>assert<sp/>(p-&gt;m_i<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>assert<sp/>((*p).m_i<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>*<sp/>pp<sp/>=<sp/>p.release();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>assert<sp/>(pp-&gt;m_i<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>assert<sp/>(p.get()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>p.reset<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/df3/structPayload" kindref="compound">Payload</ref>(2));</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>test3();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>test4();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/threading_test.cxx"/>
  </compounddef>
</doxygen>
