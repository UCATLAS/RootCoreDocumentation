<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d21/UserDataStore_8cxx" kind="file">
    <compoundname>UserDataStore.cxx</compoundname>
    <includes refid="d3/d80/UserDataStore_8h" local="yes">AthContainers/UserDataStore.h</includes>
    <includes local="yes">AthenaKernel/getMessageSvc.h</includes>
    <incdepgraph>
      <node id="71792">
        <label>AthContainers/UserDataStore.h</label>
        <link refid="d3/d80/UserDataStore_8h_source"/>
        <childnode refid="71793" relation="include">
        </childnode>
        <childnode refid="71794" relation="include">
        </childnode>
        <childnode refid="71795" relation="include">
        </childnode>
        <childnode refid="71796" relation="include">
        </childnode>
        <childnode refid="71797" relation="include">
        </childnode>
        <childnode refid="71798" relation="include">
        </childnode>
        <childnode refid="71801" relation="include">
        </childnode>
        <childnode refid="71802" relation="include">
        </childnode>
      </node>
      <node id="71800">
        <label>stdint.h</label>
      </node>
      <node id="71791">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/UserDataStore.cxx</label>
        <link refid="UserDataStore.cxx"/>
        <childnode refid="71792" relation="include">
        </childnode>
        <childnode refid="71803" relation="include">
        </childnode>
      </node>
      <node id="71796">
        <label>string</label>
      </node>
      <node id="71797">
        <label>map</label>
      </node>
      <node id="71799">
        <label>SGTools/crc64.h</label>
      </node>
      <node id="71803">
        <label>AthenaKernel/getMessageSvc.h</label>
      </node>
      <node id="71802">
        <label>boost/any.hpp</label>
      </node>
      <node id="71794">
        <label>AthenaKernel/IAthenaBarCode.h</label>
      </node>
      <node id="71801">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="71795">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="71798">
        <label>AthContainers/tools/UDSLabelHashTable.h</label>
        <link refid="d7/d98/UDSLabelHashTable_8h_source"/>
        <childnode refid="71799" relation="include">
        </childnode>
        <childnode refid="71797" relation="include">
        </childnode>
        <childnode refid="71796" relation="include">
        </childnode>
        <childnode refid="71795" relation="include">
        </childnode>
        <childnode refid="71800" relation="include">
        </childnode>
      </node>
      <node id="71793">
        <label>GaudiKernel/StatusCode.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;AthContainers/UserDataStore.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AthenaKernel/getMessageSvc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="de/d35/classUserDataStore_1aa50dc180026a5c5cdcc11000b144501b" kindref="member" tooltip="Default constructor.">UserDataStore::UserDataStore</ref>()<sp/>:<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>m_data(),<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>m_lastIt(m_data.end()),<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>m_lastIt_nc(m_data.end()),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>m_eventABC(IAthenaBarCode::UNDEFINEDBARCODE),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>m_msg(Athena::getMessageSvc(),</highlight><highlight class="stringliteral">&quot;UserDataStore&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>m_whyNotFound(ALLGOOD)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">UserDataStore::const_iterator</highlight></codeline>
<codeline lineno="20"><highlight class="normal">UserDataStore::find(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>barcode,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>m_whyNotFound=ALLGOOD;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lastIt==m_data.end()<sp/>||<sp/>m_lastIt-&gt;first!=barcode)<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastIt=m_data.find(barcode);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lastIt==m_data.end())<sp/>{<sp/></highlight><highlight class="comment">//No<sp/>user<sp/>data<sp/>for<sp/>this<sp/>bar-code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_whyNotFound=BARCODE;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_notFoundIt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_t<sp/>idx=m_labelTable.hash(label);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>const_iterator<sp/>label_it=m_lastIt-&gt;second.find(idx);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label_it==m_lastIt-&gt;second.end())<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Did<sp/>not<sp/>find<sp/>label<sp/>&quot;<sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/>&quot;(hash=&quot;<sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>m_whyNotFound=LABEL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_notFoundIt;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>label_it;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="de/d35/classUserDataStore_1aea8fdf3d142596f12a28ce9937d0fd27" kindref="member" tooltip="Method to set the AthenaBarCode of this event (called by UserDataSvc).">UserDataStore::setEventABC</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>eventABC)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_eventABC==IAthenaBarCode::UNDEFINEDBARCODE)<sp/><sp/>m_eventABC=eventABC;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">StatusCode<sp/><ref refid="de/d35/classUserDataStore_1ae0d27103504b5cd13b98caac644ce284" kindref="member" tooltip="Record method with boost::any as payload.">UserDataStore::recordAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAthenaBarCode&amp;<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::any&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>barcode=obj.getAthenaBarCode();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(barcode==IAthenaBarCode::UNDEFINEDBARCODE)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>m_msg<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Attempt<sp/>to<sp/>record<sp/>UserData<sp/>for<sp/>an<sp/>object<sp/>with<sp/>undefined<sp/>AthenaBarCode.<sp/>Label=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index_t<sp/>idx=m_labelTable.addLabel(label);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx==UDSLabelHashTable::INVALID)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m_msg<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>convert<sp/>label<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>into<sp/>a<sp/>hash<sp/>value&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lastIt_nc==m_data.end()<sp/>||<sp/>m_lastIt_nc-&gt;first!=barcode)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_lastIt_nc=m_data.find(barcode);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_lastIt_nc==m_data.end())<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_lastIt_nc=m_data.insert(std::make_pair(barcode,m_defaultEntry)).first;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>(m_lastIt_nc-&gt;second)[idx]=value;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">StatusCode<sp/><ref refid="de/d35/classUserDataStore_1acc9d68c8802d9a08b9323633a8713b9a" kindref="member" tooltip="Retrieve method with boost::any as payload.">UserDataStore::retrieveAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAthenaBarCode&amp;<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::any*&amp;<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>barcode=obj.getAthenaBarCode();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it=this-&gt;find(barcode,label);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it==m_notFoundIt)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_whyNotFound==BARCODE)<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msg<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>user<sp/>data<sp/>found<sp/>for<sp/>bar<sp/>code<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>barcode<sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_whyNotFound==LABEL)<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msg<sp/>&lt;&lt;<sp/>MSG::ERROR<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>user<sp/>data<sp/>with<sp/>label<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>found<sp/>for<sp/>this<sp/>barcode&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endreq;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>value=&amp;(it-&gt;second);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d35/classUserDataStore_1ae91cf430ed8cae06915136ad11dbbee6" kindref="member" tooltip="Contains method for element decorations.">UserDataStore::contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IAthenaBarCode&amp;<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>barcode=obj.getAthenaBarCode();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/>const_iterator<sp/>it=this-&gt;find(barcode,label);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it!=m_notFoundIt);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">std::vector&lt;const<sp/>std::string*&gt;<sp/><ref refid="de/d35/classUserDataStore_1a2af72eeeff767a32f740a0989ec9044e" kindref="member" tooltip="Table-of-contents method.">UserDataStore::getLabels</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AthenaBarCode_t&amp;<sp/>barcode)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>std::string*&gt;<sp/>out;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>mapmap_t::const_iterator<sp/>abc_it=m_data.find(barcode);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abc_it!=m_data.end())<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;index_t,<sp/>boost::any&gt;&amp;<sp/>labelMap=abc_it-&gt;second;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>it=labelMap.begin();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/>it_e=labelMap.end();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;it!=it_e;++it)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sLabel=m_labelTable.getLabel(it-&gt;first);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(&amp;sLabel);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment">//<sp/>end<sp/>if<sp/>abc_it!=m_data.end()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/UserDataStore.cxx"/>
  </compounddef>
</doxygen>
