<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/dbe/TrigConfBase_2Root_2MsgStream_8cxx" kind="file">
    <compoundname>MsgStream.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">iomanip</includes>
    <includes refid="d6/d76/TrigConfBase_2TrigConfBase_2MsgStream_8h" local="yes">TrigConfBase/MsgStream.h</includes>
    <incdepgraph>
      <node id="10047">
        <label>iomanip</label>
      </node>
      <node id="10049">
        <label>sstream</label>
      </node>
      <node id="10045">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfBase/Root/MsgStream.cxx</label>
        <link refid="TrigConfBase/Root/MsgStream.cxx"/>
        <childnode refid="10046" relation="include">
        </childnode>
        <childnode refid="10047" relation="include">
        </childnode>
        <childnode refid="10048" relation="include">
        </childnode>
      </node>
      <node id="10046">
        <label>iostream</label>
      </node>
      <node id="10048">
        <label>TrigConfBase/MsgStream.h</label>
        <link refid="d6/d76/TrigConfBase_2TrigConfBase_2MsgStream_8h_source"/>
        <childnode refid="10049" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="d5/dc5/namespaceAthena">Athena</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigConfBase/MsgStream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">TrigConf;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="keyword">class<sp/></highlight><highlight class="normal">IMessageSvc;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Athena<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>IMessageSvc*<sp/>getMessageSvc(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>__attribute__((weak));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportMessage(IMessageSvc*,<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;)<sp/>__attribute__((weak));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outputLevel(IMessageSvc*,<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;)<sp/>__attribute__((weak));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOutputLevel(IMessageSvc*,<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>__attribute__((weak));</highlight></codeline>
<codeline lineno="22"><highlight class="normal">};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">namespace<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>IMessageSvc*<sp/>p_msgsvc;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getMessageSvc()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>haven&apos;t<sp/>found<sp/>a<sp/>MessageSvc<sp/>try<sp/>to<sp/>find<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_msgsvc==0<sp/>&amp;&amp;<sp/>Athena::getMessageSvc!=NULL)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_msgsvc<sp/>=<sp/>Athena::getMessageSvc(</highlight><highlight class="comment">/*quiet=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>levelNames[MSGTC::NUM_LEVELS]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;NIL&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;VERBOSE&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WARNING&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;FATAL&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ALWAYS&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">MsgStreamTC::MsgStreamTC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="d6/db2/structTrigConf_1_1name" kindref="compound">name</ref>)<sp/>:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_active(false),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_msgLevel(MSGTC::INFO),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_name(name)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>getMessageSvc();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>our<sp/>own<sp/>OutputLevel<sp/>to<sp/>the<sp/>global<sp/>one<sp/>from<sp/>the<sp/>MessageSvc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>m_level<sp/>=<sp/>(Athena::outputLevel!=NULL)<sp/>?<sp/>MSGTC::Level(Athena::outputLevel(p_msgsvc,<sp/>m_name))<sp/>:<sp/>MSGTC::INFO;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>message<sp/>level<sp/>of<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MsgStreamTC::setLevel(MSGTC::Level<sp/>lvl)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>lvl<sp/>=<sp/>(lvl<sp/>&gt;=<sp/>MSGTC::NUM_LEVELS)<sp/>?<sp/>MSGTC::ALWAYS<sp/>:<sp/>(lvl&lt;MSGTC::NIL)<sp/>?<sp/>MSGTC::NIL<sp/>:<sp/>lvl;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>m_level<sp/>=<sp/>lvl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>getMessageSvc();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_msgsvc)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Athena::setOutputLevel(p_msgsvc,<sp/>m_name,<sp/>m_level);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MsgStreamTC::doOutput()</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>getMessageSvc();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_msgsvc)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Athena::reportMessage(p_msgsvc,<sp/>m_name,<sp/>m_msgLevel,<sp/>str());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>later<sp/>use<sp/>ERS<sp/>here<sp/>(ERS<sp/>needs<sp/>to<sp/>be<sp/>a<sp/>third<sp/>case,<sp/>we<sp/>also<sp/>need<sp/>simple<sp/>cout)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::setw(m_width)<sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>m_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>levelNames[m_msgLevel]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>our<sp/>buffer<sp/>after<sp/>message<sp/>has<sp/>been<sp/>printed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigConfBase/Root/MsgStream.cxx"/>
  </compounddef>
</doxygen>
