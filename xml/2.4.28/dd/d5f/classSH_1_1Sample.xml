<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d5f/classSH_1_1Sample" kind="class" prot="public">
    <compoundname>SH::Sample</compoundname>
    <derivedcompoundref refid="d8/d64/classSH_1_1SampleComposite" prot="public" virt="non-virtual">SH::SampleComposite</derivedcompoundref>
    <derivedcompoundref refid="d1/d36/classSH_1_1SampleGrid" prot="public" virt="non-virtual">SH::SampleGrid</derivedcompoundref>
    <derivedcompoundref refid="d4/d76/classSH_1_1SampleHist" prot="public" virt="non-virtual">SH::SampleHist</derivedcompoundref>
    <derivedcompoundref refid="d8/d31/classSH_1_1SampleLocal" prot="public" virt="non-virtual">SH::SampleLocal</derivedcompoundref>
    <derivedcompoundref refid="dc/d78/classSH_1_1SampleMeta" prot="public" virt="non-virtual">SH::SampleMeta</derivedcompoundref>
    <includes refid="df/d9d/Sample_8h" local="no">Sample.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="dd/d5f/classSH_1_1Sample_1a71bc56dc741398d19debdcfe2c97b613" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class SamplePtr</definition>
        <argsstring></argsstring>
        <name>SamplePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="458" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/d5f/classSH_1_1Sample_1ad2b6f12a0f4e14c3b2369e59847609e2" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SH::Sample::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
<para><copydoc link="name"><para>the name of the sample we are using </para></copydoc>
 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member">name</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="485" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d5f/classSH_1_1Sample_1a638205569146d9a3eb929d2667c5624a" prot="private" static="no" mutable="no">
        <type><ref refid="dd/d41/classSH_1_1TagList" kindref="compound">TagList</ref></type>
        <definition>TagList SH::Sample::m_tags</definition>
        <argsstring></argsstring>
        <name>m_tags</name>
        <briefdescription>
<para><copydoc link="tags"><para>the tag list we are using </para></copydoc>
 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" kindref="member">tags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="489" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d5f/classSH_1_1Sample_1a5a9167d54f2769dbe74f293d651954f9" prot="private" static="no" mutable="no">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> *</type>
        <definition>MetaObject* SH::Sample::m_meta</definition>
        <argsstring></argsstring>
        <name>m_meta</name>
        <briefdescription>
<para><copydoc link="meta"><para>the meta-information for this sample </para></copydoc>
 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" kindref="member">meta</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="493" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/d5f/classSH_1_1Sample_1a67cfdb8b7e51d49c5ff2e2dea0829adf" prot="private" static="no" mutable="yes">
        <type>unsigned</type>
        <definition>unsigned SH::Sample::m_references</definition>
        <argsstring></argsstring>
        <name>m_references</name>
        <briefdescription>
<para>the reference count </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="497" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a93181b29b079d3bf07b6db332ba06636" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplementedby refid="dc/d78/classSH_1_1SampleMeta_1a67f7003571651aed9f3daf456b1bb686">testInvariant</reimplementedby>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1a00bfad6ffb67922ece561fcc35a73e04">testInvariant</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1a81add2093d3961a4d82eabbd4f04c3f8">testInvariant</reimplementedby>
        <reimplementedby refid="d1/d36/classSH_1_1SampleGrid_1a64d02cd790a221a345a3cd5e3e982d6e">testInvariant</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a8022f3eab2d7d44e72774eea9f27902a">testInvariant</reimplementedby>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="61"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ac6e302973fa57eb7ee0c85d858b5e43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual SH::Sample::~Sample</definition>
        <argsstring>()</argsstring>
        <name>~Sample</name>
        <briefdescription>
<para>standard destructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; SH::Sample::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <briefdescription>
<para>the name of the sample we are using </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a07f3585db2b22762b5739d98f05354ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::name</definition>
        <argsstring>(std::string val_name)</argsstring>
        <name>name</name>
        <param>
          <type>std::string</type>
          <declname>val_name</declname>
        </param>
        <briefdescription>
<para>set the value of <ref refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail / strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Failures</title><para><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> already owned by <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>setting the sample name can be beneficial, if the sample auto-discovery set a duplicate (or otherwise unsuitable) name. </para></simplesect>
<simplesect kind="warning"><para>this must be done before adding it to the <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref>, or alternatively a clone must be made that can then be added to a new <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="94"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t SH::Sample::numFiles</definition>
        <argsstring>() const </argsstring>
        <name>numFiles</name>
        <briefdescription>
<para>the number of files in the sample </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="102"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a7e6d80c20db8af008fff8e545e715d6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::Sample::fileName</definition>
        <argsstring>(std::size_t index) const </argsstring>
        <name>fileName</name>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>the name of the file with the given index </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>index &lt; <ref refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" kindref="member">numFiles()</ref> </para></simplesect>
<simplesect kind="post"><para>!result.empty() </para></simplesect>
<simplesect kind="warning"><para>this is meant more for debugging and may or may not do what you want, e.g. if this is a grid dataset the file may not be directly accessible. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1aba72d27822916d6d22371b2535898ea9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SamplePtr</ref></type>
        <definition>SamplePtr SH::Sample::makeLocal</definition>
        <argsstring>() const </argsstring>
        <name>makeLocal</name>
        <briefdescription>
<para>Make this a local sample, i.e. one which can be directly opened with TFile::Open. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the local sample, or &quot;this&quot; if this already is a local sample </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 can not make local sample </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="131"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="dd/d41/classSH_1_1TagList" kindref="compound">TagList</ref> &amp;</type>
        <definition>const TagList&amp; SH::Sample::tags</definition>
        <argsstring>() const </argsstring>
        <name>tags</name>
        <briefdescription>
<para>the tag list we are using </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="139"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ae146318dce10d66add62ea1eb6e5f859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::tags</definition>
        <argsstring>(const TagList &amp;tags)</argsstring>
        <name>tags</name>
        <param>
          <type>const <ref refid="dd/d41/classSH_1_1TagList" kindref="compound">TagList</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
<para>set the content of <ref refid="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" kindref="member">tags()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="149"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a29c6c8d759e11679c8cb732f55401a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::addTag</definition>
        <argsstring>(const std::string &amp;tag)</argsstring>
        <name>addTag</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>add a tag to the content of <ref refid="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" kindref="member">tags()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="159"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1afc7c7f2851013cf7cfb786c46b244353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::updateLocation</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>updateLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>update all file references starting with from to to </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the original path to the data area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the new path to the data area </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may update partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="pre"><para>!from.empty() </para></simplesect>
<simplesect kind="post"><para>!to.empty() </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>this is needed when moving data around without recreating the samples from scratch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="176"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> *</type>
        <definition>MetaObject* SH::Sample::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <briefdescription>
<para>the meta-information for this sample </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="invariant"><para>meta != 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="185"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a75efa599c9354548d6c29b060e81e549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">MetaObject</ref> *</type>
        <definition>const MetaObject* SH::Sample::meta</definition>
        <argsstring>() const </argsstring>
        <name>meta</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="meta()"><para>the meta-information for this sample </para><para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="invariant"><para>meta != 0 </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="190"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; SH::Sample::makeFileList</definition>
        <argsstring>() const </argsstring>
        <name>makeFileList</name>
        <briefdescription>
<para>make a list of all files, prestaging them if necessary </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 file catalogue failures<linebreak/>
 prestaging failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="201"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1af6184b5cc551270f50e9370c7c709766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TChain *</type>
        <definition>TChain* SH::Sample::makeTChain</definition>
        <argsstring>() const </argsstring>
        <name>makeTChain</name>
        <briefdescription>
<para>create a TChain object, containing all these files </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 chain making not supported </para></simplesect>
<simplesect kind="post"><para>result != 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="213"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1aca30caa2664c0e1b97b3ad2c47cb822f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TDSet *</type>
        <definition>TDSet* SH::Sample::makeTDSet</definition>
        <argsstring>() const </argsstring>
        <name>makeTDSet</name>
        <briefdescription>
<para>create a TDSet object, containing all these files </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>dataset making not supported </para></simplesect>
<simplesect kind="post"><para>result != 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="226"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>TObject *</type>
        <definition>TObject* SH::Sample::readHist</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>readHist</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>read an object from a histogram file </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Returns</title><para>the object read or NULL if it was not found </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="239"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ac9c1da388a4092fced8d6589ac25dae8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SH::Sample::contains</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>whether this sample contains a sample of the given name </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether this sample contains a sample of the given name (or whether the sample itself has the given name) </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>this is used with composite sample to make sure we don&apos;t create ring like structures that would lead to endless recursion. the reason to check by name, not by address is that we will probably want to add these samples to a sample handler at some point. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="255"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1aca6f155ee6b4428e1bae357d8d0473ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::addSamples</definition>
        <argsstring>(SampleHandler &amp;result)</argsstring>
        <name>addSamples</name>
        <param>
          <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>add all samples this sample corresponds to to the given sample handler </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may only add some </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Rationale this is used with composite samples to find the</title><para>actual list of samples to run on. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="268"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a2d842d66fb111e80b7890481f2e18cea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::print</definition>
        <argsstring>() const </argsstring>
        <name>print</name>
        <briefdescription>
<para>print the debugging output to the screen </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic, may print partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>stream errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="280"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1af1486c6042ac9595caac7f23719464e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::printContent</definition>
        <argsstring>() const </argsstring>
        <name>printContent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="print()"><para>print the debugging output to the screen </para><para><simplesect kind="par"><title>Guarantee</title><para>basic, may print partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>stream errors </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>added a second print method for python where print is a keyword </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="287"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a218cf64a19d33f7c4ec4f1456f31b40d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Long64_t</type>
        <definition>Long64_t SH::Sample::getNumEntries</definition>
        <argsstring>() const </argsstring>
        <name>getNumEntries</name>
        <briefdescription>
<para>get the number of entries </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="296"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a83a311458213558ed66dc8976d5dee34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::Sample::RCU_DEPRECATED</definition>
        <argsstring>(&quot;use meta() instead, or (preferably) access of meta-data by name&quot;) TCollection *metaDataList()</argsstring>
        <name>RCU_DEPRECATED</name>
        <param>
          <type>&quot;use meta() </type>
          <declname>instead</declname>
        </param>
        <param>
          <type>or(preferably) access of meta-data by name&quot;</type>
        </param>
        <briefdescription>
<para>get the meta-data list </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="post"><para>result != 0 </para></simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" kindref="member">meta()</ref> instead, or (preferably) access of meta-data by name </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="313"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a3162cc51aefd1d821d0923521d5ac7dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::Sample::RCU_DEPRECATED</definition>
        <argsstring>(&quot;use meta() instead, or (preferably) access of meta-data by name&quot;) const TCollection *metaDataList() const </argsstring>
        <name>RCU_DEPRECATED</name>
        <param>
          <type>&quot;use meta() </type>
          <declname>instead</declname>
        </param>
        <param>
          <type>or(preferably) access of meta-data by name&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="metaDataList()"></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="319"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a3a7ec36a2598b4fade38c78662994daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::removeMeta</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>removeMeta</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::remove"><para>remove all meta-information with the given name </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the meta-data name to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may only delete some entries </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="325"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a13051d3ce3b8e6e274f65335297695c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::addReplaceMeta</definition>
        <argsstring>(TNamed *meta_swallow)</argsstring>
        <name>addReplaceMeta</name>
        <param>
          <type>TNamed *</type>
          <declname>meta_swallow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::addReplace"><para>add a meta-data object and remove any existing meta-data with the same name </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>meta_swallow</parametername>
</parameternamelist>
<parameterdescription>
<para>the meta-object to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>meta_swallow != 0 </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>basic, may delete some entries without adding the new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="331"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a3155537c70c1f520f65e39721cf3fa9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TObject *</type>
        <definition>TObject* SH::Sample::getMeta</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>getMeta</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::get"><para>the meta-data object with the given name </para><para><simplesect kind="return"><para>the meta-data object with the given name, or NULL if there is no such entry </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="337"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a66d1b3d220d55f0244ee36c2daace765" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const TObject *</type>
        <definition>const TObject* SH::Sample::getMeta</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getMeta</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::get"><para>the meta-data object with the given name </para><para><simplesect kind="return"><para>the meta-data object with the given name, or NULL if there is no such entry </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="343"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a671f61ecab10f556effe37b0a57c054e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SH::Sample::getMetaDouble</definition>
        <argsstring>(const std::string &amp;name, double def_val=0) const </argsstring>
        <name>getMetaDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>def_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::getDouble"><para>the meta-data double with the given name </para><para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="349"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SH::Sample::getMetaString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;def_val=&quot;&quot;) const </argsstring>
        <name>getMetaString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>def_val</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::getString"><para>the meta-data string with the given name </para><para><simplesect kind="return"><para>the meta-data with the given name, or def_value if that meta-data is not available or does not have the right type </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dev_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if no meta-data object of the given name exists, or if it does not have the right type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>I return the string by value, because returning by reference seems to break the python binding. </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="355"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ab19adefa98f34923c0921f9b42d29736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::setMetaDouble</definition>
        <argsstring>(const std::string &amp;name, double value)</argsstring>
        <name>setMetaDouble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::setDouble"><para>set the meta-data double with the given name </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="361"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::setMetaString</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value)</argsstring>
        <name>setMetaString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::setString"><para>set the meta-data string with the given name </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the meta-data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to which it is set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may clear old entry without adding new one </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="367"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a512bfd0e7f78a195d99860df82109a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::fetchMeta</definition>
        <argsstring>(const Sample &amp;source)</argsstring>
        <name>fetchMeta</name>
        <param>
          <type>const <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="MetaObject::fetch"><para>fetch the meta-data from the given sample. </para><para>fields that have a name that starts with &quot;nc_&quot; are not copied.</para><para><simplesect kind="par"><title>Guarantee</title><para>basic, may only fetch some meta-data </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Rationale this is used by EventLoop, to copy the</title><para>meta-data from the input samples to the output samples. the prefix &quot;nc_&quot; is used to indicate meta-data entries that only apply to the current sample, or are options to the specific EventLoop job. </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="373"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1aac7e354e873ead42527830e731388d83" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::Sample::Sample</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>Sample</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>standard constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>low level errors II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="388"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a713d0a3bd5caac0b6e2d7ad1b724663e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t SH::Sample::getNumFiles</definition>
        <argsstring>() const =0</argsstring>
        <name>getNumFiles</name>
        <reimplementedby refid="dc/d78/classSH_1_1SampleMeta_1a265590dd9527abe3f5d14624d8b75e5d">getNumFiles</reimplementedby>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1a1de9cd839519f0d18bf97da9a63523bf">getNumFiles</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1af5340fca0511fb4a3c566760ccf9899c">getNumFiles</reimplementedby>
        <reimplementedby refid="d1/d36/classSH_1_1SampleGrid_1a9fcff2699dd7c2d925ce6fec099281bc">getNumFiles</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a3f2a541acb8469692ebeb01393e395c3">getNumFiles</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="numFiles"><para>the number of files in the sample </para><para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" kindref="member">Sample::numFiles()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="400"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a1e8534656a2f33fd6efc395c94f110d5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string SH::Sample::getFileName</definition>
        <argsstring>(std::size_t index) const =0</argsstring>
        <name>getFileName</name>
        <reimplementedby refid="dc/d78/classSH_1_1SampleMeta_1a98c058aabae7b009f0a7c936f8f94521">getFileName</reimplementedby>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1a560f8047478add6b768c19c84cd961b4">getFileName</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1a0325069e92ecd99b61c331f05589632d">getFileName</reimplementedby>
        <reimplementedby refid="d1/d36/classSH_1_1SampleGrid_1add8f9fc38e01f70f4becb2f092db5e25">getFileName</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a2cdddb5a4e748e736132577447119a9e">getFileName</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="fileName"><para>the name of the file with the given index </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>index &lt; <ref refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" kindref="member">numFiles()</ref> </para></simplesect>
<simplesect kind="post"><para>!result.empty() </para></simplesect>
<simplesect kind="warning"><para>this is meant more for debugging and may or may not do what you want, e.g. if this is a grid dataset the file may not be directly accessible. </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1a7e6d80c20db8af008fff8e545e715d6c" kindref="member">Sample::fileName()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="407"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ae7b8e70d0242108375bfa312d878fb7b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="d8/d8a/classSH_1_1SamplePtr" kindref="compound">SamplePtr</ref></type>
        <definition>virtual SamplePtr SH::Sample::doMakeLocal</definition>
        <argsstring>() const =0</argsstring>
        <name>doMakeLocal</name>
        <reimplementedby refid="dc/d78/classSH_1_1SampleMeta_1a65d053d3c7babc8a702dfad53ea1168c">doMakeLocal</reimplementedby>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1ac1a8b3836d3b97dda538464c92eb76f4">doMakeLocal</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1ab72b421288da23f0c1862fedd0a96ef1">doMakeLocal</reimplementedby>
        <reimplementedby refid="d1/d36/classSH_1_1SampleGrid_1a4047d9fbf082a2ccc026d9ab1728429c">doMakeLocal</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a7351e3c609d640ce71bb4cbd3a87673f">doMakeLocal</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="makeLocal"><para>Make this a local sample, i.e. one which can be directly opened with TFile::Open. </para><para><simplesect kind="return"><para>the local sample, or &quot;this&quot; if this already is a local sample </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 can not make local sample </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1aba72d27822916d6d22371b2535898ea9" kindref="member">SH::Sample::makeLocal()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="414"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a85b8c900de8dffe17a69997813f19884" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; SH::Sample::doMakeFileList</definition>
        <argsstring>() const =0</argsstring>
        <name>doMakeFileList</name>
        <reimplementedby refid="dc/d78/classSH_1_1SampleMeta_1ac7ed8374af4c6666953493bb85614b47">doMakeFileList</reimplementedby>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1a15648efbeb900974fce0ab3fbb30de85">doMakeFileList</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1a0c55023405d7f0e447adfe9b6cdd1313">doMakeFileList</reimplementedby>
        <reimplementedby refid="d1/d36/classSH_1_1SampleGrid_1a92d5f3b39b080dd0f00c22dd2bc41865">doMakeFileList</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a2efa2236ed11adf78c08e554a152b8c4">doMakeFileList</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="makeFileList"><para>make a list of all files, prestaging them if necessary </para><para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory III<linebreak/>
 file catalogue failures<linebreak/>
 prestaging failures </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" kindref="member">Sample::makeFileList</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="421"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a710460ab5d26a50e4c6bb6c667fdbe6a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SH::Sample::doUpdateLocation</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>doUpdateLocation</name>
        <reimplementedby refid="d8/d31/classSH_1_1SampleLocal_1a5652c8cccfc038af078f354d16b02dd4">doUpdateLocation</reimplementedby>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1a0e624952505e3decd4b9c1fa85baaf44">doUpdateLocation</reimplementedby>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1a3316dc4ceef5ff62c63d828f1c57859b">doUpdateLocation</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="updateLocation"><para>update all file references starting with from to to </para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the original path to the data area </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the new path to the data area </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>basic, may update partially </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="pre"><para>!from.empty() </para></simplesect>
<simplesect kind="post"><para>!to.empty() </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>this is needed when moving data around without recreating the samples from scratch </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1afc7c7f2851013cf7cfb786c46b244353" kindref="member">SH::Sample::updateLocation()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="429"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a63a304738acf977fad96f16438e8bfd7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>TObject *</type>
        <definition>virtual TObject* SH::Sample::doReadHist</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>doReadHist</name>
        <reimplementedby refid="d4/d76/classSH_1_1SampleHist_1a8c2558669f12e31cd0c163d6aba47f48">doReadHist</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="readHist"><para>read an object from a histogram file </para><para><simplesect kind="par"><title>Returns</title><para>the object read or NULL if it was not found </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 i/o errors </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" kindref="member">SH::Sample::readHist()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="436"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a6d5b98684ae8ced23f0b31a53834e809" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SH::Sample::getContains</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>getContains</name>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1ad77f04be218f692c2ba5e8912696827b">getContains</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="contains"><para>whether this sample contains a sample of the given name </para><para><simplesect kind="return"><para>whether this sample contains a sample of the given name (or whether the sample itself has the given name) </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="par"><title>Rationale</title><para>this is used with composite sample to make sure we don&apos;t create ring like structures that would lead to endless recursion. the reason to check by name, not by address is that we will probably want to add these samples to a sample handler at some point. </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1ac9c1da388a4092fced8d6589ac25dae8" kindref="member">SH::Sample::contains()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="443"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a31f1902f6ee5889533df395cbdaa1fe8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void SH::Sample::doAddSamples</definition>
        <argsstring>(SampleHandler &amp;result)</argsstring>
        <name>doAddSamples</name>
        <reimplementedby refid="d8/d64/classSH_1_1SampleComposite_1af380f5688a2b179e8d1a3ab67c388bfa">doAddSamples</reimplementedby>
        <param>
          <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SampleHandler</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="addSamples"><para>add all samples this sample corresponds to to the given sample handler </para><para><simplesect kind="par"><title>Guarantee</title><para>basic, may only add some </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="par"><title>Rationale this is used with composite samples to find the</title><para>actual list of samples to run on. </para></simplesect>
</para></copydoc>
 <simplesect kind="par"><title>Rationale</title><para>the virtual part of <ref refid="dd/d5f/classSH_1_1Sample_1aca6f155ee6b4428e1bae357d8d0473ab" kindref="member">SH::Sample::addSamples()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="450"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1ae7750da5cd8348bf6ad262498a142a10" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::alloc</definition>
        <argsstring>() const </argsstring>
        <name>alloc</name>
        <briefdescription>
<para>increase the reference count by one </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="465"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1afc517d0717947e3cbd2cb62e06b09b62" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SH::Sample::release</definition>
        <argsstring>() const </argsstring>
        <name>release</name>
        <briefdescription>
<para>decrease the reference count by one </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Side Effects</title><para>release this sample if that was the last reference </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>reference count &gt; 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="475"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a90346d00302d787b14b109ab3fd020dd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::Sample::Sample</definition>
        <argsstring>(const Sample &amp;that)</argsstring>
        <name>Sample</name>
        <param>
          <type>const <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Rationale</title><para>hiding this to avoid slicing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="502"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1acd8af1a57acbcd83a9e73562c3df9d61" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> &amp;</type>
        <definition>Sample&amp; SH::Sample::operator=</definition>
        <argsstring>(const Sample &amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Rationale</title><para>hiding this to avoid slicing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="507"/>
      </memberdef>
      <memberdef kind="function" id="dd/d5f/classSH_1_1Sample_1a78025863136146e010625d366cd23243" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SH::Sample::ClassDef</definition>
        <argsstring>(Sample, 2)</argsstring>
        <name>ClassDef</name>
        <param>
          <type><ref refid="dd/d5f/classSH_1_1Sample" kindref="compound">Sample</ref></type>
        </param>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="509"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a base class that manages a set of files belonging to a particular data set and the associated meta-data. </para>    </briefdescription>
    <detaileddescription>
<para>While for most people this is essentially just a fancy file list, it hides a lot of flexibility. Besides a simple file list, this could also be a sample on the grid, or on tape storage that first needs to be pre-staged before it can be used. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="17029">
        <label>SH::Sample</label>
        <link refid="dd/d5f/classSH_1_1Sample"/>
      </node>
      <node id="17032">
        <label>SH::SampleHist</label>
        <link refid="d4/d76/classSH_1_1SampleHist"/>
        <childnode refid="17029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17031">
        <label>SH::SampleGrid</label>
        <link refid="d1/d36/classSH_1_1SampleGrid"/>
        <childnode refid="17029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17034">
        <label>SH::SampleMeta</label>
        <link refid="dc/d78/classSH_1_1SampleMeta"/>
        <childnode refid="17029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17033">
        <label>SH::SampleLocal</label>
        <link refid="d8/d31/classSH_1_1SampleLocal"/>
        <childnode refid="17029" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17030">
        <label>SH::SampleComposite</label>
        <link refid="d8/d64/classSH_1_1SampleComposite"/>
        <childnode refid="17029" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17037">
        <label>string</label>
      </node>
      <node id="17035">
        <label>SH::Sample</label>
        <link refid="dd/d5f/classSH_1_1Sample"/>
        <childnode refid="17036" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="17037" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
        <childnode refid="17038" relation="usage">
          <edgelabel>m_meta</edgelabel>
        </childnode>
      </node>
      <node id="17036">
        <label>SH::TagList</label>
        <link refid="dd/d41/classSH_1_1TagList"/>
      </node>
      <node id="17038">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/SampleHandler/SampleHandler/Sample.h" bodystart="50" bodyend="510"/>
    <listofallmembers>
      <member refid="dd/d5f/classSH_1_1Sample_1a13051d3ce3b8e6e274f65335297695c5" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>addReplaceMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aca6f155ee6b4428e1bae357d8d0473ab" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>addSamples</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a29c6c8d759e11679c8cb732f55401a84" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>addTag</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ae7750da5cd8348bf6ad262498a142a10" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>alloc</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a78025863136146e010625d366cd23243" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>ClassDef</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ac9c1da388a4092fced8d6589ac25dae8" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>contains</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a31f1902f6ee5889533df395cbdaa1fe8" prot="protected" virt="virtual"><scope>SH::Sample</scope><name>doAddSamples</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a85b8c900de8dffe17a69997813f19884" prot="protected" virt="pure-virtual"><scope>SH::Sample</scope><name>doMakeFileList</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ae7b8e70d0242108375bfa312d878fb7b" prot="protected" virt="pure-virtual"><scope>SH::Sample</scope><name>doMakeLocal</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a63a304738acf977fad96f16438e8bfd7" prot="protected" virt="virtual"><scope>SH::Sample</scope><name>doReadHist</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a710460ab5d26a50e4c6bb6c667fdbe6a" prot="protected" virt="virtual"><scope>SH::Sample</scope><name>doUpdateLocation</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a512bfd0e7f78a195d99860df82109a2f" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>fetchMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a7e6d80c20db8af008fff8e545e715d6c" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>fileName</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a6d5b98684ae8ced23f0b31a53834e809" prot="protected" virt="virtual"><scope>SH::Sample</scope><name>getContains</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a1e8534656a2f33fd6efc395c94f110d5" prot="protected" virt="pure-virtual"><scope>SH::Sample</scope><name>getFileName</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3155537c70c1f520f65e39721cf3fa9e" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>getMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a66d1b3d220d55f0244ee36c2daace765" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>getMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a671f61ecab10f556effe37b0a57c054e" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>getMetaDouble</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1abdb47cdbfd7e6d37ddb54e40150611be" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>getMetaString</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a218cf64a19d33f7c4ec4f1456f31b40d" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>getNumEntries</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a713d0a3bd5caac0b6e2d7ad1b724663e" prot="protected" virt="pure-virtual"><scope>SH::Sample</scope><name>getNumFiles</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a5a9167d54f2769dbe74f293d651954f9" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>m_meta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ad2b6f12a0f4e14c3b2369e59847609e2" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>m_name</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a67cfdb8b7e51d49c5ff2e2dea0829adf" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>m_references</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a638205569146d9a3eb929d2667c5624a" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>m_tags</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af19092939f8b0b5eaca98f68dfa32bb6" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>makeFileList</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aba72d27822916d6d22371b2535898ea9" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>makeLocal</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af6184b5cc551270f50e9370c7c709766" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>makeTChain</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aca30caa2664c0e1b97b3ad2c47cb822f" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>makeTDSet</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a11fa5f95cccb30841af49a3935be3b18" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>meta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a75efa599c9354548d6c29b060e81e549" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>meta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1acbeadbae161d07daf5c4da73a009e7cf" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>name</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a07f3585db2b22762b5739d98f05354ea" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>name</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aaf7f0398c4fd23879ebafd9d635aa268" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>numFiles</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1acd8af1a57acbcd83a9e73562c3df9d61" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>operator=</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a2d842d66fb111e80b7890481f2e18cea" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>print</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1af1486c6042ac9595caac7f23719464e6" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>printContent</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a83a311458213558ed66dc8976d5dee34" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>RCU_DEPRECATED</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3162cc51aefd1d821d0923521d5ac7dc" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>RCU_DEPRECATED</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ab30fd4b6a311a04ace50a300c64951c2" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>readHist</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1afc517d0717947e3cbd2cb62e06b09b62" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>release</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a3a7ec36a2598b4fade38c78662994daa" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>removeMeta</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1aac7e354e873ead42527830e731388d83" prot="protected" virt="non-virtual"><scope>SH::Sample</scope><name>Sample</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a90346d00302d787b14b109ab3fd020dd" prot="private" virt="non-virtual"><scope>SH::Sample</scope><name>Sample</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a71bc56dc741398d19debdcfe2c97b613" prot="protected" virt="non-virtual"><scope>SH::Sample</scope><name>SamplePtr</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ab19adefa98f34923c0921f9b42d29736" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>setMetaDouble</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a898099e5c42a5602c43f64052f444e43" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>setMetaString</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a5606178a17f512496f473aa18422dfe8" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>tags</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ae146318dce10d66add62ea1eb6e5f859" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>tags</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1a93181b29b079d3bf07b6db332ba06636" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>testInvariant</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1afc7c7f2851013cf7cfb786c46b244353" prot="public" virt="non-virtual"><scope>SH::Sample</scope><name>updateLocation</name></member>
      <member refid="dd/d5f/classSH_1_1Sample_1ac6e302973fa57eb7ee0c85d858b5e43f" prot="public" virt="virtual"><scope>SH::Sample</scope><name>~Sample</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
