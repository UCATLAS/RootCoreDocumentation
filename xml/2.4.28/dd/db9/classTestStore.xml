<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/db9/classTestStore" kind="class" prot="public">
    <compoundname>TestStore</compoundname>
    <basecompoundref refid="dc/d05/classSG_1_1IAuxStore" prot="public" virt="non-virtual">SG::IAuxStore</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="dd/db9/classTestStore_1aa5a37a524bcc00065691d812b9b1317d" prot="public" static="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map</ref>&lt; const void *, SG::DataProxy * &gt;</type>
        <definition>typedef SG_STD_OR_SG::unordered_map&lt;const void*, SG::DataProxy*&gt; TestStore::tmap_t</definition>
        <argsstring></argsstring>
        <name>tmap_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="153" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/db9/classTestStore_1abaf0ddd1223159d509528f7533eac050" prot="public" static="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map</ref>&lt; sgkey_t, SG::DataProxy * &gt;</type>
        <definition>typedef SG_STD_OR_SG::unordered_map&lt;sgkey_t, SG::DataProxy*&gt; TestStore::kmap_t</definition>
        <argsstring></argsstring>
        <name>kmap_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/db9/classTestStore_1a07af99f4052457491a9812b0d51f307d" prot="public" static="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG_STD_OR_SG::unordered_map</ref>&lt; <ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>, <ref refid="d2/df8/structTestStoreRemap" kindref="compound">TestStoreRemap</ref>, <ref refid="d7/d02/structTestStoreRemapHash" kindref="compound">TestStoreRemapHash</ref> &gt;</type>
        <definition>typedef SG_STD_OR_SG::unordered_map&lt;TestStoreRemap, TestStoreRemap, TestStoreRemapHash&gt; TestStore::remap_t</definition>
        <argsstring></argsstring>
        <name>remap_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="dd/db9/classTestStore_1a93b4d65fc1c3d2aef536bbc2f9a52379" prot="public" static="yes" mutable="no">
        <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        <definition>SG::auxid_t TestStore::lastid</definition>
        <argsstring></argsstring>
        <name>lastid</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="385" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/db9/classTestStore_1ac2b8739caf25044363d1d26708bd2ec7" prot="public" static="yes" mutable="no">
        <type><ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">SG::AuxDataOption</ref></type>
        <definition>SG::AuxDataOption TestStore::lastopt</definition>
        <argsstring></argsstring>
        <name>lastopt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="386" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dd/db9/classTestStore_1a2ee932b83af384a95c3e4cfeda436967" prot="public" static="no" mutable="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">tmap_t</ref></type>
        <definition>tmap_t TestStore::m_tmap</definition>
        <argsstring></argsstring>
        <name>m_tmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="154" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/db9/classTestStore_1a20a7870ed7a845b1f1c2115042967ade" prot="public" static="no" mutable="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">kmap_t</ref></type>
        <definition>kmap_t TestStore::m_kmap</definition>
        <argsstring></argsstring>
        <name>m_kmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="157" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/db9/classTestStore_1a5b4ff60ea0d577df5fecd5e2a2532985" prot="public" static="no" mutable="no">
        <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">remap_t</ref></type>
        <definition>remap_t TestStore::m_remap</definition>
        <argsstring></argsstring>
        <name>m_remap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="160" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/db9/classTestStore_1a177a2e7fabbb76a09ae4a3c60040234f" prot="public" static="no" mutable="no">
        <type>SG::StringPool</type>
        <definition>SG::StringPool TestStore::m_stringPool</definition>
        <argsstring></argsstring>
        <name>m_stringPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="162" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/db9/classTestStore_1a80431fcc37dfa1b91d0e21bd8187b9d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TestStore::TestStore</definition>
        <argsstring>()</argsstring>
        <name>TestStore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="365" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a03a266d9f00fbbf51e814aa7d23fe9fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const void *</type>
        <definition>virtual const void* TestStore::getData</definition>
        <argsstring>(SG::auxid_t) const </argsstring>
        <name>getData</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1aa73e6e5474cdc0d38fe3367740876c59">getData</reimplements>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Return the data vector for one aux data item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the desired aux data item.</para></parameterdescription>
</parameteritem>
</parameterlist>
Each aux data item is stored as a vector, with one entry per entry in the owning container. This returns a pointer to the start of the vector.</para><para>This should return 0 if the item doesn&apos;t exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="366" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a058764aa8a12b920b8592414b8d0dde3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>virtual void* TestStore::getDecoration</definition>
        <argsstring>(SG::auxid_t, size_t, size_t)</argsstring>
        <name>getDecoration</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1a96728593e3bc1da60d3bdd28291969f0">getDecoration</reimplements>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Return the data vector for one aux data decoration item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The current size of the container (in case the data item does not already exist). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The current capacity of the container (in case the data item does not already exist).</para></parameterdescription>
</parameteritem>
</parameterlist>
Each aux data item is stored as a vector, with one entry per entry in the owning container. This returns a pointer to the start of the vector.</para><para>If the data item does not exist, it then it will be created and initialized with default values. If the container is locked, then the new item will be marked as a decoration. <computeroutput>size</computeroutput> and <computeroutput>capacity</computeroutput> give the size for the new aux data item vector.</para><para>If the data item already exists, then we return it if either the container is not locked or the item is marked as a decoration. Otherwise we throw an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="367" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1ac7c5bf984a4157970b8112f8602d54c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref> &amp;</type>
        <definition>virtual const SG::auxid_set_t&amp; TestStore::getAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getAuxIDs</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1a3be9ddcb2b1198c3cab03c7b94764a3d">getAuxIDs</reimplements>
        <briefdescription>
<para>Return a set of identifiers for existing data items in this store. </para>        </briefdescription>
        <detaileddescription>
<para>This should include identifiers for all items, const and non-const. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="368" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="368" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a56c0114d540743b0801acf90e8afe19e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void TestStore::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1a6bf19cb8961665a0d4672e2d4f719aa5">lock</reimplements>
        <briefdescription>
<para>Lock the container. </para>        </briefdescription>
        <detaileddescription>
<para>After this, only decorations can be changed/modified. If the container is already locked, this is a no-op. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="369" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a9b837965e2885c29718ff12c11ab1d42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void TestStore::clearDecorations</definition>
        <argsstring>()</argsstring>
        <name>clearDecorations</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1ab3dec2e6bc75789344ec9d31c8b8a3c3">clearDecorations</reimplements>
        <briefdescription>
<para>Clear all decorations. </para>        </briefdescription>
        <detaileddescription>
<para>Erase all decorations from the store, restoring the state to when <computeroutput>lock</computeroutput> was called. Be sure to clear the cache of the referencing container! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="370" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a5a19b5fab70263e44a849b056d6a8de3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t TestStore::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <reimplements refid="d3/dd5/classSG_1_1IConstAuxStore_1af71be6076fcf09fd0f8c1d53e704548d">size</reimplements>
        <briefdescription>
<para>Return the number of elements in the store. </para>        </briefdescription>
        <detaileddescription>
<para>May return 0 for a store with no aux data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="371" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a0ec6edccd6d494356274475826bcc714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void *</type>
        <definition>virtual void* TestStore::getData</definition>
        <argsstring>(SG::auxid_t, size_t, size_t)</argsstring>
        <name>getData</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a0a6b90ed812993712727c76b64953c48">getData</reimplements>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Return the data vector for one aux data item. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The current size of the container (in case the data item does not already exist). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The current capacity of the container (in case the data item does not already exist).</para></parameterdescription>
</parameteritem>
</parameterlist>
Each aux data item is stored as a vector, with one entry per entry in the owning container. This returns a pointer to the start of the vector.</para><para>If the data item does not exist, it should be created and initialized to default values. <computeroutput>size</computeroutput> and <computeroutput>capacity</computeroutput> give the size for the new aux data item vector.</para><para>If the container is locked, throw an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="372" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a18dc0b6669d552fc8092193c10f67478" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref> &amp;</type>
        <definition>virtual const SG::auxid_set_t&amp; TestStore::getWritableAuxIDs</definition>
        <argsstring>() const </argsstring>
        <name>getWritableAuxIDs</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a691e17d3a91d2733af73a4c5ae17e625">getWritableAuxIDs</reimplements>
        <briefdescription>
<para>Return a set of identifiers for writable data items in this store. </para>        </briefdescription>
        <detaileddescription>
<para>This should include only non-const identifiers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="373" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="373" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a535c67526c3c9d755ccf24f5458bb66e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void TestStore::resize</definition>
        <argsstring>(size_t)</argsstring>
        <name>resize</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a3e35266b4688361e2c804b68b73892e0">resize</reimplements>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the size of all aux data vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new size.</para></parameterdescription>
</parameteritem>
</parameterlist>
This should be called when the size of the container changes. This should resize the vectors for all aux data items.</para><para>If the size of the container grows, the new elements should be default-initialized; if it shrinks, destructors should be run as appropriate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="374" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a45041431163bc7a4524e9adb640f96de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void TestStore::reserve</definition>
        <argsstring>(size_t)</argsstring>
        <name>reserve</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a76c099cf5b1e88b8bdfebf4c014e4d1b">reserve</reimplements>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the capacity of all aux data vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new capacity.</para></parameterdescription>
</parameteritem>
</parameterlist>
This should be called when the capacity of the container changes (by <computeroutput>reserve</computeroutput>). This should change the capacity for the vectors for all aux data items. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="375" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="375" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1ac06e5d8a61af8cbd390cd001e933e236" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void TestStore::shift</definition>
        <argsstring>(size_t, ptrdiff_t)</argsstring>
        <name>shift</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1abd4ea23e3b5eb58f8e747daaf2279068">shift</reimplements>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Shift the elements of the container. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index for the shift. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>The (signed) amount of the shift.</para></parameterdescription>
</parameteritem>
</parameterlist>
This operation shifts the elements in the vectors for all aux data items, to implement an insertion or deletion. <computeroutput>offs</computeroutput> may be either positive or negative.</para><para>If <computeroutput>offs</computeroutput> is positive, then the container is growing. The container size should be increased by <computeroutput>offs</computeroutput>, the element at <computeroutput>pos</computeroutput> moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The elements between <computeroutput>pos</computeroutput> and <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput> should be default-initialized.</para><para>If <computeroutput>offs</computeroutput> is negative, then the container is shrinking. The element at <computeroutput>pos</computeroutput> should be moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The container should then be shrunk by <computeroutput>-offs</computeroutput> elements (running destructors as appropriate). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="376" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="376" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1ae2165afe667c5e489fa3e4bfc02ac0d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool TestStore::setOption</definition>
        <argsstring>(SG::auxid_t auxid, const SG::AuxDataOption &amp;option)</argsstring>
        <name>setOption</name>
        <reimplements refid="dc/d05/classSG_1_1IAuxStore_1a371646fff1258a9f81b35d26eca3ac45">setOption</reimplements>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
        </param>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">SG::AuxDataOption</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Set an option for a given auxiliary variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>auxid</parametername>
</parameternamelist>
<parameterdescription>
<para>The identifier of the desired aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of the option depends on the particular representation of the variable.</para><para>Returns true if the option setting was successful; false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="379" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="378" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1aec6c7dce0b6949860c4f53bb0ef31c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TestStore::addRef</definition>
        <argsstring>()</argsstring>
        <name>addRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1af9da45d0fcc29917d7fe886d3d4736e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TestStore::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="48" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1aa67a0fa504c44e7708eab5e409e84744" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode TestStore::queryInterface</definition>
        <argsstring>(const InterfaceID &amp;, void **)</argsstring>
        <name>queryInterface</name>
        <param>
          <type>const InterfaceID &amp;</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="51" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a7288756d018cf90b16cfc2be00dd478c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; TestStore::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a2a0911b242cb54dd5773df372f97871c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SG::DataProxy *</type>
        <definition>SG::DataProxy* TestStore::deep_proxy</definition>
        <argsstring>(const void *const ) const </argsstring>
        <name>deep_proxy</name>
        <param>
          <type>const void *</type>
          <declname>const</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1adc24d901169837b34a2e3d5c56da3706" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SG::DataProxy *</type>
        <definition>SG::DataProxy* TestStore::proxy</definition>
        <argsstring>(const void *const pTransient) const </argsstring>
        <name>proxy</name>
        <param>
          <type>const void *const </type>
          <declname>pTransient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1ab273b14227c9b52f98f4cb231a127a23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SG::DataProxy *</type>
        <definition>SG::DataProxy* TestStore::proxy</definition>
        <argsstring>(const CLID &amp;) const </argsstring>
        <name>proxy</name>
        <param>
          <type>const <ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="66" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a3e1d14c153497596b0d0eb9076f84390" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>SG::DataProxy *</type>
        <definition>SG::DataProxy* TestStore::proxy</definition>
        <argsstring>(const CLID &amp;id, const std::string &amp;key) const </argsstring>
        <name>proxy</name>
        <param>
          <type>const <ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="68" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="67" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1aafb3850c118b7f51c9bfc685b3d45a57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>SG::DataProxy *</type>
        <definition>virtual SG::DataProxy* TestStore::proxy_exact</definition>
        <argsstring>(SG::sgkey_t sgkey) const </argsstring>
        <name>proxy_exact</name>
        <param>
          <type>SG::sgkey_t</type>
          <declname>sgkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="76" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1ae51cc9a46dbcbc15fd4f829efeb64128" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; const SG::DataProxy * &gt;</type>
        <definition>std::vector&lt;const SG::DataProxy*&gt; TestStore::proxies</definition>
        <argsstring>() const </argsstring>
        <name>proxies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="83" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="82" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1acf43d5f46d874b29b9f70d29b1b3159c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sgkey_t</type>
        <definition>sgkey_t TestStore::stringToKey</definition>
        <argsstring>(const std::string &amp;str, CLID clid)</argsstring>
        <name>stringToKey</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref></type>
          <declname>clid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a7d841a7d36534afbc67e1b59e94b4398" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string *</type>
        <definition>const std::string* TestStore::keyToString</definition>
        <argsstring>(sgkey_t) const </argsstring>
        <name>keyToString</name>
        <param>
          <type>sgkey_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="89" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1af43b1758d5b5db3391a0489111faa809" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string *</type>
        <definition>const std::string* TestStore::keyToString</definition>
        <argsstring>(sgkey_t key, CLID &amp;clid) const </argsstring>
        <name>keyToString</name>
        <param>
          <type>sgkey_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref> &amp;</type>
          <declname>clid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="92" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a84c454378e69eef74daa3fb241531a86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TestStore::registerKey</definition>
        <argsstring>(sgkey_t, const std::string &amp;, CLID)</argsstring>
        <name>registerKey</name>
        <param>
          <type>sgkey_t</type>
        </param>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="96" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="95" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a9f3971a91a66ca50c9aceb0886d49a42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestStore::tryELRemap</definition>
        <argsstring>(sgkey_t sgkey_in, size_t index_in, sgkey_t &amp;sgkey_out, size_t &amp;index_out)</argsstring>
        <name>tryELRemap</name>
        <param>
          <type>sgkey_t</type>
          <declname>sgkey_in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index_in</declname>
        </param>
        <param>
          <type>sgkey_t &amp;</type>
          <declname>sgkey_out</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>index_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="101" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="99" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1a9682b227a17ec07da7e21026db8c152f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode TestStore::addToStore</definition>
        <argsstring>(CLID, SG::DataProxy *proxy)</argsstring>
        <name>addToStore</name>
        <param>
          <type><ref refid="d0/d66/ClassID__traits_8h_1a2d7068444af754bf943f1dcbc5893801" kindref="member">CLID</ref></type>
        </param>
        <param>
          <type>SG::DataProxy *</type>
          <declname>proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="110" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1abcde7cb843e23130ca5943331143a319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestStore::record</definition>
        <argsstring>(const T *p, const std::string &amp;key)</argsstring>
        <name>record</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="119" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="118" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="dd/db9/classTestStore_1af25f502de95ced54d891261181916856" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestStore::remap</definition>
        <argsstring>(const std::string &amp;key_in, const std::string &amp;key_out, size_t index_in=0, size_t index_out=0)</argsstring>
        <name>remap</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key_in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key_out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index_in</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>index_out</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" line="145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODJet/test/TestStore.icc" bodystart="143" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="19651">
        <label>TestStore</label>
        <link refid="dd/db9/classTestStore"/>
        <childnode refid="19652" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19653">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="19652">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="19653" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19662">
        <label>SG::AuxDataOption</label>
        <link refid="d7/d31/classSG_1_1AuxDataOption"/>
        <childnode refid="19663" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="19665">
        <label>SG::hashtable&lt; const void *, std::pair&lt; const const void *, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt;, std::equal_to&lt; const void * &gt;, hash&lt; const void * &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="19666" relation="public-inheritance">
        </childnode>
        <childnode refid="19667" relation="public-inheritance">
        </childnode>
        <childnode refid="19668" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19658">
        <label>SG::hashtable&lt; TestStoreRemap, std::pair&lt; const TestStoreRemap, TestStoreRemap &gt;, std::allocator&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt;, std::equal_to&lt; TestStoreRemap &gt;, TestStoreRemapHash, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="19659" relation="public-inheritance">
        </childnode>
        <childnode refid="19660" relation="public-inheritance">
        </childnode>
        <childnode refid="19661" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19654">
        <label>TestStore</label>
        <link refid="dd/db9/classTestStore"/>
        <childnode refid="19655" relation="public-inheritance">
        </childnode>
        <childnode refid="19657" relation="usage">
          <edgelabel>m_remap</edgelabel>
        </childnode>
        <childnode refid="19662" relation="usage">
          <edgelabel>lastopt</edgelabel>
        </childnode>
        <childnode refid="19664" relation="usage">
          <edgelabel>m_tmap</edgelabel>
        </childnode>
        <childnode refid="19669" relation="usage">
          <edgelabel>m_kmap</edgelabel>
        </childnode>
      </node>
      <node id="19663">
        <label>string</label>
      </node>
      <node id="19667">
        <label>Internal::hash_code_base&lt;const void * , std::pair&lt; const const void *, SG::DataProxy * &gt; , Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , std::equal_to&lt; const void * &gt; , hash&lt; const void * &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="19661">
        <label>Internal::map_base&lt;TestStoreRemap , std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; , Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , unique_keys, hashtable&lt;TestStoreRemap , std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; , std::allocator&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , std::equal_to&lt; TestStoreRemap &gt; , TestStoreRemapHash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="19666">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;const void * , std::pair&lt; const const void *, SG::DataProxy * &gt; , std::allocator&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , std::equal_to&lt; const void * &gt; , hash&lt; const void * &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="19664">
        <label>SG::unordered_map&lt; const void *, SG::DataProxy * &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="19665" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19670">
        <label>SG::hashtable&lt; sgkey_t, std::pair&lt; const sgkey_t, SG::DataProxy * &gt;, std::allocator&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt;, std::equal_to&lt; sgkey_t &gt;, hash&lt; sgkey_t &gt;, Internal::mod_range_hashing, Internal::default_ranged_hash, Internal::prime_rehash_policy, false, false, true &gt;</label>
        <link refid="de/d63/classSG_1_1hashtable"/>
        <childnode refid="19671" relation="public-inheritance">
        </childnode>
        <childnode refid="19672" relation="public-inheritance">
        </childnode>
        <childnode refid="19673" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19656">
        <label>SG::IConstAuxStore</label>
        <link refid="d3/dd5/classSG_1_1IConstAuxStore"/>
      </node>
      <node id="19657">
        <label>SG::unordered_map&lt; TestStoreRemap, TestStoreRemap, TestStoreRemapHash &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="19658" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19659">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;TestStoreRemap , std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; , std::allocator&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , std::equal_to&lt; TestStoreRemap &gt; , TestStoreRemapHash , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="19669">
        <label>SG::unordered_map&lt; sgkey_t, SG::DataProxy * &gt;</label>
        <link refid="d1/d3b/classSG_1_1unordered__map"/>
        <childnode refid="19670" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19655">
        <label>SG::IAuxStore</label>
        <link refid="dc/d05/classSG_1_1IAuxStore"/>
        <childnode refid="19656" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19672">
        <label>Internal::hash_code_base&lt;sgkey_t , std::pair&lt; const sgkey_t, SG::DataProxy * &gt; , Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , std::equal_to&lt; sgkey_t &gt; , hash&lt; sgkey_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="19671">
        <label>Internal::rehash_base&lt;Internal::prime_rehash_policy , hashtable&lt;sgkey_t , std::pair&lt; const sgkey_t, SG::DataProxy * &gt; , std::allocator&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , std::equal_to&lt; sgkey_t &gt; , hash&lt; sgkey_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="db/d2b/classInternal_1_1rehash__base"/>
      </node>
      <node id="19668">
        <label>Internal::map_base&lt;const void * , std::pair&lt; const const void *, SG::DataProxy * &gt; , Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , unique_keys, hashtable&lt;const void * , std::pair&lt; const const void *, SG::DataProxy * &gt; , std::allocator&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const const void *, SG::DataProxy * &gt; &gt; , std::equal_to&lt; const void * &gt; , hash&lt; const void * &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
      <node id="19660">
        <label>Internal::hash_code_base&lt;TestStoreRemap , std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; , Internal::extract1st&lt; std::pair&lt; const TestStoreRemap, TestStoreRemap &gt; &gt; , std::equal_to&lt; TestStoreRemap &gt; , TestStoreRemapHash , Internal::mod_range_hashing , Internal::default_ranged_hash , cache_hash_code&gt;</label>
        <link refid="d0/d2e/classInternal_1_1hash__code__base"/>
      </node>
      <node id="19673">
        <label>Internal::map_base&lt;sgkey_t , std::pair&lt; const sgkey_t, SG::DataProxy * &gt; , Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , unique_keys, hashtable&lt;sgkey_t , std::pair&lt; const sgkey_t, SG::DataProxy * &gt; , std::allocator&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , Internal::extract1st&lt; std::pair&lt; const sgkey_t, SG::DataProxy * &gt; &gt; , std::equal_to&lt; sgkey_t &gt; , hash&lt; sgkey_t &gt; , Internal::mod_range_hashing , Internal::default_ranged_hash , Internal::prime_rehash_policy , cache_hash_code, constant_iterators, unique_keys&gt; &gt;</label>
        <link refid="d1/d54/classInternal_1_1map__base"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" line="363" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/test/AuxVectorData_test.cxx" bodystart="361" bodyend="387"/>
    <listofallmembers>
      <member refid="dd/db9/classTestStore_1aec6c7dce0b6949860c4f53bb0ef31c00" prot="public" virt="non-virtual"><scope>TestStore</scope><name>addRef</name></member>
      <member refid="dd/db9/classTestStore_1a9682b227a17ec07da7e21026db8c152f" prot="public" virt="non-virtual"><scope>TestStore</scope><name>addToStore</name></member>
      <member refid="dd/db9/classTestStore_1a9b837965e2885c29718ff12c11ab1d42" prot="public" virt="virtual"><scope>TestStore</scope><name>clearDecorations</name></member>
      <member refid="dd/db9/classTestStore_1a2a0911b242cb54dd5773df372f97871c" prot="public" virt="non-virtual"><scope>TestStore</scope><name>deep_proxy</name></member>
      <member refid="dd/db9/classTestStore_1ac7c5bf984a4157970b8112f8602d54c3" prot="public" virt="virtual"><scope>TestStore</scope><name>getAuxIDs</name></member>
      <member refid="dd/db9/classTestStore_1a03a266d9f00fbbf51e814aa7d23fe9fa" prot="public" virt="virtual"><scope>TestStore</scope><name>getData</name></member>
      <member refid="dd/db9/classTestStore_1a0ec6edccd6d494356274475826bcc714" prot="public" virt="virtual"><scope>TestStore</scope><name>getData</name></member>
      <member refid="dd/db9/classTestStore_1a058764aa8a12b920b8592414b8d0dde3" prot="public" virt="virtual"><scope>TestStore</scope><name>getDecoration</name></member>
      <member refid="dd/db9/classTestStore_1a18dc0b6669d552fc8092193c10f67478" prot="public" virt="virtual"><scope>TestStore</scope><name>getWritableAuxIDs</name></member>
      <member refid="dd/db9/classTestStore_1a7d841a7d36534afbc67e1b59e94b4398" prot="public" virt="non-virtual"><scope>TestStore</scope><name>keyToString</name></member>
      <member refid="dd/db9/classTestStore_1af43b1758d5b5db3391a0489111faa809" prot="public" virt="non-virtual"><scope>TestStore</scope><name>keyToString</name></member>
      <member refid="dd/db9/classTestStore_1abaf0ddd1223159d509528f7533eac050" prot="public" virt="non-virtual"><scope>TestStore</scope><name>kmap_t</name></member>
      <member refid="dd/db9/classTestStore_1a93b4d65fc1c3d2aef536bbc2f9a52379" prot="public" virt="non-virtual"><scope>TestStore</scope><name>lastid</name></member>
      <member refid="dd/db9/classTestStore_1ac2b8739caf25044363d1d26708bd2ec7" prot="public" virt="non-virtual"><scope>TestStore</scope><name>lastopt</name></member>
      <member refid="dd/db9/classTestStore_1a56c0114d540743b0801acf90e8afe19e" prot="public" virt="virtual"><scope>TestStore</scope><name>lock</name></member>
      <member refid="dd/db9/classTestStore_1a20a7870ed7a845b1f1c2115042967ade" prot="public" virt="non-virtual"><scope>TestStore</scope><name>m_kmap</name></member>
      <member refid="dd/db9/classTestStore_1a5b4ff60ea0d577df5fecd5e2a2532985" prot="public" virt="non-virtual"><scope>TestStore</scope><name>m_remap</name></member>
      <member refid="dd/db9/classTestStore_1a177a2e7fabbb76a09ae4a3c60040234f" prot="public" virt="non-virtual"><scope>TestStore</scope><name>m_stringPool</name></member>
      <member refid="dd/db9/classTestStore_1a2ee932b83af384a95c3e4cfeda436967" prot="public" virt="non-virtual"><scope>TestStore</scope><name>m_tmap</name></member>
      <member refid="dd/db9/classTestStore_1a7288756d018cf90b16cfc2be00dd478c" prot="public" virt="non-virtual"><scope>TestStore</scope><name>name</name></member>
      <member refid="dd/db9/classTestStore_1ae51cc9a46dbcbc15fd4f829efeb64128" prot="public" virt="non-virtual"><scope>TestStore</scope><name>proxies</name></member>
      <member refid="dd/db9/classTestStore_1adc24d901169837b34a2e3d5c56da3706" prot="public" virt="non-virtual"><scope>TestStore</scope><name>proxy</name></member>
      <member refid="dd/db9/classTestStore_1ab273b14227c9b52f98f4cb231a127a23" prot="public" virt="non-virtual"><scope>TestStore</scope><name>proxy</name></member>
      <member refid="dd/db9/classTestStore_1a3e1d14c153497596b0d0eb9076f84390" prot="public" virt="non-virtual"><scope>TestStore</scope><name>proxy</name></member>
      <member refid="dd/db9/classTestStore_1aafb3850c118b7f51c9bfc685b3d45a57" prot="public" virt="virtual"><scope>TestStore</scope><name>proxy_exact</name></member>
      <member refid="dd/db9/classTestStore_1aa67a0fa504c44e7708eab5e409e84744" prot="public" virt="non-virtual"><scope>TestStore</scope><name>queryInterface</name></member>
      <member refid="dd/db9/classTestStore_1abcde7cb843e23130ca5943331143a319" prot="public" virt="non-virtual"><scope>TestStore</scope><name>record</name></member>
      <member refid="dd/db9/classTestStore_1a84c454378e69eef74daa3fb241531a86" prot="public" virt="non-virtual"><scope>TestStore</scope><name>registerKey</name></member>
      <member refid="dd/db9/classTestStore_1af9da45d0fcc29917d7fe886d3d4736e9" prot="public" virt="non-virtual"><scope>TestStore</scope><name>release</name></member>
      <member refid="dd/db9/classTestStore_1af25f502de95ced54d891261181916856" prot="public" virt="non-virtual"><scope>TestStore</scope><name>remap</name></member>
      <member refid="dd/db9/classTestStore_1a07af99f4052457491a9812b0d51f307d" prot="public" virt="non-virtual"><scope>TestStore</scope><name>remap_t</name></member>
      <member refid="dd/db9/classTestStore_1a45041431163bc7a4524e9adb640f96de" prot="public" virt="virtual"><scope>TestStore</scope><name>reserve</name></member>
      <member refid="dd/db9/classTestStore_1a535c67526c3c9d755ccf24f5458bb66e" prot="public" virt="virtual"><scope>TestStore</scope><name>resize</name></member>
      <member refid="dd/db9/classTestStore_1ae2165afe667c5e489fa3e4bfc02ac0d3" prot="public" virt="virtual"><scope>TestStore</scope><name>setOption</name></member>
      <member refid="dd/db9/classTestStore_1ac06e5d8a61af8cbd390cd001e933e236" prot="public" virt="virtual"><scope>TestStore</scope><name>shift</name></member>
      <member refid="dd/db9/classTestStore_1a5a19b5fab70263e44a849b056d6a8de3" prot="public" virt="virtual"><scope>TestStore</scope><name>size</name></member>
      <member refid="dd/db9/classTestStore_1acf43d5f46d874b29b9f70d29b1b3159c" prot="public" virt="non-virtual"><scope>TestStore</scope><name>stringToKey</name></member>
      <member refid="dd/db9/classTestStore_1a80431fcc37dfa1b91d0e21bd8187b9d1" prot="public" virt="non-virtual"><scope>TestStore</scope><name>TestStore</name></member>
      <member refid="dd/db9/classTestStore_1aa5a37a524bcc00065691d812b9b1317d" prot="public" virt="non-virtual"><scope>TestStore</scope><name>tmap_t</name></member>
      <member refid="dd/db9/classTestStore_1a9f3971a91a66ca50c9aceb0886d49a42" prot="public" virt="non-virtual"><scope>TestStore</scope><name>tryELRemap</name></member>
      <member refid="d3/dd5/classSG_1_1IConstAuxStore_1a2acc9ded5fe9a64c8f508d3c0d7431a5" prot="public" virt="virtual"><scope>TestStore</scope><name>~IConstAuxStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
