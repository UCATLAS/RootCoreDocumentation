<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules" kind="class" prot="public">
    <compoundname>CxxUtils::ClassName::Rules</compoundname>
    <includes refid="d3/d7a/CxxUtils_2CxxUtils_2ClassName_8h" local="no">ClassName.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1af70563a706de14e857e789990aeb947c" prot="private" static="no">
        <type>std::pair&lt; <ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref>, <ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref> &gt;</type>
        <definition>typedef std::pair&lt;ClassName, ClassName&gt; CxxUtils::ClassName::Rules::pat_repl_t</definition>
        <argsstring></argsstring>
        <name>pat_repl_t</name>
        <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pattern and replacement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="190" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ab1488074fe6df9bbb29cfd62df3cf9b0" prot="private" static="no">
        <type>std::multimap&lt; std::string, pat_repl_t &gt;</type>
        <definition>typedef std::multimap&lt;std::string, pat_repl_t&gt; CxxUtils::ClassName::Rules::rulemap_t</definition>
        <argsstring></argsstring>
        <name>rulemap_t</name>
        <briefdescription>
<para>Map from the root of a pattern to the pattern, replacement pair. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1afa47c3aade06e40f7de1dfb544a912d5" prot="private" static="no" mutable="no">
        <type>rulemap_t</type>
        <definition>rulemap_t CxxUtils::ClassName::Rules::m_rules</definition>
        <argsstring></argsstring>
        <name>m_rules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a84d800bbd52890c6d12e114a860d7d96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CxxUtils::ClassName::Rules::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of defined rules. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="132" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ClassName.cxx" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CxxUtils::ClassName::Rules::add</definition>
        <argsstring>(const ClassName &amp;pattern, const ClassName &amp;replacement)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref> &amp;</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const <ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref> &amp;</type>
          <declname>replacement</declname>
        </param>
        <briefdescription>
<para>Add a new transformation rule. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>The pattern to match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replacement</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression with which to replace it.</para></parameterdescription>
</parameteritem>
</parameterlist>
The pattern may contain variables that are then substituted into the replacement; for example, given a pattern of `A&lt;$T, $T&gt;` and a replacement of `B&lt; $t&gt;=&quot;&quot;&gt;`, then `A&lt;Foo&lt;int&gt;, Foo&lt;int&gt; &gt;` would be transformed to `B&lt;Foo&lt;int&gt; &gt;&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ClassName.cxx" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a5182ec73aee588d8d667315e6faaf77d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CxxUtils::ClassName::Rules::applyTo</definition>
        <argsstring>(ClassName &amp;cn) const </argsstring>
        <name>applyTo</name>
        <param>
          <type><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref> &amp;</type>
          <declname>cn</declname>
        </param>
        <briefdescription>
<para>Apply the set of transformation rules to a class name object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cn</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to which the rules should be applied. Will be modified in place.</para></parameterdescription>
</parameteritem>
</parameterlist>
All transformation rules are matched against <computeroutput>cn</computeroutput>. If any match, the object is replaced with the replacement portion of the rule with match results substituted.</para><para>Returns true if any matches were made and false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="174" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ClassName.cxx" bodystart="100" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ac5f945c506f2701a6f625ff34ce36a23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CxxUtils::ClassName::Rules::apply</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>apply</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Apply transformations to a class name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The class name to transform.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the transformed class name.</para><para>This is just shorthand for calling `ClassNameapplyRules`. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="185" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/Root/ClassName.cxx" bodystart="124" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> set of transformation rules to use with <computeroutput><ref refid="d2/df5/classCxxUtils_1_1ClassName" kindref="compound">ClassName</ref></computeroutput>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" line="127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/ClassName.h" bodystart="126" bodyend="195"/>
    <listofallmembers>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a51dcaf57adfcf8c45dcbd6ae8e713dd2" prot="public" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>add</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ac5f945c506f2701a6f625ff34ce36a23" prot="public" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>apply</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a5182ec73aee588d8d667315e6faaf77d" prot="public" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>applyTo</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1afa47c3aade06e40f7de1dfb544a912d5" prot="private" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>m_rules</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1af70563a706de14e857e789990aeb947c" prot="private" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>pat_repl_t</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1ab1488074fe6df9bbb29cfd62df3cf9b0" prot="private" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>rulemap_t</name></member>
      <member refid="dd/d02/classCxxUtils_1_1ClassName_1_1Rules_1a84d800bbd52890c6d12e114a860d7d96" prot="public" virt="non-virtual"><scope>CxxUtils::ClassName::Rules</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
