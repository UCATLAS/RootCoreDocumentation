<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d59/namespaceSG" kind="namespace">
    <compoundname>SG</compoundname>
    <innerclass refid="dc/db0/classSG_1_1AuxElement" prot="public">SG::AuxElement</innerclass>
    <innerclass refid="df/dbd/classSG_1_1AuxElementComplete" prot="public">SG::AuxElementComplete</innerclass>
    <innerclass refid="d1/d1c/classSG_1_1AuxStoreInternal" prot="public">SG::AuxStoreInternal</innerclass>
    <innerclass refid="dd/d55/classSG_1_1AuxStoreStandalone" prot="public">SG::AuxStoreStandalone</innerclass>
    <innerclass refid="db/d33/classSG_1_1AuxTypeRegistry" prot="public">SG::AuxTypeRegistry</innerclass>
    <innerclass refid="dd/da5/classSG_1_1AuxVectorBase" prot="public">SG::AuxVectorBase</innerclass>
    <innerclass refid="db/dd6/classSG_1_1AuxVectorData" prot="public">SG::AuxVectorData</innerclass>
    <innerclass refid="de/d27/classSG_1_1DVLConstDataListBucket" prot="public">SG::DVLConstDataListBucket</innerclass>
    <innerclass refid="d7/dfa/structSG_1_1DataBucketTrait_3_01ConstDataList_3_01T_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; ConstDataList&lt; T &gt;, U &gt;</innerclass>
    <innerclass refid="da/d43/classSG_1_1BaseInfo_3_01ConstDataList_3_01T_01_4_01_4" prot="public">SG::BaseInfo&lt; ConstDataList&lt; T &gt; &gt;</innerclass>
    <innerclass refid="d3/d46/classSG_1_1DVLConstDataVectorBucket" prot="public">SG::DVLConstDataVectorBucket</innerclass>
    <innerclass refid="d6/d86/structSG_1_1DataBucketTrait_3_01ConstDataVector_3_01DV_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; ConstDataVector&lt; DV &gt;, U &gt;</innerclass>
    <innerclass refid="d4/dc5/classSG_1_1BaseInfo_3_01ConstDataVector_3_01DV_01_4_01_4" prot="public">SG::BaseInfo&lt; ConstDataVector&lt; DV &gt; &gt;</innerclass>
    <innerclass refid="dc/d34/structSG_1_1DataBucketTrait_3_01DataList_3_01T_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; DataList&lt; T &gt;, U &gt;</innerclass>
    <innerclass refid="d2/d25/structSG_1_1DataBucketTrait_3_01DataVector_3_01T_01_4_00_01U_01_4" prot="public">SG::DataBucketTrait&lt; DataVector&lt; T &gt;, U &gt;</innerclass>
    <innerclass refid="d0/d45/classSG_1_1ExcNoAuxStore" prot="public">SG::ExcNoAuxStore</innerclass>
    <innerclass refid="d8/da7/classSG_1_1ExcBadAuxVar" prot="public">SG::ExcBadAuxVar</innerclass>
    <innerclass refid="da/ddd/classSG_1_1ExcConstAuxData" prot="public">SG::ExcConstAuxData</innerclass>
    <innerclass refid="d4/d77/classSG_1_1ExcUntrackedSetStore" prot="public">SG::ExcUntrackedSetStore</innerclass>
    <innerclass refid="d8/ded/classSG_1_1ExcBadPrivateStore" prot="public">SG::ExcBadPrivateStore</innerclass>
    <innerclass refid="df/d74/classSG_1_1ExcAuxTypeMismatch" prot="public">SG::ExcAuxTypeMismatch</innerclass>
    <innerclass refid="df/dde/classSG_1_1ExcInsertionInBaseClass" prot="public">SG::ExcInsertionInBaseClass</innerclass>
    <innerclass refid="d5/d41/classSG_1_1ExcStoreLocked" prot="public">SG::ExcStoreLocked</innerclass>
    <innerclass refid="db/db6/classSG_1_1ExcNonowningContainer" prot="public">SG::ExcNonowningContainer</innerclass>
    <innerclass refid="d9/d63/classSG_1_1ExcUnknownAuxItem" prot="public">SG::ExcUnknownAuxItem</innerclass>
    <innerclass refid="dd/d01/classSG_1_1PackedContainer" prot="public">SG::PackedContainer</innerclass>
    <innerclass refid="d6/dd6/structSG_1_1inner__type" prot="public">SG::inner_type</innerclass>
    <innerclass refid="d6/db2/structSG_1_1inner__type_3_01std_1_1vector_3_01T_01_4_01_4" prot="public">SG::inner_type&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="d9/d4e/classSG_1_1PackedConverter" prot="public">SG::PackedConverter</innerclass>
    <innerclass refid="d5/dc1/classSG_1_1PackedParameters" prot="public">SG::PackedParameters</innerclass>
    <innerclass refid="d0/d6e/classSG_1_1AuxDataTraits" prot="public">SG::AuxDataTraits</innerclass>
    <innerclass refid="de/d97/classSG_1_1AuxDataTraits_3_01bool_01_4" prot="public">SG::AuxDataTraits&lt; bool &gt;</innerclass>
    <innerclass refid="d5/d68/classSG_1_1AuxTypeVector" prot="public">SG::AuxTypeVector</innerclass>
    <innerclass refid="d6/d8c/classSG_1_1AuxTypeVectorFactory" prot="public">SG::AuxTypeVectorFactory</innerclass>
    <innerclass refid="d6/d33/classSG_1_1DVLDataBucket" prot="public">SG::DVLDataBucket</innerclass>
    <innerclass refid="df/d76/classSG_1_1IsMostDerivedFlag" prot="public">SG::IsMostDerivedFlag</innerclass>
    <innerclass refid="dc/dfb/classSG_1_1AuxElementData" prot="public">SG::AuxElementData</innerclass>
    <innerclass refid="da/d62/classSG_1_1AuxElementPrivateData" prot="public">SG::AuxElementPrivateData</innerclass>
    <innerclass refid="d5/dde/classSG_1_1AuxElementStandaloneData" prot="public">SG::AuxElementStandaloneData</innerclass>
    <innerclass refid="d5/db7/classSG_1_1PackedContainerStreamer" prot="public">SG::PackedContainerStreamer</innerclass>
    <innerclass refid="d8/db3/classSG_1_1AuxVectorBase__test" prot="public">SG::AuxVectorBase_test</innerclass>
    <innerclass refid="d5/d6d/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01B_01_5_01_4_01_4" prot="public">SG::AuxStore_traits&lt; std::vector&lt; B * &gt; &gt;</innerclass>
    <innerclass refid="d0/d93/structSG_1_1AuxStore__traits_3_01std_1_1vector_3_01C_01_5_01_4_01_4" prot="public">SG::AuxStore_traits&lt; std::vector&lt; C * &gt; &gt;</innerclass>
    <innerclass refid="d6/d8d/classSG_1_1AuxVectorData__test" prot="public">SG::AuxVectorData_test</innerclass>
    <innerclass refid="d7/d31/classSG_1_1AuxDataOption" prot="public">SG::AuxDataOption</innerclass>
    <innerclass refid="d1/da5/classSG_1_1NoAuxStore" prot="public">SG::NoAuxStore</innerclass>
    <innerclass refid="d7/d5b/structSG_1_1AuxStore__traits__AuxDefault" prot="public">SG::AuxStore_traits_AuxDefault</innerclass>
    <innerclass refid="db/dc7/structSG_1_1AuxStore__traits__NoAuxDefault" prot="public">SG::AuxStore_traits_NoAuxDefault</innerclass>
    <innerclass refid="d4/d82/structSG_1_1AuxStore__traits1" prot="public">SG::AuxStore_traits1</innerclass>
    <innerclass refid="d0/d16/structSG_1_1AuxStore__traits1_3_01DOBJ_00_01typename_01SG__STD__OR__BOOST_1_1is__base__of_3_01IA91c0103f32d2bbc942c9589741f17571" prot="public">SG::AuxStore_traits1&lt; DOBJ, typename SG_STD_OR_BOOST::is_base_of&lt; IAuxElement, typename DOBJ::base_value_type &gt;::type &gt;</innerclass>
    <innerclass refid="db/da6/structSG_1_1AuxStore__traits" prot="public">SG::AuxStore_traits</innerclass>
    <innerclass refid="db/de0/structSG_1_1AuxStore__traits_3_01DOBJ_01_5_01_4" prot="public">SG::AuxStore_traits&lt; DOBJ * &gt;</innerclass>
    <innerclass refid="d4/d24/classSG_1_1AuxTypePlaceholder" prot="public">SG::AuxTypePlaceholder</innerclass>
    <innerclass refid="df/dca/classSG_1_1IAuxElement" prot="public">SG::IAuxElement</innerclass>
    <innerclass refid="db/dd2/classSG_1_1IAuxSetOption" prot="public">SG::IAuxSetOption</innerclass>
    <innerclass refid="dc/d05/classSG_1_1IAuxStore" prot="public">SG::IAuxStore</innerclass>
    <innerclass refid="dc/d42/classSG_1_1IAuxStoreHolder" prot="public">SG::IAuxStoreHolder</innerclass>
    <innerclass refid="db/d37/classSG_1_1IAuxStoreIO" prot="public">SG::IAuxStoreIO</innerclass>
    <innerclass refid="de/d12/classSG_1_1IAuxTypeVector" prot="public">SG::IAuxTypeVector</innerclass>
    <innerclass refid="d9/d9f/classSG_1_1IAuxTypeVectorFactory" prot="public">SG::IAuxTypeVectorFactory</innerclass>
    <innerclass refid="d3/dd5/classSG_1_1IConstAuxStore" prot="public">SG::IConstAuxStore</innerclass>
    <innerclass refid="d8/d7d/structSG_1_1hash_3_01T_01_5_01_4" prot="public">SG::hash&lt; T * &gt;</innerclass>
    <innerclass refid="dc/d91/structSG_1_1Fnv__hash" prot="public">SG::Fnv_hash</innerclass>
    <innerclass refid="d4/d87/structSG_1_1Fnv__hash_3_014_01_4" prot="public">SG::Fnv_hash&lt; 4 &gt;</innerclass>
    <innerclass refid="d5/d49/structSG_1_1Fnv__hash_3_018_01_4" prot="public">SG::Fnv_hash&lt; 8 &gt;</innerclass>
    <innerclass refid="d4/dbc/structSG_1_1hash_3_01std_1_1string_01_4" prot="public">SG::hash&lt; std::string &gt;</innerclass>
    <innerclass refid="df/d59/structSG_1_1hash_3_01float_01_4" prot="public">SG::hash&lt; float &gt;</innerclass>
    <innerclass refid="dd/d80/structSG_1_1hash_3_01double_01_4" prot="public">SG::hash&lt; double &gt;</innerclass>
    <innerclass refid="de/d76/structSG_1_1hash_3_01long_01double_01_4" prot="public">SG::hash&lt; long double &gt;</innerclass>
    <innerclass refid="de/d63/classSG_1_1hashtable" prot="public">SG::hashtable</innerclass>
    <innerclass refid="d1/d3b/classSG_1_1unordered__map" prot="public">SG::unordered_map</innerclass>
    <innerclass refid="d1/d54/classSG_1_1unordered__multimap" prot="public">SG::unordered_multimap</innerclass>
    <innerclass refid="dd/dac/classSG_1_1unordered__set" prot="public">SG::unordered_set</innerclass>
    <innerclass refid="df/d21/classSG_1_1unordered__multiset" prot="public">SG::unordered_multiset</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573" prot="public" static="no">
        <name>IndexTrackingPolicy</name>
        <enumvalue id="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573ad08b3b1af2cb1dd45428b131f9f05ad7" prot="public">
          <name>DEFAULT_TRACK_INDICES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default value. Set index tracking based on the ownership policy. If this container owns its elements, then track indices; otherwise do not. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a3fef24c7e616865bef9cfc1ecd85b67d" prot="public">
          <name>ALWAYS_TRACK_INDICES</name>
          <briefdescription>
<para>Always track indices, regardless of the setting of the ownership policy. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d59/namespaceSG_1a9f3d699f65390b7f8baf54d9cd634573a6e7a344e9aac93f8a793eebda3c608a8" prot="public">
          <name>NEVER_TRACK_INDICES</name>
          <briefdescription>
<para>Never track indices, regardless of the setting of the ownership policy. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/IndexTrackingPolicy.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/IndexTrackingPolicy.h" bodystart="32" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8" prot="public" static="no">
        <name>OwnershipPolicy</name>
        <enumvalue id="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8a1f65f0fb55784cfd27d9d4d6d7986d4d" prot="public">
          <name>OWN_ELEMENTS</name>
          <briefdescription>
<para>this data object owns its elements </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dd/d59/namespaceSG_1acd9d1a31242c6243cc1c6fab0fbc7cd8ad7d4cf2303700f0966e4140f236c4bf1" prot="public">
          <name>VIEW_ELEMENTS</name>
          <briefdescription>
<para>this data object is a view, it does not own its elmts </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>describes the possible element ownership policies (see e.g. <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Paolo Calafiura &lt;<ulink url="mailto:pcalafiura@lbl.gov">pcalafiura@lbl.gov</ulink>&gt; - ATLAS Collaboration </para></simplesect>
<simplesect kind="rcs"><title>Id</title><para><ref refid="d3/da4/OwnershipPolicy_8h_source" kindref="compound">OwnershipPolicy.h</ref> 581165 2014-02-03 10:42:54Z krasznaa </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/OwnershipPolicy.h" line="12" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/OwnershipPolicy.h" bodystart="12" bodyend="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t SG::auxid_t</definition>
        <argsstring></argsstring>
        <name>auxid_t</name>
        <briefdescription>
<para>Identifier for a particular aux data item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/d59/namespaceSG_1a1a8bcc4ee42936e2b794bac38e0f6de0" prot="public" static="no">
        <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set</ref>&lt; size_t &gt;</type>
        <definition>typedef SG::unordered_set&lt;size_t&gt; SG::auxid_set_t</definition>
        <argsstring></argsstring>
        <name>auxid_set_t</name>
        <briefdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> set of aux data identifiers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" line="40" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dd/d59/namespaceSG_1a2af69af4d74773511f9d7183a7a809cd" prot="public" static="yes" mutable="no">
        <type>const <ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref></type>
        <definition>const auxid_t SG::null_auxid</definition>
        <argsstring></argsstring>
        <name>null_auxid</name>
        <initializer> static_cast&lt;<ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">auxid_t</ref>&gt; (-1)</initializer>
        <briefdescription>
<para>To signal no aux data item. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/AuxTypes.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/d59/namespaceSG_1af4a311cda5628ef02cd71b41da344bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::ATH_NORETURN</definition>
        <argsstring>(void throwExcNonowningContainer())</argsstring>
        <name>ATH_NORETURN</name>
        <param>
          <type>void </type>
          <declname>throwExcNonowningContainer</declname>
          <array>()</array>
        </param>
        <briefdescription>
<para>Throw a <ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound">SG::ExcNonowningContainer</ref> exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/exceptions.h" line="215"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ad66bd37b91df23bca5c092987bae6b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::ATH_NORETURN</definition>
        <argsstring>(void throwExcUnknownAuxItem(const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;, const std::type_info *typ=0))</argsstring>
        <name>ATH_NORETURN</name>
        <param>
          <type>void </type>
          <declname>throwExcUnknownAuxItem</declname>
          <array>const std::string &amp;name, const std::string &amp;clsname=&quot;&quot;, const std::type_info *typ=0</array>
        </param>
        <briefdescription>
<para>Throw a <ref refid="d9/d63/classSG_1_1ExcUnknownAuxItem" kindref="compound">SG::ExcUnknownAuxItem</ref> exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>Class name of the aux data item, or an empty string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the item, if provided. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/exceptions.h" line="249"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a1b43d42a3d7a635ea8b7e89ea4ed207e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::normalizedTypeinfoName</definition>
        <argsstring>(const std::type_info &amp;info)</argsstring>
        <name>normalizedTypeinfoName</name>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Convert a <computeroutput>type_info</computeroutput> to a normalized string representation (matching the names used in the root dictionary). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>The type to convert.</para></parameterdescription>
</parameteritem>
</parameterlist>
The function `AthContainer_detailtypeinfoName` may be used to convert a C++ `type_info` to a string representing the name of the class; this handles platform-dependent details such as performing demangling.</para><para>However, the name you get as a result of this does not necessarily match the name by which the class is known in the ROOT dictionary. In particular, defaulted template arguments for STL containers and <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> are suppressed in the dictionary. So, for example, for a vector class <computeroutput>typeinfoName</computeroutput> may produce `stdvector&lt;int, std::allocator&lt;T&gt; &gt;`, while in the dictionary it is known as `stdvector&lt;int&gt;`. Using <computeroutput>normalizedTypeinfoName</computeroutput> instead will transform the names to match what&apos;s in the dictionary. This function will also cache the typeinfo -&gt; string conversions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/normalizedTypeinfoName.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/normalizedTypeinfoName.cxx" bodystart="119" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a38b539ad86491a55bf89748a05e7906a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::copyAuxStoreThinned</definition>
        <argsstring>(const SG::IConstAuxStore &amp;orig, SG::IAuxStore &amp;copy, IThinningSvc *svc)</argsstring>
        <name>copyAuxStoreThinned</name>
        <param>
          <type>const <ref refid="d3/dd5/classSG_1_1IConstAuxStore" kindref="compound">SG::IConstAuxStore</ref> &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <briefdescription>
<para>Helper to copy an aux store while applying thinning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>Source aux store from which to coy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination aux store to which to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>orig</computeroutput> and <computeroutput>copy</computeroutput> are both auxiliary store objects. The data from <computeroutput>orig</computeroutput> will be copied to <computeroutput>copy</computeroutput>, with individual elements removed according to thinning recorded for <computeroutput>orig</computeroutput> in <computeroutput>svc</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyAuxStoreThinned.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/src/copyAuxStoreThinned.cxx" bodystart="34" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a698cf63fca9debb795083d1e9fd7ee35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>CONTAINER *</type>
        <definition>CONTAINER * SG::copyThinned</definition>
        <argsstring>(const CONTAINER &amp;orig, IThinningSvc *svc)</argsstring>
        <name>copyThinned</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <briefdescription>
<para>Helper to copy an object while applying thinning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns a new copy of <computeroutput>orig</computeroutput> with elements removed according to the thinning defined in <computeroutput>svc</computeroutput>. Ownership of the new object is passed back to the caller.</para><para>The code here handles <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> and <computeroutput><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">IAuxStore</ref></computeroutput> objects. Support for additional object types may be added by adding overloads for <computeroutput>copyThinned1</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns a new copy of <computeroutput>orig</computeroutput> with elements removed according to the thinning defined in <computeroutput>svc</computeroutput>. Ownership of the new object is passed back to the caller. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.h" line="55" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.icc" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a7657080dab6e0c36636f2ef30a689e83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>CONTAINER *</type>
        <definition>CONTAINER * SG::copyThinned1</definition>
        <argsstring>(const CONTAINER &amp;orig, const void *dummy, IThinningSvc *svc)</argsstring>
        <name>copyThinned1</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <briefdescription>
<para>Helper to copy an object while applying thinning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>Dummy argument for overload resolution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is the generic version of <computeroutput>copyThinned</computeroutput>, which matches types for which there is not a more specific overload. It simply makes a copy of <computeroutput>orig</computeroutput> using the copy constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.icc" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a665fe27c0870bc351d867f8b0b65ecd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>CONTAINER *</type>
        <definition>CONTAINER * SG::copyThinned1</definition>
        <argsstring>(const CONTAINER &amp;orig, const DataVector&lt; typename CONTAINER::base_value_type &gt; *dummy, IThinningSvc *svc)</argsstring>
        <name>copyThinned1</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type>const <ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref>&lt; typename CONTAINER::base_value_type &gt; *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <briefdescription>
<para>Helper to copy an object while applying thinning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>Dummy argument for overload resolution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
This overload handles <computeroutput><ref refid="d0/d4d/classDataVector" kindref="compound">DataVector</ref></computeroutput> types. It returns a view container copy of <computeroutput>orig</computeroutput>, from which any thinned elements are removed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.icc" bodystart="44" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a055a3ae57de293f41d168c418cf27e6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>CONTAINER *</type>
        <definition>CONTAINER * SG::copyThinned1</definition>
        <argsstring>(const CONTAINER &amp;orig, const SG::IAuxStore *dummy, IThinningSvc *svc)</argsstring>
        <name>copyThinned1</name>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">SG::IAuxStore</ref> *</type>
          <declname>dummy</declname>
        </param>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <briefdescription>
<para>Helper to copy an object while applying thinning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>orig</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to copy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dummy</parametername>
</parameternamelist>
<parameterdescription>
<para>Dummy argument for overload resolution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service.</para></parameterdescription>
</parameteritem>
</parameterlist>
This overload handles <computeroutput><ref refid="dc/d05/classSG_1_1IAuxStore" kindref="compound">IAuxStore</ref></computeroutput> types. It returns a new copy of the store, with any thinned elements removed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.h" line="104" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/copyThinned.icc" bodystart="87" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a3ac6516722abaa699af584c9677b4142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class CONTAINER</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool SG::getThinnedFlags</definition>
        <argsstring>(IThinningSvc *svc, const CONTAINER &amp;container, size_t &amp;nremaining, std::vector&lt; unsigned char &gt; &amp;flags)</argsstring>
        <name>getThinnedFlags</name>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <param>
          <type>const CONTAINER &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>nremaining</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Return vector of flags giving which container elements were thinned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service (or 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container for which to find thinning information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nremaining[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the container not thinned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Array telling which elements were thinned.</para></parameterdescription>
</parameteritem>
</parameterlist>
If no thinning is done on <computeroutput>CONTAINER</computeroutput>, then return false with <computeroutput>nremaining</computeroutput> equal to `container.size()`. <computeroutput>flags</computeroutput> may be empty in this case.</para><para>Otherwise, the container was thinned, and the function returns true. The size of <computeroutput>flags</computeroutput> will equal the container size; each element of <computeroutput>flags</computeroutput> is non-zero if the corresponding container element has been thinned. <computeroutput>nremaining</computeroutput> will be set to the count of elements that have _not_ been thinned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/getThinnedFlags.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/getThinnedFlags.icc" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a01155fc796e93721d5a4004a7c7f6282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SG::getThinnedFlags1</definition>
        <argsstring>(IThinningSvc *svc, const void *container, size_t size, size_t &amp;nremaining, std::vector&lt; unsigned char &gt; &amp;flags)</argsstring>
        <name>getThinnedFlags1</name>
        <param>
          <type>IThinningSvc *</type>
          <declname>svc</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>nremaining</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Return vector of flags giving which container elements were thinned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>svc</parametername>
</parameternamelist>
<parameterdescription>
<para>The thinning service (or 0). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>container</parametername>
</parameternamelist>
<parameterdescription>
<para>The container for which to find thinning information. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nremaining[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the container not thinned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>Array telling which elements were thinned.</para></parameterdescription>
</parameteritem>
</parameterlist>
This is and out-of-line helper for <computeroutput>getThinnedFlags</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/tools/getThinnedFlags.h" line="63" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/src/getThinnedFlags.cxx" bodystart="27" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a4cc237ae64b6624b127c8fdd9d8c8226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SG::writePackedParameters</definition>
        <argsstring>(TBuffer &amp;b, const SG::PackedParameters &amp;parms)</argsstring>
        <name>writePackedParameters</name>
        <param>
          <type>TBuffer &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref> &amp;</type>
          <declname>parms</declname>
        </param>
        <briefdescription>
<para>Write a set of packed parameters to a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to which to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/dict/PackedContainerStreamer.cxx" line="29" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/dict/PackedContainerStreamer.cxx" bodystart="29" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a84d16a54a3ac43dc0a0a46db3ca9dc3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/dc1/classSG_1_1PackedParameters" kindref="compound">SG::PackedParameters</ref></type>
        <definition>SG::PackedParameters SG::readPackedParameters</definition>
        <argsstring>(TBuffer &amp;b)</argsstring>
        <name>readPackedParameters</name>
        <param>
          <type>TBuffer &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Read a set of packed parameters from a buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer from which to write. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/dict/PackedContainerStreamer.cxx" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/dict/PackedContainerStreamer.cxx" bodystart="45" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1abf9df10af360478f2df041d31385af91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excFormatName</definition>
        <argsstring>(SG::auxid_t auxid)</argsstring>
        <name>excFormatName</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Helper: format an aux data item name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="21" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ab4e9737528915950782111bcb863c3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excNoAuxStore_format</definition>
        <argsstring>(SG::auxid_t auxid)</argsstring>
        <name>excNoAuxStore_format</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ae8372f12b45e7ab56073759d1bbffc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excNoAuxStore_format</definition>
        <argsstring>(const char *op)</argsstring>
        <name>excNoAuxStore_format</name>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a6a51ed3a2adc11a7edcd88f76d30c7eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excBadAuxVar_format</definition>
        <argsstring>(SG::auxid_t auxid)</argsstring>
        <name>excBadAuxVar_format</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="86" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ab9966a2b7a15cb3d11a4041642e370ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excConstAuxData_format</definition>
        <argsstring>(const std::string &amp;op, SG::auxid_t auxid)</argsstring>
        <name>excConstAuxData_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="111" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a8cf3e31b95b30a2a9c78fc60190174e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excAuxTypeMismatch_format</definition>
        <argsstring>(SG::auxid_t auxid, const std::type_info &amp;new_type, const std::type_info &amp;old_type)</argsstring>
        <name>excAuxTypeMismatch_format</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>new_type</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>old_type</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="166" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1adb46eb75b76b176f05d8b52a7e474999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excInsertionInBaseClass_format</definition>
        <argsstring>(const char *op, const std::type_info &amp;base_type, const std::type_info &amp;complete_type)</argsstring>
        <name>excInsertionInBaseClass_format</name>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>base_type</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>complete_type</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="202" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="199" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a9bba82c6becf2bad1045a52a3dab4fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excStoreLocked_format</definition>
        <argsstring>(SG::auxid_t auxid)</argsstring>
        <name>excStoreLocked_format</name>
        <param>
          <type><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member">SG::auxid_t</ref></type>
          <declname>auxid</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="235" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a03190d5872cae1bbae9920bcc1d43cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excStoreLocked_format</definition>
        <argsstring>(const char *op)</argsstring>
        <name>excStoreLocked_format</name>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="246" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ab5c859198d7bd7a8ec1e94a1139759ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::throwExcNonowningContainer</definition>
        <argsstring>()</argsstring>
        <name>throwExcNonowningContainer</name>
        <briefdescription>
<para>Throw a <ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound">SG::ExcNonowningContainer</ref> exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="291" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1aeb157461ff61b0eeb3a50ae6c2620bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SG::excUnknownAuxItem_format</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname, const std::type_info *typ)</argsstring>
        <name>excUnknownAuxItem_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <param>
          <type>const std::type_info *</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Helper: format exception error string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="303" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="300" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ad21304bfff9901fb3e07fb205b4325d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SG::throwExcUnknownAuxItem</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;clsname, const std::type_info *typ)</argsstring>
        <name>throwExcUnknownAuxItem</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>clsname</declname>
        </param>
        <param>
          <type>const std::type_info *</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Throw a <ref refid="db/db6/classSG_1_1ExcNonowningContainer" kindref="compound">SG::ExcNonowningContainer</ref> exception. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the aux data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clsname</parametername>
</parameternamelist>
<parameterdescription>
<para>Class name of the aux data item, or an empty string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the item, if provided. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" line="339" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/Root/exceptions.cxx" bodystart="336" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a1858fed3b49849ae35582f6aa319d93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(bool)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="115"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1adb4d19eeb6d6aa21d50ee7d13b331baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(char)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a3fd4ed494625ec1480d4e5847cb07e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(signed char)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>signed</type>
          <declname>char</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a3418a7bd4dd729c6c5b28beb4dbc21e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(unsigned char)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>unsigned</type>
          <declname>char</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1acbe35935f43e47e94faff86c61dc34eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(wchar_t)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>wchar_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a7f37bd39ffe31c172f7116663c3bd153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(short)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>short</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="120"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1aa482cc78d9a7312c94a364c5aba5d284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(int)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="121"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a213b88200816b263f46e995da2be042e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SG::tr1_hashtable_define_trivial_hash</definition>
        <argsstring>(long)</argsstring>
        <name>tr1_hashtable_define_trivial_hash</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/hashtable.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a1ec6b46e6e9e0c4e683eb8ea104d6a07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>class Hash</type>
          </param>
          <param>
            <type>class <ref refid="df/d97/structPred" kindref="compound">Pred</ref></type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
          <param>
            <type>bool</type>
            <declname>cache_hash_code</declname>
            <defname>cache_hash_code</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::swap</definition>
        <argsstring>(unordered_map&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt; &amp;x, unordered_map&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">unordered_map</ref>&lt; Key, <ref refid="d1/def/classT" kindref="compound">T</ref>, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">unordered_map</ref>&lt; Key, <ref refid="d1/def/classT" kindref="compound">T</ref>, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_map.h" line="174" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_map.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a4e26cfcfe2813a8131743ecb01c718b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Key</type>
          </param>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
          <param>
            <type>class Hash</type>
          </param>
          <param>
            <type>class <ref refid="df/d97/structPred" kindref="compound">Pred</ref></type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
          <param>
            <type>bool</type>
            <declname>cache_hash_code</declname>
            <defname>cache_hash_code</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::swap</definition>
        <argsstring>(unordered_multimap&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt; &amp;x, unordered_multimap&lt; Key, T, Hash, Pred, Alloc, cache_hash_code &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">unordered_multimap</ref>&lt; Key, <ref refid="d1/def/classT" kindref="compound">T</ref>, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">unordered_multimap</ref>&lt; Key, <ref refid="d1/def/classT" kindref="compound">T</ref>, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_map.h" line="181" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_map.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1ab0f7b8f99e5d800c6cdd7e691ff68500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Value</type>
          </param>
          <param>
            <type>class Hash</type>
          </param>
          <param>
            <type>class <ref refid="df/d97/structPred" kindref="compound">Pred</ref></type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
          <param>
            <type>bool</type>
            <declname>cache_hash_code</declname>
            <defname>cache_hash_code</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::swap</definition>
        <argsstring>(unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt; &amp;x, unordered_set&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">unordered_set</ref>&lt; Value, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">unordered_set</ref>&lt; Value, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_set.h" line="169" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_set.h" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="dd/d59/namespaceSG_1a4b45293ad5bf7181a64c0e2e1dcfc443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Value</type>
          </param>
          <param>
            <type>class Hash</type>
          </param>
          <param>
            <type>class <ref refid="df/d97/structPred" kindref="compound">Pred</ref></type>
          </param>
          <param>
            <type>class Alloc</type>
          </param>
          <param>
            <type>bool</type>
            <declname>cache_hash_code</declname>
            <defname>cache_hash_code</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SG::swap</definition>
        <argsstring>(unordered_multiset&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt; &amp;x, unordered_multiset&lt; Value, Hash, Pred, Alloc, cache_hash_code &gt; &amp;y)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">unordered_multiset</ref>&lt; Value, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">unordered_multiset</ref>&lt; Value, Hash, <ref refid="df/d97/structPred" kindref="compound">Pred</ref>, Alloc, cache_hash_code &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_set.h" line="176" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/unordered_set.h" bodystart="174" bodyend="176"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Constructor from a payload object. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to hold in the bucket.</para></parameterdescription>
</parameteritem>
</parameterlist>
Namespace used by StoreGate for some of its internal structures/classes </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainers/AthContainers/AuxElement.h" line="28"/>
  </compounddef>
</doxygen>
