<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d2d/classCP_1_1SystematicVariation" kind="class" prot="public">
    <compoundname>CP::SystematicVariation</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="dd/d2d/classCP_1_1SystematicVariation_1a5b937e28efccaf0a88614f9f27e10535" prot="public" static="no">
        <name>CONTINUOUS_ARG</name>
        <enumvalue id="dd/d2d/classCP_1_1SystematicVariation_1a5b937e28efccaf0a88614f9f27e10535a8deb41f8ee77e1ba1d62f1b497491ca5" prot="public">
          <name>CONTINUOUS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: constructor for indicating continuous systematics guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" bodystart="82" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/d2d/classCP_1_1SystematicVariation_1aa73994bb605dbcf454fe8af467637d22" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string CP::SystematicVariation::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
<para>description: members directly corresponding to accessors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="267" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1aeaf6c6883eb781e96a9034d512064ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::SystematicVariation::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="58" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a082f5f73eed13f790b6e67074e62c979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>()</argsstring>
        <name>SystematicVariation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard default constructor guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1ace0ff053f5025f46a8d3fad28bbc5741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>(const std::string &amp;val_name)</argsstring>
        <name>SystematicVariation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: constructor from the given members guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="71" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a36b4a8079137d702fea92780d7fa624e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>(const std::string &amp;val_basename, const std::string &amp;val_subvariation)</argsstring>
        <name>SystematicVariation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_basename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_subvariation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="187" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a2434d48524c53725f5c29406d897e5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>(const std::string &amp;val_basename, float val_parameter)</argsstring>
        <name>SystematicVariation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_basename</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val_parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>rationale: in case the parameter is ~0 we initialize this to an empty systematic, since we are essentially not requesting anything </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="75" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="197" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a91450ccd9b344e5771585c78bc50de9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>(const std::string &amp;val_basename, CONTINUOUS_ARG)</argsstring>
        <name>SystematicVariation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_basename</declname>
        </param>
        <param>
          <type><ref refid="dd/d2d/classCP_1_1SystematicVariation_1a5b937e28efccaf0a88614f9f27e10535" kindref="member">CONTINUOUS_ARG</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1acdd47dd6ac0da18c686dab32c0dd62a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::SystematicVariation::SystematicVariation</definition>
        <argsstring>(const std::set&lt; CP::SystematicVariation &gt; &amp;systematics, std::string val_basename)</argsstring>
        <name>SystematicVariation</name>
        <param>
          <type>const std::set&lt; <ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">CP::SystematicVariation</ref> &gt; &amp;</type>
          <declname>systematics</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val_basename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: this constructor picks the systematic from the set of systematics based on the basename. if multiple systematics with the same basename are in the set, it picks one of them. if no systematic has this basename it is initialized to the empty systematic. guarantee: strong failures: out of memory II rationale: this is meant to be used inside <ref refid="d2/d4c/namespaceCP" kindref="compound">CP</ref> tools, so they can more easily pick up systematics they care about (in certain situations). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="142"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a921c7b5020877056d9399560d696b6e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether this is an empty systematic, i.e. whether we can safely ignore it guarantee: no-fail rationale: there are a number of cases in which a systematic may become initialized to nothing, e.g. when choosing a 0 parameter. this is an easy way to check for it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="152" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a5d9f8e460b9b300cc47959d1b5866bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; CP::SystematicVariation::name</definition>
        <argsstring>() const </argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the full systematics name, for use in strings, etc. guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a29a6c407ced8513717e0855bede8f20d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CP::SystematicVariation::basename</definition>
        <argsstring>() const </argsstring>
        <name>basename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the base name, i.e. without the part that specifies by how many sigmas we varied guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="167" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="315" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1ace8bc519fd4149118b2099a1bb6bd744" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CP::SystematicVariation::subvariation</definition>
        <argsstring>() const </argsstring>
        <name>subvariation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the part of the name that indicates by how many sigmas we varied guarantee: strong failures: out of memory II warning: an empty subvariation is *not* the same as requesting the nuisance parameter to be 0. it is a systematic that doesn&apos;t have multiple subvariations </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="329" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a2b6754480c75e0649348930bf7f84d85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float CP::SystematicVariation::parameter</definition>
        <argsstring>() const </argsstring>
        <name>parameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the numeric parameter contained in the <ref refid="dd/d2d/classCP_1_1SystematicVariation_1ace8bc519fd4149118b2099a1bb6bd744" kindref="member">subvariation()</ref>, or 0 if the subvariation can&apos;t be parsed into a number guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="186" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="343" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a2f6226c22d29a10085e8b84d5102dbd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; unsigned, float &gt;</type>
        <definition>std::pair&lt; unsigned, float &gt; CP::SystematicVariation::getToyVariation</definition>
        <argsstring>() const </argsstring>
        <name>getToyVariation</name>
        <briefdescription>
<para>unpack the toy variation </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the index of the toy, and the scale </para></simplesect>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 parse errors<linebreak/>
 not a toy variation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="198" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="377" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1ad11ce65b6aadb36f4748c60b99b97fc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::isToyEnsemble</definition>
        <argsstring>() const </argsstring>
        <name>isToyEnsemble</name>
        <briefdescription>
<para>whether this represents a toy ensemble </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="207" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="399" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1aabe004099571335e19234c1f6a51d4c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::isContinuousEnsemble</definition>
        <argsstring>() const </argsstring>
        <name>isContinuousEnsemble</name>
        <briefdescription>
<para>whether this represents a continuous ensemble </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="216" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="408" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a0551a56a6ef6427abe63628b0465c8ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::isEnsemble</definition>
        <argsstring>() const </argsstring>
        <name>isEnsemble</name>
        <briefdescription>
<para>whether this represents any form of ensemble </para>        </briefdescription>
        <detaileddescription>
<para>this can be used to check whether this is a valid variation to pass into <ref refid="d4/d5c/classCP_1_1ISystematicsTool_1a73f35f85955411a7e14cb208721a242d" kindref="member">ISystematicsTool::applySystematicVariation</ref> <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="228" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="417" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a0390012fe3248daaaafbe6142117679f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::ensembleContains</definition>
        <argsstring>(const SystematicVariation &amp;sys) const </argsstring>
        <name>ensembleContains</name>
        <param>
          <type>const <ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref> &amp;</type>
          <declname>sys</declname>
        </param>
        <briefdescription>
<para>whether this is an ensemble that contains the given systematic variation </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="426" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1ac4346fff7437ec450e89e614d6dc1699" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::isToyVariation</definition>
        <argsstring>() const </argsstring>
        <name>isToyVariation</name>
        <briefdescription>
<para>whether this represents a toy variation </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="247" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="440" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1ae1859f4c0d55b06ab49cfbcdfe80bfee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CP::SystematicVariation::isContinuousVariation</definition>
        <argsstring>() const </argsstring>
        <name>isContinuousVariation</name>
        <briefdescription>
<para>whether this represents a continuous variation </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="256" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="449" bodyend="453"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a8cec193f91441352aeaf385497044ac9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref></type>
        <definition>SystematicVariation CP::SystematicVariation::makeToyVariation</definition>
        <argsstring>(const std::string &amp;basename, unsigned toyIndex, float toyScale)</argsstring>
        <name>makeToyVariation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>basename</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>toyIndex</declname>
        </param>
        <param>
          <type>float</type>
          <declname>toyScale</declname>
        </param>
        <briefdescription>
<para>constructor for toy systematics </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="241" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1adc08c40c1964cb8da7d6ac9b4eb61964" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref></type>
        <definition>SystematicVariation CP::SystematicVariation::makeToyEnsemble</definition>
        <argsstring>(const std::string &amp;basename)</argsstring>
        <name>makeToyEnsemble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>basename</declname>
        </param>
        <briefdescription>
<para>constructor for toy systematics ensemble </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1a396035761bd30c89c2f3bdf430842277" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref></type>
        <definition>SystematicVariation CP::SystematicVariation::makeContinuousEnsemble</definition>
        <argsstring>(const std::string &amp;basename)</argsstring>
        <name>makeContinuousEnsemble</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>basename</declname>
        </param>
        <briefdescription>
<para>constructor for continuous systematics ensemble </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="118" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="dd/d2d/classCP_1_1SystematicVariation_1aec57d205a3cf0ed83acdddb260056e31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref></type>
        <definition>SystematicVariation CP::SystematicVariation::makeContinuous</definition>
        <argsstring>(const std::string &amp;basename)</argsstring>
        <name>makeContinuous</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>basename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Named constructor for continuous systematics.</para><para>rationale: Introduced because the enum-based constructor was getting confused with the float one above in PyROOT. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="126" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/SystematicVariation.cxx" bodystart="269" bodyend="272"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="17928">
        <label>CP::SystematicVariation</label>
        <link refid="dd/d2d/classCP_1_1SystematicVariation"/>
        <childnode refid="17929" relation="usage">
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="17929">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" line="50" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/SystematicVariation.h" bodystart="49" bodyend="268"/>
    <listofallmembers>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a29a6c407ced8513717e0855bede8f20d" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>basename</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a5b937e28efccaf0a88614f9f27e10535a8deb41f8ee77e1ba1d62f1b497491ca5" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>CONTINUOUS</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a5b937e28efccaf0a88614f9f27e10535" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>CONTINUOUS_ARG</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a921c7b5020877056d9399560d696b6e8" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>empty</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a0390012fe3248daaaafbe6142117679f" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>ensembleContains</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a2f6226c22d29a10085e8b84d5102dbd3" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>getToyVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1aabe004099571335e19234c1f6a51d4c7" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>isContinuousEnsemble</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1ae1859f4c0d55b06ab49cfbcdfe80bfee" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>isContinuousVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a0551a56a6ef6427abe63628b0465c8ee" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>isEnsemble</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1ad11ce65b6aadb36f4748c60b99b97fc3" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>isToyEnsemble</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1ac4346fff7437ec450e89e614d6dc1699" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>isToyVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1aa73994bb605dbcf454fe8af467637d22" prot="private" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>m_name</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1aec57d205a3cf0ed83acdddb260056e31" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>makeContinuous</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a396035761bd30c89c2f3bdf430842277" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>makeContinuousEnsemble</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1adc08c40c1964cb8da7d6ac9b4eb61964" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>makeToyEnsemble</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a8cec193f91441352aeaf385497044ac9" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>makeToyVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a5d9f8e460b9b300cc47959d1b5866bed" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>name</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a2b6754480c75e0649348930bf7f84d85" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>parameter</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1ace8bc519fd4149118b2099a1bb6bd744" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>subvariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a082f5f73eed13f790b6e67074e62c979" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1ace0ff053f5025f46a8d3fad28bbc5741" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a36b4a8079137d702fea92780d7fa624e" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a2434d48524c53725f5c29406d897e5fa" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1a91450ccd9b344e5771585c78bc50de9d" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1acdd47dd6ac0da18c686dab32c0dd62a0" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>SystematicVariation</name></member>
      <member refid="dd/d2d/classCP_1_1SystematicVariation_1aeaf6c6883eb781e96a9034d512064ac8" prot="public" virt="non-virtual"><scope>CP::SystematicVariation</scope><name>testInvariant</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
