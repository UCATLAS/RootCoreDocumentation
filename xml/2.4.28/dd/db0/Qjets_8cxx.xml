<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/db0/Qjets_8cxx" kind="file">
    <compoundname>Qjets.cxx</compoundname>
    <includes refid="da/d98/Qjets_8h" local="yes">Qjets.h</includes>
    <incdepgraph>
      <node id="191387">
        <label>list</label>
      </node>
      <node id="191385">
        <label>queue</label>
      </node>
      <node id="191391">
        <label>fastjet/ClusterSequence.hh</label>
      </node>
      <node id="191390">
        <label>fastjet/PseudoJet.hh</label>
      </node>
      <node id="191389">
        <label>fastjet/JetDefinition.hh</label>
      </node>
      <node id="191386">
        <label>vector</label>
      </node>
      <node id="191383">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetSubStructureUtils/Root/Qjets.cxx</label>
        <link refid="Qjets.cxx"/>
        <childnode refid="191384" relation="include">
        </childnode>
      </node>
      <node id="191388">
        <label>algorithm</label>
      </node>
      <node id="191384">
        <label>Qjets.h</label>
        <link refid="da/d98/Qjets_8h_source"/>
        <childnode refid="191385" relation="include">
        </childnode>
        <childnode refid="191386" relation="include">
        </childnode>
        <childnode refid="191387" relation="include">
        </childnode>
        <childnode refid="191388" relation="include">
        </childnode>
        <childnode refid="191389" relation="include">
        </childnode>
        <childnode refid="191390" relation="include">
        </childnode>
        <childnode refid="191391" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Qjets.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">JetSubStructureUtils;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">Qjets::Qjets(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zcut,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dcut_fctr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_min,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rigidity,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>truncation_fctr)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">:<sp/>_rand_seed_set(false),</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>_zcut(zcut),<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>_dcut(-1.),<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>_dcut_fctr(dcut_fctr),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>_exp_min(exp_min),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>_exp_max(exp_max),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>_rigidity(rigidity),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>_truncation_fctr(truncation_fctr)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Qjets::SetRandSeed(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>_rand_seed_set<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>_seed<sp/>=<sp/>seed;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Qjets::JetUnmerged(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_merged_jets.find(num)<sp/>==<sp/>_merged_jets.end();</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Qjets::JetsUnmerged(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref>&amp;<sp/>jd)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JetUnmerged(jd.j1)<sp/>&amp;&amp;<sp/>JetUnmerged(jd.j2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>Qjets::GetNextDistance(){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>vector&lt;<sp/>pair&lt;jet_distance,<sp/>double&gt;<sp/>&gt;<sp/>popped_distances;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm(0.);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>ret;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>ret.j1<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ret.j2<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>ret.dij<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dmin_set(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dmin(0.);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!_distances.empty()){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>dist<sp/>=<sp/>_distances.top();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>_distances.pop();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(JetsUnmerged(dist)){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!dmin_set){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmin<sp/>=<sp/>dist.dij;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dmin_set<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>exp(-_rigidity<sp/>*<sp/>(dist.dij-dmin)<sp/>/dmin);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>popped_distances.push_back(make_pair(dist,weight));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>weight;<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(weight/norm<sp/>&lt;<sp/>_truncation_fctr)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rand(Rand()),<sp/>tot_weight(0.);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;pair&lt;jet_distance,<sp/>double&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>popped_distances.begin();<sp/>it<sp/>!=<sp/>popped_distances.end();<sp/>it++){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>tot_weight<sp/>+=<sp/>(*it).second/norm;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tot_weight<sp/>&gt;=<sp/>rand){</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>(*it).first;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>repopulate<sp/>in<sp/>reverse<sp/>(maybe<sp/>quicker?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;pair&lt;jet_distance,<sp/>double&gt;<sp/>&gt;::reverse_iterator<sp/>it<sp/>=<sp/>popped_distances.rbegin();<sp/>it<sp/>!=<sp/>popped_distances.rend();<sp/>it++)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(JetsUnmerged((*it).first))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_distances.push((*it).first);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Qjets::Cluster(fastjet::ClusterSequence<sp/>&amp;<sp/>cs){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>ComputeDCut(cs);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>all<sp/>the<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>ComputeAllDistances(cs.jets());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>jd<sp/>=<sp/>GetNextDistance();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!_distances.empty()<sp/>&amp;&amp;<sp/>jd.dij<sp/>!=<sp/>-1.){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!Prune(jd,cs)){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets.push_back(jd.j1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets.push_back(jd.j2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets[jd.j1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets[jd.j2]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_jet;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs.plugin_record_ij_recombination(jd.j1,<sp/>jd.j2,<sp/>1.,<sp/>new_jet);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(JetUnmerged(new_jet));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ComputeNewDistanceMeasures(cs,new_jet);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>j1pt<sp/>=<sp/>cs.jets()[jd.j1].perp();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>j2pt<sp/>=<sp/>cs.jets()[jd.j2].perp();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j1pt&gt;j2pt){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>_merged_jets.push_back(jd.j2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets[jd.j2]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.plugin_record_iB_recombination(jd.j2,<sp/>1.);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>_merged_jets.push_back(jd.j1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_merged_jets[jd.j1]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.plugin_record_iB_recombination(jd.j1,<sp/>1.);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>jd<sp/>=<sp/>GetNextDistance();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>remaining<sp/>jets<sp/>with<sp/>beam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_merged_final(0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>cs.jets().size();<sp/>i++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(JetUnmerged(i)){</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_merged_final++;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cs.plugin_record_iB_recombination(i,1.);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>assert(num_merged_final<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Qjets::ComputeDCut(fastjet::ClusterSequence<sp/>&amp;<sp/>cs){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>all<sp/>jets<sp/>in<sp/>cs<sp/>form<sp/>a<sp/>single<sp/>jet.<sp/><sp/>compute<sp/>mass<sp/>and<sp/>pt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>fastjet::PseudoJet<sp/>sum(0.,0.,0.,0.);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(vector&lt;fastjet::PseudoJet&gt;::const_iterator<sp/>it<sp/>=<sp/>cs.jets().begin();<sp/>it<sp/>!=<sp/>cs.jets().end();<sp/>it++)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*it);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>_dcut<sp/>=<sp/>2.<sp/>*<sp/>_dcut_fctr<sp/>*<sp/>sum.m()/sum.perp();<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Qjets::Prune(<ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref>&amp;<sp/>jd,fastjet::ClusterSequence<sp/>&amp;<sp/>cs){</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pt1<sp/>=<sp/>cs.jets()[jd.j1].perp();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pt2<sp/>=<sp/>cs.jets()[jd.j2].perp();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>fastjet::PseudoJet<sp/>sum_jet<sp/>=<sp/>cs.jets()[jd.j1]+cs.jets()[jd.j2];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_pt<sp/>=<sp/>sum_jet.perp();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>min(pt1,pt2)/sum_pt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>sqrt(cs.jets()[jd.j1].plain_distance(cs.jets()[jd.j2]));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>_dcut)<sp/>&amp;&amp;<sp/>(z<sp/>&lt;<sp/>_zcut);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Qjets::ComputeAllDistances(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;fastjet::PseudoJet&gt;&amp;<sp/>inp){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>inp.size()-1;<sp/>i++){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>jet-jet<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i+1<sp/>;<sp/>j<sp/>&lt;<sp/>inp.size();<sp/>j++){</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>jd;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jd.j1<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jd.j2<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(jd.j1<sp/>!=<sp/>jd.j2){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jd.dij<sp/>=<sp/>d_ij(inp[i],inp[j]);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_distances.push(jd);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Qjets::ComputeNewDistanceMeasures(fastjet::ClusterSequence<sp/>&amp;<sp/>cs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_jet){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>jet-jet<sp/>distances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cs.jets().size();<sp/>i++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(JetUnmerged(i)<sp/>&amp;&amp;<sp/>((int)i)<sp/>!=<sp/>new_jet){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d2a/structJetSubStructureUtils_1_1jet__distance" kindref="compound">jet_distance</ref><sp/>jd;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jd.j1<sp/>=<sp/>new_jet;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jd.j2<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>jd.dij<sp/>=<sp/>d_ij(cs.jets()[jd.j1],<sp/>cs.jets()[jd.j2]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_distances.push(jd);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Qjets::d_ij(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fastjet::PseudoJet&amp;<sp/>v1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/>fastjet::PseudoJet&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>v1.perp();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>v2.perp();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>pow(min(p1,p2),_exp_min)<sp/>*<sp/>pow(max(p1,p2),_exp_max)<sp/>*<sp/>v1.squared_distance(v2);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>assert(!std::isnan(ret));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Qjets::Rand(){</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_rand_seed_set)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>rand_r(&amp;_seed)/(double)RAND_MAX;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>rand()/(double)RAND_MAX;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/JetSubStructureUtils/Root/Qjets.cxx"/>
  </compounddef>
</doxygen>
