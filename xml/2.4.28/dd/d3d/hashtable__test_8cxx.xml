<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/d3d/hashtable__test_8cxx" kind="file">
    <compoundname>hashtable_test.cxx</compoundname>
    <includes refid="df/d26/unordered__set_8h" local="yes">CxxUtils/unordered_set.h</includes>
    <includes refid="db/daa/unordered__map_8h" local="yes">CxxUtils/unordered_map.h</includes>
    <includes local="no">string</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="113706">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="113694" relation="include">
        </childnode>
        <childnode refid="113696" relation="include">
        </childnode>
        <childnode refid="113704" relation="include">
        </childnode>
        <childnode refid="113705" relation="include">
        </childnode>
      </node>
      <node id="113703">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="113705">
        <label>functional</label>
      </node>
      <node id="113701">
        <label>limits</label>
      </node>
      <node id="113697">
        <label>iterator</label>
      </node>
      <node id="113693">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="113694" relation="include">
        </childnode>
        <childnode refid="113704" relation="include">
        </childnode>
        <childnode refid="113705" relation="include">
        </childnode>
      </node>
      <node id="113700">
        <label>cmath</label>
      </node>
      <node id="113707">
        <label>cassert</label>
      </node>
      <node id="113702">
        <label>string</label>
      </node>
      <node id="113694">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="113695" relation="include">
        </childnode>
        <childnode refid="113696" relation="include">
        </childnode>
        <childnode refid="113697" relation="include">
        </childnode>
        <childnode refid="113698" relation="include">
        </childnode>
        <childnode refid="113699" relation="include">
        </childnode>
        <childnode refid="113700" relation="include">
        </childnode>
        <childnode refid="113701" relation="include">
        </childnode>
        <childnode refid="113702" relation="include">
        </childnode>
        <childnode refid="113703" relation="include">
        </childnode>
      </node>
      <node id="113692">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx</label>
        <link refid="hashtable_test.cxx"/>
        <childnode refid="113693" relation="include">
        </childnode>
        <childnode refid="113706" relation="include">
        </childnode>
        <childnode refid="113702" relation="include">
        </childnode>
        <childnode refid="113707" relation="include">
        </childnode>
      </node>
      <node id="113696">
        <label>utility</label>
      </node>
      <node id="113699">
        <label>cstdlib</label>
      </node>
      <node id="113698">
        <label>cstddef</label>
      </node>
      <node id="113695">
        <label>algorithm</label>
      </node>
      <node id="113704">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="db/d0a/structis__same" prot="public">is_same</innerclass>
    <innerclass refid="d1/d2d/structis__same_3_01__Tp_00_01__Tp_01_4" prot="public">is_same&lt; _Tp, _Tp &gt;</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="dd/d3d/hashtable__test_8cxx_1ab64044259d5a2440725279dc7801f33e" prot="public" static="no">
        <name>VERIFY</name>
        <initializer>assert</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1aff717438d39553e1a1bcfe142ad703ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename, typename &gt; class</type>
            <declname>Relationship</declname>
            <defname>Relationship</defname>
          </param>
          <param>
            <type>typename Type1</type>
          </param>
          <param>
            <type>typename Type2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool test_relationship</definition>
        <argsstring>(bool value)</argsstring>
        <name>test_relationship</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="41" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1adde7594d3b4cf43a89b0701e2948f45e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test01</definition>
        <argsstring>()</argsstring>
        <name>test01</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a9fefb891fb31da1891ec6a0b1dedd0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test02</definition>
        <argsstring>()</argsstring>
        <name>test02</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="71" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="70" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a9e74eb7bba40bbdde0e3737ebbfead7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test03</definition>
        <argsstring>()</argsstring>
        <name>test03</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="107" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="106" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a2c482f714db8180a2bcca13a74f95d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test04</definition>
        <argsstring>()</argsstring>
        <name>test04</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="130" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a0ab3223f6d056510efe0534b261552bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test05</definition>
        <argsstring>()</argsstring>
        <name>test05</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="149" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="148" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1aa028a85f52348bdc71cab783ba495db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test06</definition>
        <argsstring>()</argsstring>
        <name>test06</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="159" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="158" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a522312496f3ba74a5fcb43fc14b04b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test07</definition>
        <argsstring>()</argsstring>
        <name>test07</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="189" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="188" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a48e03ab8f77694f25404252e2a061810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test08</definition>
        <argsstring>()</argsstring>
        <name>test08</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="264" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="263" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ace441e85caa7893a0a07ce6be6beec22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test09</definition>
        <argsstring>()</argsstring>
        <name>test09</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="342" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="341" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1aa253a0e18f2b2d976b1540d8d3f67b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test10</definition>
        <argsstring>()</argsstring>
        <name>test10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="419" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="418" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ae21983b52ae778c1ed1a9a4e83dac4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test11</definition>
        <argsstring>()</argsstring>
        <name>test11</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="492" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="491" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ac0fe528da61c21c4b3648d2e50e8c59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test12</definition>
        <argsstring>()</argsstring>
        <name>test12</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="524" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="523" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ac8eb30a14af040b00e3e975d5a007f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test13</definition>
        <argsstring>()</argsstring>
        <name>test13</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="570" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="569" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ad44c92b0f549e8497171c70665aa649c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test14</definition>
        <argsstring>()</argsstring>
        <name>test14</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="599" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="598" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ad392efe9f0fcfaf752fc293fa826682b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void do_test15</definition>
        <argsstring>()</argsstring>
        <name>do_test15</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="629" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="628" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a4cd93e122c4dd257c40b098da52d9e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test15</definition>
        <argsstring>()</argsstring>
        <name>test15</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="641" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="640" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ab3645e9a90cd75a34bb85f7a5382325f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test16</definition>
        <argsstring>()</argsstring>
        <name>test16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="666" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="665" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ac800ebefbc46f64dfae10e190881ee2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test17</definition>
        <argsstring>()</argsstring>
        <name>test17</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="696" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="695" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a199c4c291f72c4eea3c238fbef60dfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test18</definition>
        <argsstring>()</argsstring>
        <name>test18</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="726" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="725" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ac23454addf167ebe0197a18997df2977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test19</definition>
        <argsstring>()</argsstring>
        <name>test19</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="753" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="752" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a473035f0078447017a27496854e2e77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test20</definition>
        <argsstring>()</argsstring>
        <name>test20</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="779" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="778" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1af749b5dec0e2a00d098d709b518fe995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test21</definition>
        <argsstring>()</argsstring>
        <name>test21</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="803" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="802" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1af5d73f40f5239dfc7f49738f2976799e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test22</definition>
        <argsstring>()</argsstring>
        <name>test22</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="831" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="830" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a8ae076de8b10caefd68d9d2b4a6540d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test23</definition>
        <argsstring>()</argsstring>
        <name>test23</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="863" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="862" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1aa3daf6c0d9dbb01caf43218eacd786c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test24</definition>
        <argsstring>()</argsstring>
        <name>test24</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="880" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="879" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a60dd44be00aa30c17abe935d3425de4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test25</definition>
        <argsstring>()</argsstring>
        <name>test25</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="899" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="898" bodyend="921"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a0002699b526526281d5d265d50ce4f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test26</definition>
        <argsstring>()</argsstring>
        <name>test26</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="924" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="923" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a496577d1112df289ca8ec84c58c680a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test27</definition>
        <argsstring>()</argsstring>
        <name>test27</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="953" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="952" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ae8b0567c61da7f469067fadb89b4a4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test28</definition>
        <argsstring>()</argsstring>
        <name>test28</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="969" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="968" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a077a66712d8449e9a4708542309d1845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test29</definition>
        <argsstring>()</argsstring>
        <name>test29</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="993" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="992" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a0f39d7446ce081fb15c3b514f25b8d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test30</definition>
        <argsstring>()</argsstring>
        <name>test30</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="1014" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="1013" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1a636c8ae8bd48568db906adb50c3377bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test31</definition>
        <argsstring>()</argsstring>
        <name>test31</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="1035" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="1034" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1afd7239d70a26b12f2f04095883269335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test32</definition>
        <argsstring>()</argsstring>
        <name>test32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="1056" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="1055" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1aa1494c22623938c7f845831b49927278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test33</definition>
        <argsstring>()</argsstring>
        <name>test33</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="1078" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="1077" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="dd/d3d/hashtable__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" line="1086" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx" bodystart="1085" bodyend="1121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for TR1 hashtable class. Adapted from the tests in gcc4. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt;, copied from gcc4. </para></simplesect>
<simplesect kind="date"><para>Apr, 2007 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2005<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>GNU<sp/>ISO<sp/>C++<sp/>Library.<sp/><sp/>This<sp/>library<sp/>is<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>this<sp/>library;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Software<sp/>Foundation,<sp/>51<sp/>Franklin<sp/>Street,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/>02110-1301,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USA.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>6.3<sp/>Unordered<sp/>associative<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d26/unordered__set_8h" kindref="compound" tooltip="This is the TR1 unordered_set implementation from gcc4, adapted to build in Atlas...">CxxUtils/unordered_set.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/daa/unordered__map_8h" kindref="compound" tooltip="This is the TR1 unordered_set implementation from gcc4, adapted to build in Atlas...">CxxUtils/unordered_map.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY<sp/>assert</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Relationship,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>test_relationship(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&amp;=<sp/>Relationship&lt;Type1,<sp/>Type2&gt;::value<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&amp;=<sp/>Relationship&lt;Type1,<sp/>Type2&gt;::type::value<sp/>==<sp/>value;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="50" refid="db/d0a/structis__same" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d0a/structis__same" kindref="compound" tooltip="relationships between types [4.6].">is_same</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CxxUtils_Internal::false_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>_Tp&gt;</highlight></codeline>
<codeline lineno="54" refid="d1/d2d/structis__same_3_01__Tp_00_01__Tp_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d0a/structis__same" kindref="compound" tooltip="relationships between types [4.6].">is_same</ref>&lt;_Tp,<sp/>_Tp&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CxxUtils_Internal::true_type<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/23053</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test01()</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>s;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>&amp;sref<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>sref.find(27);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/23465</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test02()</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lf<sp/>=<sp/>0.1f;<sp/>lf<sp/>&lt;<sp/>101.0f;<sp/>lf<sp/>*=<sp/>10.0f)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1;<sp/>size<sp/>&lt;=<sp/>6561;<sp/>size<sp/>*=<sp/>3)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>us1,<sp/>us2;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;::local_iterator</ref><sp/>local_iterator;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;::size_type</ref><sp/><sp/><sp/><sp/><sp/><sp/>size_type;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>us1.max_load_factor(lf);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>us1.insert(i);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>us2<sp/>=<sp/>us1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(<sp/>us2.size()<sp/>==<sp/>us1.size()<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(<sp/>us2.bucket_count()<sp/>==<sp/>us1.bucket_count()<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size_type<sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>us1.bucket_count();<sp/>++b)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(local_iterator<sp/>it1<sp/>=<sp/>us1.begin(b),<sp/>it2<sp/>=<sp/>us2.begin(b);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it1<sp/>!=<sp/>us1.end(b)<sp/>&amp;&amp;<sp/>it2<sp/>!=<sp/>us2.end(b);<sp/>++it1,<sp/>++it2)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY(<sp/>*it1<sp/>==<sp/>*it2<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++cnt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY(<sp/>cnt<sp/>==<sp/>us1.bucket_size(b)<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24054</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test03()</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;std::string&gt;</ref><sp/><ref refid="d4/d13/set_8h_1a6d3b7f7c92cbb4577ef3ef7ddbf93161" kindref="member">Set</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;etaoin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;etaoin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;etaoin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;shrdlu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.erase(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.size()<sp/>==<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.erase(</highlight><highlight class="stringliteral">&quot;etaoin&quot;</highlight><highlight class="normal">)<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.erase(</highlight><highlight class="stringliteral">&quot;shrdlu&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24064</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test04()</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SG;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">unordered_map&lt;int, char, SG::hash&lt;int&gt;</ref>,<sp/>equal_to&lt;int&gt;,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator&lt;pair&lt;const<sp/>int,<sp/>char&gt;<sp/>&gt;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;<sp/>m;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>++i)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>m[i]<sp/>=<sp/>static_cast&lt;char&gt;<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>+<sp/>i<sp/>%<sp/>9);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>++i)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(<sp/>++m.find(i)-&gt;second<sp/>==<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>+<sp/>i<sp/>%<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/26127</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test05()</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>s;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>s.bucket(42);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>s.key_eq();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>s.max_load_factor();<sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/26132</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test06()</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lf<sp/>=<sp/>1.0f;<sp/>lf<sp/>&lt;<sp/>101.0f;<sp/>lf<sp/>*=<sp/>10.0f)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1;<sp/>size<sp/>&lt;=<sp/>6561;<sp/>size<sp/>*=<sp/>3)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>us1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;::size_type</ref><sp/>size_type;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>us1.max_load_factor(10.0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>us1.insert(i);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>us1.max_load_factor(lf);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>imaxload<sp/>__attribute__((unused))<sp/>=<sp/>1.<sp/>/<sp/>us1.max_load_factor();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>6561;<sp/>i<sp/>*=<sp/>81)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>size_type<sp/>n<sp/>=<sp/>size<sp/>*<sp/>81<sp/>/<sp/>i;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>us1.rehash(n);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY(<sp/>us1.bucket_count()<sp/>&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(us1.size())<sp/>*<sp/>imaxload<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERIFY(<sp/>us1.bucket_count()<sp/>&gt;=<sp/>n<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test07()</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::value_type<sp/><sp/><sp/><sp/><sp/>value_type;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>Map<sp/>m1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>collector&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">,<sp/>4));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;love<sp/>is<sp/>not<sp/>enough&quot;</highlight><highlight class="normal">,<sp/>5));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;every<sp/>day<sp/>is<sp/>exactly<sp/>the<sp/>same&quot;</highlight><highlight class="normal">,<sp/>6));</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;with<sp/>teeth&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;only&quot;</highlight><highlight class="normal">,<sp/>8));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;getting<sp/>smaller&quot;</highlight><highlight class="normal">,<sp/>9));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>m1.insert(value_type(</highlight><highlight class="stringliteral">&quot;sunspots&quot;</highlight><highlight class="normal">,<sp/>10));<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>m1.begin();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>++it1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>iterator<sp/>it3<sp/>=<sp/>m1.erase(it1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it3<sp/>==<sp/>it2<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it3<sp/>==<sp/>*it2<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>iterator<sp/>it4<sp/>=<sp/>m1.begin();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>iterator<sp/>it5<sp/>=<sp/>it4;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>iterator<sp/>it6<sp/>=<sp/>m1.erase(it4,<sp/>it5);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it6<sp/>==<sp/>it5<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it6<sp/>==<sp/>*it5<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it7<sp/>=<sp/>m1.begin();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it8<sp/>=<sp/>it7;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>++it8;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it9<sp/>=<sp/>m1.erase(it7);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it9<sp/>==<sp/>it8<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it9<sp/>==<sp/>*it8<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it10<sp/>=<sp/>m1.begin();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>++it10;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it11<sp/>=<sp/>it10;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it12<sp/>=<sp/>m1.erase(it10,<sp/>it11);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it12<sp/>==<sp/>it11<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it12<sp/>==<sp/>*it11<sp/>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>++it12<sp/>==<sp/>m1.end()<sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>iterator<sp/>it13<sp/>=<sp/>m1.erase(m1.begin(),<sp/>m1.end());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>it12<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>m1.begin()<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test08()</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Mmap;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::value_type<sp/><sp/><sp/><sp/><sp/>value_type;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Mmap<sp/>mm1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>collector&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">,<sp/>4));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;love<sp/>is<sp/>not<sp/>enough&quot;</highlight><highlight class="normal">,<sp/>5));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;every<sp/>day<sp/>is<sp/>exactly<sp/>the<sp/>same&quot;</highlight><highlight class="normal">,<sp/>6));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;with<sp/>teeth&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;only&quot;</highlight><highlight class="normal">,<sp/>8));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;getting<sp/>smaller&quot;</highlight><highlight class="normal">,<sp/>9));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;sunspots&quot;</highlight><highlight class="normal">,<sp/>10));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>5));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>collector&quot;</highlight><highlight class="normal">,<sp/>6));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>mm1.insert(value_type(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>13<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>mm1.begin();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>++it1;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>iterator<sp/>it3<sp/>=<sp/>mm1.erase(it1);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>12<sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it3<sp/>==<sp/>it2<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it3<sp/>==<sp/>*it2<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>iterator<sp/>it4<sp/>=<sp/>mm1.begin();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>iterator<sp/>it5<sp/>=<sp/>it4;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>iterator<sp/>it6<sp/>=<sp/>mm1.erase(it4,<sp/>it5);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it6<sp/>==<sp/>it5<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it6<sp/>==<sp/>*it5<sp/>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it7<sp/>=<sp/>mm1.begin();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it8<sp/>=<sp/>it7;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>++it8;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it9<sp/>=<sp/>mm1.erase(it7);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it9<sp/>==<sp/>it8<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it9<sp/>==<sp/>*it8<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it10<sp/>=<sp/>mm1.begin();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>++it10;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it11<sp/>=<sp/>it10;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it12<sp/>=<sp/>mm1.erase(it10,<sp/>it11);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it12<sp/>==<sp/>it11<sp/>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it12<sp/>==<sp/>*it11<sp/>);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>iterator<sp/>it13<sp/>=<sp/>mm1.erase(mm1.begin(),<sp/>mm1.end());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>mm1.end()<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>mm1.begin()<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test09()</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;std::string&gt;</ref><sp/>Mset;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mset::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mset::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>Mset<sp/>ms1;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;the<sp/>collector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;love<sp/>is<sp/>not<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;every<sp/>day<sp/>is<sp/>exactly<sp/>the<sp/>same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;with<sp/>teeth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;getting<sp/>smaller&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;sunspots&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;love<sp/>is<sp/>not<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>ms1.insert(</highlight><highlight class="stringliteral">&quot;every<sp/>day<sp/>is<sp/>exactly<sp/>the<sp/>same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>13<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>ms1.begin();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>++it1;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>iterator<sp/>it3<sp/>=<sp/>ms1.erase(it1);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>12<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it3<sp/>==<sp/>it2<sp/>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it3<sp/>==<sp/>*it2<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>iterator<sp/>it4<sp/>=<sp/>ms1.begin();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>iterator<sp/>it5<sp/>=<sp/>it4;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>iterator<sp/>it6<sp/>=<sp/>ms1.erase(it4,<sp/>it5);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it6<sp/>==<sp/>it5<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it6<sp/>==<sp/>*it5<sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it7<sp/>=<sp/>ms1.begin();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it8<sp/>=<sp/>it7;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>++it8;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it9<sp/>=<sp/>ms1.erase(it7);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it9<sp/>==<sp/>it8<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it9<sp/>==<sp/>*it8<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it10<sp/>=<sp/>ms1.begin();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>++it10;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it11<sp/>=<sp/>it10;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it12<sp/>=<sp/>ms1.erase(it10,<sp/>it11);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it12<sp/>==<sp/>it11<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it12<sp/>==<sp/>*it11<sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>iterator<sp/>it13<sp/>=<sp/>ms1.erase(ms1.begin(),<sp/>ms1.end());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>ms1.end()<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>ms1.begin()<sp/>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test10()</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>Set<sp/>s1;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;the<sp/>collector&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;the<sp/>hand<sp/>that<sp/>feeds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;love<sp/>is<sp/>not<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;every<sp/>day<sp/>is<sp/>exactly<sp/>the<sp/>same&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;with<sp/>teeth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;only&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;getting<sp/>smaller&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>s1.insert(</highlight><highlight class="stringliteral">&quot;sunspots&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>10<sp/>);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>s1.begin();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>++it1;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>++it2;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>iterator<sp/>it3<sp/>=<sp/>s1.erase(it1);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>9<sp/>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it3<sp/>==<sp/>it2<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it3<sp/>==<sp/>*it2<sp/>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>iterator<sp/>it4<sp/>=<sp/>s1.begin();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>++it4;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>iterator<sp/>it5<sp/>=<sp/>it4;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>++it5;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>iterator<sp/>it6<sp/>=<sp/>s1.erase(it4,<sp/>it5);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>7<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it6<sp/>==<sp/>it5<sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it6<sp/>==<sp/>*it5<sp/>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it7<sp/>=<sp/>s1.begin();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>++it7;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it8<sp/>=<sp/>it7;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>++it8;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it9<sp/>=<sp/>s1.erase(it7);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it9<sp/>==<sp/>it8<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it9<sp/>==<sp/>*it8<sp/>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it10<sp/>=<sp/>s1.begin();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>++it10;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it11<sp/>=<sp/>it10;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>++it11;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>const_iterator<sp/>it12<sp/>=<sp/>s1.erase(it10,<sp/>it11);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it12<sp/>==<sp/>it11<sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it12<sp/>==<sp/>*it11<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>++it12<sp/>==<sp/>s1.end()<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>iterator<sp/>it13<sp/>=<sp/>s1.erase(s1.begin(),<sp/>s1.end());</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>s1.end()<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it13<sp/>==<sp/>s1.begin()<sp/>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test11()</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>bool&gt;<sp/>tmp<sp/>=<sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i<sp/>=<sp/>tmp.first;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>VERIFY(tmp.second);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i2<sp/>=<sp/>m.find(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>!=<sp/>m.end());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>VERIFY(i2-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>VERIFY(i2-&gt;second<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i3<sp/>=<sp/>m.find(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>VERIFY(i3<sp/>==<sp/>m.end());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>Map::iterator&gt;<sp/>p<sp/>=<sp/>m.equal_range(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(p.first,<sp/>p.second)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>VERIFY(p.first<sp/>==<sp/>i2);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>Map::iterator&gt;<sp/>p2<sp/>=<sp/>m.equal_range(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>VERIFY(p2.first<sp/>==<sp/>p2.second);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>VERIFY(m.count(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>VERIFY(m.count(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test12()</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">,<sp/>8));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i1<sp/>=<sp/>m.find(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i2<sp/>=<sp/>m.find(</highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i3<sp/>=<sp/>m.find(</highlight><highlight class="stringliteral">&quot;kiwi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>VERIFY(i1<sp/>!=<sp/>m.end());</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>VERIFY(i1-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>VERIFY(i1-&gt;second<sp/>==<sp/>3<sp/>||<sp/>i2-&gt;second<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>!=<sp/>m.end());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>VERIFY(i2-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>VERIFY(i2-&gt;second<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>VERIFY(i3<sp/>==<sp/>m.end());</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>Map::iterator&gt;<sp/>p1<sp/>=<sp/>m.equal_range(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(p1.first,<sp/>p1.second)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>tmp<sp/>=<sp/>p1.first;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>++tmp;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>VERIFY(p1.first-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>VERIFY(tmp-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>VERIFY((p1.first-&gt;second<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>tmp-&gt;second<sp/>==<sp/>7)<sp/>||</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(p1.first-&gt;second<sp/>==<sp/>7<sp/>&amp;&amp;<sp/>tmp-&gt;second<sp/>==<sp/>3));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>Map::iterator&gt;<sp/>p2<sp/>=<sp/>m.equal_range(</highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(p2.first,<sp/>p2.second)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>VERIFY(p2.first-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>VERIFY(p2.first-&gt;second<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>Map::iterator&gt;<sp/>p3<sp/>=<sp/>m.equal_range(</highlight><highlight class="stringliteral">&quot;kiwi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>VERIFY(p3.first<sp/>==<sp/>p3.second);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>VERIFY(m.count(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>VERIFY(m.count(</highlight><highlight class="stringliteral">&quot;durian&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>VERIFY(m.count(</highlight><highlight class="stringliteral">&quot;kiwi&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test13()</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;banana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>s.insert(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i2<sp/>=<sp/>s.find(</highlight><highlight class="stringliteral">&quot;banana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>!=<sp/>s.end());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>VERIFY(*i2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;banana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>std::pair&lt;Set::iterator,<sp/>Set::iterator&gt;<sp/>p<sp/>=<sp/>s.equal_range(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(p.first,<sp/>p.second)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i3<sp/>=<sp/>p.first;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>++i3;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>VERIFY(*p.first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>VERIFY(*i3<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i4<sp/>=<sp/>s.find(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>VERIFY(i4<sp/>==<sp/>s.end());<sp/><sp/></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>VERIFY(s.count(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>VERIFY(s.count(</highlight><highlight class="stringliteral">&quot;banana&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>VERIFY(s.count(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test14()</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>std::pair&lt;Set::iterator,<sp/>bool&gt;<sp/>tmp<sp/>=<sp/>s.insert(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i<sp/>=<sp/>tmp.first;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i2<sp/>=<sp/>s.find(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>!=<sp/>s.end());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>VERIFY(i2<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>VERIFY(*i2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>std::pair&lt;Set::iterator,<sp/>Set::iterator&gt;<sp/>p<sp/>=<sp/>s.equal_range(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>VERIFY(p.first<sp/>==<sp/>i2);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(p.first,<sp/>p.second)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>Set::iterator<sp/>i3<sp/>=<sp/>s.find(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>VERIFY(i3<sp/>==<sp/>s.end());<sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>std::pair&lt;Set::iterator,<sp/>Set::iterator&gt;<sp/>p2<sp/>=<sp/>s.equal_range(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>VERIFY(p2.first<sp/>==<sp/>p2.second);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>VERIFY(s.count(</highlight><highlight class="stringliteral">&quot;grape&quot;</highlight><highlight class="normal">)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>VERIFY(s.count(</highlight><highlight class="stringliteral">&quot;lime&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>do_test15()</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SG::hash&lt;T&gt;::argument_type<sp/><sp/>argument_type;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SG::hash&lt;T&gt;::result_type<sp/><sp/><sp/><sp/>result_type;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(<sp/>(test_relationship&lt;is_same,<sp/>argument_type,<sp/>T&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(<sp/>(test_relationship&lt;is_same,<sp/>result_type,<sp/>std::size_t&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24799</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test15()</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>do_test15&lt;bool&gt;();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>do_test15&lt;char&gt;();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>do_test15&lt;signed<sp/>char&gt;();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>do_test15&lt;unsigned<sp/>char&gt;();</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>do_test15&lt;short&gt;();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>do_test15&lt;int&gt;();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>do_test15&lt;long&gt;();</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>do_test15&lt;unsigned<sp/>short&gt;();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>do_test15&lt;unsigned<sp/>int&gt;();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>do_test15&lt;unsigned<sp/>long&gt;();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>do_test15&lt;int*&gt;();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>do_test15&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>do_test15&lt;float&gt;();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>do_test15&lt;double&gt;();</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>do_test15&lt;long<sp/>double&gt;();</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_GLIBCXX_USE_WCHAR_T</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>do_test15&lt;wchar_t&gt;();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>do_test15&lt;std::wstring&gt;();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test16()</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Map::value_type<sp/><sp/><sp/><sp/><sp/>value_type;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>Map<sp/>m1;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>m1.insert(m1.begin(),</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it1<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit1(it1);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit2<sp/>=<sp/>m1.insert(cit1,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>cit2<sp/>!=<sp/>cit1<sp/>);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*cit2<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>m1.insert(it1,<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>m1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it2<sp/>==<sp/>it1<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it2<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test17()</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Mmap;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mmap::value_type<sp/><sp/><sp/><sp/><sp/>value_type;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>Mmap<sp/>mm1;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>mm1.insert(mm1.begin(),</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it1<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit1(it1);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit2<sp/>=<sp/>mm1.insert(cit1,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>cit2<sp/>!=<sp/>cit1<sp/>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*cit2<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">,<sp/>2)<sp/>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>mm1.insert(it1,<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>mm1.size()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it2<sp/>!=<sp/>it1<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it2<sp/>==<sp/>value_type(</highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">,<sp/>3)<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test18()</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;std::string&gt;</ref><sp/>Mset;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mset::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Mset::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>Mset<sp/>ms1;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>ms1.insert(ms1.begin(),<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit1(it1);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit2<sp/>=<sp/>ms1.insert(cit1,<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>cit2<sp/>!=<sp/>cit1<sp/>);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*cit2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>ms1.insert(it1,<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>ms1.size()<sp/>==<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it2<sp/>!=<sp/>it1<sp/>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libstdc++/24061</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test19()</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>test<sp/>__attribute__((unused))<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set::iterator<sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Set::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>Set<sp/>s1;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>iterator<sp/>it1<sp/>=<sp/>s1.insert(s1.begin(),<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it1<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit1(it1);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>const_iterator<sp/>cit2<sp/>=<sp/>s1.insert(cit1,<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>cit2<sp/>!=<sp/>cit1<sp/>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*cit2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;you<sp/>know<sp/>what<sp/>you<sp/>are?&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>iterator<sp/>it2<sp/>=<sp/>s1.insert(it1,<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>s1.size()<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>it2<sp/>==<sp/>it1<sp/>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>VERIFY(<sp/>*it2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;all<sp/>the<sp/>love<sp/>in<sp/>the<sp/>world&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test20()</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>VERIFY(m.begin()-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>VERIFY(m.begin()-&gt;second<sp/>==<sp/>17);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>==<sp/>17);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>m[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">]<sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">]<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">]<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test21()</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>Pair<sp/><ref refid="d4/dc4/structA" kindref="compound">A</ref>[5]<sp/>=</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>5),</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>9),</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>3),</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,<sp/>8),</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/>7)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>m.insert(A+0,<sp/>A+5);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">]<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">]<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">]<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test22()</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>Pair<sp/>A[9]<sp/>=</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>5),</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>9),</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>19),</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>3),</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>60),</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,<sp/>8),</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/>7),</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>99),</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>33)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>m.insert(A+0,<sp/>A+9);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">]<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">]<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">]<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">]<sp/>==<sp/>8);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>VERIFY(m[</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">]<sp/>==<sp/>7);</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test23()</highlight></codeline>
<codeline lineno="863"><highlight class="normal">{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>bool&gt;<sp/>p<sp/>=<sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>VERIFY(p.second);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>VERIFY(p.first<sp/>==<sp/>m.begin());</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>VERIFY(p.first-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>VERIFY(p.first-&gt;second<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test24()</highlight></codeline>
<codeline lineno="880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>bool&gt;<sp/>p1<sp/>=<sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>std::pair&lt;Map::iterator,<sp/>bool&gt;<sp/>p2<sp/>=<sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>VERIFY(p1.second);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>VERIFY(!p2.second);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>VERIFY(p1.first<sp/>==<sp/>p2.first);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>VERIFY(p1.first-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>VERIFY(p2.first-&gt;second<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test25()</highlight></codeline>
<codeline lineno="899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>Pair<sp/>A[5]<sp/>=</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>5),</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>9),</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>3),</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,<sp/>8),</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/>7)</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>m.insert(A+0,<sp/>A+5);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(std::find(m.begin(),<sp/>m.end(),<sp/>A[i])<sp/>!=<sp/>m.end());</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test26()</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>Pair<sp/>A[9]<sp/>=</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>5),</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>9),</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>19),</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>3),</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>60),</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,<sp/>8),</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/>7),</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/>99),</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/>33)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>m.insert(A+0,<sp/>A+9);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>9);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>++i)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(std::find(m.begin(),<sp/>m.end(),<sp/>A[i])<sp/>!=<sp/>m.end());</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test27()</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i<sp/>=<sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>VERIFY(i<sp/>==<sp/>m.begin());</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>VERIFY(i-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>VERIFY(i-&gt;second<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test28()</highlight></codeline>
<codeline lineno="969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;std::string, int&gt;</ref><sp/>Map;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;const<sp/>std::string,<sp/>int&gt;<sp/>Pair;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>Map<sp/>m;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>VERIFY(m.empty());</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>m.insert(Pair(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>7));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>VERIFY(m.size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(m.begin(),<sp/>m.end())<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i1<sp/>=<sp/>m.begin();</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>Map::iterator<sp/>i2<sp/>=<sp/>i1;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>++i2;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>VERIFY(i1-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>VERIFY(i2-&gt;first<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>VERIFY((i1-&gt;second<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>i2-&gt;second<sp/>==<sp/>7)<sp/>||</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>(i1-&gt;second<sp/>==<sp/>7<sp/>&amp;&amp;<sp/>i2-&gt;second<sp/>==<sp/>3));</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test29()</highlight></codeline>
<codeline lineno="993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>A[N]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;violet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yellow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;orange&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pink&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>s.insert(A+0,<sp/>A+N);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>VERIFY(s.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(N));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(s.begin(),<sp/>s.end())<sp/>==<sp/>N);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/>A[i];</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>Set::iterator<sp/>it<sp/>=<sp/>std::find(s.begin(),<sp/>s.end(),<sp/>str);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(it<sp/>!=<sp/>s.end());</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test30()</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;int&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A[N]<sp/>=<sp/>{<sp/>3,<sp/>7,<sp/>4,<sp/>8,<sp/>2,<sp/>4,<sp/>6,<sp/>7<sp/>};</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>s.insert(A+0,<sp/>A+N);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>VERIFY(s.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(N));</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(s.begin(),<sp/>s.end())<sp/>==<sp/>N);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>2)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>3)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>4)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>6)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>7)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>8)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test31()</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;std::string&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>A[N]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;violet&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yellow&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;orange&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pink&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;gray&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>s.insert(A+0,<sp/>A+N);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>VERIFY(s.size()<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(N));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(s.begin(),<sp/>s.end())<sp/>==<sp/>N);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/>A[i];</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>Set::iterator<sp/>it<sp/>=<sp/>std::find(s.begin(),<sp/>s.end(),<sp/>str);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>VERIFY(it<sp/>!=<sp/>s.end());</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test32()</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref><sp/>Set;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>Set<sp/>s;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>VERIFY(s.empty());</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>A[N]<sp/>=<sp/>{<sp/>3,<sp/>7,<sp/>4,<sp/>8,<sp/>2,<sp/>4,<sp/>6,<sp/>7<sp/>};</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>s.insert(A+0,<sp/>A+N);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>VERIFY(s.size()<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>VERIFY(std::distance(s.begin(),<sp/>s.end())<sp/>==<sp/>6);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>2)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>3)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>4)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>6)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>7)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>VERIFY(std::count(s.begin(),<sp/>s.end(),<sp/>8)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>we<sp/>can<sp/>default-construct<sp/>iterators<sp/>-<sp/>sss.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test33()</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;::iterator</ref><sp/>i1;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;::const_iterator</ref><sp/>i2;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;int, int&gt;::iterator</ref><sp/>i3;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;int, int&gt;::const_iterator</ref><sp/>i4;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>test01();</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>test02();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>test03();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>test04();</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>test05();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>test06();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>test07();</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>test08();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>test09();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>test10();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>test11();</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>test12();</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>test13();</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>test14();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>test15();</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>test16();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>test17();</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>test18();</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>test19();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>test20();</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>test21();</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>test22();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>test23();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>test24();</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>test25();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>test26();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>test27();</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>test28();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>test29();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>test30();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>test31();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>test32();</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>test33();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">SG;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>we<sp/>can<sp/>instantiate<sp/>hash<sp/>for<sp/>every<sp/>required<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;bool&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;char&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;signed<sp/>char&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;unsigned<sp/>char&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;short&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;int&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;long&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;unsigned<sp/>short&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;unsigned<sp/>int&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;unsigned<sp/>long&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;float&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;double&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;long<sp/>double&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SG::hash&lt;void*&gt;;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;std::string&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_GLIBCXX_USE_WCHAR_T</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;wchar_t&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>struct<sp/>SG::hash&lt;std::wstring&gt;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map&lt;string, float&gt;</ref>;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d3b/classSG_1_1unordered__map" kindref="compound">SG::unordered_map</ref>&lt;string,<sp/>float,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG::hash&lt;string&gt;,<sp/>equal_to&lt;string&gt;,<sp/></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator&lt;pair&lt;const<sp/>string,<sp/>float&gt;<sp/>&gt;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap&lt;string, float&gt;</ref>;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d1/d54/classSG_1_1unordered__multimap" kindref="compound">SG::unordered_multimap</ref>&lt;string,<sp/>float,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SG::hash&lt;string&gt;,<sp/>equal_to&lt;string&gt;,<sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator&lt;pair&lt;const<sp/>string,<sp/>float&gt;<sp/>&gt;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;int&gt;</ref>;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="df/d21/classSG_1_1unordered__multiset" kindref="compound">SG::unordered_multiset&lt;int, SG::hash&lt;int&gt;</ref>,<sp/>equal_to&lt;int&gt;,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator&lt;int&gt;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int&gt;</ref>;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::unordered_set&lt;int, SG::hash&lt;int&gt;</ref>,<sp/>equal_to&lt;int&gt;,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator&lt;int&gt;,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">&gt;;</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/hashtable_test.cxx"/>
  </compounddef>
</doxygen>
