<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/da8/PrintHelpers_8cxx" kind="file">
    <compoundname>PrintHelpers.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="d1/d6f/AuxElement_8h" local="yes">AthContainers/AuxElement.h</includes>
    <includes refid="db/d7f/AuxTypeRegistry_8h" local="yes">AthContainers/AuxTypeRegistry.h</includes>
    <includes refid="d3/d6e/PrintHelpers_8h" local="yes">xAODCore/tools/PrintHelpers.h</includes>
    <incdepgraph>
      <node id="358651">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="358653">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="358608" relation="include">
        </childnode>
        <childnode refid="358610" relation="include">
        </childnode>
        <childnode refid="358617" relation="include">
        </childnode>
        <childnode refid="358618" relation="include">
        </childnode>
      </node>
      <node id="358654">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="358620">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="358604" relation="include">
        </childnode>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358621" relation="include">
        </childnode>
        <childnode refid="358619" relation="include">
        </childnode>
      </node>
      <node id="358616">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="358618">
        <label>functional</label>
      </node>
      <node id="358614">
        <label>limits</label>
      </node>
      <node id="358621">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="358649">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="358611">
        <label>iterator</label>
      </node>
      <node id="358637">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="358615" relation="include">
        </childnode>
        <childnode refid="358638" relation="include">
        </childnode>
      </node>
      <node id="358661">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="358605" relation="include">
        </childnode>
        <childnode refid="358662" relation="include">
        </childnode>
        <childnode refid="358663" relation="include">
        </childnode>
        <childnode refid="358629" relation="include">
        </childnode>
        <childnode refid="358615" relation="include">
        </childnode>
      </node>
      <node id="358633">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="358634" relation="include">
        </childnode>
        <childnode refid="358612" relation="include">
        </childnode>
      </node>
      <node id="358601">
        <label>stdint.h</label>
      </node>
      <node id="358630">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358629" relation="include">
        </childnode>
      </node>
      <node id="358625">
        <label>RVersion.h</label>
      </node>
      <node id="358607">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="358608" relation="include">
        </childnode>
        <childnode refid="358617" relation="include">
        </childnode>
        <childnode refid="358618" relation="include">
        </childnode>
      </node>
      <node id="358613">
        <label>cmath</label>
      </node>
      <node id="358665">
        <label>cassert</label>
      </node>
      <node id="358663">
        <label>stdexcept</label>
      </node>
      <node id="358652">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="358615">
        <label>string</label>
      </node>
      <node id="358655">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="358605" relation="include">
        </childnode>
        <childnode refid="358604" relation="include">
        </childnode>
        <childnode refid="358637" relation="include">
        </childnode>
        <childnode refid="358633" relation="include">
        </childnode>
        <childnode refid="358622" relation="include">
        </childnode>
        <childnode refid="358656" relation="include">
        </childnode>
        <childnode refid="358657" relation="include">
        </childnode>
        <childnode refid="358640" relation="include">
        </childnode>
        <childnode refid="358634" relation="include">
        </childnode>
        <childnode refid="358610" relation="include">
        </childnode>
        <childnode refid="358612" relation="include">
        </childnode>
        <childnode refid="358658" relation="include">
        </childnode>
        <childnode refid="358659" relation="include">
        </childnode>
        <childnode refid="358647" relation="include">
        </childnode>
        <childnode refid="358660" relation="include">
        </childnode>
      </node>
      <node id="358628">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358629" relation="include">
        </childnode>
      </node>
      <node id="358658">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="358599">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx</label>
        <link refid="PrintHelpers.cxx"/>
        <childnode refid="358600" relation="include">
        </childnode>
        <childnode refid="358601" relation="include">
        </childnode>
        <childnode refid="358602" relation="include">
        </childnode>
        <childnode refid="358627" relation="include">
        </childnode>
        <childnode refid="358666" relation="include">
        </childnode>
      </node>
      <node id="358626">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="358644">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="358659">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="358641">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="358603">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="358624">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="358625" relation="include">
        </childnode>
        <childnode refid="358626" relation="include">
        </childnode>
      </node>
      <node id="358657">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="358650">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="358636">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="358637" relation="include">
        </childnode>
        <childnode refid="358614" relation="include">
        </childnode>
        <childnode refid="358601" relation="include">
        </childnode>
        <childnode refid="358639" relation="include">
        </childnode>
      </node>
      <node id="358605">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358607" relation="include">
        </childnode>
      </node>
      <node id="358608">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="358609" relation="include">
        </childnode>
        <childnode refid="358610" relation="include">
        </childnode>
        <childnode refid="358611" relation="include">
        </childnode>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358612" relation="include">
        </childnode>
        <childnode refid="358613" relation="include">
        </childnode>
        <childnode refid="358614" relation="include">
        </childnode>
        <childnode refid="358615" relation="include">
        </childnode>
        <childnode refid="358616" relation="include">
        </childnode>
      </node>
      <node id="358629">
        <label>typeinfo</label>
      </node>
      <node id="358664">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="358658" relation="include">
        </childnode>
        <childnode refid="358665" relation="include">
        </childnode>
      </node>
      <node id="358639">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="358656">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="358623">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="358601" relation="include">
        </childnode>
      </node>
      <node id="358638">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="358643">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="358619">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="358627">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="358605" relation="include">
        </childnode>
        <childnode refid="358628" relation="include">
        </childnode>
        <childnode refid="358630" relation="include">
        </childnode>
        <childnode refid="358631" relation="include">
        </childnode>
        <childnode refid="358645" relation="include">
        </childnode>
        <childnode refid="358647" relation="include">
        </childnode>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358629" relation="include">
        </childnode>
        <childnode refid="358634" relation="include">
        </childnode>
        <childnode refid="358653" relation="include">
        </childnode>
        <childnode refid="358654" relation="include">
        </childnode>
      </node>
      <node id="358634">
        <label>vector</label>
      </node>
      <node id="358610">
        <label>utility</label>
      </node>
      <node id="358640">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="358648">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="358632">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="358647">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="358648" relation="include">
        </childnode>
        <childnode refid="358649" relation="include">
        </childnode>
        <childnode refid="358650" relation="include">
        </childnode>
        <childnode refid="358651" relation="include">
        </childnode>
        <childnode refid="358652" relation="include">
        </childnode>
      </node>
      <node id="358667">
        <label>iosfwd</label>
      </node>
      <node id="358612">
        <label>cstdlib</label>
      </node>
      <node id="358662">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="358600">
        <label>iostream</label>
      </node>
      <node id="358604">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="358605" relation="include">
        </childnode>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358619" relation="include">
        </childnode>
      </node>
      <node id="358606">
        <label>cstddef</label>
      </node>
      <node id="358660">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="358627" relation="include">
        </childnode>
        <childnode refid="358620" relation="include">
        </childnode>
        <childnode refid="358604" relation="include">
        </childnode>
        <childnode refid="358658" relation="include">
        </childnode>
        <childnode refid="358659" relation="include">
        </childnode>
      </node>
      <node id="358631">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="358628" relation="include">
        </childnode>
        <childnode refid="358632" relation="include">
        </childnode>
        <childnode refid="358633" relation="include">
        </childnode>
        <childnode refid="358635" relation="include">
        </childnode>
        <childnode refid="358640" relation="include">
        </childnode>
        <childnode refid="358629" relation="include">
        </childnode>
        <childnode refid="358634" relation="include">
        </childnode>
        <childnode refid="358609" relation="include">
        </childnode>
        <childnode refid="358601" relation="include">
        </childnode>
        <childnode refid="358642" relation="include">
        </childnode>
        <childnode refid="358643" relation="include">
        </childnode>
        <childnode refid="358644" relation="include">
        </childnode>
      </node>
      <node id="358642">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="358646">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="358635">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="358632" relation="include">
        </childnode>
        <childnode refid="358636" relation="include">
        </childnode>
        <childnode refid="358640" relation="include">
        </childnode>
        <childnode refid="358634" relation="include">
        </childnode>
        <childnode refid="358641" relation="include">
        </childnode>
      </node>
      <node id="358609">
        <label>algorithm</label>
      </node>
      <node id="358666">
        <label>xAODCore/tools/PrintHelpers.h</label>
        <link refid="d3/d6e/PrintHelpers_8h_source"/>
        <childnode refid="358667" relation="include">
        </childnode>
      </node>
      <node id="358602">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="358603" relation="include">
        </childnode>
        <childnode refid="358604" relation="include">
        </childnode>
        <childnode refid="358620" relation="include">
        </childnode>
        <childnode refid="358622" relation="include">
        </childnode>
        <childnode refid="358627" relation="include">
        </childnode>
        <childnode refid="358655" relation="include">
        </childnode>
        <childnode refid="358633" relation="include">
        </childnode>
        <childnode refid="358661" relation="include">
        </childnode>
        <childnode refid="358658" relation="include">
        </childnode>
        <childnode refid="358606" relation="include">
        </childnode>
        <childnode refid="358664" relation="include">
        </childnode>
      </node>
      <node id="358622">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="358601" relation="include">
        </childnode>
        <childnode refid="358615" relation="include">
        </childnode>
        <childnode refid="358623" relation="include">
        </childnode>
        <childnode refid="358624" relation="include">
        </childnode>
      </node>
      <node id="358617">
        <label>memory</label>
      </node>
      <node id="358645">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="358630" relation="include">
        </childnode>
        <childnode refid="358631" relation="include">
        </childnode>
        <childnode refid="358646" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="dd/d44/namespacexAOD">xAOD</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dd/da8/PrintHelpers_8cxx_1a98803dca5fface0b5162ea86bf5665c8" prot="public" static="no">
        <name>PRINTER</name>
        <param><defname>TYPE</defname></param>
        <initializer>do {                                                        \
         if( obj.isAvailable&lt; TYPE &gt;( reg.getName( auxid ) ) ) {  \
            out &lt;&lt; obj.auxdata&lt; TYPE &gt;( reg.getName( auxid ) );   \
         }                                                        \
      } while( 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx" line="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dd/da8/PrintHelpers_8cxx_1a518a2393aadc096fb8e9ba18a0129332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const std::vector&lt; T &gt; &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Helper operator to pretty-print the values of vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx" line="16" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx" bodystart="16" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="dd/da8/PrintHelpers_8cxx_1a0556e0969cb4224875acf2835ba85b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const SG::AuxElement &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound">SG::AuxElement</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operator printing the payload of an <ref refid="dd/d44/namespacexAOD" kindref="compound">xAOD</ref> object</para><para>This function can be used to quickly get an idea about the payload held by any type of <ref refid="dd/d44/namespacexAOD" kindref="compound">xAOD</ref> object. It prints the type and name of each auxiliary variable associated with the object. And for some simple types (primitives and some vectors of primitives) it even prints the values of these variables.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream to write the information to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to write the information about </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The same stream object that was given to the function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>Helper macro to make the code slightly shorter </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx" bodystart="31" bodyend="134"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>PrintHelpers.cxx<sp/>780624<sp/>2016-10-26<sp/>22:41:13Z<sp/>ssnyder<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>System<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EDM<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d1/d6f/AuxElement_8h" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">AthContainers/AuxElement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db/d7f/AuxTypeRegistry_8h" kindref="compound" tooltip="Handle mappings between names and auxid_t.">AthContainers/AuxTypeRegistry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Local<sp/>include(s):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODCore/tools/PrintHelpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>out,<sp/>const<sp/>std::vector&lt;<sp/>T<sp/>&gt;&amp;<sp/>vec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>vec[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i<sp/>&lt;<sp/>vec.size()<sp/>-<sp/>1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>same<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>off<sp/>with<sp/>some<sp/>basic<sp/>information:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;SG::AuxElement\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1af97c2ef167b0d66ada327a0ada1015e7" kindref="member" tooltip="Test to see if this object is currently using a standalone store.">usingStandaloneStore</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;using<sp/>standalone<sp/>store<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1ad7f08e277b177f9dd74924e7d635034e" kindref="member" tooltip="Test to see if this object is currently using a private store.">usingPrivateStore</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;using<sp/>private<sp/>store<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>container<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there&apos;s<sp/>no<sp/>auxiliary<sp/>store,<sp/>bail<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;standalone<sp/>object,<sp/>without<sp/>auxiliary<sp/>store&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>container<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>auxiliary<sp/>store,<sp/>bail<sp/>now:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()-&gt;<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Variables:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>convenience<sp/>pointer<sp/>to<sp/>the<sp/>aux<sp/>type<sp/>registry:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry" kindref="compound" tooltip="Handle mappings between names and auxid_t.">SG::AuxTypeRegistry</ref>&amp;<sp/>reg<sp/>=<sp/><ref refid="db/d33/classSG_1_1AuxTypeRegistry_1ab22c247525e0883b46012f14b6f5a048" kindref="member" tooltip="Return the singleton registry instance.">SG::AuxTypeRegistry::instance</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>auxiliary<sp/>IDs<sp/>of<sp/>the<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/dac/classSG_1_1unordered__set" kindref="compound">SG::auxid_set_t</ref>&amp;<sp/>auxids<sp/>=</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()-&gt;<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()<sp/>?</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a9004b51bd3619cab56c3d52e290c09b9" kindref="member" tooltip="Return the container holding this element.">container</ref>()-&gt;<ref refid="db/dd6/classSG_1_1AuxVectorData_1a239b57ce5e7833bb83c8f0bf3b390814" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()-&gt;<ref refid="d3/dd5/classSG_1_1IConstAuxStore_1a3be9ddcb2b1198c3cab03c7b94764a3d" kindref="member" tooltip="Return a set of identifiers for existing data items in this store.">getAuxIDs</ref>()<sp/>:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1a324d8fccbfe274b6ff91d6a19de35caf" kindref="member" tooltip="Return the current store, as a const interface.">getConstStore</ref>()-&gt;<ref refid="d3/dd5/classSG_1_1IConstAuxStore_1a3be9ddcb2b1198c3cab03c7b94764a3d" kindref="member" tooltip="Return a set of identifiers for existing data items in this store.">getAuxIDs</ref>()<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>auxids<sp/>to<sp/>get<sp/>predictable<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;SG::auxid_t&gt;<sp/>auxids_v<sp/>(auxids.begin(),<sp/>auxids.end());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>std::sort<sp/>(auxids_v.begin(),<sp/>auxids_v.end());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/><ref refid="dd/d59/namespaceSG_1affee481ab18822e03866e0a0d3ff011c" kindref="member" tooltip="Identifier for a particular aux data item.">SG::auxid_t</ref><sp/>auxid<sp/>:<sp/>auxids_v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>-<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a282421c8647cedea97b439141dfaac2d" kindref="member" tooltip="Return the type name of an aux data item.">getTypeName</ref>(<sp/>auxid<sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>\tname:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref>(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>\tvalue:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor">#define<sp/>PRINTER(<sp/>TYPE<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>obj.isAvailable&lt;<sp/>TYPE<sp/>&gt;(<sp/>reg.getName(<sp/>auxid<sp/>)<sp/>)<sp/>)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>obj.auxdata&lt;<sp/>TYPE<sp/>&gt;(<sp/>reg.getName(<sp/>auxid<sp/>)<sp/>);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>the<sp/>variable:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info*<sp/>ti<sp/>=<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a0e81c5cfde800f9bffe4516aea41cc2b" kindref="member" tooltip="Return the type of an aux data item.">getType</ref>(<sp/>auxid<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>int8_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>static_cast&lt;<sp/>int<sp/>&gt;(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;<sp/>int8_t<sp/>&gt;(<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref>(<sp/>auxid<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>uint8_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>static_cast&lt;<sp/>int<sp/>&gt;(<sp/>obj.<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;<sp/>uint8_t<sp/>&gt;(<sp/>reg.<ref refid="db/d33/classSG_1_1AuxTypeRegistry_1a640765027dc1055579b7f97171d66273" kindref="member" tooltip="Return the name of an aux data item.">getName</ref>(<sp/>auxid<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>int16_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>int16_t<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>uint16_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>uint16_t<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>int32_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>int32_t<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>uint32_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>uint32_t<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>int64_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>int64_t<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>uint64_t<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>uint64_t<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>float<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>float<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>double<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>int16_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>int16_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>uint16_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>uint16_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>int32_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>int32_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>uint32_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>uint32_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>int64_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>int64_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*ti<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<sp/>std::vector&lt;<sp/>uint64_t<sp/>&gt;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRINTER(<sp/>std::vector&lt;<sp/>uint64_t<sp/>&gt;<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>rid<sp/>of<sp/>the<sp/>temporary<sp/>macro...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>PRINTER</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>same<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xAOD<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d44/namespacexAOD_1a75480f79a4e9470abdb56aaf2480b28a" kindref="member">dump</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/db0/classSG_1_1AuxElement" kindref="compound" tooltip="Base class for elements of a container that can have aux data.">SG::AuxElement</ref>&amp;<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>printout<sp/>simply<sp/>using<sp/>the<sp/>operator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>obj<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xAOD</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODCore/Root/PrintHelpers.cxx"/>
  </compounddef>
</doxygen>
