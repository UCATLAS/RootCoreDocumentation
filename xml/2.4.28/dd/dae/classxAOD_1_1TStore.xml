<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="dd/dae/classxAOD_1_1TStore" kind="class" prot="public">
    <compoundname>xAOD::TStore</compoundname>
    <derivedcompoundref refid="d9/d19/classxAOD_1_1TPyStore" prot="public" virt="non-virtual">xAOD::TPyStore</derivedcompoundref>
    <includes refid="d7/d1f/TStore_8h" local="no">TStore.h</includes>
      <sectiondef kind="user-defined">
      <header>Transient data accessor/modifier functions</header>
      <description><para><anchor id="_1amgrp07a919483ac19f0192e56322b0a58542"/> </para></description>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1aeb956b1b9725283d6f084b957ab21460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::contains</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function checking if an object is available from the store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a18539215d917e253624d98674205d0e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::isConst</definition>
        <argsstring>(const std::string &amp;key) const </argsstring>
        <name>isConst</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function checking if an object with a given type is constant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="68" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ae0da93791cc45f8ec3de2c3e96f9b809" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::retrieve</definition>
        <argsstring>(const T *&amp;obj, const std::string &amp;key) const </argsstring>
        <name>retrieve</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Retrieve either a constant or non-constant object from the store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="72" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="34" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a4f5366f44f31f1963cd6b50dfae2b7dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::retrieve</definition>
        <argsstring>(T *&amp;obj, const std::string &amp;key) const </argsstring>
        <name>retrieve</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Retrieve a non-constant object from the store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="75" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="52" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a96c78b3019dbf418a93c65c9fe31e9e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(T *obj, const std::string &amp;key)</argsstring>
        <name>record</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Add an object to the store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="70" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a5d63f2f6b52e946913986acaa95bc9e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(std::unique_ptr&lt; T &gt; obj, const std::string &amp;key)</argsstring>
        <name>record</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Add an object othe store, explicitly taking ownership of it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="82" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="91" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a911277bb809260c13517533dc6b30104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::remove</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>remove</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Remove an object from the store by name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="44" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a87fc04f8d3237bf94dfed5215a0316e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::remove</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>remove</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Remove an object from the store by pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="66" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a6aa618d5b10aaacebe720a0caf638f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TStore::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the store of all of its contents. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="90" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="92" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions mostly used by TEvent in the TVirtualEvent functions</header>
      <description><para><anchor id="_1amgrp442d957d72f837942b8afd6a9d9f3218"/> </para></description>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ae6556cf35db8825b4143c8c6ea5945d0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::contains</definition>
        <argsstring>(uint32_t hash) const </argsstring>
        <name>contains</name>
        <param>
          <type>uint32_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Check if an object with a given hash is managed by the store. </para>        </briefdescription>
        <detaileddescription>
<para>This is a reasonably fast function. It checks whether an object with the specified hashed key is managed by the store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashed key of the object that we are looking for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the object is managed by the store, or <computeroutput>kFALSE</computeroutput> if it is not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a6ed70ddc5db4f43d3e6a9bfc959336f1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::contains</definition>
        <argsstring>(const void *ptr) const </argsstring>
        <name>contains</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Check if an object with a given pointer is managed by the store. </para>        </briefdescription>
        <detaileddescription>
<para>This is a quite slow function. It needs to check each managed object to possibly find which one of them has this pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object that may or may not be in the store </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>kTRUE</computeroutput> if the object is managed by the store, or <computeroutput>kFALSE</computeroutput> if it isn&apos;t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="309" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1aa4044ac928ea18fe6cde037cfcb8742d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; xAOD::TStore::getName</definition>
        <argsstring>(uint32_t hash) const </argsstring>
        <name>getName</name>
        <param>
          <type>uint32_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Get the name corresponding to a hashed key. </para>        </briefdescription>
        <detaileddescription>
<para>This is a fairly fast function. Used by ElementLinks that point to objects in this store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hashed key for which we want to find the string key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name corresponding to this hashed key if the hashed key is known, or an empty string if it isn&apos;t. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="133" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="332" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1af0287550846fc6e0c69c1f65e57ca2a0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; xAOD::TStore::getName</definition>
        <argsstring>(const void *ptr) const </argsstring>
        <name>getName</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get the name of a managed object. </para>        </briefdescription>
        <detaileddescription>
<para>This is just as slow as the previous contains function. It needs to look at all the managed objects one by one to find under what name it is managed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object that we want to know the name of </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The name with which this object was recorded into the store. Or an empty string of the object is not known to the store. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="135" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="356" bodyend="373"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="dd/dae/classxAOD_1_1TStore_1aa9208fba017f226b07b8a78cee796457" prot="protected" static="no">
        <type>std::map&lt; std::string, <ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> * &gt;</type>
        <definition>typedef std::map&lt; std::string, THolder* &gt; xAOD::TStore::Objects_t</definition>
        <argsstring></argsstring>
        <name>Objects_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> of the internal container storing all the objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dd/dae/classxAOD_1_1TStore_1a171f8adc5fae0914d7a9b1b93717b4a4" prot="protected" static="no">
        <type>std::map&lt; uint32_t, std::string &gt;</type>
        <definition>typedef std::map&lt; uint32_t, std::string &gt; xAOD::TStore::HashedKeys_t</definition>
        <argsstring></argsstring>
        <name>HashedKeys_t</name>
        <briefdescription>
<para><ref refid="dd/dc8/namespacexAOD_1_1Type" kindref="compound">Type</ref> of the internal storage for the hashed keys of the object names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="dd/dae/classxAOD_1_1TStore_1a8c623db1a717712c7c4b6fa671f5f345" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class TEvent</definition>
        <argsstring></argsstring>
        <name>TEvent</name>
        <briefdescription>
<para>Make <ref refid="de/d95/classxAOD_1_1TEvent" kindref="compound">TEvent</ref> a friend of this class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="dd/dae/classxAOD_1_1TStore_1acf6486d15c58f899901c161845787f4c" prot="protected" static="no" mutable="no">
        <type><ref refid="dd/dae/classxAOD_1_1TStore_1aa9208fba017f226b07b8a78cee796457" kindref="member">Objects_t</ref></type>
        <definition>Objects_t xAOD::TStore::m_objects</definition>
        <argsstring></argsstring>
        <name>m_objects</name>
        <briefdescription>
<para>The object storage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="145" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dae/classxAOD_1_1TStore_1aa445eab190ca1b872e1f5c5a773cbfc3" prot="protected" static="no" mutable="no">
        <type><ref refid="dd/dae/classxAOD_1_1TStore_1a171f8adc5fae0914d7a9b1b93717b4a4" kindref="member">HashedKeys_t</ref></type>
        <definition>HashedKeys_t xAOD::TStore::m_keys</definition>
        <argsstring></argsstring>
        <name>m_keys</name>
        <briefdescription>
<para>The key map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="147" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ad77b6c7a3c0e676966d149e1733adfa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xAOD::TStore::TStore</definition>
        <argsstring>()</argsstring>
        <name>TStore</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="52" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a7484805c0564e8de2f6e9c54583c8ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>xAOD::TStore::~TStore</definition>
        <argsstring>()</argsstring>
        <name>~TStore</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="25" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a27c51530809f2f293efbe83bc21412c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TStore::setActive</definition>
        <argsstring>()</argsstring>
        <name>setActive</name>
        <briefdescription>
<para>Set this as the active transient store in the application. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ad541bef55ceb3442f0b9cc652de99b7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xAOD::TStore::print</definition>
        <argsstring>() const </argsstring>
        <name>print</name>
        <briefdescription>
<para>Print the current contents of the transient store. </para>        </briefdescription>
        <detaileddescription>
<para>This is really just meant for debugging an analysis code, to see what&apos;s going on in it. Behaves a bit similar to StoreGateSvc::dump(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="95" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="111" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a9b25f88a5e5ec80acc9d22a53f589972" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::contains</definition>
        <argsstring>(const std::string &amp;key, const std::type_info &amp;ti) const </argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Non-templated function implementing the containment check. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="137" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ae82c20f718265be2e220ff526ded80a8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>::Bool_t</type>
        <definition>Bool_t xAOD::TStore::isConst</definition>
        <argsstring>(const std::string &amp;key, const std::type_info &amp;ti) const </argsstring>
        <name>isConst</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Non-templated function implementing the const-ness check. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="150" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a9f1866019afad21c8b030cf1935a11b2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * xAOD::TStore::getObject</definition>
        <argsstring>(const std::string &amp;key, const std::type_info &amp;ti) const </argsstring>
        <name>getObject</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Function retrieving a non-const object in a non-template way. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="105" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="176" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a4a7bb4492a62c0a94bc4dfb4514db973" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * xAOD::TStore::getConstObject</definition>
        <argsstring>(const std::string &amp;key, const std::type_info &amp;ti) const </argsstring>
        <name>getConstObject</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Function retrieving a const object in a non-template way. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="108" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="189" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a91d4380a4194ca93b2f5d37a470f1b09" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(void *obj, const std::string &amp;key, const std::string &amp;classname,::Bool_t isOwner=kTRUE)</argsstring>
        <name>record</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>classname</declname>
        </param>
        <param>
          <type>::Bool_t</type>
          <declname>isOwner</declname>
          <defval>kTRUE</defval>
        </param>
        <briefdescription>
<para>Function recording an object that has a dictionary available. </para>        </briefdescription>
        <detaileddescription>
<para>This internal function does the heavy lifting of recording objects into the store that have a proper ROOT dictionary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Typeless pointer to the object being recorded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key to record the object with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>classname</parametername>
</parameternamelist>
<parameterdescription>
<para>The type name of the object being recorded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isOwner</parametername>
</parameternamelist>
<parameterdescription>
<para>If <computeroutput>kTRUE</computeroutput>, the store takes ownership of the object, otherwise it doesn&apos;t </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The usual <ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">xAOD::TReturnCode</ref> types </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="212" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a725c949e0ece2bdfe9f35abdba35b0fb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(void *obj, const std::string &amp;key, const std::type_info &amp;ti)</argsstring>
        <name>record</name>
        <param>
          <type>void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Function recording an object that has no dictionary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="115" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="252" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1a23d2019acc3f5971630f50226c22c9a5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(ConstDataVector&lt; T &gt; *obj, const std::string &amp;key, const std::type_info &amp;ti)</argsstring>
        <name>record</name>
        <param>
          <type><ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref>&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::type_info &amp;</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Function doing the first step of recording a <ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="120" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.icc" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="dd/dae/classxAOD_1_1TStore_1ac3f9ae8ab7d62d1172a9b7dd40dff5b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/da4/classxAOD_1_1TReturnCode" kindref="compound">TReturnCode</ref></type>
        <definition>TReturnCode xAOD::TStore::record</definition>
        <argsstring>(THolder *hldr, const std::string &amp;key)</argsstring>
        <name>record</name>
        <param>
          <type><ref refid="d0/d85/classxAOD_1_1THolder" kindref="compound">THolder</ref> *</type>
          <declname>hldr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Function doing the second step of recording a <ref refid="de/db1/classConstDataVector" kindref="compound">ConstDataVector</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/Root/TStore.cxx" bodystart="269" bodyend="287"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> relatively simple transient store for objects created in analysis</para><para>This is a very simple transient store for objects that are created during analysis, but don&apos;t have to be written to the output file(s). To make it easier for the analysis tools to communicate with each other similar to how they would do it in <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> (with <ref refid="dd/d95/classStoreGateSvc" kindref="compound">StoreGateSvc</ref>), they can use this class.</para><para>The usage of this class is highly optional in analysis, it should only be used if really necessary. (Passing around objects in analysis code directly is usually a better approach than using a store in my mind...)</para><para><simplesect kind="author"><para>Attila Krasznahorkay &lt;<ulink url="mailto:Attila.Krasznahorkay@cern.ch">Attila.Krasznahorkay@cern.ch</ulink>&gt;</para></simplesect>
<simplesect kind="rcs"><title>Revision</title><para>663791 </para></simplesect>
<simplesect kind="rcs"><title>Date</title><para>2015-04-29 15:08:06 +0200 (Wed, 29 Apr 2015) </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="22379">
        <label>xAOD::TStore</label>
        <link refid="dd/dae/classxAOD_1_1TStore"/>
      </node>
      <node id="22380">
        <label>xAOD::TPyStore</label>
        <link refid="d9/d19/classxAOD_1_1TPyStore"/>
        <childnode refid="22379" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/xAODRootAccess/xAODRootAccess/TStore.h" bodystart="45" bodyend="149"/>
    <listofallmembers>
      <member refid="dd/dae/classxAOD_1_1TStore_1a6aa618d5b10aaacebe720a0caf638f5f" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>clear</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aeb956b1b9725283d6f084b957ab21460" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a9b25f88a5e5ec80acc9d22a53f589972" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae6556cf35db8825b4143c8c6ea5945d0" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a6ed70ddc5db4f43d3e6a9bfc959336f1" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>contains</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a4a7bb4492a62c0a94bc4dfb4514db973" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>getConstObject</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa4044ac928ea18fe6cde037cfcb8742d" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>getName</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1af0287550846fc6e0c69c1f65e57ca2a0" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>getName</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a9f1866019afad21c8b030cf1935a11b2" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>getObject</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a171f8adc5fae0914d7a9b1b93717b4a4" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>HashedKeys_t</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a18539215d917e253624d98674205d0e2" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>isConst</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae82c20f718265be2e220ff526ded80a8" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>isConst</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa445eab190ca1b872e1f5c5a773cbfc3" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>m_keys</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1acf6486d15c58f899901c161845787f4c" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>m_objects</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1aa9208fba017f226b07b8a78cee796457" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>Objects_t</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ad541bef55ceb3442f0b9cc652de99b7f" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>print</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a96c78b3019dbf418a93c65c9fe31e9e8" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a5d63f2f6b52e946913986acaa95bc9e1" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a91d4380a4194ca93b2f5d37a470f1b09" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a725c949e0ece2bdfe9f35abdba35b0fb" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a23d2019acc3f5971630f50226c22c9a5" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ac3f9ae8ab7d62d1172a9b7dd40dff5b3" prot="protected" virt="non-virtual"><scope>xAOD::TStore</scope><name>record</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a911277bb809260c13517533dc6b30104" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>remove</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a87fc04f8d3237bf94dfed5215a0316e5" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>remove</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ae0da93791cc45f8ec3de2c3e96f9b809" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>retrieve</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a4f5366f44f31f1963cd6b50dfae2b7dd" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>retrieve</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a27c51530809f2f293efbe83bc21412c6" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>setActive</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a8c623db1a717712c7c4b6fa671f5f345" prot="private" virt="non-virtual"><scope>xAOD::TStore</scope><name>TEvent</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1ad77b6c7a3c0e676966d149e1733adfa9" prot="public" virt="non-virtual"><scope>xAOD::TStore</scope><name>TStore</name></member>
      <member refid="dd/dae/classxAOD_1_1TStore_1a7484805c0564e8de2f6e9c54583c8ae5" prot="public" virt="virtual"><scope>xAOD::TStore</scope><name>~TStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
