<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/dbb/classEL_1_1Job" kind="class" prot="public">
    <compoundname>EL::Job</compoundname>
      <sectiondef kind="user-defined">
      <description><para><anchor id="_1amgrpd41d8cd98f00b204e9800998ecf8427e"/> </para></description>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ac005d45b4c107d108b1e23da3877737a" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optRetries</definition>
        <argsstring></argsstring>
        <name>optRetries</name>
        <initializer> SH::MetaNames::openRetries()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>these options are defined in <ref refid="d2/d8c/structSH_1_1MetaNames" kindref="compound">SH::MetaNames</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="398" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a69c3b31d3f32dc2d5c2f2087811b2e26" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optRetriesWait</definition>
        <argsstring></argsstring>
        <name>optRetriesWait</name>
        <initializer> SH::MetaNames::openRetriesWait()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="399" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" prot="public" static="no">
        <type>std::vector&lt; <ref refid="de/ddb/classEL_1_1Algorithm" kindref="compound">EL::Algorithm</ref> * &gt;::const_iterator</type>
        <definition>typedef std::vector&lt;EL::Algorithm*&gt;::const_iterator EL::Job::algsIter</definition>
        <argsstring></argsstring>
        <name>algsIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the list of algorithms used guarantee: no-fail / strong failures: out of memory II invariant: alg != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="86" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dbb/classEL_1_1Job_1a6b7da0153a514987c8fc5691cc7fd9a2" prot="public" static="no">
        <type><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">OutputStream</ref> *</type>
        <definition>typedef OutputStream* EL::Job::outputMIter</definition>
        <argsstring></argsstring>
        <name>outputMIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the list of output datasets used guarantee: no-fail / strong failures(3): out of memory II requires(3,soft): !outputHas (val_output.label()) note: while it is not a requirement it is highly recommended that you add the outputs from Algorithm::doSetupJob. That way they get automatically enabled/disabled when you enable/disable the algorithms. Plus your code will be slightly less spread out. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="122" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/dbb/classEL_1_1Job_1a593d2c5caeb222eeb770d4599bf170f0" prot="public" static="no">
        <type>const <ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">OutputStream</ref> *</type>
        <definition>typedef const OutputStream* EL::Job::outputIter</definition>
        <argsstring></argsstring>
        <name>outputIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1afce7ed50e8fac3594837b09e7b6b659b" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optRemoveSubmitDir</definition>
        <argsstring></argsstring>
        <name>optRemoveSubmitDir</name>
        <initializer> &quot;nc_EventLoop_RemoveSubmitDir&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for overwriting the submission directory. if you set this to a non-zero value it will remove any existing submit-directory before trying to create a new one. rationale: normally you don&apos;t want to silently remove an existing submission directory, since it may contain valuable data, but for some cases like debugging you may be annoyed to delete it manually. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="170" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a2d1dde35c522bbf7d35027f0dfdccc97" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optMaxEvents</definition>
        <argsstring></argsstring>
        <name>optMaxEvents</name>
        <initializer> &quot;nc_EventLoop_MaxEvents&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option used for setting the maximum number of events to process per sample rationale: this is used for test runs where you don&apos;t want to process all events, but just want a quick look </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="178" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ab08d4d8fb8f7f639b1bf755399687d77" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optSkipEvents</definition>
        <argsstring></argsstring>
        <name>optSkipEvents</name>
        <initializer> &quot;nc_EventLoop_SkipEvents&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option used for skipping a certain number of events in the beginning rationale: this is used for test runs where you are only interested in a particular set of events </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="186" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a73aa9362cc3cc206e3a645a42bccfee7" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optFilesPerWorker</definition>
        <argsstring></argsstring>
        <name>optFilesPerWorker</name>
        <initializer> &quot;nc_EventLoop_FilesPerWorker&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for selecting the number of files per batch job. (only <ref refid="dc/d4d/classEL_1_1BatchDriver" kindref="compound">BatchDriver</ref> and derived drivers). rationale: this is typically used if you are either processing fairly small input files or are producing a skim with a very high reduction factor. it will reduce the inefficiency associated with starting a lot of jobs or reading a lot of output files </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="199" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a154553a7807dfe0b39f6c4ab2d58d1c3" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optEventsPerWorker</definition>
        <argsstring></argsstring>
        <name>optEventsPerWorker</name>
        <initializer> &quot;nc_EventLoop_EventsPerWorker&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for selecting the number of events per batch job. (only <ref refid="dc/d4d/classEL_1_1BatchDriver" kindref="compound">BatchDriver</ref> and derived drivers). warning: this option will be ignored unless you have called <ref refid="d0/d9e/namespaceSH_1a2e2d63946f5ce402c6456c8973adc241" kindref="member">SH::scanNEvents</ref> first. rationale: this allows to make your jobs all approximately equal size and gives you much finer control of the lengths of your jobs. if you did run <ref refid="d0/d9e/namespaceSH_1a2e2d63946f5ce402c6456c8973adc241" kindref="member">SH::scanNEvents</ref>, but didn&apos;t specify a number of events per worker this will produce the same number of jobs as you would have otherwise, but spread the workload more evenly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="214" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a6f8bac5fcde2e85c239a60068445be00" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optSubmitFlags</definition>
        <argsstring></argsstring>
        <name>optSubmitFlags</name>
        <initializer> &quot;nc_EventLoop_SubmitFlags&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for supplying extra submit parameters to batch systems rationale: the primary purpose of this is to allow selecting the right queue on your batch system, but it can be used for all kind of submission options that EventLoop doesn&apos;t support directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="224" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a600d802dce5c5faa2997420abc45dae2" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optCondorConf</definition>
        <argsstring></argsstring>
        <name>optCondorConf</name>
        <initializer> &quot;nc_EventLoop_CondorConf&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for supplying extra parameters for condor systems </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="230" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a6bcfd21a0dfb459752e8807aaac46f11" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optCacheSize</definition>
        <argsstring></argsstring>
        <name>optCacheSize</name>
        <initializer> &quot;nc_cache_size&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: this option allows to configure the TTreeCache size for this job. if it is smaller or equal to 0, the cache is turned off. rationale: if you read data from across the network using the cache mechanism will greatly increase your performance. for local disks you may gain or lose performance.</para><para>warning: this has to be synchronized with SampleHandler::MetaFields. I can&apos;t just copy it here, because the order of initialization is undefined </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="240" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a6a5bdad992abf36bbb0afcf37ebca332" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optCacheLearnEntries</definition>
        <argsstring></argsstring>
        <name>optCacheLearnEntries</name>
        <initializer> &quot;nc_EventLoop_CacheLearnEntries&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: this option allows to configure the number of tree entries used for learning cache behavior. rationale: there is a trade-off here, if you set this too low you will fail to cache more rarely used variables. if you set it too high it will take too long until the cache kicks in. warning: right now this is performed on a per-file basis, which at some point will be raised to a per-job basis, which is the limit of how far caching can go in this approach. if you need multi-job support, either use D3PDReader or contact me on how to do this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="255" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a7789d161d685005f03fe2de003491196" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDPerfStats</definition>
        <argsstring></argsstring>
        <name>optD3PDPerfStats</name>
        <initializer> &quot;nc_EventLoop_D3PDPerfStats&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for turning on D3PDPerfStats. To use D3PDPerfStats set this to a non-zero value. warning: this only works if you read data through D3PDReader rationale: this can be used for fine-tuning TTreeCache or generally optimizing i/o performance </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="265" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a3aec030143b629d78675de57990b3257" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDReadStats</definition>
        <argsstring></argsstring>
        <name>optD3PDReadStats</name>
        <initializer> &quot;nc_EventLoop_D3PDReadStats&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the D3PDPerfStats object produced as I gather it, as well as the name of the option passed into the job. rationale: I use the same name in two places to allow reading the stats object from one output and passing it to the next </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="274" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a576847191d09879c700bdae6330c3cbb" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXAODPerfStats</definition>
        <argsstring></argsstring>
        <name>optXAODPerfStats</name>
        <initializer> &quot;nc_EventLoop_XAODPerfStats&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the option for turning on XAODPerfStats. To use XAODPerfStats set this to a non-zero value. warning: this only works if you read data through XAODReader rationale: this can be used for fine-tuning TTreeCache or generally optimizing i/o performance </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="284" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a5c7eba40b3ebc3879ba0ad5beb13c3de" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXAODReadStats</definition>
        <argsstring></argsstring>
        <name>optXAODReadStats</name>
        <initializer> &quot;nc_EventLoop_XAODReadStats&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the name of the XAODPerfStats object produced as I gather it, as well as the name of the option passed into the job. rationale: I use the same name in two places to allow reading the stats object from one output and passing it to the next </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="293" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a59102ed00cf2758ef4a754d294975d8d" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDCacheMinEvent</definition>
        <argsstring></argsstring>
        <name>optD3PDCacheMinEvent</name>
        <initializer> &quot;nc_EventLoop_D3PDCacheMinEvent&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: these options configure the D3PDReader TTreeCache settings. if you use more than one option, the result is undefined. warning: this only works if you use D3PDReader rationale: the idea is that in your first job you create the D3PDReadStats object, which you then pass to subsequent jobs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="304" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a9e6b319c19741eeb7887b219257d1fd0" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDCacheMinEventFraction</definition>
        <argsstring></argsstring>
        <name>optD3PDCacheMinEventFraction</name>
        <initializer> &quot;nc_EventLoop_D3PDCacheMinEventFraction&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="305" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1aa7262e10e739c9fd3da9a12b3b688b59" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDCacheMinByte</definition>
        <argsstring></argsstring>
        <name>optD3PDCacheMinByte</name>
        <initializer> &quot;nc_EventLoop_D3PDCacheMinByte&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="306" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a8d9eb75f23f444b868b81e3166b25c8c" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optD3PDCacheMinByteFraction</definition>
        <argsstring></argsstring>
        <name>optD3PDCacheMinByteFraction</name>
        <initializer> &quot;nc_EventLoop_D3PDCacheMinByteFraction&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="307" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1af4fc46001aaaf18d1c2d98d5d7b49ea3" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optPerfTree</definition>
        <argsstring></argsstring>
        <name>optPerfTree</name>
        <initializer> &quot;nc_EventLoop_PerfTree&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the option to turn on the performance tree in PROOF. if this is set to 1, it will write out the tree rationale: this can help in tuning your PROOF cluster or tuning what you do in PROOF, but it may have some overhead, which is why we don&apos;t do it by default </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="316" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a66cde8b91f8957ac5296722480bbeb07" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXaodAccessMode</definition>
        <argsstring></argsstring>
        <name>optXaodAccessMode</name>
        <initializer> &quot;nc_EventLoop_XaodAccessMode&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the option to select the access mode for xAODs. this can be &quot;branch&quot; for branch access, or &quot;class&quot; for access. if this option isn&apos;t specified EventLoop will pick whatever is currently recommended. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="324" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ae95985a3fb6af4e8c2f91bbdd54f8c1a" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXaodAccessMode_branch</definition>
        <argsstring></argsstring>
        <name>optXaodAccessMode_branch</name>
        <initializer> &quot;branch&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="325" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1aeb113327e9d83f5f44ff2ccef26ecef3" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXaodAccessMode_class</definition>
        <argsstring></argsstring>
        <name>optXaodAccessMode_class</name>
        <initializer> &quot;class&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="326" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a605f1a6e1532aefbbe4c93174ce3fd8e" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXaodAccessMode_athena</definition>
        <argsstring></argsstring>
        <name>optXaodAccessMode_athena</name>
        <initializer> &quot;athena&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="327" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a61e753cf829aed6a8c818d474e51e610" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optXAODSummaryReport</definition>
        <argsstring></argsstring>
        <name>optXAODSummaryReport</name>
        <initializer> &quot;nc_xaod_summary_report&quot;</initializer>
        <briefdescription>
<para>the option to turn on/off the <ref refid="dd/d44/namespacexAOD" kindref="compound">xAOD</ref> summary reporting at the end of the job </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="333" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a00db303aeaccfe15cf2cef2f4b613966" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optPrintPerFileStats</definition>
        <argsstring></argsstring>
        <name>optPrintPerFileStats</name>
        <initializer> &quot;nc_print_per_file_stats&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the option to turn on printing of i/o statistics at the end of each file rationale: while this is not as complete as whole sample statistics, it can be helpful in some circumstances when debugging the performance warning: this is not supported for all drivers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="343" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1adb8f92321453868941ad2f9fbb8e0529" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optDisableMetrics</definition>
        <argsstring></argsstring>
        <name>optDisableMetrics</name>
        <initializer> &quot;nc_disable_metrics&quot;</initializer>
        <briefdescription>
<para>description: the option to turn off collection of performance data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="348" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a83a9b20b093a0c95c193f0628843aabb" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optResetShell</definition>
        <argsstring></argsstring>
        <name>optResetShell</name>
        <initializer> &quot;nc_reset_shell&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the option to reset the shell on the worker nodes rationale: this is currently only used by the <ref refid="d2/d63/classEL_1_1LSFDriver" kindref="compound">LSFDriver</ref> where it is enabled by default to reset it on lxbatch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="355" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ae00c0e87cc71efbd3c08cb8cc5a19278" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optLocalNoUnsetup</definition>
        <argsstring></argsstring>
        <name>optLocalNoUnsetup</name>
        <initializer> &quot;nc_local_no_unsetup&quot;</initializer>
        <briefdescription>
<para>the option not to unsetup the environment in <ref refid="da/dfc/classEL_1_1LocalDriver" kindref="compound">LocalDriver</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="360" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad81793cbf27572688a3b03e3954356d3" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optBackgroundProcess</definition>
        <argsstring></argsstring>
        <name>optBackgroundProcess</name>
        <initializer> &quot;nc_background_process&quot;</initializer>
        <briefdescription>
<para>the option to do processing in a background process in PROOF </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="365" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1afdfe395240d60b36d63bcc5dbda5830e" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridDestSE</definition>
        <argsstring></argsstring>
        <name>optGridDestSE</name>
        <initializer> &quot;nc_destSE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: grid-specific options rationale: these are named so as to correspond to prun equivalents, bare the optGrid prefix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="372" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a9b92217bbfd79d122229ab7f61b5ddbe" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridSite</definition>
        <argsstring></argsstring>
        <name>optGridSite</name>
        <initializer> &quot;nc_site&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="373" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad92dee93499c7b768b695d4cfcc6cb9f" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridCloud</definition>
        <argsstring></argsstring>
        <name>optGridCloud</name>
        <initializer> &quot;nc_cloud&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="374" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a3c4fb7dbeacc078e2dce95b6c279ec59" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridExcludedSite</definition>
        <argsstring></argsstring>
        <name>optGridExcludedSite</name>
        <initializer> &quot;nc_excludedSite&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="375" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1af33011dddd8f3db2f5aa21ebd0903fae" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridNGBPerJob</definition>
        <argsstring></argsstring>
        <name>optGridNGBPerJob</name>
        <initializer> &quot;nc_nGBPerJob&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="376" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ac2bc1af75b1331e3d973db35a3d606c7" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridMemory</definition>
        <argsstring></argsstring>
        <name>optGridMemory</name>
        <initializer> &quot;nc_memory&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="377" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1afb3054ba94ea50e4b58f9b77c555063b" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridMaxCpuCount</definition>
        <argsstring></argsstring>
        <name>optGridMaxCpuCount</name>
        <initializer> &quot;nc_maxCpuCount&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="378" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad9bbc95ca787e06008abf93bf7f8e3ec" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridNFiles</definition>
        <argsstring></argsstring>
        <name>optGridNFiles</name>
        <initializer> &quot;nc_nFiles&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="379" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1aab980eee3a0d7607acc20ebca64b9739" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridNFilesPerJob</definition>
        <argsstring></argsstring>
        <name>optGridNFilesPerJob</name>
        <initializer> &quot;nc_nFilesPerJob&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="380" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad02f2ecfb912b6550ad4b1ad56d7ef4f" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridNJobs</definition>
        <argsstring></argsstring>
        <name>optGridNJobs</name>
        <initializer> &quot;nc_nJobs&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="381" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad5a4a395d96dfb084757a04222b49f88" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridMaxFileSize</definition>
        <argsstring></argsstring>
        <name>optGridMaxFileSize</name>
        <initializer> &quot;nc_maxFileSize&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="382" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1adc7724c79804fdf2bb829072d1c7780e" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridMaxNFilesPerJob</definition>
        <argsstring></argsstring>
        <name>optGridMaxNFilesPerJob</name>
        <initializer> &quot;nc_maxNFilesPerJob&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="383" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a2faa49f4e0567e5809cc7f32e69798ef" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridUseChirpServer</definition>
        <argsstring></argsstring>
        <name>optGridUseChirpServer</name>
        <initializer> &quot;nc_useChirpServer&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="384" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a5193f0d3840e85f194e6dc1674c3096c" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridExpress</definition>
        <argsstring></argsstring>
        <name>optGridExpress</name>
        <initializer> &quot;nc_express&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="385" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad2e9cfb0d01da911e2762e978947060a" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridNoSubmit</definition>
        <argsstring></argsstring>
        <name>optGridNoSubmit</name>
        <initializer> &quot;nc_noSubmit&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="386" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a3fc8d82937c85d68cc5defc13b2dbacb" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridMergeOutput</definition>
        <argsstring></argsstring>
        <name>optGridMergeOutput</name>
        <initializer> &quot;nc_mergeOutput&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="387" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1abbffc879383162440e614bb9f813cf46" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optTmpDir</definition>
        <argsstring></argsstring>
        <name>optTmpDir</name>
        <initializer> &quot;nc_tmpDir&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="388" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1afe72b1b8116e340b03356247199aeb56" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optRootVer</definition>
        <argsstring></argsstring>
        <name>optRootVer</name>
        <initializer> &quot;nc_rootVer&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="389" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a3137d472314b0783e613e9245c9cf2ff" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optCmtConfig</definition>
        <argsstring></argsstring>
        <name>optCmtConfig</name>
        <initializer> &quot;nc_cmtConfig&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="390" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1ad2e205cd0cef7e00ca98e81f843fa150" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optGridDisableAutoRetry</definition>
        <argsstring></argsstring>
        <name>optGridDisableAutoRetry</name>
        <initializer> &quot;nc_disableAutoRetry&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="391" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1adbb37348dc888a4dc14d1567fab0721f" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optOfficial</definition>
        <argsstring></argsstring>
        <name>optOfficial</name>
        <initializer> &quot;nc_official&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="392" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a9f6bf224ae1bbd97d232b0dbb55f7e46" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optVoms</definition>
        <argsstring></argsstring>
        <name>optVoms</name>
        <initializer> &quot;nc_voms&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="393" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a1457dbca4a9784e4bd1b7504c7b4de31" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string EL::Job::optBatchSharedFileSystem</definition>
        <argsstring></argsstring>
        <name>optBatchSharedFileSystem</name>
        <initializer> &quot;nc_sharedFileSystem&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: batch-specific options rationale: these options are for configuring batch drivers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="408" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a6e76ebd6d5e82b1e264ed3fba4ea4d31" prot="private" static="no" mutable="no">
        <type><ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref></type>
        <definition>SH::SampleHandler EL::Job::m_sampleHandler</definition>
        <argsstring></argsstring>
        <name>m_sampleHandler</name>
        <briefdescription>
<para>description: members directly corresponding to accessors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="419" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a922217e9c27ccacc39eb7508b8fead0d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="de/ddb/classEL_1_1Algorithm" kindref="compound">EL::Algorithm</ref> * &gt;</type>
        <definition>std::vector&lt;EL::Algorithm*&gt; EL::Job::m_algs</definition>
        <argsstring></argsstring>
        <name>m_algs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="421" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a7c1ac9ee8d4772628f321199cf383850" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">EL::OutputStream</ref> &gt;</type>
        <definition>std::vector&lt;EL::OutputStream&gt; EL::Job::m_output</definition>
        <argsstring></argsstring>
        <name>m_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="423" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="da/dbb/classEL_1_1Job_1a42b398034d76803701b791b8e5433fbe" prot="private" static="no" mutable="no">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref></type>
        <definition>SH::MetaObject EL::Job::m_options</definition>
        <argsstring></argsstring>
        <name>m_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="425" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a39af1f6f1b73a4ca5f96ecf18175a8e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="42" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1abeacb0709369f8752328e240a1084bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::Job::Job</definition>
        <argsstring>()</argsstring>
        <name>Job</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard default constructor guarantee: strong failures: low level errors I </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a4adebe445419f076e70657a56747a712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::Job::Job</definition>
        <argsstring>(const Job &amp;that)</argsstring>
        <name>Job</name>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard copy constructor guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="56" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="127" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a1aa1f6a9d534c7839440a0fda6f13d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::Job::~Job</definition>
        <argsstring>()</argsstring>
        <name>~Job</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard destructor guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a261680d039d7da37c63af888fb8a9906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
        <definition>Job &amp; EL::Job::operator=</definition>
        <argsstring>(const Job &amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard assignment operator returns: *this guarantee: strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="158" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1aa02788adcdc922ea863ef9c28c7d5b5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref> &amp;</type>
        <definition>const SH::SampleHandler &amp; EL::Job::sampleHandler</definition>
        <argsstring>() const </argsstring>
        <name>sampleHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the sample handler used guarantee: no-fail / strong failures: out of memory II </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1aff29c0afb67dbca9fdf7c876a6764990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::sampleHandler</definition>
        <argsstring>(const SH::SampleHandler &amp;val_sampleHandler)</argsstring>
        <name>sampleHandler</name>
        <param>
          <type>const <ref refid="d1/d56/classSH_1_1SampleHandler" kindref="compound">SH::SampleHandler</ref> &amp;</type>
          <declname>val_sampleHandler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a497592abf41a5900e1997305cae7008f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" kindref="member">algsIter</ref></type>
        <definition>Job::algsIter EL::Job::algsBegin</definition>
        <argsstring>() const </argsstring>
        <name>algsBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a3dfff0f3a7fb0883c8b8976675e921d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" kindref="member">algsIter</ref></type>
        <definition>Job::algsIter EL::Job::algsEnd</definition>
        <argsstring>() const </argsstring>
        <name>algsEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a47a0713db5028c557f77a70e695aa1e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::algsAdd</definition>
        <argsstring>(Algorithm *alg_swallow)</argsstring>
        <name>algsAdd</name>
        <param>
          <type><ref refid="de/ddb/classEL_1_1Algorithm" kindref="compound">Algorithm</ref> *</type>
          <declname>alg_swallow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="205" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1ac5b22d3e3c0851f9b726b270712ef384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::algsAddClone</definition>
        <argsstring>(const Algorithm &amp;alg)</argsstring>
        <name>algsAddClone</name>
        <param>
          <type>const <ref refid="de/ddb/classEL_1_1Algorithm" kindref="compound">Algorithm</ref> &amp;</type>
          <declname>alg</declname>
        </param>
        <briefdescription>
<para>add a clone of the given algorithm </para>        </briefdescription>
        <detaileddescription>
<para>This is to be used when the user wants to reuse an algorithm for multiple <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> objects or for some reason needs to delete it himself. <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>algorithm cloning failures<linebreak/>
 out of memory I </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="103" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1ada28ba21e914d4dc9f0668b793d8816a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EL::Job::algsHas</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>algsHas</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether we have the algorithm with the given name guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="109" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="229" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1aed712454b53fe0e6d973d49978c025ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">outputMIter</ref></type>
        <definition>Job::outputMIter EL::Job::outputBegin</definition>
        <argsstring>()</argsstring>
        <name>outputBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="124" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a0b2773a952ff9a23a64b3023f5a5b3c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">outputIter</ref></type>
        <definition>Job::outputIter EL::Job::outputBegin</definition>
        <argsstring>() const </argsstring>
        <name>outputBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="125" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a8d54b5bfa48b56b0ce8e8d9caa6f2218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">outputMIter</ref></type>
        <definition>Job::outputMIter EL::Job::outputEnd</definition>
        <argsstring>()</argsstring>
        <name>outputEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="126" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a01f0cee831212c9f729afafd255d697c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">outputIter</ref></type>
        <definition>Job::outputIter EL::Job::outputEnd</definition>
        <argsstring>() const </argsstring>
        <name>outputEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="127" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a24292fae467e463cb03aa9eccdc00a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::outputAdd</definition>
        <argsstring>(const OutputStream &amp;val_output)</argsstring>
        <name>outputAdd</name>
        <param>
          <type>const <ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">OutputStream</ref> &amp;</type>
          <declname>val_output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="128" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="280" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a2890a6cd7be860ecdf4330ece6b34ad9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EL::Job::outputHas</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>outputHas</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns: whether we have an output with the given name guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="134" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="290" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1aa5833b4d2f54f734ca01dec169e7eea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::useD3PDReader</definition>
        <argsstring>()</argsstring>
        <name>useD3PDReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: register this job to use the D3PDReader guarantee: strong failures: out of memory II failures: D3PDReaderSvc not available </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="142" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="305" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a52d21f848a949d1f7af0803aff4680e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Job::useXAOD</definition>
        <argsstring>()</argsstring>
        <name>useXAOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: register this job to use XAODs guarantee: strong failures: out of memory II failures: TEventSvc not available </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="150" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="320" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a26060474b2602f91ef3d220c415c2005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> *</type>
        <definition>SH::MetaObject * EL::Job::options</definition>
        <argsstring>()</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the list of options to the job guarantee: no-fail postcondition: result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="157" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="335" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="da/dbb/classEL_1_1Job_1a36f189fd5a7f69124209bc6cb34f07c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> *</type>
        <definition>const SH::MetaObject * EL::Job::options</definition>
        <argsstring>() const </argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="158" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="344" bodyend="348"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="da/dbb/classEL_1_1Job_1a9dc7cecb0f4a9b4ef37f8a5a88e5b5dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(Job &amp;a, Job &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="415"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="12701">
        <label>SH::SampleHandler</label>
        <link refid="d1/d56/classSH_1_1SampleHandler"/>
      </node>
      <node id="12702">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
      <node id="12700">
        <label>EL::Job</label>
        <link refid="da/dbb/classEL_1_1Job"/>
        <childnode refid="12701" relation="usage">
          <edgelabel>m_sampleHandler</edgelabel>
        </childnode>
        <childnode refid="12702" relation="usage">
          <edgelabel>m_options</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="34" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" bodystart="33" bodyend="426"/>
    <listofallmembers>
      <member refid="da/dbb/classEL_1_1Job_1a47a0713db5028c557f77a70e695aa1e2" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsAdd</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ac5b22d3e3c0851f9b726b270712ef384" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsAddClone</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a497592abf41a5900e1997305cae7008f" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsBegin</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a3dfff0f3a7fb0883c8b8976675e921d0" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsEnd</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ada28ba21e914d4dc9f0668b793d8816a" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsHas</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>algsIter</name></member>
      <member refid="da/dbb/classEL_1_1Job_1abeacb0709369f8752328e240a1084bf5" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>Job</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a4adebe445419f076e70657a56747a712" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>Job</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a922217e9c27ccacc39eb7508b8fead0d" prot="private" virt="non-virtual"><scope>EL::Job</scope><name>m_algs</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a42b398034d76803701b791b8e5433fbe" prot="private" virt="non-virtual"><scope>EL::Job</scope><name>m_options</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a7c1ac9ee8d4772628f321199cf383850" prot="private" virt="non-virtual"><scope>EL::Job</scope><name>m_output</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a6e76ebd6d5e82b1e264ed3fba4ea4d31" prot="private" virt="non-virtual"><scope>EL::Job</scope><name>m_sampleHandler</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a261680d039d7da37c63af888fb8a9906" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>operator=</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad81793cbf27572688a3b03e3954356d3" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optBackgroundProcess</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a1457dbca4a9784e4bd1b7504c7b4de31" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optBatchSharedFileSystem</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a6a5bdad992abf36bbb0afcf37ebca332" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optCacheLearnEntries</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a6bcfd21a0dfb459752e8807aaac46f11" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optCacheSize</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a3137d472314b0783e613e9245c9cf2ff" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optCmtConfig</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a600d802dce5c5faa2997420abc45dae2" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optCondorConf</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aa7262e10e739c9fd3da9a12b3b688b59" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDCacheMinByte</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a8d9eb75f23f444b868b81e3166b25c8c" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDCacheMinByteFraction</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a59102ed00cf2758ef4a754d294975d8d" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDCacheMinEvent</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a9e6b319c19741eeb7887b219257d1fd0" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDCacheMinEventFraction</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a7789d161d685005f03fe2de003491196" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDPerfStats</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a3aec030143b629d78675de57990b3257" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optD3PDReadStats</name></member>
      <member refid="da/dbb/classEL_1_1Job_1adb8f92321453868941ad2f9fbb8e0529" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optDisableMetrics</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a154553a7807dfe0b39f6c4ab2d58d1c3" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optEventsPerWorker</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a73aa9362cc3cc206e3a645a42bccfee7" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optFilesPerWorker</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad92dee93499c7b768b695d4cfcc6cb9f" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridCloud</name></member>
      <member refid="da/dbb/classEL_1_1Job_1afdfe395240d60b36d63bcc5dbda5830e" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridDestSE</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad2e205cd0cef7e00ca98e81f843fa150" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridDisableAutoRetry</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a3c4fb7dbeacc078e2dce95b6c279ec59" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridExcludedSite</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a5193f0d3840e85f194e6dc1674c3096c" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridExpress</name></member>
      <member refid="da/dbb/classEL_1_1Job_1afb3054ba94ea50e4b58f9b77c555063b" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridMaxCpuCount</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad5a4a395d96dfb084757a04222b49f88" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridMaxFileSize</name></member>
      <member refid="da/dbb/classEL_1_1Job_1adc7724c79804fdf2bb829072d1c7780e" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridMaxNFilesPerJob</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ac2bc1af75b1331e3d973db35a3d606c7" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridMemory</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a3fc8d82937c85d68cc5defc13b2dbacb" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridMergeOutput</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad9bbc95ca787e06008abf93bf7f8e3ec" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridNFiles</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aab980eee3a0d7607acc20ebca64b9739" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridNFilesPerJob</name></member>
      <member refid="da/dbb/classEL_1_1Job_1af33011dddd8f3db2f5aa21ebd0903fae" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridNGBPerJob</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad02f2ecfb912b6550ad4b1ad56d7ef4f" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridNJobs</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ad2e9cfb0d01da911e2762e978947060a" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridNoSubmit</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a9b92217bbfd79d122229ab7f61b5ddbe" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridSite</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a2faa49f4e0567e5809cc7f32e69798ef" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optGridUseChirpServer</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a26060474b2602f91ef3d220c415c2005" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>options</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a36f189fd5a7f69124209bc6cb34f07c7" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>options</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ae00c0e87cc71efbd3c08cb8cc5a19278" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optLocalNoUnsetup</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a2d1dde35c522bbf7d35027f0dfdccc97" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optMaxEvents</name></member>
      <member refid="da/dbb/classEL_1_1Job_1adbb37348dc888a4dc14d1567fab0721f" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optOfficial</name></member>
      <member refid="da/dbb/classEL_1_1Job_1af4fc46001aaaf18d1c2d98d5d7b49ea3" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optPerfTree</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a00db303aeaccfe15cf2cef2f4b613966" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optPrintPerFileStats</name></member>
      <member refid="da/dbb/classEL_1_1Job_1afce7ed50e8fac3594837b09e7b6b659b" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optRemoveSubmitDir</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a83a9b20b093a0c95c193f0628843aabb" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optResetShell</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ac005d45b4c107d108b1e23da3877737a" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optRetries</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a69c3b31d3f32dc2d5c2f2087811b2e26" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optRetriesWait</name></member>
      <member refid="da/dbb/classEL_1_1Job_1afe72b1b8116e340b03356247199aeb56" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optRootVer</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ab08d4d8fb8f7f639b1bf755399687d77" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optSkipEvents</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a6f8bac5fcde2e85c239a60068445be00" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optSubmitFlags</name></member>
      <member refid="da/dbb/classEL_1_1Job_1abbffc879383162440e614bb9f813cf46" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optTmpDir</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a9f6bf224ae1bbd97d232b0dbb55f7e46" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optVoms</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a66cde8b91f8957ac5296722480bbeb07" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXaodAccessMode</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a605f1a6e1532aefbbe4c93174ce3fd8e" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXaodAccessMode_athena</name></member>
      <member refid="da/dbb/classEL_1_1Job_1ae95985a3fb6af4e8c2f91bbdd54f8c1a" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXaodAccessMode_branch</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aeb113327e9d83f5f44ff2ccef26ecef3" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXaodAccessMode_class</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a576847191d09879c700bdae6330c3cbb" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXAODPerfStats</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a5c7eba40b3ebc3879ba0ad5beb13c3de" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXAODReadStats</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a61e753cf829aed6a8c818d474e51e610" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>optXAODSummaryReport</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a24292fae467e463cb03aa9eccdc00a0a" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputAdd</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aed712454b53fe0e6d973d49978c025ce" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputBegin</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a0b2773a952ff9a23a64b3023f5a5b3c9" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputBegin</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a8d54b5bfa48b56b0ce8e8d9caa6f2218" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputEnd</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a01f0cee831212c9f729afafd255d697c" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputEnd</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a2890a6cd7be860ecdf4330ece6b34ad9" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputHas</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a593d2c5caeb222eeb770d4599bf170f0" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputIter</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a6b7da0153a514987c8fc5691cc7fd9a2" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>outputMIter</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aa02788adcdc922ea863ef9c28c7d5b5f" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>sampleHandler</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aff29c0afb67dbca9fdf7c876a6764990" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>sampleHandler</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a9dc7cecb0f4a9b4ef37f8a5a88e5b5dd" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>swap</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a39af1f6f1b73a4ca5f96ecf18175a8e6" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>testInvariant</name></member>
      <member refid="da/dbb/classEL_1_1Job_1aa5833b4d2f54f734ca01dec169e7eea6" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>useD3PDReader</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a52d21f848a949d1f7af0803aff4680e0" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>useXAOD</name></member>
      <member refid="da/dbb/classEL_1_1Job_1a1aa1f6a9d534c7839440a0fda6f13d63" prot="public" virt="non-virtual"><scope>EL::Job</scope><name>~Job</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
