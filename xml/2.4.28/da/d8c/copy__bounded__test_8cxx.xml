<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d8c/copy__bounded__test_8cxx" kind="file">
    <compoundname>copy_bounded_test.cxx</compoundname>
    <includes refid="d9/db6/copy__bounded_8h" local="yes">CxxUtils/copy_bounded.h</includes>
    <includes local="yes">boost/foreach.hpp</includes>
    <includes local="yes">boost/range/iterator_range.hpp</includes>
    <includes local="yes">boost/range/algorithm/fill.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">list</includes>
    <includes local="no">cassert</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="113648">
        <label>list</label>
      </node>
      <node id="113637">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx</label>
        <link refid="copy_bounded_test.cxx"/>
        <childnode refid="113638" relation="include">
        </childnode>
        <childnode refid="113644" relation="include">
        </childnode>
        <childnode refid="113645" relation="include">
        </childnode>
        <childnode refid="113646" relation="include">
        </childnode>
        <childnode refid="113647" relation="include">
        </childnode>
        <childnode refid="113648" relation="include">
        </childnode>
        <childnode refid="113649" relation="include">
        </childnode>
        <childnode refid="113650" relation="include">
        </childnode>
      </node>
      <node id="113639">
        <label>iterator</label>
      </node>
      <node id="113643">
        <label>boost/range/end.hpp</label>
      </node>
      <node id="113641">
        <label>boost/range/iterator.hpp</label>
      </node>
      <node id="113644">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="113649">
        <label>cassert</label>
      </node>
      <node id="113642">
        <label>boost/range/begin.hpp</label>
      </node>
      <node id="113646">
        <label>boost/range/algorithm/fill.hpp</label>
      </node>
      <node id="113638">
        <label>CxxUtils/copy_bounded.h</label>
        <link refid="d9/db6/copy__bounded_8h"/>
        <childnode refid="113639" relation="include">
        </childnode>
        <childnode refid="113640" relation="include">
        </childnode>
        <childnode refid="113641" relation="include">
        </childnode>
        <childnode refid="113642" relation="include">
        </childnode>
        <childnode refid="113643" relation="include">
        </childnode>
      </node>
      <node id="113647">
        <label>vector</label>
      </node>
      <node id="113645">
        <label>boost/range/iterator_range.hpp</label>
      </node>
      <node id="113650">
        <label>iostream</label>
      </node>
      <node id="113640">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="d1/d73/structarange" prot="public">arange</innerclass>
    <innerclass refid="d0/d6c/structtest1a" prot="public">test1a</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d8c/copy__bounded__test_8cxx_1a272ca801a46f933fe5a191b1cbc7ca08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputRange</type>
          </param>
          <param>
            <type>class OutputRange</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test1b</definition>
        <argsstring>(InputRange &amp;input, OutputRange &amp;output)</argsstring>
        <name>test1b</name>
        <param>
          <type>InputRange &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>OutputRange &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" bodystart="43" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="da/d8c/copy__bounded__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" line="117" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" bodystart="116" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="da/d8c/copy__bounded__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" line="138" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx" bodystart="137" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for copy_bounded. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>sss </para></simplesect>
<simplesect kind="date"><para>March 2013 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>this<sp/>test<sp/>entirely<sp/>for<sp/>the<sp/>xAOD<sp/>standalone<sp/>builds:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/db6/copy__bounded_8h" kindref="compound" tooltip="Copy a range with bounds restriction.">CxxUtils/copy_bounded.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/foreach.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/range/iterator_range.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;boost/range/algorithm/fill.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="d1/d73/structarange" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/d73/structarange" kindref="compound">arange</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/deb/structN" kindref="compound">N</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x[<ref refid="da/deb/structN" kindref="compound">N</ref>];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iterator;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>const_iterator;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_type;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>iterator<sp/>begin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>iterator<sp/>end()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>;<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/><ref refid="da/deb/structN" kindref="compound">N</ref>;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="d1/d73/structarange" kindref="compound">arange</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputRange,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutputRange&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1b<sp/>(InputRange&amp;<sp/>input,<sp/>OutputRange&amp;<sp/>output)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::range_iterator&lt;InputRange&gt;::type<sp/><sp/>InputIterator;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::range_iterator&lt;OutputRange&gt;::type<sp/>OutputIterator;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>InputIterator<sp/>begi<sp/>=<sp/>boost::begin(input);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>InputIterator<sp/>endi<sp/>=<sp/>boost::end(input);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>OutputIterator<sp/>bego<sp/>=<sp/>boost::begin(output);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>OutputIterator<sp/>endo<sp/>=<sp/>boost::end(output);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::value_type<sp/>value_type;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>InputIterator<sp/>midi<sp/>=<sp/>begi;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>std::advance<sp/>(midi,<sp/>5);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>OutputIterator<sp/>mido<sp/>=<sp/>bego;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::advance<sp/>(mido,<sp/>5);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>boost::iterator_range&lt;InputIterator&gt;<sp/>rangei<sp/>(begi,<sp/>midi);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>boost::iterator_range&lt;OutputIterator&gt;<sp/>rangeo<sp/>(bego,<sp/>mido);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>input)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/>i++;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(begi,<sp/>endi,<sp/>bego,<sp/>mido);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>(i<sp/>&lt;<sp/>5<sp/>?<sp/>i++<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(input,<sp/>rangeo);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>(i<sp/>&lt;<sp/>5<sp/>?<sp/>i++<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(begi,<sp/>midi,<sp/>bego,<sp/>endo);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>(i<sp/>&lt;<sp/>5<sp/>?<sp/>i++<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(rangei,<sp/>output);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>(i<sp/>&lt;<sp/>5<sp/>?<sp/>i++<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(begi,<sp/>endi,<sp/>bego,<sp/>endo);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>i++);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>boost::range::fill<sp/>(output,<sp/>0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>CxxUtils::<ref refid="de/d12/namespaceCxxUtils_1a5049ecdf32f875ad81bca0377cd12bc3" kindref="member" tooltip="Copy a range with bounds restriction.">copy_bounded</ref><sp/>(input,<sp/>output);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>BOOST_FOREACH<sp/>(value_type&amp;<sp/>it,<sp/>output)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(it<sp/>==<sp/>i++);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">template<sp/>&lt;class<sp/><ref refid="d9/df4/structCont1" kindref="compound">Cont1</ref>,<sp/>class<sp/><ref refid="d9/d5d/structCont2" kindref="compound">Cont2</ref>=Cont1&gt;</highlight></codeline>
<codeline lineno="105" refid="d0/d6c/structtest1a" refkind="compound"><highlight class="normal">struct<sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a</ref></highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Cont1<sp/>c1<sp/>(10);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d5d/structCont2" kindref="compound">Cont2</ref><sp/>c2<sp/>(10);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>test1b<sp/>(c1,<sp/>c2);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;test1\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;std::vector&lt;int&gt;</ref><sp/>&gt;::test();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;std::list&lt;int&gt;</ref><sp/>&gt;::test();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;std::vector&lt;int&gt;</ref>,<sp/>std::list&lt;int&gt;<sp/>&gt;::test();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;std::list&lt;int&gt;</ref>,<sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&gt;::test();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;arange&gt;::test</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;arange, std::list&lt;int&gt;</ref><sp/>&gt;::test();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="d0/d6c/structtest1a" kindref="compound">test1a&lt;arange, std::vector&lt;int&gt;</ref><sp/>&gt;::test();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>test1a&lt;std::list&lt;int&gt;,<sp/><ref refid="d1/d73/structarange" kindref="compound">arange</ref>&gt;::test();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>test1a&lt;std::vector&lt;int&gt;,<sp/><ref refid="d1/d73/structarange" kindref="compound">arange</ref>&gt;::test();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>not<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copy_bounded_test.cxx"/>
  </compounddef>
</doxygen>
