<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d44/CalibrationDataInterfaceTool_8cxx" kind="file">
    <compoundname>CalibrationDataInterfaceTool.cxx</compoundname>
    <includes refid="d2/d29/CalibrationDataInterfaceTool_8h" local="yes">CalibrationDataInterface/CalibrationDataInterfaceTool.h</includes>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="yes">CalibrationDataInterface/CalibrationDataContainer.h</includes>
    <includes refid="d6/d96/CalibrationDataVariables_8h" local="yes">CalibrationDataInterface/CalibrationDataVariables.h</includes>
    <includes local="yes">JetEvent/Jet.h</includes>
    <includes local="yes">TF1.h</includes>
    <includes local="yes">TMath.h</includes>
    <includes local="no">map</includes>
    <incdepgraph>
      <node id="96944">
        <label>TMap.h</label>
      </node>
      <node id="96945">
        <label>THashList.h</label>
      </node>
      <node id="96941">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="96946">
        <label>CalibrationDataInterface/CalibrationDataVariables.h</label>
        <link refid="d6/d96/CalibrationDataVariables_8h_source"/>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96938" relation="include">
        </childnode>
      </node>
      <node id="96932">
        <label>JetTagCalibration/CalibrationBroker.h</label>
      </node>
      <node id="96936">
        <label>string</label>
      </node>
      <node id="96937">
        <label>map</label>
      </node>
      <node id="96948">
        <label>TF1.h</label>
      </node>
      <node id="96929">
        <label>CalibrationDataInterface/CalibrationDataInterfaceTool.h</label>
        <link refid="d2/d29/CalibrationDataInterfaceTool_8h_source"/>
        <childnode refid="96930" relation="include">
        </childnode>
        <childnode refid="96931" relation="include">
        </childnode>
        <childnode refid="96932" relation="include">
        </childnode>
        <childnode refid="96933" relation="include">
        </childnode>
        <childnode refid="96940" relation="include">
        </childnode>
        <childnode refid="96942" relation="include">
        </childnode>
        <childnode refid="96935" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96938" relation="include">
        </childnode>
      </node>
      <node id="96930">
        <label>AthenaBaseComps/AthAlgTool.h</label>
      </node>
      <node id="96931">
        <label>GaudiKernel/ToolHandle.h</label>
      </node>
      <node id="96935">
        <label>vector</label>
      </node>
      <node id="96938">
        <label>utility</label>
      </node>
      <node id="96928">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/src/CalibrationDataInterfaceTool.cxx</label>
        <link refid="CalibrationDataInterfaceTool.cxx"/>
        <childnode refid="96929" relation="include">
        </childnode>
        <childnode refid="96943" relation="include">
        </childnode>
        <childnode refid="96946" relation="include">
        </childnode>
        <childnode refid="96947" relation="include">
        </childnode>
        <childnode refid="96948" relation="include">
        </childnode>
        <childnode refid="96949" relation="include">
        </childnode>
        <childnode refid="96937" relation="include">
        </childnode>
      </node>
      <node id="96942">
        <label>Rtypes.h</label>
      </node>
      <node id="96943">
        <label>CalibrationDataInterface/CalibrationDataContainer.h</label>
        <link refid="d2/d74/CalibrationDataContainer_8h_source"/>
        <childnode refid="96935" relation="include">
        </childnode>
        <childnode refid="96937" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96944" relation="include">
        </childnode>
        <childnode refid="96945" relation="include">
        </childnode>
        <childnode refid="96946" relation="include">
        </childnode>
      </node>
      <node id="96934">
        <label>TNamed.h</label>
      </node>
      <node id="96949">
        <label>TMath.h</label>
      </node>
      <node id="96947">
        <label>JetEvent/Jet.h</label>
      </node>
      <node id="96933">
        <label>CalibrationDataInterface/CalibrationDataInterfaceBase.h</label>
        <link refid="d8/d11/CalibrationDataInterfaceBase_8h_source"/>
        <childnode refid="96934" relation="include">
        </childnode>
        <childnode refid="96935" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
        <childnode refid="96937" relation="include">
        </childnode>
        <childnode refid="96938" relation="include">
        </childnode>
        <childnode refid="96939" relation="include">
        </childnode>
      </node>
      <node id="96939">
        <label>algorithm</label>
      </node>
      <node id="96940">
        <label>CalibrationDataInterface/ICalibrationDataInterfaceTool.h</label>
        <link refid="d7/d64/ICalibrationDataInterfaceTool_8h_source"/>
        <childnode refid="96941" relation="include">
        </childnode>
        <childnode refid="96936" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>CalibrationDataInterfaceTool.cxx,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataInterfaceTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataVariables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JetEvent/Jet.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TF1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">Analysis::CalibrationDataVariables</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">Analysis::CalibrationDataContainer</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::UncertaintyResult;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cerr;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//================<sp/>Constructor<sp/>=================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">Analysis::CalibrationDataInterfaceTool::CalibrationDataInterfaceTool(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>t,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>n,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IInterface*<sp/><sp/>p<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>AthAlgTool(t,n,p),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>m_broker(</highlight><highlight class="stringliteral">&quot;PerformanceBroker&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>declareInterface&lt;Analysis::ICalibrationDataInterfaceTool&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;taggerName&quot;</highlight><highlight class="normal">,<sp/>m_taggerName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tagging<sp/>algorithm<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;operatingPoints&quot;</highlight><highlight class="normal">,<sp/>m_operatingPoints,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operating<sp/>points<sp/>for<sp/>this<sp/>tagging<sp/>algorithm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;efficiencyCalibrationBName&quot;</highlight><highlight class="normal">,<sp/>m_EffcalibrationBName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;efficiency<sp/>calibration<sp/>curve<sp/>for<sp/>b<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;efficiencyCalibrationCName&quot;</highlight><highlight class="normal">,<sp/>m_EffcalibrationCName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;efficiency<sp/>calibration<sp/>curve<sp/>for<sp/>c<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;efficiencyCalibrationTName&quot;</highlight><highlight class="normal">,<sp/>m_EffcalibrationTName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;efficiency<sp/>calibration<sp/>curve<sp/>for<sp/>tau<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;efficiencyCalibrationLightName&quot;</highlight><highlight class="normal">,<sp/>m_EffcalibrationLightName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;efficiency<sp/>calibration<sp/>curve<sp/>for<sp/>light-flavour<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;scaleFactorCalibrationBName&quot;</highlight><highlight class="normal">,<sp/>m_SFcalibrationBName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scale<sp/>factor<sp/>calibration<sp/>curve<sp/>for<sp/>b<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;scaleFactorCalibrationCName&quot;</highlight><highlight class="normal">,<sp/>m_SFcalibrationCName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scale<sp/>factor<sp/>calibration<sp/>curve<sp/>for<sp/>c<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;scaleFactorCalibrationTName&quot;</highlight><highlight class="normal">,<sp/>m_SFcalibrationTName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scale<sp/>factor<sp/>calibration<sp/>curve<sp/>for<sp/>tau<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;scaleFactorCalibrationLightName&quot;</highlight><highlight class="normal">,<sp/>m_SFcalibrationLightName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;default&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;scale<sp/>factor<sp/>calibration<sp/>curve<sp/>for<sp/>light-flavour<sp/>jets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>declareProperty(</highlight><highlight class="stringliteral">&quot;PerformanceBroker&quot;</highlight><highlight class="normal">,<sp/>m_broker,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tool<sp/>interfacing<sp/>with<sp/>COOL<sp/>Database&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//================<sp/>Destructor<sp/>=================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1ab1c26bb910c6db894e58991611b87e1e" kindref="member">Analysis::CalibrationDataInterfaceTool::~CalibrationDataInterfaceTool</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//================<sp/>Interface<sp/>stuff<sp/>===============================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">StatusCode<sp/><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1a2073c750abb54db0da1b4697fb70af7f" kindref="member">Analysis::CalibrationDataInterfaceTool::queryInterface</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InterfaceID&amp;<sp/>riid,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ppvIf<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>riid<sp/>==<sp/>ICalibrationDataInterfaceTool::interfaceID()<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ppvIf<sp/>=<sp/>(ICalibrationDataInterfaceTool*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addRef();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AthAlgTool::queryInterface(<sp/>riid,<sp/>ppvIf<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//================<sp/>Initialisation<sp/>=================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">StatusCode<sp/><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1a95b6a751fb8345eb9b2ffa9f3fda89ba" kindref="member">Analysis::CalibrationDataInterfaceTool::initialize</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>StatusCode<sp/>sc<sp/>=<sp/>AthAlgTool::initialize();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.isFailure())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>sc<sp/>=<sp/>m_broker.retrieve();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sc.isFailure())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_FATAL(</highlight><highlight class="stringliteral">&quot;initialize()<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>unable<sp/>to<sp/>retrieve<sp/>CalibrationBroker<sp/>tool!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>string::size_type<sp/>end;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationBNames;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffcalibrationBName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffcalibrationBName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationBNames.push_back(m_EffcalibrationBName.substr(0,end));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>m_EffcalibrationBName<sp/>=<sp/>m_EffcalibrationBName.substr(end+1);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationCNames;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffcalibrationCName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffcalibrationCName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationCNames.push_back(m_EffcalibrationCName.substr(0,end));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>m_EffcalibrationCName<sp/>=<sp/>m_EffcalibrationCName.substr(end+1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationTNames;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffcalibrationTName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffcalibrationTName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationTNames.push_back(m_EffcalibrationTName.substr(0,end));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>m_EffcalibrationTName<sp/>=<sp/>m_EffcalibrationTName.substr(end+1);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>calibrationLightNames;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EffcalibrationLightName.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_EffcalibrationLightName.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calibrationLightNames.push_back(m_EffcalibrationLightName.substr(0,end));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos)<sp/>m_EffcalibrationLightName<sp/>=<sp/>m_EffcalibrationLightName.substr(end+1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>string::npos);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>calibration<sp/>names<sp/>into<sp/>a<sp/>common<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>std::vector&lt;string&gt;<sp/>&gt;<sp/>effNames;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationBNames;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationCNames;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationTNames;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>effNames[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>calibrationLightNames;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>setEffCalibrationNames(effNames);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>insert<sp/>the<sp/>calibration<sp/>names<sp/>into<sp/>a<sp/>common<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::map&lt;string,<sp/>string&gt;<sp/>calibrationNames;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>calibrationNames[</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_SFcalibrationBName;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>calibrationNames[</highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_SFcalibrationCName;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>calibrationNames[</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_SFcalibrationTName;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>calibrationNames[</highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_SFcalibrationLightName;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>setSFCalibrationNames(calibrationNames);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>all<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;string,<sp/>string&gt;::const_iterator<sp/>it<sp/>=<sp/>calibrationNames.begin();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>calibrationNames.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;string&gt;::const_iterator<sp/>op<sp/>=<sp/>m_operatingPoints.begin();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>op<sp/>!=<sp/>m_operatingPoints.end();<sp/>++op)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>registerObjects(it-&gt;first,<sp/>*op);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>ATH_MSG_INFO(</highlight><highlight class="stringliteral">&quot;initialize()<sp/>successful<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//================<sp/>Finalisation<sp/>=================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">StatusCode<sp/><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1ad1fa60d95e6e0e096bb84fa2e2d7ac92" kindref="member">Analysis::CalibrationDataInterfaceTool::finalize</ref>()</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>StatusCode<sp/>sc<sp/>=<sp/>AthAlgTool::finalize();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sc;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//============================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>efficiency<sp/>scale<sp/>factor<sp/>retrieval<sp/>=============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1ae0a110fbf9a8ad4959fefe1a2953442a" kindref="member">Analysis::CalibrationDataInterfaceTool::getScaleFactor</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Jet&amp;<sp/>jet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="172"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>For<sp/>now,<sp/>a<sp/>calibration<sp/>for<sp/>the<sp/>charm<sp/>efficiency<sp/>scale<sp/>factor<sp/>is<sp/>assumed<sp/>not<sp/>to<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(label<sp/>==<sp/>&quot;C&quot;)<sp/>return<sp/>getScaleFactor(jet,<sp/>&quot;B&quot;,<sp/>OP,<sp/>unc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>light-flavour<sp/>jets,<sp/>rename<sp/>from<sp/>&quot;N/A&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>flavour(label);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">)<sp/>flavour<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>author<sp/>=<sp/>jet.jetAuthor();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sfName(getBasename(OP,<sp/>flavour,<sp/></highlight><highlight class="stringliteral">&quot;_SF&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>std::pair&lt;CalibrationDataContainer*,bool&gt;<sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>m_broker-&gt;retrieveTObject&lt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>&gt;(m_taggerName,<sp/>author,<sp/>sfName);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>ret.first;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>unable<sp/>to<sp/>find<sp/>SF<sp/>calibration<sp/>for<sp/>object<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tagger/jetCollection/flavour/operating<sp/>point<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_taggerName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>author<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OP);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here,<sp/>it<sp/>isn&apos;t<sp/>obvious<sp/>what<sp/>to<sp/>do<sp/>with<sp/>the<sp/>second<sp/>element<sp/>of<sp/>the<sp/>pair<sp/>returned:</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>indicates<sp/>whether<sp/>a<sp/>new<sp/>object<sp/>has<sp/>been<sp/>loaded<sp/>(presumably<sp/>due<sp/>to<sp/>IOV<sp/>changes),</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>but<sp/>the<sp/>CalibrationDataContainer<sp/>should<sp/>take<sp/>of<sp/>any<sp/>necessary<sp/>computations<sp/>itself.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>CalibrationDataVariables<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref><sp/>variables;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>makeVariables<sp/>(jet,<sp/>variables);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>retrieve<sp/>the<sp/>result<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getResult(variables,<sp/>value)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stat(0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Statistical)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getStatUncertainty(variables,<sp/>stat)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>statistical<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>UncertaintyResult<sp/>resSyst(0,0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Systematic)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getSystUncertainty(variables,<sp/>resSyst)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getScaleFactor:<sp/>error<sp/>retrieving<sp/>Scale<sp/>factor<sp/>parameter<sp/>systematic<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>combinedUncertainty(stat,<sp/>resSyst);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result<sp/>=<sp/>std::make_pair&lt;double,<sp/>double&gt;(value,<sp/>uncertainty);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>std::max(0.,<sp/>result.first);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TMath::Abs(result.first)<sp/>&lt;<sp/>Analysis::CalibZERO)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>&quot;MC&quot;<sp/>efficiency<sp/>retrieval<sp/>======================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1a2035ebb456b287cfb921409bc93119c4" kindref="member">Analysis::CalibrationDataInterfaceTool::getMCEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Jet&amp;<sp/>jet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="237"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>the<sp/>relevant<sp/>jet<sp/>quantities:<sp/>kinematic<sp/>variables<sp/>and<sp/>jet<sp/>author</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>light-flavour<sp/>jets,<sp/>rename<sp/>from<sp/>&quot;N/A&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>flavour(label);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flavour<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">)<sp/>flavour<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Light&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>author<sp/>=<sp/>jet.jetAuthor();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>effName(getBasename(OP,<sp/>flavour,<sp/></highlight><highlight class="stringliteral">&quot;_Eff&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>dummy<sp/>result<sp/>if<sp/>the<sp/>object<sp/>is<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::pair&lt;CalibrationDataContainer*,bool&gt;<sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>m_broker-&gt;retrieveTObject&lt;<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>&gt;(m_taggerName,<sp/>author,<sp/>effName);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>*<sp/>container<sp/>=<sp/>ret.first;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>unable<sp/>to<sp/>find<sp/>Eff<sp/>calibration<sp/>for<sp/>object<sp/>with<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tagger/jetCollection/flavour/operating<sp/>point<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_taggerName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>author<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flavour<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>OP);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here,<sp/>it<sp/>isn&apos;t<sp/>obvious<sp/>what<sp/>to<sp/>do<sp/>with<sp/>the<sp/>second<sp/>element<sp/>of<sp/>the<sp/>pair<sp/>returned:</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>This<sp/>indicates<sp/>whether<sp/>a<sp/>new<sp/>object<sp/>has<sp/>been<sp/>loaded<sp/>(presumably<sp/>due<sp/>to<sp/>IOV<sp/>changes),</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>but<sp/>the<sp/>CalibrationDataContainer<sp/>should<sp/>take<sp/>of<sp/>any<sp/>necessary<sp/>computations<sp/>itself.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>CalibrationDataVariables<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref><sp/>variables;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>makeVariables<sp/>(jet,<sp/>variables);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>retrieve<sp/>the<sp/>result<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getResult(variables,<sp/>value)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::dummyResult;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stat(0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Statistical)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getStatUncertainty(variables,<sp/>stat)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getMCEfficiency:<sp/>error<sp/>retrieving<sp/>MC<sp/>efficiency<sp/>statistical<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>UncertaintyResult<sp/>resSyst(0,0);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/>Total<sp/>||<sp/>unc<sp/>==<sp/>Systematic)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(container-&gt;getSystUncertainty(variables,<sp/>resSyst)<sp/>==<sp/>CalibrationDataContainer::kError)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getMCEfficiency:<sp/>error<sp/>retrieving<sp/>MC<sp/>efficiency<sp/>parameter<sp/>systematic<sp/>uncertainty!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>uncertainty<sp/>=<sp/>combinedUncertainty(stat,<sp/>resSyst);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>result<sp/>=<sp/>std::make_pair&lt;double,<sp/>double&gt;(value,<sp/>uncertainty);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>std::max(0.,<sp/>std::min(1.,<sp/>result.first));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//======================<sp/>efficiency<sp/>retrieval<sp/>==========================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">Analysis::CalibResult</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="d6/d97/classAnalysis_1_1CalibrationDataInterfaceTool_1a9c1da19c5832baa9b9c96dce53fc99de" kindref="member">Analysis::CalibrationDataInterfaceTool::getEfficiency</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Jet&amp;<sp/>jet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>label,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP,<sp/>Uncertainty<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="299"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>sfResult<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1ade8ddfa58bc2b2a429778156be1971e3" kindref="member">getScaleFactor</ref>(jet,<sp/>label,<sp/>OP,<sp/>unc);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>Analysis::CalibResult<sp/>effResult<sp/>=<sp/><ref refid="d5/d8a/classAnalysis_1_1ICalibrationDataInterfaceTool_1afc78b1129c69fd3582d46692c66adb42" kindref="member">getMCEfficiency</ref>(jet,<sp/>label,<sp/>OP,<sp/>unc);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relative<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>effResult.first*sfResult.first;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>effResult.second/effResult.first;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sfRelative<sp/>=<sp/>sfResult.second/sfResult.first;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>TMath::Sqrt(sfRelative*sfRelative<sp/>+<sp/>relative*relative);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>null<sp/>result,<sp/>SF=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sfResult.first</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MC<sp/>eff=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>effResult.first);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>relative<sp/>=<sp/>Analysis::dummyValue;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(value,value*relative);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//============================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Analysis::CalibrationDataInterfaceTool::registerObjects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>flavour,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>OP)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="322"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>slash(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>common<sp/>=<sp/>OP;<sp/>common<sp/>+=<sp/>slash;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>common<sp/>+=<sp/>flavour;<sp/>common<sp/>+=<sp/>slash;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nameEff(common);<sp/>nameEff<sp/>+=<sp/>EffCalibrationName(flavour);<sp/>nameEff<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_Eff&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nameSF(common);<sp/>nameSF<sp/>+=<sp/>SFCalibrationName(flavour);<sp/>nameSF<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_SF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>m_broker-&gt;registerHistogram(m_taggerName,<sp/>nameSF);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>m_broker-&gt;registerHistogram(m_taggerName,<sp/>nameEff);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">Analysis::CalibrationDataInterfaceTool::makeVariables<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Jet&amp;<sp/>jet,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/db4/structAnalysis_1_1CalibrationDataVariables" kindref="compound">CalibrationDataVariables</ref>&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="337"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>msg()<sp/>&lt;&lt;<sp/>MSG::DEBUG<sp/>&lt;&lt;<sp/>&quot;jet<sp/>variables:&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>x.jetAuthor<sp/>=<sp/>jet.jetAuthor();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>x.jetPt<sp/>=<sp/>jet.pt()<sp/>*<sp/>0.001;<sp/><sp/></highlight><highlight class="comment">//<sp/>NB<sp/>convert<sp/>from<sp/>MeV<sp/>to<sp/>GeV!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>x.jetEta<sp/>=<sp/>jet.eta();</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/src/CalibrationDataInterfaceTool.cxx"/>
  </compounddef>
</doxygen>
