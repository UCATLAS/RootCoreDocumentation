<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d8a/namespaceAmg" kind="namespace">
    <compoundname>Amg</compoundname>
    <innerclass refid="d4/d9e/structAmg_1_1CalculateCompressedSize" prot="public">Amg::CalculateCompressedSize</innerclass>
    <innerclass refid="dd/d51/structAmg_1_1CalculateCompressedSize_3_011_01_4" prot="public">Amg::CalculateCompressedSize&lt; 1 &gt;</innerclass>
    <innerclass refid="d4/d26/structAmg_1_1Vector3DComparer" prot="public">Amg::Vector3DComparer</innerclass>
    <innerclass refid="dc/d20/structAmg_1_1VectorVector3DComparer" prot="public">Amg::VectorVector3DComparer</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0" prot="public" static="no">
        <name>AxisDefs</name>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0a6235b92339fc69c9e928aa9995ff3907" prot="public">
          <name>x</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0a060e1a5553b34c68d4521aa0098b9fd4" prot="public">
          <name>y</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0a9666958bc5079f470b446eea7244d92f" prot="public">
          <name>z</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0a3cffa2be0410028cef98aa335014aecb" prot="public">
          <name>px</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0a2e001aa65ea786e3add50ba2f6f3f382" prot="public">
          <name>py</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="da/d8a/namespaceAmg_1a8e805b5ef1d2e35968b9800e36c472d0abd07b813b5217819ad95d8096bfbe2a6" prot="public">
          <name>pz</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>elment for code readability<itemizedlist>
<listitem><para>please use these for access to the member variables if needed, e.g. double z = position[Amg::z]; double px = momentum[Amg::px]; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="32" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="32" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic&gt; Amg::MatrixX</definition>
        <argsstring></argsstring>
        <name>MatrixX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dynamic Matrix - not recommended </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" line="26" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a4a87f011a612e49d6f418d88e4b879ba" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic&gt; Amg::SymMatrixX</definition>
        <argsstring></argsstring>
        <name>SymMatrixX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a2bc27fd2a075a3609e927af8a8f72173" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, Eigen::Dynamic, 1&gt; Amg::VectorX</definition>
        <argsstring></argsstring>
        <name>VectorX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dynamic Vector - not recommended </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a571706d08d2900a56f307d0c89f0fd6a" prot="public" static="no">
        <type>Eigen::Quaternion&lt; double &gt;</type>
        <definition>typedef Eigen::Quaternion&lt;double&gt; Amg::Rotation3D</definition>
        <argsstring></argsstring>
        <name>Rotation3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1ae8ec989cf77262a4b94ca6817560fee3" prot="public" static="no">
        <type>Eigen::Translation&lt; double, 3 &gt;</type>
        <definition>typedef Eigen::Translation&lt;double, 3&gt; Amg::Translation3D</definition>
        <argsstring></argsstring>
        <name>Translation3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="44" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a08c30bf7dbe39499ab8d45dbb2069bd9" prot="public" static="no">
        <type>Eigen::AngleAxisd</type>
        <definition>typedef Eigen::AngleAxisd Amg::AngleAxis3D</definition>
        <argsstring></argsstring>
        <name>AngleAxis3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="45" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a3df3c3f18ca3b5404d152307759cdbbf" prot="public" static="no">
        <type>Eigen::Affine3d</type>
        <definition>typedef Eigen::Affine3d Amg::Transform3D</definition>
        <argsstring></argsstring>
        <name>Transform3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1abb936f0300f5af6fd2a87f90a97afac0" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, 3, 1&gt; Amg::Vector3D</definition>
        <argsstring></argsstring>
        <name>Vector3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a3ba457fb7893cd8fc06194be5c0a8336" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, 2, 1 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, 2, 1&gt; Amg::Vector2D</definition>
        <argsstring></argsstring>
        <name>Vector2D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1af7d35968d61cc93d0d17197d61f6fef3" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
        <definition>typedef Eigen::Matrix&lt;double, 3, 3&gt; Amg::RotationMatrix3D</definition>
        <argsstring></argsstring>
        <name>RotationMatrix3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" line="49" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitives.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1ace99848b6e9760c3a68fdb5807e4c76d" prot="public" static="no">
        <type>std::set&lt; Amg::Vector3D, <ref refid="d4/d26/structAmg_1_1Vector3DComparer" kindref="compound">Vector3DComparer</ref> &gt;</type>
        <definition>typedef std::set&lt;Amg::Vector3D, Vector3DComparer&gt; Amg::SetVector3D</definition>
        <argsstring></argsstring>
        <name>SetVector3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d8a/namespaceAmg_1a5984e45ab5ee30e57d7a0eb8cf102da3" prot="public" static="no">
        <type>std::set&lt; std::vector&lt; Amg::Vector3D &gt;, <ref refid="dc/d20/structAmg_1_1VectorVector3DComparer" kindref="compound">VectorVector3DComparer</ref> &gt;</type>
        <definition>typedef std::set&lt; std::vector&lt; Amg::Vector3D&gt;, VectorVector3DComparer&gt; Amg::SetVectorVector3D</definition>
        <argsstring></argsstring>
        <name>SetVectorVector3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aa8598c3ab8774ed5c55a37e729a04dd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::error</definition>
        <argsstring>(const Amg::MatrixX &amp;mat, int index)</argsstring>
        <name>error</name>
        <param>
          <type>const <ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return diagonal error of the matrix caller should ensure the matrix is symmetric and the index is in range </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="25" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aa5b4fd77e8bcc0bef642dd69a9651b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Amg::error</definition>
        <argsstring>(const AmgSymMatrix(N)&amp;mat, int index)</argsstring>
        <name>error</name>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ac34bddac226aba7f71f25a7450288c63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Amg::compress</definition>
        <argsstring>(const AmgSymMatrix(N)&amp;covMatrix, std::vector&lt; float &gt; &amp;vec)</argsstring>
        <name>compress</name>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>covMatrix</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="47" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a130e788cbf61d9bc6da19501cb700b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::compress</definition>
        <argsstring>(const MatrixX &amp;covMatrix, std::vector&lt; float &gt; &amp;vec)</argsstring>
        <name>compress</name>
        <param>
          <type>const <ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">MatrixX</ref> &amp;</type>
          <declname>covMatrix</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a542cc6166834c30856bb279136fcf336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Amg::expand</definition>
        <argsstring>(std::vector&lt; float &gt;::const_iterator it, std::vector&lt; float &gt;::const_iterator, AmgSymMatrix(N)&amp;covMatrix)</argsstring>
        <name>expand</name>
        <param>
          <type>std::vector&lt; float &gt;::const_iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;::const_iterator</type>
        </param>
        <param>
          <type>AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>covMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="64" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aa2c6eeebe00a61e112daa4f9f3f2e471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::expand</definition>
        <argsstring>(std::vector&lt; float &gt;::const_iterator it, std::vector&lt; float &gt;::const_iterator it_end, MatrixX &amp;covMatrix)</argsstring>
        <name>expand</name>
        <param>
          <type>std::vector&lt; float &gt;::const_iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;::const_iterator</type>
          <declname>it_end</declname>
        </param>
        <param>
          <type><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">MatrixX</ref> &amp;</type>
          <declname>covMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="74" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="73" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a2624aa4b106caa66b67b4da24dd8f83b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Amg::largestDifference</definition>
        <argsstring>(const AmgSymMatrix(N)&amp;m1, const AmgSymMatrix(N)&amp;m2, bool relative=false)</argsstring>
        <name>largestDifference</name>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>relative</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get largest difference between two matrices Users can decide whether the difference should be evaluate relative to the values or absolutely </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="93" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="93" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a07cb47a1f4535391f38b033dfdf36b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Amg::largestDifference</definition>
        <argsstring>(const AmgVector(N)&amp;m1, const AmgVector(N)&amp;m2, bool relative=false)</argsstring>
        <name>largestDifference</name>
        <param>
          <type>const AmgVector(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const AmgVector(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>relative</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get largest difference betweem two vectors Users can decide whether the difference should be evaluate relative to the values or absolutely </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="112" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ab845c2de1ce866d4b91a11fc7c1a9ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; int, int &gt;</type>
        <definition>std::pair&lt;int, int&gt; Amg::compare</definition>
        <argsstring>(const AmgSymMatrix(N)&amp;m1, const AmgSymMatrix(N)&amp;m2, double precision=1e-9, bool relative=false)</argsstring>
        <name>compare</name>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>precision</declname>
          <defval>1e-9</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>relative</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compare two matrices, returns the indices of the first element that fails the condition, returns &lt;-1,-1&gt; if all is ok Users can provide the required precision and whether the difference should be evaluate relative to the values or absolutely </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="131" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="131" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1abc8f2783fd1b16e412f286128361985e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int Amg::compare</definition>
        <argsstring>(const AmgVector(N)&amp;m1, const AmgVector(N)&amp;m2, double precision=1e-9, bool relative=false)</argsstring>
        <name>compare</name>
        <param>
          <type>const AmgVector(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const AmgVector(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>precision</declname>
          <defval>1e-9</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>relative</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compare two vectors, returns the indices of the first element that fails the condition, returns &lt;-1,-1&gt; if all is ok Users can provide the required precision and whether the difference should be evaluate relative to the values or absolutely </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="148" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a42afd964c78774398f75f0da3feaac8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Amg::isSymMatrix</definition>
        <argsstring>(const AmgSymMatrix(N)&amp;m)</argsstring>
        <name>isSymMatrix</name>
        <param>
          <type>const AmgSymMatrix(<ref refid="da/deb/structN" kindref="compound">N</ref>)&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" line="160" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesHelpers.h" bodystart="160" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a537e7cb91c8a51631755e772a85c8b19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::roundWithPrecision</definition>
        <argsstring>(double val, int precision)</argsstring>
        <name>roundWithPrecision</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>EventPrimitvesToStringConverter</para><para>inline methods for conversion of EventPrimitives (Matrix) to std::string.</para><para>This is to enhance formatted screen ouput and for ASCII based testing.</para><para>The offset can be used to offset the lines (starting from line 2) wrt to the zero position for formatting reasons.</para><para><simplesect kind="author"><para><ulink url="mailto:Niels.Van.Eldik@cern.ch">Niels.Van.Eldik@cern.ch</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a9a8fd30637c951fc893ea61cef897aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const MatrixX &amp;matrix, int precision=4, std::string offset=&quot;&quot;)</argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">MatrixX</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>offset</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" line="39" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" bodystart="39" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a9e21c622a85cab4a6f22336991850a2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const CLHEP::HepGenMatrix &amp;matrix, int precision=4, std::string offset=&quot;&quot;)</argsstring>
        <name>toString</name>
        <param>
          <type>const CLHEP::HepGenMatrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>offset</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" line="71" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitivesToStringConverter.h" bodystart="71" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aae18ba08e99be242b7575d073504ec83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Amg::AsString</definition>
        <argsstring>(const T &amp;m)</argsstring>
        <name>AsString</name>
        <param>
          <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>write an <ref refid="da/d8a/namespaceAmg" kindref="compound">Amg</ref> Eigen object to std::string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/AmgStringHelpers.h" line="22" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/AmgStringHelpers.h" bodystart="22" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a856f002053bbc194c29e7cfc4df85b8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::CLHEPTransformToEigen</definition>
        <argsstring>(const HepGeom::Transform3D &amp;CLHEPtransf)</argsstring>
        <name>CLHEPTransformToEigen</name>
        <param>
          <type>const HepGeom::Transform3D &amp;</type>
          <declname>CLHEPtransf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="27" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="26" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ab9ee94acd29c5ab30e1086c0a02f0072" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>RotationMatrix3D</type>
        <definition>RotationMatrix3D Amg::CLHEPRotationToEigen</definition>
        <argsstring>(const CLHEP::HepRotation &amp;CLHEProtation)</argsstring>
        <name>CLHEPRotationToEigen</name>
        <param>
          <type>const CLHEP::HepRotation &amp;</type>
          <declname>CLHEProtation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="45" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ab02136bc2460120271e998d1b6f84be6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Translation3D</type>
        <definition>Translation3D Amg::CLHEPTranslationToEigen</definition>
        <argsstring>(const CLHEP::Hep3Vector &amp;CLHEPtranslation)</argsstring>
        <name>CLHEPTranslationToEigen</name>
        <param>
          <type>const CLHEP::Hep3Vector &amp;</type>
          <declname>CLHEPtranslation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="61" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a60b241ced98286e2fb447214f6597371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::CLHEPTranslate3DToEigen</definition>
        <argsstring>(const HepGeom::Translate3D &amp;CLHEPtranslate3D)</argsstring>
        <name>CLHEPTranslate3DToEigen</name>
        <param>
          <type>const HepGeom::Translate3D &amp;</type>
          <declname>CLHEPtranslate3D</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="74" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a2ebbdc8e49548715516b7be9870c5c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HepGeom::Transform3D</type>
        <definition>HepGeom::Transform3D Amg::EigenTransformToCLHEP</definition>
        <argsstring>(const Amg::Transform3D &amp;eigenTransf)</argsstring>
        <name>EigenTransformToCLHEP</name>
        <param>
          <type>const Amg::Transform3D &amp;</type>
          <declname>eigenTransf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="84" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="83" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aabd0cd592d857845a0411f70f45d47ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::Hep3VectorToEigen</definition>
        <argsstring>(const CLHEP::Hep3Vector &amp;CLHEPvector)</argsstring>
        <name>Hep3VectorToEigen</name>
        <param>
          <type>const CLHEP::Hep3Vector &amp;</type>
          <declname>CLHEPvector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="94" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1abdbbcfa6033389c9d286acafd2dd9f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CLHEP::Hep3Vector</type>
        <definition>CLHEP::Hep3Vector Amg::EigenToHep3Vector</definition>
        <argsstring>(const Amg::Vector3D &amp;eigenvector)</argsstring>
        <name>EigenToHep3Vector</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>eigenvector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" line="98" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenConverter.h" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a64e42f3b65b81df83b044906baf694ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::convert_CLHEPPhiThetaPsi_to_EigenEulerAngles</definition>
        <argsstring>(Amg::Vector3D clhep_angles, int convention=0)</argsstring>
        <name>convert_CLHEPPhiThetaPsi_to_EigenEulerAngles</name>
        <param>
          <type>Amg::Vector3D</type>
          <declname>clhep_angles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>convention</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert CLEHP Phi,Theta,Psi angles to Eigen euler angles using Z-X-Z convention</para><para>N.B. if &quot;convention = 0&quot; --&gt; &quot;Z-X-Z&quot; convention ==&gt; DEFAULT!! if &quot;convention = 1&quot; --&gt; &quot;Z-Y-Z&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenEulerAnglesConverters.h" line="31" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenEulerAnglesConverters.h" bodystart="30" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a3d168185febccc5c9e17094d650e277d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::convert_EigenEulerAngles_to_CLHEPPhiThetaPsi</definition>
        <argsstring>(Amg::Vector3D eigen_angles, int convention=0)</argsstring>
        <name>convert_EigenEulerAngles_to_CLHEPPhiThetaPsi</name>
        <param>
          <type>Amg::Vector3D</type>
          <declname>eigen_angles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>convention</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert Eigen euler angles to CLEHP Phi,Theta,Psi angles</para><para>N.B. if &quot;convention = 0&quot; --&gt; &quot;Z-X-Z&quot; convention ==&gt; DEFAULT!! if &quot;convention = 1&quot; --&gt; &quot;Z-Y-Z&quot; convention </para>        </detaileddescription>
        <inbodydescription>
<para>Note: as explained in: eigen / Eigen / src / Geometry / EulerAngles.h the returned angles are in the ranges [0:pi]x[-pi:pi]x[-pi:pi]</para><para>(source here: <ulink url="https://bitbucket.org/eigen/eigen/src/42e011583bceb055a43fa688622e828fbbabf818/Eigen/src/Geometry/EulerAngles.h">https://bitbucket.org/eigen/eigen/src/42e011583bceb055a43fa688622e828fbbabf818/Eigen/src/Geometry/EulerAngles.h</ulink>)</para><para>N.B.!! CLHEP&apos;s Phi, Theta, Psi correspond to eulerAngles[2], [1] and [0] respectively, with the sign inverted.</para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenEulerAnglesConverters.h" line="59" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/CLHEPtoEigenEulerAnglesConverters.h" bodystart="58" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a38d507769aaec283c6233cd1f8926f38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::getPhiThetaPsi</definition>
        <argsstring>(Amg::RotationMatrix3D mat, int convention=0)</argsstring>
        <name>getPhiThetaPsi</name>
        <param>
          <type>Amg::RotationMatrix3D</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>convention</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the equivalents to CLHEP Phi, Theta, Psi Euler angles</para><para>phi = vector[0] theta = vector[1] psi = vector[2]</para><para>N.B. if &quot;convention = 0&quot; --&gt; &quot;Z-X-Z&quot; convention ==&gt; DEFAULT!! if &quot;convention = 1&quot; --&gt; &quot;Z-Y-Z&quot; convention</para><para>N.B.!! for normal usage, use the default notation (simply leave it empty, or use convention=0), or, alternatively, be sure to use the same convention in both setPhi() and <ref refid="da/d8a/namespaceAmg_1a38d507769aaec283c6233cd1f8926f38" kindref="member">getPhiThetaPsi()</ref>. </para>        </detaileddescription>
        <inbodydescription>
<para>we extract the Euler Angles from the Eigen matrix,</para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/EulerAnglesHelpers.h" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/EulerAnglesHelpers.h" bodystart="37" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a67e6df87142e38a11b55723d7e7c8e29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::RotationMatrix3D</type>
        <definition>Amg::RotationMatrix3D Amg::setPhi</definition>
        <argsstring>(Amg::RotationMatrix3D mat, double angle, int convention=0)</argsstring>
        <name>setPhi</name>
        <param>
          <type>Amg::RotationMatrix3D</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>convention</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/EulerAnglesHelpers.h" line="99" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/EulerAnglesHelpers.h" bodystart="98" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a9944b15b9d452c9c90e1b55d5d8f4547" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::angle</definition>
        <argsstring>(const Amg::Vector3D &amp;v1, const Amg::Vector3D &amp;v2)</argsstring>
        <name>angle</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates the opening angle between two vectors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="36" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aa0f4029ecd7272b77a312afecafde6cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Amg::distance2</definition>
        <argsstring>(const Amg::Vector3D &amp;p1, const Amg::Vector3D &amp;p2)</argsstring>
        <name>distance2</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates the squared distance between two point in 3D space </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="48" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1abdeeee38def6888fed4ea2c380f01e8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float Amg::distance</definition>
        <argsstring>(const Amg::Vector3D &amp;p1, const Amg::Vector3D &amp;p2)</argsstring>
        <name>distance</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculates the distance between two point in 3D space </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="54" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ad8c15db71f45500e7c19c2e48c02ad0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setPhi</definition>
        <argsstring>(Amg::Vector3D &amp;v, double phi)</argsstring>
        <name>setPhi</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the phi angle of a vector without changing theta nor the magnitude </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="62" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ae28ddd4619b52add45fbf403208bd17b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setThetaPhi</definition>
        <argsstring>(Amg::Vector3D &amp;v, double theta, double phi)</argsstring>
        <name>setThetaPhi</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the theta and phi angle of a vector without changing the magnitude </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="70" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a18cc37e2d149e42911c8d5412c25b89c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setRThetaPhi</definition>
        <argsstring>(Amg::Vector3D &amp;v, double r, double theta, double phi)</argsstring>
        <name>setRThetaPhi</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets radius, the theta and phi angle of a vector. Angles are measured in RADIANS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="80" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ade79aae0f917021639486d7ab8317c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setTheta</definition>
        <argsstring>(Amg::Vector3D &amp;v, double theta)</argsstring>
        <name>setTheta</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the theta of a vector without changing phi nor the magnitude </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="89" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aa1d4c3b1bfef39ab527d32f4d5daf947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setPerp</definition>
        <argsstring>(Amg::Vector3D &amp;v, double perp)</argsstring>
        <name>setPerp</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>perp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>scales the vector in the xy plane without changing the z coordinate nor the angles </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="94" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a7dd738de754bcaba44d797cfc4b559cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setMag</definition>
        <argsstring>(Amg::Vector3D &amp;v, double mag)</argsstring>
        <name>setMag</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>scales the vector length without changing the angles </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="104" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a15bc4389f0346ab0b7b2f5cc5e1867e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::deltaPhi</definition>
        <argsstring>(const Amg::Vector3D &amp;v1, const Amg::Vector3D &amp;v2)</argsstring>
        <name>deltaPhi</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="113" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="113" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1af804e20c3d6a56eddf597286600820bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::deltaR</definition>
        <argsstring>(const Amg::Vector3D &amp;v1, const Amg::Vector3D &amp;v2)</argsstring>
        <name>deltaR</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="122" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a02d6e49c4573648ece7f9e5301bd0ac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::setVector3DCartesian</definition>
        <argsstring>(Amg::Vector3D &amp;v1, double x1, double y1, double z1)</argsstring>
        <name>setVector3DCartesian</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets components in cartesian coordinate system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="136" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a121bbe7974b91f503d488f0a943a0b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::mag2Vector3D</definition>
        <argsstring>(const Amg::Vector3D &amp;v1)</argsstring>
        <name>mag2Vector3D</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets magnitude squared of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="140" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1adabf55102c4101e7bc7beacb45f716f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::magVector3D</definition>
        <argsstring>(const Amg::Vector3D &amp;v1)</argsstring>
        <name>magVector3D</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets magnitude of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="144" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a456b4536a15b0dff63a8c1b6583bf142" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Amg::rVector3D</definition>
        <argsstring>(const Amg::Vector3D &amp;v1)</argsstring>
        <name>rVector3D</name>
        <param>
          <type>const Amg::Vector3D &amp;</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets r-component in spherical coordinate system </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="148" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1acf056cae7010a2fcb74fac91880c0f87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::transform</definition>
        <argsstring>(Amg::Vector3D &amp;v, Amg::Transform3D &amp;tr)</argsstring>
        <name>transform</name>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Amg::Transform3D &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transform a point from a Trasformation3D</para><para>from CLHEP::Point3D::transform: <ulink url="http://proj-clhep.web.cern.ch/proj-clhep/doc/CLHEP_2_0_4_7/doxygen/html/Point3D_8cc-source.html#l00032">http://proj-clhep.web.cern.ch/proj-clhep/doc/CLHEP_2_0_4_7/doxygen/html/Point3D_8cc-source.html#l00032</ulink> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="156" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a976c000a30eab7088698f4625a3ea2f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::getTransformFromRotTransl</definition>
        <argsstring>(Amg::RotationMatrix3D rot, Amg::Vector3D transl_vec)</argsstring>
        <name>getTransformFromRotTransl</name>
        <param>
          <type>Amg::RotationMatrix3D</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>Amg::Vector3D</type>
          <declname>transl_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="173" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="172" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a707225e9d8c0a069aa7e96f51e6f3004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Amg::getAngleAxisFromRotation</definition>
        <argsstring>(Amg::RotationMatrix3D &amp;rotation, double &amp;rotationAngle, Amg::Vector3D &amp;rotationAxis)</argsstring>
        <name>getAngleAxisFromRotation</name>
        <param>
          <type>Amg::RotationMatrix3D &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rotationAngle</declname>
        </param>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>rotationAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="193" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="192" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a285c616e33fcf3957df3fbc4b5c1e0d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Vector3D</type>
        <definition>Amg::Vector3D Amg::getTranslationVectorFromTransform</definition>
        <argsstring>(const Amg::Transform3D &amp;tr)</argsstring>
        <name>getTranslationVectorFromTransform</name>
        <param>
          <type>const Amg::Transform3D &amp;</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Translation vector out of a Transformation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="225" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ace6d4038ab7a8389cc2999339d024242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Rotation3D</type>
        <definition>Amg::Rotation3D Amg::getRotation3DfromAngleAxis</definition>
        <argsstring>(double angle, Amg::Vector3D &amp;axis)</argsstring>
        <name>getRotation3DfromAngleAxis</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>Amg::Vector3D &amp;</type>
          <declname>axis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a AngleAxis from an angle and an axis.</para><para>to replace the CLHEP constructor: CLHEP::Rotate3D::Rotate3D(double a, cconst Vector3D&lt; double &gt; &amp; v) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="238" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="237" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a0042bf159392d5398787c110a9835718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::getRotateX3D</definition>
        <argsstring>(double angle)</argsstring>
        <name>getRotateX3D</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a rotation transformation around X-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="252" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ad89955c172f4b566e6767aeed5d4d792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::getRotateY3D</definition>
        <argsstring>(double angle)</argsstring>
        <name>getRotateY3D</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a rotation transformation around Y-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="261" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="261" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1ab48686d34bbba1b17c387e711d4e958f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Amg::Transform3D</type>
        <definition>Amg::Transform3D Amg::getRotateZ3D</definition>
        <argsstring>(double angle)</argsstring>
        <name>getRotateZ3D</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a rotation transformation around Z-axis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" line="270" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesHelpers.h" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1aeb32cfb5dc54c14a3959b7ac884c49ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const Amg::Translation3D &amp;translation, int precision=4)</argsstring>
        <name>toString</name>
        <param>
          <type>const Amg::Translation3D &amp;</type>
          <declname>translation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>GeoPrimitvesToStringConverter</para><para>static methods for conversion of GeoPrimitives and will call the EventPrimitives converter (Matrix) to std::string.</para><para>This is to enhance formatted screen ouput and for ASCII based testing.</para><para>The offset can be used to offset the lines (starting from line 2) wrt to the zero position for formatting reasons.</para><para><simplesect kind="author"><para><ulink url="mailto:Niels.Van.Eldik@cern.ch">Niels.Van.Eldik@cern.ch</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="34" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a8e9007ea7e446725f3d2b0734a7c307a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const Amg::Transform3D &amp;transform, int precision=4, std::string offset=&quot;&quot;)</argsstring>
        <name>toString</name>
        <param>
          <type>const Amg::Transform3D &amp;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>offset</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="43" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a47a70cb754195ce517e47fa4e9209807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const CLHEP::HepRotation &amp;rot, int precision=4, std::string offset=&quot;&quot;)</argsstring>
        <name>toString</name>
        <param>
          <type>const CLHEP::HepRotation &amp;</type>
          <declname>rot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>offset</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="53" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a65501f493684b39e1def698c0f5efe98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const CLHEP::Hep3Vector &amp;translation, int precision=4)</argsstring>
        <name>toString</name>
        <param>
          <type>const CLHEP::Hep3Vector &amp;</type>
          <declname>translation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="74" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="74" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a895e99663e5608165619ae734a3affbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const CLHEP::Hep2Vector &amp;translation, int precision=4)</argsstring>
        <name>toString</name>
        <param>
          <type>const CLHEP::Hep2Vector &amp;</type>
          <declname>translation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="87" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="da/d8a/namespaceAmg_1a3425060214d0adcba4c94255a8babad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Amg::toString</definition>
        <argsstring>(const HepGeom::Transform3D &amp;transf, int precision=4, std::string offset=&quot;&quot;)</argsstring>
        <name>toString</name>
        <param>
          <type>const HepGeom::Transform3D &amp;</type>
          <declname>transf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>4</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>offset</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" line="100" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GeoPrimitives/GeoPrimitives/GeoPrimitivesToStringConverter.h" bodystart="100" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Event primitives helper functions <simplesect kind="author"><para>Niels van Eldik </para><simplesectsep/><para>Robert Johannes Langenberg &lt;<ulink url="mailto:robert.langenberg@cern.ch">robert.langenberg@cern.ch</ulink>&gt; </para><simplesectsep/><para>Andreas Salzburger &lt;<ulink url="mailto:Andreas.Salzburger@cern.ch">Andreas.Salzburger@cern.ch</ulink>&gt;</para></simplesect>
Definition of ATLAS Math &amp; Geometry primitives (<ref refid="da/d8a/namespaceAmg" kindref="compound">Amg</ref>)</para><para>This is based on the Eigen geometry module: <ulink url="http://eigen.tuxfamily.org/dox/group__Geometry__Module.html">http://eigen.tuxfamily.org/dox/group__Geometry__Module.html</ulink></para><para><simplesect kind="author"><para>Robert Johannes Langenberg &lt;<ulink url="mailto:robert.langenberg@cern.ch">robert.langenberg@cern.ch</ulink>&gt; </para><simplesectsep/><para>Andreas Salzburger &lt;<ulink url="mailto:Andreas.Salzburger@cern.ch">Andreas.Salzburger@cern.ch</ulink>&gt;</para></simplesect>
Geometry primitives helper functions <simplesect kind="author"><para>Niels van Eldik </para><simplesectsep/><para>Robert Johannes Langenberg &lt;<ulink url="mailto:robert.langenberg@cern.ch">robert.langenberg@cern.ch</ulink>&gt; </para><simplesectsep/><para>Andreas Salzburger &lt;<ulink url="mailto:Andreas.Salzburger@cern.ch">Andreas.Salzburger@cern.ch</ulink>&gt; </para></simplesect>
</para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventPrimitives/EventPrimitives/EventPrimitives.h" line="23"/>
  </compounddef>
</doxygen>
