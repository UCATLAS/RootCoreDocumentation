<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/da2/ComboIterator_8h" kind="file">
    <compoundname>ComboIterator.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">set</includes>
    <includes refid="d5/d81/TrigNavStructure_2Types_8h" local="yes">TrigNavStructure/Types.h</includes>
    <includedby refid="da/d5b/ChainGroup_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigDecisionTool/Root/ChainGroup.cxx</includedby>
    <includedby refid="de/d50/ComboIterator_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/ComboIterator.cxx</includedby>
    <includedby refid="d9/de1/ut__iterators__test_8cxx" local="yes">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/test/ut_iterators_test.cxx</includedby>
    <incdepgraph>
      <node id="328729">
        <label>stdint.h</label>
      </node>
      <node id="328730">
        <label>boost/variant.hpp</label>
      </node>
      <node id="328728">
        <label>TrigNavStructure/Types.h</label>
        <link refid="d5/d81/TrigNavStructure_2Types_8h_source"/>
        <childnode refid="328729" relation="include">
        </childnode>
        <childnode refid="328730" relation="include">
        </childnode>
      </node>
      <node id="328725">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/ComboIterator.h</label>
        <link refid="ComboIterator.h"/>
        <childnode refid="328726" relation="include">
        </childnode>
        <childnode refid="328727" relation="include">
        </childnode>
        <childnode refid="328728" relation="include">
        </childnode>
      </node>
      <node id="328726">
        <label>vector</label>
      </node>
      <node id="328727">
        <label>set</label>
      </node>
    </incdepgraph>
    <innerclass refid="db/d54/classHLT_1_1ComboIteratorBase" prot="public">HLT::ComboIteratorBase</innerclass>
    <innerclass refid="d2/dda/classHLT_1_1ComboIterator" prot="public">HLT::ComboIterator</innerclass>
    <innerclass refid="d7/d6b/classHLT_1_1ComboIteratorTopo" prot="public">HLT::ComboIteratorTopo</innerclass>
    <innernamespace refid="dc/d8d/namespaceHLT">HLT</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TRIGNAVSTRUCTURE_ComboIterator_H</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRIGNAVSTRUCTURE_ComboIterator_H</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">HLT<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TriggerElement;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;HLT::TriggerElement*&gt;<sp/>TEVec;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TrigNavStructure;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="db/d54/classHLT_1_1ComboIteratorBase" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/d54/classHLT_1_1ComboIteratorBase" kindref="compound" tooltip="Base class for iterator used to loop over multi-particle combinations.">ComboIteratorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="db/d54/classHLT_1_1ComboIteratorBase_1ab11b0d98a8e123b209d9049a772f4368" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1ab11b0d98a8e123b209d9049a772f4368" kindref="member" tooltip="Constructor.">ComboIteratorBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="db/d54/classHLT_1_1ComboIteratorBase_1a2fd908ebdd135f475a087ac3b187e25f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a2fd908ebdd135f475a087ac3b187e25f" kindref="member" tooltip="Destructor.">~ComboIteratorBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a4c9a951e5b3c51ce5a5d7723cd53699c" kindref="member" tooltip="Rewind method, resetting the iterator to the first element.">rewind</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TEVec&amp;<sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a95df050d33420c39c3c5c5f6895290f3" kindref="member" tooltip="Unary * operator, used to recover the current combination.">operator*</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a51847d075d40b0fb69e397ac3949f1d3" kindref="member" tooltip="Validity check for the iterator.">isValid</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TEVec&amp;<sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a4abdb9b0ceac911d9e67c1ee82df8d7e" kindref="member" tooltip="Accessor method for the current combination.">combination</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase" kindref="compound" tooltip="Base class for iterator used to loop over multi-particle combinations.">ComboIteratorBase</ref>&amp;<sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a618155bc2f11561b96cd487a70fa0301" kindref="member" tooltip="Pre increment operator.">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase" kindref="compound" tooltip="Base class for iterator used to loop over multi-particle combinations.">ComboIteratorBase</ref>&amp;<sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase_1a618155bc2f11561b96cd487a70fa0301" kindref="member" tooltip="Pre increment operator.">operator++</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="d2/dda/classHLT_1_1ComboIterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/dda/classHLT_1_1ComboIterator" kindref="compound" tooltip="Iterator used to loop over multi-particle combinations.">ComboIterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="db/d54/classHLT_1_1ComboIteratorBase" kindref="compound" tooltip="Base class for iterator used to loop over multi-particle combinations.">ComboIteratorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a591c41d2ef2abdf62d256e12c0530d0d" kindref="member" tooltip="Constructor; gets a vector of TE vectors and a pointer to Navigation as arguments...">ComboIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TEVec&gt;&amp;<sp/>tes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">TrigNavStructure</ref>*<sp/>nav);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a976b57f9bbd8b8beef38cdd79302a07f" kindref="member" tooltip="Rewind method, resetting the iterator to the first element.">rewind</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="d2/dda/classHLT_1_1ComboIterator_1ac2542fe05f83c7f88a084c43b3aeae6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TEVec&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1ac2542fe05f83c7f88a084c43b3aeae6c" kindref="member" tooltip="Unary * operator, used to recover the current combination.">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a4acb180b01a1cac8b60935f2df42615e" kindref="member" tooltip="Accessor method for the current combination.">combination</ref>();<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="d2/dda/classHLT_1_1ComboIterator_1a3c04bcd05974e826201233ce7363b82d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a3c04bcd05974e826201233ce7363b82d" kindref="member" tooltip="Validity check for the iterator.">isValid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a51abe5a618e777730467111df583aaca" kindref="member" tooltip="Validity status variable.">m_valid</ref>;<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="d2/dda/classHLT_1_1ComboIterator_1a4acb180b01a1cac8b60935f2df42615e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TEVec&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a4acb180b01a1cac8b60935f2df42615e" kindref="member" tooltip="Accessor method for the current combination.">combination</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="d2/dda/classHLT_1_1ComboIterator_1aeff518b8165b77701455d13d4262b556" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator" kindref="compound" tooltip="Iterator used to loop over multi-particle combinations.">ComboIterator</ref>&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aeff518b8165b77701455d13d4262b556" kindref="member" tooltip="Post increment operator.">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aeff518b8165b77701455d13d4262b556" kindref="member" tooltip="Post increment operator.">operator++</ref>();<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator" kindref="compound" tooltip="Iterator used to loop over multi-particle combinations.">ComboIterator</ref>&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aae309bb41ead2c8fa6a6345dbbc39d07" kindref="member" tooltip="Pre increment operator.">operator++</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa2f3778cbbba906894755a8069550808" kindref="member" tooltip="Method used to test overlaps between two TEs.">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>t2)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa2f3778cbbba906894755a8069550808" kindref="member" tooltip="Method used to test overlaps between two TEs.">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>t1,<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEVec&amp;<sp/>teVec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>-1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a51ebb8ab86f9d5c757a2442f665c1f36" kindref="member" tooltip="Private increment method.">incrementByOne</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>ok);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aff78336b9be49a70d8f101bcb28d1dbf" kindref="member" tooltip="Private increment method.">increment</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a4711ff7d9a43328a6127ecea214f21b9" kindref="member" tooltip="Private reset method.">reset</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a34e6771e79433cabb5d59e839e81050e" kindref="member" tooltip="Method used to invalidate the current combination.">invalidate</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa6a13afc691e7a6dd429271834cec122" kindref="member" tooltip="Debug dump to std::cout.">print</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TEVec<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="d2/dda/classHLT_1_1ComboIterator_1a053975c028b54ba313342d86f983c25e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TEVec&gt;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a053975c028b54ba313342d86f983c25e" kindref="member" tooltip="Vector of vectors of TEs to be combined.">m_tes</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="d2/dda/classHLT_1_1ComboIterator_1a51abe5a618e777730467111df583aaca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a51abe5a618e777730467111df583aaca" kindref="member" tooltip="Validity status variable.">m_valid</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="d2/dda/classHLT_1_1ComboIterator_1a25954d8f882f37ac7a1e7b87fbe25a14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">TrigNavStructure</ref>*<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a25954d8f882f37ac7a1e7b87fbe25a14" kindref="member" tooltip="Pointer to the navigation service.">m_nav</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="d7/d6b/classHLT_1_1ComboIteratorTopo" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d6b/classHLT_1_1ComboIteratorTopo" kindref="compound">ComboIteratorTopo</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator" kindref="compound" tooltip="Iterator used to loop over multi-particle combinations.">ComboIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/d6b/classHLT_1_1ComboIteratorTopo" kindref="compound">ComboIteratorTopo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TEVec&gt;&amp;<sp/>tes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">TrigNavStructure</ref>*<sp/>nav,<sp/>HLT::te_id_type<sp/>topoSpan);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>top<sp/>of<sp/>same<sp/>RoI<sp/>adds<sp/>check<sp/>if<sp/>TEs<sp/>are<sp/>span<sp/>by<sp/>the<sp/>topological<sp/>TE<sp/>of<sp/>give<sp/>id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>think<sp/>...<sp/>is<sp/>not<sp/>combination<sp/>which<sp/>was<sp/>ever<sp/>(sucesfullly)<sp/>considered<sp/>by<sp/>topo<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/d6b/classHLT_1_1ComboIteratorTopo_1ad7054ae4ce4615822f08ed16099c7611" kindref="member" tooltip="Method used to test overlaps between two TEs.">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>t2)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>traverseUntilSeedsTopo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>start,<sp/>std::set&lt;const<sp/>TriggerElement*&gt;&amp;<sp/>topos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>HLT::te_id_type<sp/>m_spanId;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>eof<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//#ifndef</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/TrigNavStructure/ComboIterator.h"/>
  </compounddef>
</doxygen>
