<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d77/HadronUtils_8cxx" kind="file">
    <compoundname>HadronUtils.cxx</compoundname>
    <includes refid="de/da2/HadronUtils_8h" local="yes">ParticleJetTools/HadronUtils.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="224399">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ParticleJetTools/src/HadronUtils.cxx</label>
        <link refid="HadronUtils.cxx"/>
        <childnode refid="224400" relation="include">
        </childnode>
        <childnode refid="224402" relation="include">
        </childnode>
        <childnode refid="224403" relation="include">
        </childnode>
        <childnode refid="224404" relation="include">
        </childnode>
      </node>
      <node id="224403">
        <label>string</label>
      </node>
      <node id="224400">
        <label>ParticleJetTools/HadronUtils.h</label>
        <link refid="de/da2/HadronUtils_8h_source"/>
        <childnode refid="224401" relation="include">
        </childnode>
      </node>
      <node id="224401">
        <label>utility</label>
      </node>
      <node id="224404">
        <label>sstream</label>
      </node>
      <node id="224402">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ParticleJetTools/HadronUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal">std::pair&lt;short,short&gt;<sp/>HadronClass::type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>typeP<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Flavor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>typeH<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>0<sp/>:<sp/>meson<sp/>;<sp/>1<sp/>:<sp/>baryon<sp/>;<sp/>2<sp/>:<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>o;<sp/>o<sp/>&lt;&lt;<sp/>abs(pdg);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>std::string<sp/>s<sp/>=<sp/>o.str();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ns<sp/>&gt;=<sp/>4)<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.at(ns-4)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeH<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeP<sp/>=<sp/>atoi(s.substr(ns-4,1).c_str());</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeH<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>typeP<sp/>=<sp/>atoi(s.substr(ns-3,1).c_str());</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ns<sp/>==<sp/>3<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>typeH<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>typeP<sp/>=<sp/>atoi(s.substr(0,1).c_str());<sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(typeH,typeP);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HadronClass::HeavyHadron(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>typ<sp/><sp/>=<sp/>type(pdg).second;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>typh<sp/>=<sp/>type(pdg).first;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(typh<sp/>&lt;<sp/>2<sp/>&amp;&amp;<sp/>(typ<sp/>==<sp/>4<sp/>||<sp/>typ<sp/>==<sp/>5));</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ParticleJetTools/src/HadronUtils.cxx"/>
  </compounddef>
</doxygen>
