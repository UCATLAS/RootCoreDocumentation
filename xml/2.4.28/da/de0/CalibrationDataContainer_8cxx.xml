<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/de0/CalibrationDataContainer_8cxx" kind="file">
    <compoundname>CalibrationDataContainer.cxx</compoundname>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="yes">CalibrationDataInterface/CalibrationDataContainer.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cassert</includes>
    <includes local="no">limits</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="yes">TH1.h</includes>
    <includes local="yes">TAxis.h</includes>
    <includes local="yes">TF1.h</includes>
    <includes local="yes">TVectorT.h</includes>
    <includes local="yes">TMatrixT.h</includes>
    <includes local="yes">TMatrixDSym.h</includes>
    <includes local="yes">TMath.h</includes>
    <includes local="yes">TString.h</includes>
    <includes local="yes">TObjString.h</includes>
    <incdepgraph>
      <node id="96814">
        <label>TMap.h</label>
      </node>
      <node id="96828">
        <label>TMatrixDSym.h</label>
      </node>
      <node id="96815">
        <label>THashList.h</label>
      </node>
      <node id="96820">
        <label>limits</label>
      </node>
      <node id="96816">
        <label>CalibrationDataInterface/CalibrationDataVariables.h</label>
        <link refid="d6/d96/CalibrationDataVariables_8h_source"/>
        <childnode refid="96813" relation="include">
        </childnode>
        <childnode refid="96817" relation="include">
        </childnode>
      </node>
      <node id="96824">
        <label>TAxis.h</label>
      </node>
      <node id="96822">
        <label>cmath</label>
      </node>
      <node id="96819">
        <label>cassert</label>
      </node>
      <node id="96813">
        <label>string</label>
      </node>
      <node id="96812">
        <label>map</label>
      </node>
      <node id="96825">
        <label>TF1.h</label>
      </node>
      <node id="96831">
        <label>TObjString.h</label>
      </node>
      <node id="96823">
        <label>TH1.h</label>
      </node>
      <node id="96809">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx</label>
        <link refid="CalibrationDataContainer.cxx"/>
        <childnode refid="96810" relation="include">
        </childnode>
        <childnode refid="96818" relation="include">
        </childnode>
        <childnode refid="96819" relation="include">
        </childnode>
        <childnode refid="96820" relation="include">
        </childnode>
        <childnode refid="96821" relation="include">
        </childnode>
        <childnode refid="96822" relation="include">
        </childnode>
        <childnode refid="96823" relation="include">
        </childnode>
        <childnode refid="96824" relation="include">
        </childnode>
        <childnode refid="96825" relation="include">
        </childnode>
        <childnode refid="96826" relation="include">
        </childnode>
        <childnode refid="96827" relation="include">
        </childnode>
        <childnode refid="96828" relation="include">
        </childnode>
        <childnode refid="96829" relation="include">
        </childnode>
        <childnode refid="96830" relation="include">
        </childnode>
        <childnode refid="96831" relation="include">
        </childnode>
      </node>
      <node id="96811">
        <label>vector</label>
      </node>
      <node id="96817">
        <label>utility</label>
      </node>
      <node id="96810">
        <label>CalibrationDataInterface/CalibrationDataContainer.h</label>
        <link refid="d2/d74/CalibrationDataContainer_8h_source"/>
        <childnode refid="96811" relation="include">
        </childnode>
        <childnode refid="96812" relation="include">
        </childnode>
        <childnode refid="96813" relation="include">
        </childnode>
        <childnode refid="96814" relation="include">
        </childnode>
        <childnode refid="96815" relation="include">
        </childnode>
        <childnode refid="96816" relation="include">
        </childnode>
      </node>
      <node id="96818">
        <label>iostream</label>
      </node>
      <node id="96830">
        <label>TString.h</label>
      </node>
      <node id="96829">
        <label>TMath.h</label>
      </node>
      <node id="96826">
        <label>TVectorT.h</label>
      </node>
      <node id="96821">
        <label>algorithm</label>
      </node>
      <node id="96827">
        <label>TMatrixT.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/de0/CalibrationDataContainer_8cxx_1abbc7e5fb22c6837cd4197ab87a665dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataContainer) CalibrationDataContainer</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="da/de0/CalibrationDataContainer_8cxx_1a6572de2a74358d7eae6c1bb7416c2f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataHistogramContainer) CalibrationDataHistogramContainer</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">CalibrationDataHistogramContainer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" line="425" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="419" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="da/de0/CalibrationDataContainer_8cxx_1aaa8e2f3d5516bf59e6a6f7161ada5dc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataMappedHistogramContainer) CalibrationDataMappedHistogramContainer</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kindref="compound">CalibrationDataMappedHistogramContainer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" line="993" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="987" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="da/de0/CalibrationDataContainer_8cxx_1a142111361d81d791ac4e416494af9eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataMappedHistogramContainer::Bin) CalibrationDataMappedHistogramContainer</argsstring>
        <name>ClassImp</name>
        <param>
          <type>CalibrationDataMappedHistogramContainer::Bin</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" line="1416" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1410" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="da/de0/CalibrationDataContainer_8cxx_1a05e5a74fce6809698208dc4e6b8ae6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataFunctionContainer) CalibrationDataFunctionContainer</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer" kindref="compound">CalibrationDataFunctionContainer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" line="1497" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx" bodystart="1491" bodyend="1513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TH1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TAxis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TF1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TVectorT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMatrixT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMatrixDSym.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMath.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TObjString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::CalibrationStatus;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Analysis::UncertaintyResult;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">Analysis::CalibrationDataContainer</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">Analysis::CalibrationDataHistogramContainer</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kindref="compound">Analysis::CalibrationDataMappedHistogramContainer</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer" kindref="compound">Analysis::CalibrationDataFunctionContainer</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Things<sp/>that<sp/>are<sp/>best<sp/>hidden<sp/>from<sp/>the<sp/>outside<sp/>world...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>below<sp/>is<sp/>added<sp/>to<sp/>(subtracted<sp/>from)<sp/>the<sp/>lower<sp/>(upper)<sp/>bound<sp/>of<sp/>validity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>variable<sp/>is<sp/>restricted<sp/>to<sp/>be<sp/>within<sp/>its<sp/>validity<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rangeEpsilon<sp/>=<sp/>1.e-5;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>size<sp/>for<sp/>boundary<sp/>specifications</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxParameters<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataContainer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>container<sp/>classes<sp/>represent<sp/>the<sp/>basic<sp/>b-tagging<sp/>calibration<sp/>information<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stored<sp/>in<sp/>ROOT<sp/>files.<sp/>The<sp/>abstract<sp/>base<sp/>class<sp/>is<sp/>the<sp/>CalibrationDataContainer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>&quot;container&quot;<sp/>is<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>for<sp/>basic<sp/>jet-by-jet<sp/>usage.<sp/>The<sp/>idea<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>that<sp/>the<sp/>container<sp/>object<sp/>itself<sp/>contains<sp/>sufficient<sp/>information<sp/>to<sp/>determine<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>how<sp/>b-tagging<sp/>information<sp/>(mostly<sp/>efficiencies<sp/>for<sp/>given<sp/>working<sp/>points,<sp/>but<sp/>in<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>case<sp/>of<sp/>so-called<sp/>&quot;continuous<sp/>tagging&quot;<sp/>it<sp/>can<sp/>be<sp/>the<sp/>fractions<sp/>of<sp/>jets<sp/>in<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tag<sp/>weight<sp/>bins)<sp/>is<sp/>parametrised.<sp/>The<sp/>retrieval<sp/>of<sp/>the<sp/>requested<sp/>information<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>done<sp/>by<sp/>passing<sp/>a<sp/>(reference<sp/>to<sp/>a)<sp/>CalibrationDataVariables<sp/>struct,<sp/>which<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>very<sp/>simple<sp/>object<sp/>containing<sp/>information<sp/>that<sp/>can<sp/>potentially<sp/>be<sp/>used<sp/>for<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parametrisation.<sp/>It<sp/>is<sp/>then<sp/>up<sp/>to<sp/>the<sp/>container<sp/>object<sp/>to<sp/>figure<sp/>out<sp/>what<sp/>subset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>information<sp/>then<sp/>to<sp/>use<sp/>in<sp/>reality.<sp/>The<sp/>user<sp/>may<sp/>request<sp/>a<sp/>fairly<sp/>wide<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>range<sp/>of<sp/>information,<sp/>ranging<sp/>from<sp/>mere<sp/>central<sp/>values<sp/>(typically,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataContainer::getResult()<sp/>will<sp/>be<sp/>used<sp/>for<sp/>this)<sp/>to<sp/>individual<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributions<sp/>to<sp/>the<sp/>total<sp/>systematic<sp/>uncertainty<sp/>(using<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataContainer::getUncertainty()).<sp/>The<sp/>container<sp/>class<sp/>derives<sp/>from<sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TMap,<sp/>with<sp/>keys<sp/>being<sp/>strings<sp/>(TObjString,<sp/>for<sp/>technical<sp/>reasons)<sp/>ensuring<sp/>significant<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flexibility<sp/>as<sp/>to<sp/>the<sp/>specification<sp/>of<sp/>uncertainty<sp/>information.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>underlying<sp/>information<sp/>can<sp/>be<sp/>presented<sp/>in<sp/>two<sp/>forms:<sp/>in<sp/>histogram<sp/>form<sp/>(this<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>corresponds<sp/>to<sp/>the<sp/>CalibrationDataHistogramContainer<sp/>derived<sp/>class),<sp/>and<sp/>as<sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functional<sp/>parametrisation<sp/>(the<sp/>CalibrationDataFunctionContainer<sp/>derived<sp/>class).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>So<sp/>far,<sp/>the<sp/>CalibrationDataHistogramContainer<sp/>has<sp/>been<sp/>used<sp/>for<sp/>the<sp/>storage<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>data/MC<sp/>calibration<sp/>scale<sp/>factor<sp/>information,<sp/>while<sp/>up<sp/>to<sp/>recently<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataFunctionContainer<sp/>was<sp/>used<sp/>to<sp/>store<sp/>MC<sp/>information.<sp/>Recently,<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>storage<sp/>of<sp/>MC<sp/>information<sp/>also<sp/>moved<sp/>to<sp/>the<sp/>use<sp/>of<sp/>histograms,<sp/>because<sp/>of<sp/>biases<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>functional<sp/>parametrisations<sp/>(in<sp/>addition<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>in<sp/>order<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>derive<sp/>these<sp/>parametrisations<sp/>in<sp/>the<sp/>first<sp/>place,<sp/>a<sp/>non-negligible<sp/>amount<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>manual<sp/>intervention<sp/>is<sp/>required).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataContainer.cxx,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">CalibrationDataContainer::CalibrationDataContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>TMap(),<sp/>m_objResult(0),<sp/>m_objSystematics(0),<sp/>m_restrict(false)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>SetName(name);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">CalibrationDataContainer::~CalibrationDataContainer()</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02307fc0fb0d1341e02c66d0d9d0b985" kindref="member">CalibrationDataContainer::getSystUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UncertaintyResult&amp;<sp/>result,<sp/>TObject*<sp/>obj)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>short-hand<sp/>for<sp/>the<sp/>total<sp/>systematic<sp/>uncertainty<sp/>retrieval.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>&quot;normal&quot;<sp/>usage<sp/>(retrieval<sp/>of<sp/>central<sp/>values<sp/>and<sp/>total<sp/>uncertainties),<sp/>the<sp/>total<sp/>systematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uncertainty<sp/>object<sp/>needs<sp/>to<sp/>be<sp/>accessed<sp/>frequently.<sp/>In<sp/>order<sp/>to<sp/>avoid<sp/>nee</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>&quot;systematics&quot;<sp/>object<sp/>(to<sp/>avoid<sp/>string<sp/>comparisons)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" kindref="member" tooltip="don&amp;#39;t persistify">m_objSystematics</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>total<sp/>systematics<sp/>pointer&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" kindref="member" tooltip="don&amp;#39;t persistify">m_objSystematics</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;systematics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a98d1720be9ead967e0e0166989f98b5b" kindref="member" tooltip="don&amp;#39;t persistify">m_objSystematics</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty</ref>(</highlight><highlight class="stringliteral">&quot;systematics&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>result,<sp/>obj);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3d2d52c41de06f2f91702655ced873b6" kindref="member" tooltip="retrieve the list of &amp;quot;uncertainties&amp;quot; accessible to this object. A few uncertainty...">CalibrationDataContainer::listUncertainties</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="118"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>list<sp/>of<sp/>uncertainties<sp/>for<sp/>this<sp/>calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>an<sp/>un-pruned<sp/>list:<sp/>it<sp/>contains<sp/>also<sp/>entries<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>not<sp/>proper<sp/>uncertainties<sp/>(e.g.<sp/>&quot;result&quot;,<sp/>&quot;comment&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>uncertainties;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>TIter<sp/>it(GetTable());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TPair*<sp/>pair<sp/>=<sp/>(TPair*)<sp/>it())<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>spec(pair-&gt;Key()-&gt;GetName());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>uncertainties.push_back(spec);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uncertainties;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a21290fdfb4cb6602b864f59edf2e58f5" kindref="member">CalibrationDataContainer::getUncertainties</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>UncertaintyResult&gt;&amp;<sp/>all)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="136"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>all<sp/>uncertainties<sp/>for<sp/>this<sp/>calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>mycode(Analysis::kSuccess);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>UncertaintyResult<sp/>result;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>treat<sp/>the<sp/>&quot;result&quot;<sp/>entry<sp/>separately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>single_result;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>code<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a9811c538b19d0ad30fc01131024fdbfd" kindref="member">getResult</ref>(x,<sp/>single_result);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataContainer::getUncertainties():<sp/>error<sp/>retrieving<sp/>result!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>!=<sp/>Analysis::kSuccess)<sp/>mycode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>single_result;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>all[std::string(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">)]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>similar<sp/>for<sp/>the<sp/>&quot;statistics&quot;<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>code<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a58561deb16e6591212f0ccae8b91eff6" kindref="member">getStatUncertainty</ref>(x,<sp/>single_result);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataContainer::getUncertainties():<sp/>error<sp/>retrieving<sp/>stat.<sp/>uncertainty!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>!=<sp/>Analysis::kSuccess)<sp/>mycode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>result.first<sp/><sp/>=<sp/><sp/>single_result;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>-single_result;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>all[std::string(</highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>cycle<sp/>through<sp/>the<sp/>other<sp/>(systematic)<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>TIter<sp/>it(GetTable());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(TPair*<sp/>pair<sp/>=<sp/>(TPair*)<sp/>it())<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>spec(pair-&gt;Key()-&gt;GetName());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>these<sp/>specific<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/>||<sp/>spec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/>||<sp/>spec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal"><sp/>||<sp/>spec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aace1a337901e1db9a7e4a022c69625c2" kindref="member">getUncertainty</ref>(spec,<sp/>x,<sp/>result,<sp/>pair-&gt;Value());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>should<sp/>never<sp/>be<sp/>finding<sp/>any<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataContainer::getUncertainties():<sp/>error<sp/>retrieving<sp/>named<sp/>uncertainty<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>spec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>assumes<sp/>that<sp/>non-success<sp/>codes<sp/>are<sp/>likely<sp/>to<sp/>be<sp/>correlated<sp/>between<sp/>uncertainty<sp/>sources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>!=<sp/>Analysis::kSuccess)<sp/>mycode<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>all[spec]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mycode;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a37ad38f667a6dfe665992c36f9bac3d6" kindref="member" tooltip="retrieve the comments entered for this calibration, if any">CalibrationDataContainer::getComment</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="188"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>comments<sp/>for<sp/>this<sp/>calibration<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>obj)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>TObjString*<sp/>s<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>s<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s-&gt;GetName());</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a78f8934ff9297011fb8bcb193cad4322" kindref="member" tooltip="retrieve the &amp;#39;hadronisation reference&amp;#39; entered for this calibration, if any...">CalibrationDataContainer::getHadronisation</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="201"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>hadronisation<sp/>reference<sp/>for<sp/>this<sp/>calibration<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>null(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>obj)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>TObjString*<sp/>s<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TObjString*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>s<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(s-&gt;GetName());</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" kindref="member" tooltip="insert the relevant object for the requested source of &amp;#39;uncertainty&amp;#39;">CalibrationDataContainer::setUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc,<sp/>TObject*<sp/>obj)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>(or<sp/>replace)<sp/>the<sp/>given<sp/>object<sp/>at<sp/>the<sp/>position<sp/>indicated<sp/>by<sp/>the<sp/>given<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncertainty<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>to<sp/>be<sp/>entered<sp/>(needs<sp/>to<sp/>inherit<sp/>from<sp/>TObject)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TPair*<sp/>p<sp/>=<sp/>(TPair*)<sp/>FindObject(unc.c_str()))<sp/>DeleteEntry(p-&gt;Key());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(unc.c_str()),<sp/>obj);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a02419acd65b92507438f38a8c80ccfc1" kindref="member" tooltip="insert the main object for this calibration">CalibrationDataContainer::setResult</ref>(TObject*<sp/>obj)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Specialization<sp/>of<sp/>the<sp/>setUncertainty()<sp/>method:<sp/>insert<sp/>the<sp/>calibration<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>to<sp/>be<sp/>entered<sp/>(needs<sp/>to<sp/>inherit<sp/>from<sp/>TObject)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a64450b7e83b2705a447b653ec695cebb" kindref="member" tooltip="insert the relevant object for the requested source of &amp;#39;uncertainty&amp;#39;">setUncertainty</ref>(std::string(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">),<sp/>obj);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abd0830b7c9111a0987747c395e6938e4" kindref="member" tooltip="insert the given text as comment for this calibration">CalibrationDataContainer::setComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>(or<sp/>replace)<sp/>the<sp/>comment<sp/>field.<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>handled<sp/>somewhat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specially<sp/>as<sp/>TString<sp/>itself<sp/>doesn&apos;t<sp/>inherit<sp/>from<sp/>TObject.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>text:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment<sp/>field<sp/>(will<sp/>be<sp/>converted<sp/>to<sp/>TObjString)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TPair*<sp/>p<sp/>=<sp/>(TPair*)<sp/>FindObject(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">))<sp/>DeleteEntry(p-&gt;Key());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(text.c_str()));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a966fb27de925a6af5df0b17e63e03026" kindref="member" tooltip="insert the given text as the &amp;#39;hadronisation reference&amp;#39; for this calibration...">CalibrationDataContainer::setHadronisation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>(or<sp/>replace)<sp/>the<sp/>hadronisation<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>text:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>hadronisation<sp/>reference<sp/>in<sp/>string<sp/>form<sp/>(will<sp/>be<sp/>converted<sp/>to<sp/>TObjString)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TPair*<sp/>p<sp/>=<sp/>(TPair*)<sp/>FindObject(</highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal">))<sp/>DeleteEntry(p-&gt;Key());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(</highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(text.c_str()));</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" kindref="member">CalibrationDataContainer::typeFromString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="264"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>utility<sp/>function<sp/>collecting<sp/>the<sp/>correspondence<sp/>between<sp/>axis<sp/>labels<sp/>and<sp/>(integer)<sp/>variable<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>of<sp/>an<sp/>unknown<sp/>label,<sp/>a<sp/>negative<sp/>number<sp/>will<sp/>be<sp/>returned<sp/>to<sp/>flag<sp/>the<sp/>issue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;eta&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kEta;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;abseta&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kAbsEta;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pt&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kPt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tagweight&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTagWeight;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>for<sp/>unknown<sp/>keywords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">CalibrationDataContainer::computeVariables</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="279"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>variables<sp/>are<sp/>to<sp/>be<sp/>used,<sp/>and<sp/>insert<sp/>them<sp/>in<sp/>a<sp/>separate<sp/>array<sp/>(which<sp/>is<sp/>only<sp/>used<sp/>internally).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>is<sp/>used<sp/>to<sp/>indicate<sp/>whether<sp/>any<sp/>input<sp/>co-ordinate<sp/>was<sp/>out<sp/>of<sp/>bounds;<sp/>where<sp/>a<sp/>distinction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>made<sp/>between<sp/>being<sp/>outside<sp/>the<sp/>extrapolation<sp/>region<sp/>(kExtrapolatedRange)<sp/>or<sp/>merely<sp/>the<sp/>calibration<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(kRange).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;extrapolate&quot;<sp/>variable<sp/>is<sp/>used<sp/>to<sp/>flag<sp/>whether<sp/>an<sp/>extrapolation<sp/>uncertainty<sp/>applies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>should<sp/>anyway<sp/>occur<sp/>only<sp/>for<sp/>histogram<sp/>containers).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>also<sp/>the<sp/>place<sp/>where<sp/>any<sp/>computations<sp/>are<sp/>being<sp/>done<sp/>(e.g.<sp/>jet<sp/>pt<sp/>values<sp/>are<sp/>divided<sp/>by<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>convert<sp/>them<sp/>from<sp/>MeV<sp/>to<sp/>GeV).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()<sp/>==<sp/>0)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac" kindref="member" tooltip="decode the &amp;#39;uncertainty&amp;#39; objects&amp;#39; names to determine the relevant variable...">computeVariableTypes</ref>();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>keep<sp/>track<sp/>of<sp/>whether<sp/>the<sp/>variables<sp/>are<sp/>within<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status(kSuccess);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;computeVariables():<sp/>input<sp/>jet<sp/>pt:<sp/>&quot;<sp/>&lt;&lt;<sp/>x.jetPt<sp/>&lt;&lt;<sp/>&quot;,<sp/>eta<sp/>&quot;<sp/>&lt;&lt;<sp/>x.jetEta<sp/>&lt;&lt;<sp/>&quot;,<sp/>tag<sp/>weight<sp/>&quot;<sp/>&lt;&lt;<sp/>x.jetTagWeight<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>0;<sp/>var<sp/>&lt;<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size();<sp/>++var)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var])<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kPt:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>the<sp/>input<sp/>values<sp/>are<sp/>given<sp/>in<sp/>MeV<sp/>but<sp/>the<sp/>performance<sp/>calibration<sp/>in<sp/>GeV!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/>x.jetPt<sp/>*<sp/>0.001;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kEta:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/>x.jetEta;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kAbsEta:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/>x.jetEta;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>&lt;<sp/>0)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>*=<sp/>-1.0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kTagWeight:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/>x.jetTagWeight;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>&lt;<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" kindref="member">getLowerBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/>extrapolate))<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>kExtrapolatedRange)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/><sp/>=<sp/>(extrapolate<sp/>||<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>&lt;<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" kindref="member">getLowerBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))<sp/>?<sp/>kExtrapolatedRange<sp/>:<sp/>kRange;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;computeVariables():<sp/>variable<sp/>&quot;<sp/>&lt;&lt;<sp/>var<sp/>&lt;&lt;<sp/>&quot;,<sp/>value:<sp/>&quot;<sp/>&lt;&lt;<sp/>m_vars[var]<sp/>&lt;&lt;<sp/>&quot;,<sp/>setting<sp/>status<sp/>to<sp/>&quot;<sp/>&lt;&lt;<sp/>status<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_restrict)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" kindref="member">getLowerBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/>extrapolate)<sp/>+<sp/>rangeEpsilon;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>&gt;=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" kindref="member">getUpperBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/>extrapolate))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>kExtrapolatedRange)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/><sp/>=<sp/>(extrapolate<sp/>||<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>&gt;=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" kindref="member">getUpperBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))<sp/>?<sp/>kExtrapolatedRange<sp/>:<sp/>kRange;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;computeVariables():<sp/>variable<sp/>&quot;<sp/>&lt;&lt;<sp/>var<sp/>&lt;&lt;<sp/>&quot;,<sp/>value:<sp/>&quot;<sp/>&lt;&lt;<sp/>m_vars[var]<sp/>&lt;&lt;<sp/>&quot;,<sp/>extrapolate?<sp/>&quot;<sp/>&lt;&lt;<sp/>extrapolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>upper<sp/>bound:<sp/>&quot;<sp/>&lt;&lt;<sp/>getUpperBound(m_variables[var],extrapolate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>(extrapolation<sp/>bound:<sp/>&quot;<sp/>&lt;&lt;<sp/>getUpperBound(m_variables[var],true)<sp/>&lt;&lt;<sp/>&quot;),<sp/>setting<sp/>status<sp/>to<sp/>&quot;<sp/>&lt;&lt;<sp/>status<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_restrict)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[var]<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" kindref="member">getUpperBound</ref>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[var],<sp/>extrapolate)<sp/>-<sp/>rangeEpsilon;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;computeVariables():<sp/>output<sp/>variables:<sp/>&quot;<sp/>&lt;&lt;<sp/>m_vars[0]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>m_vars[1]<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>m_vars[2]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" kindref="member">CalibrationDataContainer::getLowerBound</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="338"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Utility<sp/>function<sp/>returning<sp/>the<sp/>lower<sp/>validity<sp/>bound<sp/>for<sp/>the<sp/>given<sp/>variable<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;extrapolate&quot;<sp/>variable<sp/>flags<sp/>whether<sp/>normal<sp/>validity<sp/>bounds<sp/>are<sp/>to<sp/>be<sp/>used,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>instead<sp/>those<sp/>relevant<sp/>for<sp/>the<sp/>extrapolation<sp/>uncertainty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minDefault<sp/>=<sp/>(vartype<sp/>==<sp/>kAbsEta<sp/>||<sp/>vartype<sp/>==<sp/>kPt)<sp/>?<sp/>0<sp/>:<sp/>-std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(vartype<sp/>&lt;<sp/>m_lowerBounds.size()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minDefault;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extrapolate<sp/>?<sp/>m_lowerBoundsExtrapolated[vartype]<sp/>:<sp/>m_lowerBounds[vartype];</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a88f1212e23f533d6a43168f748e62b3c" kindref="member">CalibrationDataContainer::getUpperBound</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="351"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Utility<sp/>function<sp/>returning<sp/>the<sp/>upper<sp/>validity<sp/>bound<sp/>for<sp/>the<sp/>given<sp/>variable<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;extrapolate&quot;<sp/>variable<sp/>flags<sp/>whether<sp/>normal<sp/>validity<sp/>bounds<sp/>are<sp/>to<sp/>be<sp/>used,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>instead<sp/>those<sp/>relevant<sp/>for<sp/>the<sp/>extrapolation<sp/>uncertainty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(vartype<sp/>&lt;<sp/>m_lowerBounds.size()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extrapolate<sp/>?<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" kindref="member" tooltip="(possibly looser) lower validity bounds for extrapolation">m_upperBoundsExtrapolated</ref>[vartype]<sp/>:<sp/>m_upperBounds[vartype];</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">std::vector&lt;std::pair&lt;double,<sp/>double&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a4959b7f8b61f37d7c66cab4d40ea9d0e" kindref="member" tooltip="allow the user to inspect the bounds of validity">CalibrationDataContainer::getBounds</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="363"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>the<sp/>validity<sp/>bounds<sp/>relevant<sp/>to<sp/>this<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()<sp/>==<sp/>0)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac" kindref="member" tooltip="decode the &amp;#39;uncertainty&amp;#39; objects&amp;#39; names to determine the relevant variable...">computeVariableTypes</ref>();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>double&gt;<sp/>&gt;<sp/>bounds;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>m_lowerBounds.size()<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>kAbsEta;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>bounds.push_back(std::make_pair(m_lowerBounds[t],<sp/>m_upperBounds[t]));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bounds;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">std::vector&lt;unsigned<sp/>int&gt;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a92adaa4ed0e9ede4d0d360a8f88ca644" kindref="member">CalibrationDataContainer::getVariableTypes</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="380"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>the<sp/>variable<sp/>types<sp/>used<sp/>for<sp/>this<sp/>calibration<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>meaning<sp/>of<sp/>the<sp/>types<sp/>is<sp/>encapsulated<sp/>by<sp/>the<sp/>CalibrationParametrization<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()<sp/>==<sp/>0)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a2758169b06ace6f132bf2ef0e6237dac" kindref="member" tooltip="decode the &amp;#39;uncertainty&amp;#39; objects&amp;#39; names to determine the relevant variable...">computeVariableTypes</ref>();</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataHistogramContainer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Begin_Html</highlight></codeline>
<codeline lineno="395"><highlight class="comment">&lt;p&gt;<sp/>The<sp/>CalibrationDataHistogramContainer<sp/>class<sp/>inherits<sp/>from<sp/>the<sp/>CalibrationDataContainer</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>abstract<sp/>class.<sp/>It<sp/>covers<sp/>the<sp/>cases<sp/>where<sp/>the<sp/>relevant<sp/>information<sp/>is<sp/>presented<sp/>in</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>binned<sp/>form.</highlight></codeline>
<codeline lineno="398"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="399"><highlight class="comment">&lt;p&gt;<sp/>This<sp/>class<sp/>allows<sp/>for<sp/>the<sp/>following<sp/>features:</highlight></codeline>
<codeline lineno="400"><highlight class="comment">&lt;ul&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>&lt;li&gt;Access<sp/>to<sp/>individual<sp/>uncertainty<sp/>contributions,<sp/>in<sp/>addition<sp/>to<sp/>total<sp/>(or<sp/>separate</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>statistical<sp/>and<sp/>systematic)<sp/>uncertainties.&lt;/li&gt;</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/>&lt;li&gt;Access<sp/>to<sp/>correlations<sp/>between<sp/>calibration<sp/>bins.<sp/>Note<sp/>that<sp/>exploiting<sp/>this</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>requires<sp/>using<sp/>the<sp/>CalibrationDataEigenVariations<sp/>class.&lt;/li&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>&lt;li&gt;Histogram<sp/>interpolation<sp/>(note<sp/>that<sp/>this<sp/>implementation<sp/>is<sp/>not<sp/>complete;<sp/>however<sp/>it</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>work<sp/>at<sp/>least<sp/>for<sp/>the<sp/>most<sp/>common<sp/>implementation<sp/>of<sp/>2D<sp/>MC<sp/>efficiencies.<sp/>For</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>case,<sp/>interpolation<sp/>has<sp/>been<sp/>demonstrated<sp/>to<sp/>be<sp/>more<sp/>accurate<sp/>than</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>parametrisations).&lt;/li&gt;</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>&lt;li&gt;Use<sp/>with<sp/>&quot;continuous<sp/>tagging&quot;<sp/>(in<sp/>which<sp/>the<sp/>-binned-<sp/>tag<sp/>weight<sp/>distribution<sp/>is</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>considered<sp/>in<sp/>different<sp/>kinematic<sp/>bins)<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>more<sp/>straightforward</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>consideration<sp/>of<sp/>the<sp/>efficiency<sp/>to<sp/>pass<sp/>a<sp/>given<sp/>tag<sp/>weight<sp/>cut.&lt;/li&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="comment">&lt;/ul&gt;</highlight></codeline>
<codeline lineno="413"><highlight class="comment">&lt;/p&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="comment">End_Html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">CalibrationDataHistogramContainer</ref>)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">CalibrationDataHistogramContainer::CalibrationDataHistogramContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>(name),<sp/>m_interpolate(false)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Reset<sp/>&apos;regular&apos;<sp/>bin<sp/>ranges<sp/>to<sp/>a<sp/>nonsensical<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(unsigned<sp/>int<sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>3;<sp/>++t)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_binmin[t]<sp/>=<sp/>m_binmax[t]<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>m_noExtrapolation[t]<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>validity<sp/>bounds<sp/>(including<sp/>those<sp/>for<sp/>extrapolation<sp/>uncertainties)<sp/>to<sp/>reflect<sp/>&apos;no<sp/>bounds&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>They<sp/>will<sp/>be<sp/>re-determined<sp/>upon<sp/>the<sp/>first<sp/>computation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>m_lowerBounds.clear();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>m_lowerBounds.resize(maxParameters,<sp/>-std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>m_lowerBounds[kPt]<sp/>=<sp/>m_lowerBounds[kAbsEta]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>m_upperBounds.clear();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>m_upperBounds.resize(maxParameters,<sp/>std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated.clear();</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated.resize(maxParameters,<sp/>-std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated[kPt]<sp/>=<sp/>m_lowerBounds[kAbsEta]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>m_upperBoundsExtrapolated.clear();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>m_upperBoundsExtrapolated.resize(maxParameters,<sp/>std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>by<sp/>default,<sp/>switch<sp/>on<sp/>the<sp/>range<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>restrictToRange(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">CalibrationDataHistogramContainer::~CalibrationDataHistogramContainer()</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">CalibrationDataHistogramContainer::computeVariableTypes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="462"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>variable<sp/>types<sp/>for<sp/>this<sp/>container<sp/>object,<sp/>using<sp/>the<sp/>histogram<sp/>axis<sp/>labels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>axis<sp/>labels<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>CalibrationDataContainer::typeFromString()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>only<sp/>the<sp/>&quot;result&quot;<sp/>histogram<sp/>is<sp/>inspected;<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>histograms<sp/>provided<sp/>use<sp/>the<sp/>same<sp/>binning<sp/>(a<sp/>small<sp/>exception<sp/>is<sp/>the<sp/>&quot;extrapolation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uncertainty<sp/>histogram,<sp/>which<sp/>may<sp/>have<sp/>additional<sp/>bins<sp/>beyond<sp/>the<sp/>usual<sp/>validity<sp/>bounds).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>will<sp/>be<sp/>called<sp/>upon<sp/>first<sp/>usage,<sp/>and<sp/>its<sp/>results<sp/>cached<sp/>internally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>also<sp/>calls<sp/>checkBounds()<sp/>to<sp/>determine<sp/>the<sp/>validity<sp/>bounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>pointer<sp/>to<sp/>central<sp/>values<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>histograms<sp/>need<sp/>a<sp/>special<sp/>treatment,<sp/>as<sp/>the<sp/>coordinate<sp/>titles<sp/>are<sp/>not<sp/>actually<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>title<sp/>itself,<sp/>but<sp/>instead<sp/>moved<sp/>off<sp/>to<sp/>the<sp/>axis<sp/>titles...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hobj<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>protection<sp/>against<sp/>null<sp/>pointers<sp/>here<sp/>--<sp/>should<sp/>not<sp/>be<sp/>necessary?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/>hobj-&gt;GetDimension();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>dims;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hobj-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hobj-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hobj-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" kindref="member">typeFromString</ref>(axis-&gt;GetTitle());</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vartype<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>flag<sp/>the<sp/>issue<sp/>but<sp/>otherwise<sp/>take<sp/>no<sp/>action<sp/>(assume<sp/>non-argument<sp/>use<sp/>of<sp/>a<sp/>semicolon)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataHistogramContainer::computeVariableTypes():<sp/>cannot<sp/>construct<sp/>variable<sp/>type<sp/>from<sp/>name<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>axis-&gt;GetTitle()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.push_back((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>vartype);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>doing<sp/>this,<sp/>we<sp/>should<sp/>always<sp/>have<sp/>a<sp/>non-null<sp/>vector!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>assert(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>compute<sp/>the<sp/>validity<sp/>bounds<sp/>for<sp/>this<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">CalibrationDataHistogramContainer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;checkBounds();</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a056a05de6152a87f545eec9fc2615c75" kindref="member">CalibrationDataHistogramContainer::getResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result,<sp/>TObject*<sp/>obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extrapolate)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="509"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>central<sp/>value<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.<sp/>There<sp/>are<sp/>cases<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>may<sp/>be<sp/>useful<sp/>to<sp/>provide<sp/>an<sp/>alternative<sp/>histogram<sp/>rather<sp/>than<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one;<sp/>in<sp/>such<sp/>cases<sp/>(notably<sp/>used<sp/>with<sp/>eigenvector<sp/>variations)<sp/>it<sp/>is<sp/>possible<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>provide<sp/>a<sp/>pointer<sp/>to<sp/>this<sp/>alternative<sp/>histogram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>results<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>extrapolate:<sp/>set<sp/>to<sp/>true<sp/>if<sp/>bounds<sp/>checking<sp/>is<sp/>to<sp/>be<sp/>carried<sp/>out<sp/>to<sp/>looser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validity<sp/>bounds<sp/>as<sp/>relevant<sp/>for<sp/>extrapolation<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>central<sp/>value<sp/>pointer&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x,<sp/>extrapolate);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>relevant<sp/>&quot;global&quot;<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>the<sp/>limitation:<sp/>at<sp/>most<sp/>three<sp/>dimensions<sp/>are<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TH1::FindFixBin()<sp/>will<sp/>ignore<sp/>the<sp/>variables<sp/>not<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>FindFixBin()<sp/>is<sp/>only<sp/>available<sp/>in<sp/>&quot;recent&quot;<sp/>ROOT<sp/>versions<sp/>(FindBin()<sp/>is<sp/>appropriate<sp/>for<sp/>older<sp/>versions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(otherwise<sp/>we<sp/>need<sp/>to<sp/>rely<sp/>on<sp/>the<sp/>ResetBit(TH1::kCanRebin)<sp/>method<sp/>having<sp/>been<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_interpolate)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>interpolated<sp/>result&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getInterpolatedResult(hist);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>binned<sp/>result&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hist-&gt;FindFixBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Int_t<sp/>bin<sp/>=<sp/>findBin(hist,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>hist-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statistical<sp/>uncertainty<sp/>retrieval<sp/>(special<sp/>since<sp/>it<sp/>is<sp/>stored<sp/>with<sp/>the<sp/>result<sp/>itself)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f" kindref="member">CalibrationDataHistogramContainer::getStatUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="556"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>central<sp/>value<sp/>pointer&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>getStatUncertainty<sp/>error:<sp/>no<sp/>(valid)<sp/>central<sp/>values<sp/>object!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>relevant<sp/>&quot;global&quot;<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>the<sp/>limitation:<sp/>at<sp/>most<sp/>three<sp/>dimensions<sp/>are<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TH1::FindFixBin()<sp/>will<sp/>ignore<sp/>the<sp/>variables<sp/>not<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>FindFixBin()<sp/>is<sp/>only<sp/>available<sp/>in<sp/>&quot;recent&quot;<sp/>ROOT<sp/>versions<sp/>(FindBin()<sp/>is<sp/>appropriate<sp/>for<sp/>older<sp/>versions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(otherwise<sp/>we<sp/>need<sp/>to<sp/>rely<sp/>on<sp/>the<sp/>ResetBit(TH1::kCanRebin)<sp/>method<sp/>having<sp/>been<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_interpolate)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpolating<sp/>the<sp/>uncertainties<sp/>doesn&apos;t<sp/>seem<sp/>very<sp/>sensible..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>getInterpolatedUncertainty(hist);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hist-&gt;FindFixBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Int_t<sp/>bin<sp/>=<sp/>findBin(hist,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>general<sp/>uncertainty<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad47159b520a5b6136a6452a49d0a3651" kindref="member">CalibrationDataHistogramContainer::getUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UncertaintyResult&amp;<sp/>result,<sp/>TObject*<sp/>obj)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="598"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>requested<sp/>source<sp/>of<sp/>uncertainty.<sp/>This<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspond<sp/>to<sp/>one<sp/>of<sp/>the<sp/>histograms<sp/>added<sp/>explicitly<sp/>as<sp/>a<sp/>systematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncertainty<sp/>or<sp/>the<sp/>keyword<sp/>&quot;statistics&quot;<sp/>(statistical<sp/>uncertainties<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessed<sp/>differently,<sp/>see<sp/>method<sp/>getStatUncertainty()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>or<sp/>cached<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>statistical<sp/>uncertainties<sp/>separately<sp/>(they<sp/>are<sp/>stored<sp/>with<sp/>the<sp/>actual<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>CalibrationStatus<sp/>code<sp/>=<sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa4ccd07059d9e8b47bad7df36d42d41f" kindref="member">getStatUncertainty</ref>(x,<sp/>res);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/><sp/><sp/>res;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>-res;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>obj<sp/>=<sp/>GetValue(unc.c_str());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x,<sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_interpolate)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/>getInterpolatedResult(hist);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>symmetrise<sp/>the<sp/>uncertainty<sp/>(as<sp/>there<sp/>is<sp/>no<sp/>code<sp/>to<sp/>interpolate<sp/>the<sp/>bin<sp/>errors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>-result.first;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TH1::FindFixBin()<sp/>will<sp/>ignore<sp/>the<sp/>variables<sp/>not<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>FindFixBin()<sp/>is<sp/>only<sp/>available<sp/>in<sp/>&quot;recent&quot;<sp/>ROOT<sp/>versions<sp/>(FindBin()<sp/>is<sp/>appropriate<sp/>for<sp/>older<sp/>versions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(otherwise<sp/>we<sp/>need<sp/>to<sp/>rely<sp/>on<sp/>the<sp/>ResetBit(TH1::kCanRebin)<sp/>method<sp/>having<sp/>been<sp/>used)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hist-&gt;FindFixBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;first&quot;<sp/>and<sp/>&quot;second&quot;<sp/>entries<sp/>are<sp/>filled<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;positive&quot;<sp/>and<sp/>&quot;negative&quot;<sp/>uncertainties,<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/>hist-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">CalibrationDataHistogramContainer::checkBounds()</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>bounds<sp/>of<sp/>validity<sp/>for<sp/>this<sp/>calibration<sp/>object.<sp/>If<sp/>an<sp/>&quot;extrapolation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uncertainty<sp/>histogram<sp/>exists,<sp/>it<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>the<sp/>(typically)<sp/>looser<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>validity<sp/>appropriate<sp/>for<sp/>extrapolation<sp/>uncertainties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hist)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataHistogramContainer::checkBounds():<sp/>object<sp/>type<sp/>does<sp/>not<sp/>derive<sp/>from<sp/>TH1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>!=<sp/>int(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()))<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataHistogramContainer::checkBounds():<sp/>given<sp/>number<sp/>of<sp/>variable<sp/>types<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>doesn&apos;t<sp/>match<sp/>histogram<sp/>dimension<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>hist-&gt;GetDimension()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>an<sp/>extrapolation<sp/>uncertainty<sp/>histogram<sp/>was<sp/>provided,<sp/>use<sp/>this<sp/>to<sp/>determine<sp/>a<sp/>second<sp/>set<sp/>of<sp/>validity<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hExtrapolate<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(GetValue(</highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(hExtrapolate)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;debug:<sp/>found<sp/>extrapolation<sp/>histogram&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>int(t)<sp/>&lt;<sp/>hist-&gt;GetDimension();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hist-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hExtrapolate)<sp/>axis2<sp/>=<sp/>hExtrapolate-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hist-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hExtrapolate)<sp/>axis2<sp/>=<sp/>hExtrapolate-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hist-&gt;GetZaxis();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hExtrapolate)<sp/>axis2<sp/>=<sp/>hExtrapolate-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(unsigned<sp/>int<sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>m_variables.size();<sp/>++t)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(m_variables[t]<sp/>&gt;<sp/>m_upperBounds.size())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;in<sp/>CalibrationDataHistogramContainer::checkBounds():<sp/>variable<sp/>&quot;<sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/>&quot;type<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_variables[t]<sp/>&lt;&lt;<sp/>&quot;exceeds<sp/>maximum<sp/>type<sp/>number<sp/>(&quot;<sp/>&lt;&lt;<sp/>m_upperBounds.size()<sp/>&lt;&lt;<sp/>&quot;)!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>m_upperBounds[<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1af729948af693157fcfad42d9602b814a" kindref="member" tooltip="don&amp;#39;t persistify">m_variables</ref>[t]]<sp/>=<sp/>axis-&gt;GetXmax();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lowerBounds[m_variables[t]]<sp/>=<sp/>axis-&gt;GetXmin();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a13169dd8209ab4cd5a92c3c24a28aa6d" kindref="member" tooltip="(possibly looser) lower validity bounds for extrapolation">m_upperBoundsExtrapolated</ref>[m_variables[t]]<sp/>=<sp/>(axis2)<sp/>?<sp/>axis2-&gt;GetXmax()<sp/>:<sp/>m_upperBounds[m_variables[t]];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lowerBoundsExtrapolated[m_variables[t]]<sp/>=<sp/>(axis2)<sp/>?<sp/>axis2-&gt;GetXmin()<sp/>:<sp/>m_lowerBounds[m_variables[t]];</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;debug:<sp/>min<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>m_lowerBounds[m_variables[t]]<sp/>&lt;&lt;<sp/>&quot;,<sp/>max<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>m_upperBounds[m_variables[t]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>extrap<sp/>min<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>m_lowerBoundsExtrapolated[m_variables[t]]<sp/>&lt;&lt;<sp/>&quot;,<sp/>extrap<sp/>max<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_upperBoundsExtrapolated[m_variables[t]]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1ad3bfbdca48da85a5bc6cb3c14454753d" kindref="member">CalibrationDataHistogramContainer::isBinCorrelated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="694"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>whether<sp/>the<sp/>given<sp/>uncertainty<sp/>is<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(note<sp/>that<sp/>this<sp/>function<sp/>is<sp/>to<sp/>be<sp/>used<sp/>only<sp/>for<sp/>_systematic_<sp/>uncertainties)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_uncorrelatedSyst.FindObject(unc.c_str())<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a45ecd61fdc3d11b2e53a5ff13fe0ca71" kindref="member">CalibrationDataHistogramContainer::setUncorrelated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>that<sp/>the<sp/>given<sp/>uncertainty<sp/>is<sp/>to<sp/>be<sp/>treated<sp/>uncorrelated<sp/>from<sp/>bin<sp/>to<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(the<sp/>default<sp/>is<sp/>for<sp/>all<sp/>systematic<sp/>uncertainties<sp/>to<sp/>be<sp/>treated<sp/>as<sp/>correlated).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>not<sp/>normall<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>during<sp/>physics<sp/>analysis;<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>information<sp/>is<sp/>written<sp/>to<sp/>and<sp/>read<sp/>back<sp/>from<sp/>the<sp/>calibration<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>m_uncorrelatedSyst.Add(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TObjString(unc.c_str()));</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a566c34b79b398930a96e8ab443417783" kindref="member">CalibrationDataHistogramContainer::setInterpolated</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doInterpolate)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>whether<sp/>results<sp/>are<sp/>to<sp/>be<sp/>interpolated<sp/>between<sp/>bins<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>feature<sp/>is<sp/>thought<sp/>to<sp/>be<sp/>useful<sp/>mostly<sp/>for<sp/>MC<sp/>efficiencies).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>is<sp/>not<sp/>to<sp/>use<sp/>any<sp/>interpolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>m_interpolate<sp/>=<sp/>doInterpolate;</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1aa27c1f4b1ddb92cd704f1b4b7263196e" kindref="member">CalibrationDataHistogramContainer::isInterpolated</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="726"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>whether<sp/>histogram<sp/>interpolation<sp/>is<sp/>used<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_interpolate;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">CalibrationDataHistogramContainer::getInterpolatedResult(TH1*<sp/>hist)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="735"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>utility<sp/>function<sp/>(intended<sp/>for<sp/>internal<sp/>use<sp/>only)<sp/>for<sp/>the<sp/>retrieval<sp/>of<sp/>interpolated<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension())<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;Interpolate(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;Interpolate(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0],<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;Interpolate(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">CalibrationDataHistogramContainer::getInterpolatedUncertainty(TH1*<sp/>hist)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="752"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>TAxis*<sp/>xAxis<sp/>=<sp/>hist-&gt;GetXaxis();</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>TAxis*<sp/>yAxis<sp/>=<sp/>0;<sp/>TAxis*<sp/>zAxis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>Double_t<sp/>x0,x1,y0,y1;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>Int_t<sp/>ndim<sp/>=<sp/>hist-&gt;GetDimension();</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>copied<sp/>from<sp/>TH1::Interpolate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>xbin<sp/>=<sp/>hist-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]<sp/>&lt;=<sp/>hist-&gt;GetBinCenter(1))<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;GetBinError(1);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]<sp/>&gt;=<sp/>hist-&gt;GetBinCenter(hist-&gt;GetNbinsX()))<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;GetBinError(hist-&gt;GetNbinsX());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]<sp/>&lt;=<sp/>hist-&gt;GetBinCenter(xbin))<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>hist-&gt;GetBinError(xbin-1);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>hist-&gt;GetBinCenter(xbin-1);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>hist-&gt;GetBinError(xbin);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>hist-&gt;GetBinCenter(xbin);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>hist-&gt;GetBinError(xbin);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>hist-&gt;GetBinCenter(xbin);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>hist-&gt;GetBinError(xbin+1);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>hist-&gt;GetBinCenter(xbin+1);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y0<sp/>+<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]-x0)*((y1-y0)/(x1-x0));</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>copied<sp/>from<sp/>TH2::Interpolate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>f=0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>y1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>x2=0,y2=0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>dx,dy;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>yAxis<sp/>=<sp/>hist-&gt;GetYaxis();</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_x<sp/>=<sp/>xAxis-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_y<sp/>=<sp/>yAxis-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin_x&lt;1<sp/>||<sp/>bin_x&gt;hist-&gt;GetNbinsX()<sp/>||<sp/>bin_y&lt;1<sp/>||<sp/>bin_y&gt;hist-&gt;GetNbinsY())<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Error(</highlight><highlight class="stringliteral">&quot;Interpolate&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;Cannot<sp/>interpolate<sp/>outside<sp/>histogram<sp/>domain.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Int_t<sp/>quadrant<sp/>=<sp/>0;<sp/>//<sp/>CCW<sp/>from<sp/>UR<sp/>1,2,3,4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>quadrant<sp/>of<sp/>the<sp/>bin<sp/>(bin_P)<sp/>are<sp/>we<sp/>in?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>xAxis-&gt;GetBinUpEdge(bin_x)-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0];</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>yAxis-&gt;GetBinUpEdge(bin_y)-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1];</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx&lt;=xAxis-&gt;GetBinWidth(bin_x)/2<sp/>&amp;&amp;<sp/>dy&lt;=yAxis-&gt;GetBinWidth(bin_y)/2)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quadrant<sp/>=<sp/>1;<sp/>//<sp/>upper<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x+1);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y+1);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx&gt;xAxis-&gt;GetBinWidth(bin_x)/2<sp/>&amp;&amp;<sp/>dy&lt;=yAxis-&gt;GetBinWidth(bin_y)/2)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quadrant<sp/>=<sp/>2;<sp/>//<sp/>upper<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x-1);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y+1);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx&gt;xAxis-&gt;GetBinWidth(bin_x)/2<sp/>&amp;&amp;<sp/>dy&gt;yAxis-&gt;GetBinWidth(bin_y)/2)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quadrant<sp/>=<sp/>3;<sp/>//<sp/>lower<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x-1);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y-1);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>quadrant<sp/>=<sp/>4;<sp/>//<sp/>lower<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y-1);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xAxis-&gt;GetBinCenter(bin_x+1);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yAxis-&gt;GetBinCenter(bin_y);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_x1<sp/>=<sp/>xAxis-&gt;FindBin(x1);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin_x1&lt;1)<sp/>bin_x1=1;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_x2<sp/>=<sp/>xAxis-&gt;FindBin(x2);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin_x2&gt;hist-&gt;GetNbinsX())<sp/>bin_x2=hist-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_y1<sp/>=<sp/>yAxis-&gt;FindBin(y1);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin_y1&lt;1)<sp/>bin_y1=1;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_y2<sp/>=<sp/>yAxis-&gt;FindBin(y2);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bin_y2&gt;hist-&gt;GetNbinsY())<sp/>bin_y2=hist-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_q22<sp/>=<sp/>hist-&gt;GetBin(bin_x2,bin_y2);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_q12<sp/>=<sp/>hist-&gt;GetBin(bin_x1,bin_y2);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_q11<sp/>=<sp/>hist-&gt;GetBin(bin_x1,bin_y1);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>bin_q21<sp/>=<sp/>hist-&gt;GetBin(bin_x2,bin_y1);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>q11<sp/>=<sp/>hist-&gt;GetBinError(bin_q11);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>q12<sp/>=<sp/>hist-&gt;GetBinError(bin_q12);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>q21<sp/>=<sp/>hist-&gt;GetBinError(bin_q21);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>q22<sp/>=<sp/>hist-&gt;GetBinError(bin_q22);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>d<sp/>=<sp/>1.0*(x2-x1)*(y2-y1);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>1.0*q11/d*(x2-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0])*(y2-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1])</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1.0*q21/d*(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]-x1)*(y2-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1])</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1.0*q12/d*(x2-<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0])*(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]-y1)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1.0*q22/d*(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]-x1)*(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]-y1);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copied<sp/>from<sp/>TH3::Interpolate()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>zAxis<sp/>=<sp/>hist-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>ubx<sp/>=<sp/>xAxis-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]<sp/>&lt;<sp/>xAxis-&gt;GetBinCenter(ubx)<sp/>)<sp/>ubx<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>obx<sp/>=<sp/>ubx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>uby<sp/>=<sp/>yAxis-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]<sp/>&lt;<sp/>yAxis-&gt;GetBinCenter(uby)<sp/>)<sp/>uby<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>oby<sp/>=<sp/>uby<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>ubz<sp/>=<sp/>zAxis-&gt;FindBin(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]<sp/>&lt;<sp/>zAxis-&gt;GetBinCenter(ubz)<sp/>)<sp/>ubz<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>obz<sp/>=<sp/>ubz<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(<sp/>IsBinUnderflow(GetBin(ubx,<sp/>uby,<sp/>ubz))<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsBinOverflow<sp/>(GetBin(obx,<sp/>oby,<sp/>obz))<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ubx<sp/>&lt;=0<sp/>||<sp/>uby<sp/>&lt;=0<sp/>||<sp/>ubz<sp/>&lt;=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>obx<sp/>&gt;<sp/>xAxis-&gt;GetNbins()<sp/>||<sp/>oby<sp/>&gt;<sp/>yAxis-&gt;GetNbins()<sp/>||<sp/>obz<sp/>&gt;<sp/>zAxis-&gt;GetNbins()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>xw<sp/>=<sp/>xAxis-&gt;GetBinCenter(obx)<sp/>-<sp/>xAxis-&gt;GetBinCenter(ubx);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>yw<sp/>=<sp/>yAxis-&gt;GetBinCenter(oby)<sp/>-<sp/>yAxis-&gt;GetBinCenter(uby);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>zw<sp/>=<sp/>zAxis-&gt;GetBinCenter(obz)<sp/>-<sp/>zAxis-&gt;GetBinCenter(ubz);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>xd<sp/>=<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[0]<sp/>-<sp/>xAxis-&gt;GetBinCenter(ubx))<sp/>/<sp/>xw;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>yd<sp/>=<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[1]<sp/>-<sp/>yAxis-&gt;GetBinCenter(uby))<sp/>/<sp/>yw;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>zd<sp/>=<sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[2]<sp/>-<sp/>zAxis-&gt;GetBinCenter(ubz))<sp/>/<sp/>zw;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>v[]<sp/>=<sp/>{<sp/>hist-&gt;GetBinError(<sp/>ubx,<sp/>uby,<sp/>ubz<sp/>),<sp/>hist-&gt;GetBinError(<sp/>ubx,<sp/>uby,<sp/>obz<sp/>),</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist-&gt;GetBinError(<sp/>ubx,<sp/>oby,<sp/>ubz<sp/>),<sp/>hist-&gt;GetBinError(<sp/>ubx,<sp/>oby,<sp/>obz<sp/>),</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist-&gt;GetBinError(<sp/>obx,<sp/>uby,<sp/>ubz<sp/>),<sp/>hist-&gt;GetBinError(<sp/>obx,<sp/>uby,<sp/>obz<sp/>),</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist-&gt;GetBinError(<sp/>obx,<sp/>oby,<sp/>ubz<sp/>),<sp/>hist-&gt;GetBinError(<sp/>obx,<sp/>oby,<sp/>obz<sp/>)<sp/>};</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>i1<sp/>=<sp/>v[0]<sp/>*<sp/>(1<sp/>-<sp/>zd)<sp/>+<sp/>v[1]<sp/>*<sp/>zd;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>i2<sp/>=<sp/>v[2]<sp/>*<sp/>(1<sp/>-<sp/>zd)<sp/>+<sp/>v[3]<sp/>*<sp/>zd;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>j1<sp/>=<sp/>v[4]<sp/>*<sp/>(1<sp/>-<sp/>zd)<sp/>+<sp/>v[5]<sp/>*<sp/>zd;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>j2<sp/>=<sp/>v[6]<sp/>*<sp/>(1<sp/>-<sp/>zd)<sp/>+<sp/>v[7]<sp/>*<sp/>zd;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>w1<sp/>=<sp/>i1<sp/>*<sp/>(1<sp/>-<sp/>yd)<sp/>+<sp/>i2<sp/>*<sp/>yd;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>w2<sp/>=<sp/>j1<sp/>*<sp/>(1<sp/>-<sp/>yd)<sp/>+<sp/>j2<sp/>*<sp/>yd;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>Double_t<sp/>result<sp/>=<sp/>w1<sp/>*<sp/>(1<sp/>-<sp/>xd)<sp/>+<sp/>w2<sp/>*<sp/>xd;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a6869298988a937ac1f9c2d44ad2db111" kindref="member">CalibrationDataHistogramContainer::getTagWeightAxis</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="909"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>whether<sp/>this<sp/>calibration<sp/>object<sp/>is<sp/>one<sp/>for<sp/>&quot;continuous&quot;<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>has<sp/>some<sp/>subtle<sp/>consequences<sp/>for<sp/>the<sp/>treatment<sp/>of<sp/>bin-to-bin<sp/>correlations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>will<sp/>be<sp/>-1<sp/>in<sp/>case<sp/>this<sp/>is<sp/>not<sp/>a<sp/>&quot;continuous&quot;<sp/>calibration<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>axis<sp/>number<sp/>(0<sp/>for<sp/>X,<sp/>1<sp/>for<sp/>Y,<sp/>2<sp/>for<sp/>Z)<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>at<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables.size()<sp/>==<sp/>0)<sp/>computeVariableTypes();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0;<sp/>type<sp/>&lt;<sp/>m_variables.size();<sp/>++type)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables[type]<sp/>==<sp/>kTagWeight)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int(type);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a8d8a72c1c8ce4362afa87837a42dca97" kindref="member">CalibrationDataHistogramContainer::getBinBoundaries</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="926"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>bin<sp/>boundaries<sp/>for<sp/>the<sp/>specified<sp/>variable<sp/>type<sp/>(which<sp/>should<sp/>be<sp/>a<sp/>CalibrationParametrization<sp/>enum).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>empty<sp/>vector<sp/>will<sp/>be<sp/>returned<sp/>if<sp/>the<sp/>specified<sp/>variable<sp/>is<sp/>not<sp/>actually<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>at<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables.size()<sp/>==<sp/>0)<sp/>computeVariableTypes();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>variable<sp/>type<sp/>is<sp/>actually<sp/>being<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>boundaries;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(m_variables.begin(),<sp/>m_variables.end(),<sp/>vartype)<sp/>==<sp/>m_variables.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaries;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>cached<sp/>information<sp/>if<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>std::vector&lt;double&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>.find(vartype);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>appropriate<sp/>histogram<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>if<sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hobj<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables[0]<sp/>==<sp/>vartype)<sp/>axis<sp/>=<sp/>hobj-&gt;GetXaxis();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables[1]<sp/>==<sp/>vartype)<sp/>axis<sp/>=<sp/>hobj-&gt;GetYaxis();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>hobj-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>bin<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArrayD*<sp/>bins<sp/>=<sp/>axis-&gt;GetXbins();<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>bins-&gt;GetSize();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>nb;<sp/>++b)<sp/>boundaries.push_back(bins-&gt;At(b));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>[vartype]<sp/>=<sp/>boundaries;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaries;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a771621aac5a4b31d383caa301fe06441" kindref="member">CalibrationDataHistogramContainer::getEigenvectorReduction</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>choice)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="960"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>TObject*<sp/>obj<sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;ReducedSets&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>obj)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>TVectorT&lt;double&gt;*<sp/>v<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TVectorT&lt;double&gt;*<sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>(v<sp/>&amp;&amp;<sp/>v-&gt;GetNoElements()<sp/>&gt;<sp/>int(choice))<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>int((*v)[choice]);</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataMappedHistogramContainer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>CalibrationDataMappedHistogramContainer<sp/>class<sp/>inherits<sp/>from<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataHistogramContainer<sp/>class.<sp/>It<sp/>covers<sp/>the<sp/>special<sp/>case<sp/>(for<sp/>at<sp/>least<sp/>two<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dimensions)<sp/>where<sp/>the<sp/>calibration<sp/>is<sp/>not<sp/>done<sp/>in<sp/>a<sp/>rectangular<sp/>grid<sp/>as<sp/>would<sp/>be<sp/>implied<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>use<sp/>of<sp/>a<sp/>TH2<sp/>or<sp/>TH3.<sp/>Instead,<sp/>the<sp/>class<sp/>implements<sp/>a<sp/>mapping<sp/>from<sp/>a<sp/>set<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>general<sp/>bins<sp/>to<sp/>bins<sp/>on<sp/>a<sp/>given<sp/>TH2<sp/>or<sp/>TH3<sp/>axis.<sp/>This<sp/>generality<sp/>implies<sp/>that<sp/>this<sp/>class<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>principle<sp/>could<sp/>be<sp/>used<sp/>also<sp/>for<sp/>the<sp/>storage<sp/>of<sp/>higher-dimensional<sp/>results.<sp/>The<sp/>only<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assumptions<sp/>made<sp/>are<sp/>that<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>all<sp/>bins<sp/>have<sp/>the<sp/>same<sp/>dimensions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>and<sp/>the<sp/>bins<sp/>cover<sp/>the<sp/>&apos;mapped&apos;<sp/>dimensions<sp/>completely,<sp/>without<sp/>any<sp/>overlaps<sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Necessarily,<sp/>the<sp/>added<sp/>flexibility<sp/>makes<sp/>access<sp/>slower<sp/>(even<sp/>if<sp/>caching<sp/>of<sp/>the<sp/>mapped<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bin<sp/>is<sp/>used).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="985"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kindref="compound">CalibrationDataMappedHistogramContainer</ref>)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">CalibrationDataMappedHistogramContainer::CalibrationDataMappedHistogramContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>:</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer" kindref="compound">CalibrationDataHistogramContainer</ref>(name),<sp/>m_lastBin(0)</highlight></codeline>
<codeline lineno="993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">CalibrationDataMappedHistogramContainer::~CalibrationDataMappedHistogramContainer()</highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">CalibrationDataMappedHistogramContainer::computeVariableTypes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1004"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>variable<sp/>types<sp/>for<sp/>this<sp/>container<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>computation<sp/>differs<sp/>from<sp/>that<sp/>used<sp/>for<sp/>the<sp/>parent<sp/>CalibrationDataHistogramContainer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class,<sp/>as<sp/>also<sp/>the<sp/>&apos;mapped&apos;<sp/>variables<sp/>(the<sp/>variables<sp/>that<sp/>are<sp/>mapped<sp/>onto<sp/>a<sp/>single<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>axis)<sp/>need<sp/>to<sp/>be<sp/>accounted<sp/>for<sp/>properly.<sp/>This<sp/>is<sp/>handled<sp/>as<sp/>a<sp/>special<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>pointer<sp/>to<sp/>central<sp/>values<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>histograms<sp/>need<sp/>a<sp/>special<sp/>treatment,<sp/>as<sp/>the<sp/>coordinate<sp/>titles<sp/>are<sp/>not<sp/>actually<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>title<sp/>itself,<sp/>but<sp/>instead<sp/>moved<sp/>off<sp/>to<sp/>the<sp/>axis<sp/>titles...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hobj<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>protection<sp/>against<sp/>null<sp/>pointers<sp/>here<sp/>--<sp/>should<sp/>not<sp/>be<sp/>necessary?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dims<sp/>=<sp/>hobj-&gt;GetDimension();</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>dims;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hobj-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hobj-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hobj-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>var(axis-&gt;GetTitle());</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mapped&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>mapped<sp/>variables,<sp/>so<sp/>make<sp/>sure<sp/>to<sp/>specify<sp/>the<sp/>original<sp/>variables<sp/>(not<sp/>the<sp/>mapped<sp/>ones).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>code<sp/>here<sp/>assumes<sp/>that<sp/>the<sp/>mapping<sp/>is<sp/>identical<sp/>for<sp/>all<sp/>objects..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>m_mapped.size();<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" kindref="member">typeFromString</ref>(m_mapped[m]);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>check<sp/>should<sp/>never<sp/>fail;<sp/>therefore,<sp/>bail<sp/>out<sp/>if<sp/>this<sp/>does<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(!<sp/>(vartype<sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>m_variables.push_back((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)vartype);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>also<sp/>flag<sp/>_where_<sp/>in<sp/>the<sp/>resulting<sp/>list<sp/>of<sp/>variables<sp/>the<sp/>mapping<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_beginMapped<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" kindref="member">typeFromString</ref>(var);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vartype<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>flag<sp/>the<sp/>issue<sp/>but<sp/>otherwise<sp/>take<sp/>no<sp/>action<sp/>(assume<sp/>non-argument<sp/>use<sp/>of<sp/>a<sp/>semicolon)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataMappedHistogramContainer::computeVariableTypes():<sp/>cannot<sp/>construct<sp/>variable<sp/>type<sp/>from<sp/>name<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>var<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>m_variables.push_back((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)vartype);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>doing<sp/>this,<sp/>we<sp/>should<sp/>always<sp/>have<sp/>a<sp/>non-null<sp/>vector!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>assert(m_variables.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>compute<sp/>the<sp/>validity<sp/>bounds<sp/>for<sp/>this<sp/>calibration<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer" kindref="compound">CalibrationDataMappedHistogramContainer</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;checkBounds();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">CalibrationDataMappedHistogramContainer::checkBounds()</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>bounds<sp/>of<sp/>validity<sp/>for<sp/>this<sp/>calibration<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>CalibrationDataHistogramContainer::checkBounds()<sp/>method.<sp/>The<sp/>difference<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>&apos;mapped&apos;<sp/>dimensions<sp/>need<sp/>to<sp/>be<sp/>handled<sp/>separately<sp/>(this<sp/>is<sp/>carried<sp/>out<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>looping<sp/>over<sp/>the<sp/>mapped<sp/>bins<sp/>and<sp/>inspecting<sp/>each<sp/>bin&apos;s<sp/>validity<sp/>bounds<sp/>individually).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>extrapolation<sp/>uncertainties<sp/>are<sp/>not<sp/>covered<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hist)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataHistogramContainer::checkBounds():<sp/>object<sp/>type<sp/>does<sp/>not<sp/>derive<sp/>from<sp/>TH1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>+<sp/>int(m_mapped.size())<sp/>-<sp/>1<sp/>!=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m_variables.size()))<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataMappedHistogramContainer::checkBounds():<sp/>given<sp/>number<sp/>of<sp/>variable<sp/>types<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_variables.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>doesn&apos;t<sp/>match<sp/>(mapped)<sp/>histogram<sp/>dimension<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>hist-&gt;GetDimension()<sp/>+<sp/>m_mapped.size()<sp/>-<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Carry<sp/>out<sp/>the<sp/>only<sp/>cross-check<sp/>that&apos;s<sp/>possible<sp/>for<sp/>the<sp/>binning:<sp/>check<sp/>that<sp/>the<sp/>dimensionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>all<sp/>bins<sp/>matches<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>specified<sp/>for<sp/>the<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>m_bins.size();<sp/>++bin)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m_bins[bin].getDimension()<sp/>==<sp/>m_mapped.size());</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0,<sp/>t2<sp/>=<sp/>0;<sp/>int(t)<sp/>&lt;<sp/>hist-&gt;GetDimension();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(t)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hist-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hist-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hist-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case<sp/>for<sp/>the<sp/>mapped<sp/>dimension:<sp/>here<sp/>the<sp/>only<sp/>thing<sp/>that<sp/>can<sp/>be<sp/>done<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cycle<sp/>through<sp/>all<sp/>Bins<sp/>and<sp/>inspect<sp/>the<sp/>boundaries<sp/>of<sp/>each<sp/>bin<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>m_beginMapped)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapped<sp/>=<sp/>0;<sp/>mapped<sp/>&lt;<sp/>m_mapped.size();<sp/>++mapped)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>m_bins.size();<sp/>++bin)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amax<sp/>=<sp/>m_bins[bin].getUpperBound(mapped),<sp/>amin<sp/>=<sp/>m_bins[bin].getLowerBound(mapped);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>==<sp/>0<sp/>||<sp/>amax<sp/>&gt;<sp/>m_upperBounds[m_variables[t2]])<sp/>m_upperBounds[m_variables[t2]]<sp/>=<sp/>amax;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>==<sp/>0<sp/>||<sp/>amin<sp/>&lt;<sp/>m_lowerBounds[m_variables[t2]])<sp/>m_lowerBounds[m_variables[t2]]<sp/>=<sp/>amin;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>++t2;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(unsigned<sp/>int<sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>m_variables.size();<sp/>++t)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(m_variables[t]<sp/>&gt;<sp/>m_upperBounds.size())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;in<sp/>CalibrationDataHistogramContainer::checkBounds():<sp/>variable<sp/>&quot;<sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/>&quot;type<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_variables[t]<sp/>&lt;&lt;<sp/>&quot;exceeds<sp/>maximum<sp/>type<sp/>number<sp/>(&quot;<sp/>&lt;&lt;<sp/>m_upperBounds.size()<sp/>&lt;&lt;<sp/>&quot;)!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>amax<sp/>=<sp/>axis-&gt;GetXmax(),<sp/>amin<sp/>=<sp/>axis-&gt;GetXmin();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amax<sp/>&lt;<sp/>m_upperBounds[m_variables[t2]])<sp/>m_upperBounds[m_variables[t2]]<sp/>=<sp/>amax;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amin<sp/>&gt;<sp/>m_lowerBounds[m_variables[t2]])<sp/>m_lowerBounds[m_variables[t2]]<sp/>=<sp/>amin;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++t2;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1adc3bfdb3971cdbaf2f2651aa9946d3e7" kindref="member">CalibrationDataMappedHistogramContainer::getResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result,<sp/>TObject*<sp/>obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>extrapolate<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1124"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>central<sp/>value<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.<sp/>There<sp/>are<sp/>cases<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>may<sp/>be<sp/>useful<sp/>to<sp/>provide<sp/>an<sp/>alternative<sp/>histogram<sp/>rather<sp/>than<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one;<sp/>in<sp/>such<sp/>cases<sp/>(notably<sp/>used<sp/>with<sp/>eigenvector<sp/>variations)<sp/>it<sp/>is<sp/>possible<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>provide<sp/>a<sp/>pointer<sp/>to<sp/>this<sp/>alternative<sp/>histogram.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>method<sp/>here<sp/>differs<sp/>from<sp/>CalibrationDataHistogramContainer::getResult()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>histogram<sp/>interpolation<sp/>does<sp/>not<sp/>make<sp/>sense<sp/>for<sp/>mapped<sp/>bins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>results<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>central<sp/>value<sp/>pointer&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>relevant<sp/>&quot;global&quot;<sp/>bin<sp/>and<sp/>retrieve<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>hist-&gt;GetBinContent(findBin());</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f" kindref="member">CalibrationDataMappedHistogramContainer::getStatUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1158"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;retrieving<sp/>central<sp/>value<sp/>pointer&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>relevant<sp/>&quot;global&quot;<sp/>bin<sp/>and<sp/>retrieve<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>hist-&gt;GetBinError(findBin());</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a39117b40e9ae6ff7068463074e89a996" kindref="member">CalibrationDataMappedHistogramContainer::getUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc,</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UncertaintyResult&amp;<sp/>result,<sp/>TObject*<sp/>obj)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1184"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>requested<sp/>source<sp/>of<sp/>uncertainty.<sp/>This<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspond<sp/>to<sp/>one<sp/>of<sp/>the<sp/>histograms<sp/>added<sp/>explicitly<sp/>as<sp/>a<sp/>systematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncertainty<sp/>or<sp/>the<sp/>keyword<sp/>&quot;statistics&quot;<sp/>(statistical<sp/>uncertainties<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessed<sp/>differently,<sp/>see<sp/>method<sp/>getStatUncertainty()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>or<sp/>cached<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>statistical<sp/>uncertainties<sp/>separately<sp/>(they<sp/>are<sp/>stored<sp/>with<sp/>the<sp/>actual<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>CalibrationStatus<sp/>code<sp/>=<sp/><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6c1e06fcd926cb736869744a1b70a38f" kindref="member">getStatUncertainty</ref>(x,<sp/>res);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/><sp/><sp/>res;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>-res;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>obj<sp/>=<sp/>GetValue(unc.c_str());</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>hist)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>relevant<sp/>&quot;global&quot;<sp/>bin<sp/>and<sp/>retrieve<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>findBin();</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a69dca1710e279b6f78576cd733cf8207" kindref="member">CalibrationDataMappedHistogramContainer::getTagWeightAxis</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1222"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>whether<sp/>this<sp/>calibration<sp/>object<sp/>is<sp/>one<sp/>for<sp/>&quot;continuous&quot;<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>has<sp/>some<sp/>subtle<sp/>consequences<sp/>for<sp/>the<sp/>treatment<sp/>of<sp/>bin-to-bin<sp/>correlations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>will<sp/>be<sp/>-1<sp/>in<sp/>case<sp/>this<sp/>is<sp/>not<sp/>a<sp/>&quot;continuous&quot;<sp/>calibration<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>axis<sp/>number<sp/>(0<sp/>for<sp/>X,<sp/>1<sp/>for<sp/>Y,<sp/>2<sp/>for<sp/>Z)<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>0;<sp/>type<sp/>&lt;<sp/>m_variables.size();<sp/>++type)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables[type]<sp/>==<sp/>kTagWeight)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hist_type<sp/>=<sp/>int(type);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hist_type<sp/>&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m_beginMapped))<sp/>?<sp/>hist_type<sp/>-<sp/>m_mapped.size()<sp/>+<sp/>1<sp/>:<sp/>hist_type;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a5e4813f3dd8ffa75dc71174f263727ea" kindref="member">CalibrationDataMappedHistogramContainer::setMappedVariables</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>variables)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>(by<sp/>hand)<sp/>the<sp/>variables<sp/>that<sp/>will<sp/>be<sp/>mapped<sp/>onto<sp/>a<sp/>single<sp/>histogram<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>m_mapped<sp/>=<sp/>variables;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a6b3f7fe32978b072e4ae52742126a4c1" kindref="member">CalibrationDataMappedHistogramContainer::getMappedVariables</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1248"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>which<sp/>variables<sp/>get<sp/>mapped<sp/>onto<sp/>a<sp/>single<sp/>histogram<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_mapped;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1ab3e324311f9e498814c2ee618fd2f530" kindref="member">CalibrationDataMappedHistogramContainer::addBin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bin&amp;<sp/>bin)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>bin<sp/>to<sp/>the<sp/>present<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>the<sp/>absence<sp/>of<sp/>a<sp/>-1<sp/>in<sp/>the<sp/>return<sp/>value:<sp/>this<sp/>is<sp/>because<sp/>ROOT&apos;s<sp/>histogram<sp/>axes<sp/>start<sp/>counting<sp/>from<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>m_bins.push_back(bin);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bins.size();</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a4649c15211b1155ef749cf5dc5b83b07" kindref="member">CalibrationDataMappedHistogramContainer::getNMappedBins</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1268"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>mapped<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>the<sp/>absence<sp/>of<sp/>a<sp/>-1<sp/>in<sp/>the<sp/>return<sp/>value:<sp/>this<sp/>is<sp/>because<sp/>ROOT&apos;s<sp/>histogram<sp/>axes<sp/>start<sp/>counting<sp/>from<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bins.size();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">Int_t</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">CalibrationDataMappedHistogramContainer::findMappedBin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1278"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mapped<sp/>bin<sp/>corresponding<sp/>to<sp/>the<sp/>variables<sp/>used<sp/>for<sp/>the<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bins[m_lastBin].contains(x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lastBin<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>quickly<sp/>whether<sp/>the<sp/>last<sp/>bin<sp/>(cached)<sp/>matches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>the<sp/>whole<sp/>array<sp/>for<sp/>a<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>m_bins.size();<sp/>++bin)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_bins[bin].contains(x))<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_lastBin<sp/>=<sp/>bin;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lastBin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataMappedHistogramContainer::findMappedBin():<sp/>unable<sp/>to<sp/>find<sp/>bin<sp/>for<sp/>mapping<sp/>variables:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>m_mapped.size();<sp/>++d)<sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x[d];</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>means<sp/>invalid..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal">Int_t</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">CalibrationDataMappedHistogramContainer::findBin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1299"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>bin<sp/>corresponding<sp/>to<sp/>the<sp/>computed<sp/>variables<sp/>(the<sp/>computation<sp/>is<sp/>assumed<sp/>to<sp/>have<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>taken<sp/>place<sp/>and<sp/>resulted<sp/>in<sp/>the<sp/>m_vars<sp/>array<sp/>having<sp/>been<sp/>filled<sp/>appropriately)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>Int_t<sp/>mapped[3];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hist<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>Int_t<sp/>ndim<sp/>=<sp/>hist-&gt;GetDimension();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>the<sp/>mapped<sp/>variables<sp/>onto<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>derive<sp/>from<sp/>TH1<sp/>this<sp/>need<sp/>never<sp/>be<sp/>more<sp/>than<sp/>3<sp/>elements<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>ndim;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>m_beginMapped)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mapped[dim]<sp/>=<sp/>findMappedBin(&amp;(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[dim])))<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hist-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hist-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hist-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapped[dim]<sp/>=<sp/>axis-&gt;FindFixBin((dim<sp/>&lt;<sp/>m_beginMapped)<sp/>?<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[dim]<sp/>:<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>[dim+m_mapped.size()-1]);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hist-&gt;GetBin(mapped[0],<sp/>mapped[1],<sp/>mapped[2]);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">std::vector&lt;double&gt;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><ref refid="d3/d0f/classAnalysis_1_1CalibrationDataMappedHistogramContainer_1a3751647ec41f3454062fae0523ebe61c" kindref="member">CalibrationDataMappedHistogramContainer::getBinBoundaries</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1327"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>bin<sp/>boundaries<sp/>for<sp/>the<sp/>specified<sp/>variable<sp/>type<sp/>(which<sp/>should<sp/>be<sp/>a<sp/>CalibrationParametrization<sp/>enum).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>empty<sp/>vector<sp/>will<sp/>be<sp/>returned<sp/>if<sp/>the<sp/>specified<sp/>variable<sp/>is<sp/>not<sp/>actually<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>variable<sp/>types<sp/>have<sp/>been<sp/>computed<sp/>at<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables.size()<sp/>==<sp/>0)<sp/>computeVariableTypes();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>cached<sp/>information<sp/>if<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>std::map&lt;unsigned<sp/>int,<sp/>std::vector&lt;double&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>.find(vartype);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>variable<sp/>type<sp/>is<sp/>actually<sp/>being<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>boundaries;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>m_variables.size();<sp/>++v)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_variables[v]<sp/>==<sp/>vartype)<sp/>var<sp/>=<sp/>(int)<sp/>v;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaries;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>appropriate<sp/>histogram<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hobj<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var<sp/>&gt;=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(m_beginMapped)<sp/>&amp;&amp;<sp/>var<sp/>&lt;<sp/>int(m_beginMapped<sp/>+<sp/>m_mapped.size()))<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case<sp/>of<sp/>a<sp/>mapped<sp/>variable.<sp/>In<sp/>this<sp/>case,<sp/>test<sp/>all<sp/>Bins<sp/>for<sp/>their<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mapped<sp/>=<sp/>var<sp/>-<sp/>m_beginMapped;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>0;<sp/>bin<sp/>&lt;<sp/>m_bins.size();<sp/>++bin)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>binBoundaries[2];</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binBoundaries[0]<sp/>=<sp/>m_bins[bin].getLowerBound(mapped);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binBoundaries[1]<sp/>=<sp/>m_bins[bin].getUpperBound(mapped);<sp/></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>bin<sp/>boundaries,<sp/>if<sp/>not<sp/>already<sp/>present<sp/>(the<sp/>test<sp/>is<sp/>whether<sp/>the<sp/>relative<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>smaller<sp/>than<sp/>1e-8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundaries.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>boundaries.push_back(binBoundaries[0]);<sp/>boundaries.push_back(binBoundaries[1]);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib<sp/>=<sp/>0;<sp/>ib<sp/>&lt;<sp/>2;<sp/>++ib)<sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newvalue<sp/>=<sp/>binBoundaries[ib];</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;double&gt;::iterator<sp/>it<sp/>=<sp/>boundaries.begin();<sp/>it<sp/>!=<sp/>boundaries.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" kindref="member">isNearlyEqual</ref>(newvalue,<sp/>*it))<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consider<sp/>this<sp/>value<sp/>to<sp/>have<sp/>been<sp/>inserted<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newvalue<sp/>&lt;<sp/>*it)<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>interesting<sp/>case:<sp/>insert<sp/>the<sp/>new<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundaries.insert(it,<sp/>newvalue);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>case:<sp/>new<sp/>value<sp/>is<sp/>larger<sp/>than<sp/>any<sp/>of<sp/>the<sp/>values<sp/>in<sp/>the<sp/>array<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>done)<sp/>boundaries.push_back(newvalue);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>(var<sp/>&lt;<sp/>int(m_beginMapped))<sp/>?<sp/>var<sp/>:<sp/>var<sp/>+<sp/>1<sp/>-<sp/>m_mapped.size();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TAxis*<sp/>axis<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/>axis<sp/>=<sp/>hobj-&gt;GetXaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>axis<sp/>=<sp/>hobj-&gt;GetYaxis();<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>axis<sp/>=<sp/>hobj-&gt;GetZaxis();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>actual<sp/>bin<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TArrayD*<sp/>bins<sp/>=<sp/>axis-&gt;GetXbins();<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>bins-&gt;GetSize();</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>nb;<sp/>++b)<sp/>boundaries.push_back(bins-&gt;At(b));</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><ref refid="d5/d34/classAnalysis_1_1CalibrationDataHistogramContainer_1a09a19c468d86bf6f1fcb284b6561068d" kindref="member">m_binBoundaries</ref>[vartype]<sp/>=<sp/>boundaries;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boundaries;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bin<sp/>helper<sp/>class<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataMappedHistogramContainer::Bin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>small<sp/>nested<sp/>class<sp/>collecting<sp/>&apos;mapped&apos;<sp/>bin<sp/>information.<sp/>Its<sp/>purpose<sp/>is<sp/>mostly<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>store<sp/>binning<sp/>information<sp/>in<sp/>a<sp/>structured<sp/>way.<sp/>The<sp/>only<sp/>relevant<sp/>event-level<sp/>method<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>contains()<sp/>method.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="1410"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(CalibrationDataMappedHistogramContainer::Bin)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1412"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::Bin():</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>m_dimension(0),<sp/>m_low(0),<sp/>m_up(0)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor<sp/>(for<sp/>persistency)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::Bin(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>low,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>up):</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>m_dimension(dimension)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>constructor,<sp/>containing<sp/>a<sp/>full<sp/>specification<sp/>of<sp/>the<sp/>bin<sp/>boundaries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>m_up<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dimension];</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>m_low<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dimension];</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>dimension;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>m_up[dim]<sp/><sp/>=<sp/>up[dim];</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>m_low[dim]<sp/>=<sp/>low[dim];</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::Bin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataMappedHistogramContainer::Bin&amp;<sp/>other):</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>m_dimension(other.m_dimension)</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>m_up<sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[m_dimension];</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>m_low<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[m_dimension];</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>m_dimension;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>m_up[dim]<sp/><sp/>=<sp/>other.m_up[dim];</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>m_low[dim]<sp/>=<sp/>other.m_low[dim];</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::~Bin()</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m_up;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>m_low;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::contains(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1456"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>the<sp/>given<sp/>set<sp/>of<sp/>variables<sp/>is<sp/>within<sp/>the<sp/>bin<sp/>boundaries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>m_dimension;<sp/>++dim)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[dim]<sp/>&lt;<sp/>m_low[dim]<sp/>||<sp/>x[dim]<sp/>&gt;<sp/>m_up[dim])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal">CalibrationDataMappedHistogramContainer::Bin::getUpperBound(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1467"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>upper<sp/>bound<sp/>for<sp/>the<sp/>specified<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_up[dim];</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aa56b871c03e58c06dd62ebf24c700c29" kindref="member">CalibrationDataMappedHistogramContainer::Bin::getLowerBound</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1475"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>lower<sp/>bound<sp/>for<sp/>the<sp/>specified<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_low[dim];</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataFunctionContainer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>CalibrationDataFunctionContainer<sp/>class<sp/>inherits<sp/>from<sp/>the<sp/>CalibrationDataContainer<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>abstract<sp/>class.<sp/>It<sp/>covers<sp/>the<sp/>cases<sp/>where<sp/>the<sp/>relevant<sp/>information<sp/>is<sp/>presented<sp/>in<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parametrised<sp/>form.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer" kindref="compound">CalibrationDataFunctionContainer</ref>)</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1493"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal">CalibrationDataFunctionContainer::CalibrationDataFunctionContainer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>:</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer" kindref="compound">CalibrationDataContainer</ref>(name),<sp/>m_objStatistics(0)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>validity<sp/>bounds<sp/>to<sp/>reflect<sp/>&apos;no<sp/>bounds&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>m_lowerBounds.clear();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>m_lowerBounds.resize(maxParameters,<sp/>-std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>m_lowerBounds[kPt]<sp/>=<sp/>m_lowerBounds[kAbsEta]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/>m_upperBounds.clear();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/>m_upperBounds.resize(maxParameters,<sp/>std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>validity<sp/>bounds<sp/>associated<sp/>with<sp/>extrapolation<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(this<sp/>should<sp/>anyway<sp/>not<sp/>be<sp/>relevant<sp/>for<sp/>function<sp/>containers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated.clear();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated.resize(maxParameters,<sp/>-std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>m_lowerBoundsExtrapolated[kPt]<sp/>=<sp/>m_lowerBoundsExtrapolated[kAbsEta]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>m_upperBoundsExtrapolated.clear();</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>m_upperBoundsExtrapolated.resize(maxParameters,<sp/>std::numeric_limits&lt;double&gt;::max());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">CalibrationDataFunctionContainer::~CalibrationDataFunctionContainer()</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal">CalibrationDataFunctionContainer::computeVariableTypes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1523"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>variable<sp/>types<sp/>are<sp/>to<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>only<sp/>once<sp/>per<sp/>calibration<sp/>object,<sp/>as<sp/>the<sp/>results<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cached<sp/>(even<sp/>if<sp/>not<sp/>persistified).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>should<sp/>normally<sp/>only<sp/>be<sp/>used<sp/>internally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>std::string<sp/>title(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>-&gt;GetTitle());</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>std::string::size_type<sp/>pos<sp/>=<sp/>title.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>pos<sp/>!=<sp/>title.size())<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>title<sp/>=<sp/>title.substr(pos+1);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>title.find(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>var<sp/>=<sp/>title.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vartype<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a3358b4b7f40e2c838a0e69d97fcdbb46" kindref="member">typeFromString</ref>(var);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vartype<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>flag<sp/>the<sp/>issue<sp/>but<sp/>otherwise<sp/>take<sp/>no<sp/>action<sp/>(assume<sp/>non-argument<sp/>use<sp/>of<sp/>a<sp/>semicolon)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>CalibrationDataFunctionContainer::computeVariableTypes():<sp/>cannot<sp/>construct<sp/>variable<sp/>type<sp/>from<sp/>name<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>var<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_variables.push_back((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)vartype);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>After<sp/>doing<sp/>this,<sp/>we<sp/>should<sp/>always<sp/>have<sp/>a<sp/>non-null<sp/>vector!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/>assert(m_variables.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a6f057dc39206cb028a3c41536c281a36" kindref="member">CalibrationDataFunctionContainer::getResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result,<sp/>TObject*<sp/>obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>extrapolate<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1557"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>central<sp/>value<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.<sp/>There<sp/>are<sp/>cases<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>may<sp/>be<sp/>useful<sp/>to<sp/>provide<sp/>an<sp/>alternative<sp/>parametrisation<sp/>rather<sp/>than<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>one;<sp/>in<sp/>such<sp/>cases<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>provide<sp/>a<sp/>pointer<sp/>to<sp/>this<sp/>alternative<sp/>parametrisation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>results<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>obj<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>TF1*<sp/>func<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TF1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>func)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>func-&gt;EvalPar(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>general<sp/>uncertainty<sp/>retrieval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a830700dc8e3483dde05c27a75821e895" kindref="member">CalibrationDataFunctionContainer::getUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>unc,</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UncertaintyResult&amp;<sp/>result,<sp/>TObject*<sp/>obj)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1586"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>uncertainties<sp/>returned<sp/>will<sp/>be<sp/>symmetrised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyword<sp/>indicating<sp/>requested<sp/>source<sp/>of<sp/>uncertainty.<sp/>This<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correspond<sp/>to<sp/>one<sp/>of<sp/>the<sp/>parametrisations<sp/>added<sp/>explicitly<sp/>as<sp/>a<sp/>systematic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncertainty<sp/>or<sp/>the<sp/>keyword<sp/>&quot;statistics&quot;<sp/>(statistical<sp/>uncertainties<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessed<sp/>differently,<sp/>see<sp/>method<sp/>getStatUncertainty()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>obj:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>alternative<sp/>or<sp/>cached<sp/>parametrisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>treat<sp/>statistical<sp/>uncertainties<sp/>separately<sp/>(they<sp/>are<sp/>stored<sp/>with<sp/>the<sp/>actual<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>CalibrationStatus<sp/>code<sp/>=<sp/><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a753975bdcb35c055ee9a60e2e0a2b30c" kindref="member">getStatUncertainty</ref>(x,<sp/>res);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>Analysis::kError)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>result.first<sp/>=<sp/><sp/><sp/>res;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>result.second<sp/>=<sp/>-res;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!obj)<sp/>obj<sp/>=<sp/>GetValue(unc.c_str());</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>TF1*<sp/>func<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TF1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(obj);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>func)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&quot;first&quot;<sp/>and<sp/>&quot;second&quot;<sp/>entries<sp/>are<sp/>filled<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;positive&quot;<sp/>and<sp/>&quot;negative&quot;<sp/>uncertainties,<sp/>respectively.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>no<sp/>&quot;negative&quot;<sp/>uncertainties<sp/>implemented<sp/>as<sp/>yet!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>result.first<sp/>=<sp/>func-&gt;EvalPar(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>result.second<sp/>=<sp/>-result.first;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">CalibrationStatus</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><ref refid="d2/d7b/classAnalysis_1_1CalibrationDataFunctionContainer_1a753975bdcb35c055ee9a60e2e0a2b30c" kindref="member">CalibrationDataFunctionContainer::getStatUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataVariables&amp;<sp/>x,</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1627"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>statistical<sp/>uncertainty<sp/>for<sp/>the<sp/>given<sp/>input<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>model<sp/>that<sp/>is<sp/>assumed<sp/>here<sp/>is<sp/>that<sp/>statistical<sp/>uncertainties<sp/>follow<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>fit<sp/>of<sp/>the<sp/>function<sp/>to<sp/>other<sp/>information,<sp/>and<sp/>that<sp/>the<sp/>parameter<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resulting<sp/>from<sp/>the<sp/>fit<sp/>are<sp/>stored<sp/>in<sp/>a<sp/>TMatrixDSym<sp/>object<sp/>identified<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keyword<sp/>&quot;statistics&quot;.<sp/>The<sp/>effect<sp/>of<sp/>a<sp/>change<sp/>of<sp/>fit<sp/>parameters<sp/>is<sp/>then<sp/>used<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluate<sp/>the<sp/>change<sp/>in<sp/>function<sp/>value<sp/>at<sp/>the<sp/>given<sp/>co-ordinates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>result:<sp/><sp/><sp/><sp/><sp/><sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>)<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref><sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>the<sp/>requested<sp/>objects<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>TF1*<sp/>func<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TF1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1aed6192590190fb87f0b51295bd8ac201" kindref="member" tooltip="(possibly looser) upper validity bounds for extrapolation">m_objResult</ref>);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;...<sp/>unable<sp/>to<sp/>retrieve<sp/>the<sp/>result&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_objStatistics)<sp/>m_objStatistics<sp/>=<sp/>GetValue(</highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>m_objStatistics-&gt;Dump();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>TMatrixTSym&lt;double&gt;*<sp/>cov<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TMatrixTSym&lt;double&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_objStatistics);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>cov)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;...<sp/>unable<sp/>to<sp/>retrieve<sp/>the<sp/>covariance<sp/>matrix&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Analysis::kError;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>relevant<sp/>kinematic<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>CalibrationStatus<sp/>status<sp/>=<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1a414996bd5623bb749b7a0fc8cfa04a37" kindref="member">computeVariables</ref>(x);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>a<sp/>large<sp/>value<sp/>for<sp/>&quot;eps&quot;:<sp/>this<sp/>multiplies<sp/>the<sp/>uncertainties<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>expected<sp/>to<sp/>be<sp/>associated<sp/>with<sp/>the<sp/>parameters.<sp/>Choosing<sp/>a<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>expresses<sp/>the<sp/>fact<sp/>that<sp/>we<sp/>are<sp/>not<sp/>primarily<sp/>interested<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parabolic<sp/>behaviour<sp/>at<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>Double_t<sp/>eps<sp/>=<sp/>1.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test:<sp/>set<sp/>to<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Double_t<sp/>eps<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npar<sp/>=<sp/>func-&gt;GetNpar();</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(npar<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>gradients(npar,1);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;parametricVariance:<sp/>gradients:&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ipar<sp/>=<sp/>0;<sp/>ipar<sp/>&lt;<sp/>npar;<sp/>++ipar)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>gradients(ipar,0)<sp/>=<sp/>func-&gt;GradientPar(ipar,<sp/><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1acc0650d8f7d63985d6c0f38745329da6" kindref="member" tooltip="don&amp;#39;t persistify">m_vars</ref>,<sp/>eps);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>gradients(ipar,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>carry<sp/>out<sp/>the<sp/>matrix<sp/>multiplication</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>gradientsTransposed(TMatrixT&lt;double&gt;::kTransposed,<sp/>gradients);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;parametricVariance:<sp/>transposed<sp/>gradients:&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>ipar<sp/>=<sp/>0;<sp/>ipar<sp/>&lt;<sp/>npar;<sp/>++ipar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>gradients(0,ipar);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>tmp1(*cov,<sp/>TMatrixT&lt;double&gt;::kMult,<sp/>gradients);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;parametricVariance:<sp/>cov<sp/>*<sp/>gradients:&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>ipar<sp/>=<sp/>0;<sp/>ipar<sp/>&lt;<sp/>npar;<sp/>++ipar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>tmp1(ipar,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>tmp2(gradientsTransposed,<sp/>TMatrixT&lt;double&gt;::kMult,<sp/>tmp1);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/>TMath::Sqrt(tmp2(0,0));</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><ref refid="d5/d7b/classAnalysis_1_1CalibrationDataContainer_1abaff5bd7e1abbc59645fe8eb27813f93" kindref="member">CalibrationDataContainer::isNearlyEqual</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>utility<sp/>function<sp/>testing<sp/>whether<sp/>two<sp/>double<sp/>values<sp/>are<sp/>sufficiently<sp/>similar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>test<sp/>carried<sp/>out<sp/>is<sp/>on<sp/>their<sp/>relative<sp/>difference,<sp/>which<sp/>should<sp/>be<sp/>within<sp/>a<sp/>given<sp/>tolerance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>1.e-8;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>a<sp/>-<sp/>b;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ref<sp/>=<sp/>std::fabs(a)<sp/>+<sp/>std::fabs(b);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ref<sp/>==<sp/>0<sp/>||<sp/>std::fabs(diff)<sp/>&lt;<sp/>tolerance*ref);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataContainer.cxx"/>
  </compounddef>
</doxygen>
