<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d0b/ConstraintFit_8cxx" kind="file">
    <compoundname>ConstraintFit.cxx</compoundname>
    <includes refid="d5/d20/PhotonxAODHelpers_8h" local="yes">xAODEgamma/PhotonxAODHelpers.h</includes>
    <includes refid="d2/d15/TrackParticle_8h" local="yes">xAODTracking/TrackParticle.h</includes>
    <includes refid="d3/d8d/ConstraintFit_8h" local="yes">ZMassConstraint/ConstraintFit.h</includes>
    <includes refid="da/d04/ConstraintFitInput_8h" local="yes">ZMassConstraint/ConstraintFitInput.h</includes>
    <includes refid="de/d09/ConstraintFitOutput_8h" local="yes">ZMassConstraint/ConstraintFitOutput.h</includes>
    <includes refid="d8/df3/IEgammaCalibrationAndSmearingTool_8h" local="yes">ElectronPhotonFourMomentumCorrection/IEgammaCalibrationAndSmearingTool.h</includes>
    <includes refid="d8/d14/MuonCalibrationAndSmearingTool_8h" local="yes">MuonMomentumCorrections/MuonCalibrationAndSmearingTool.h</includes>
    <incdepgraph>
      <node id="489364">
        <label>list</label>
      </node>
      <node id="489373">
        <label>AthContainers/tools/DVL_algorithms.icc</label>
        <link refid="df/daa/DVL__algorithms_8icc"/>
        <childnode refid="489358" relation="include">
        </childnode>
        <childnode refid="489365" relation="include">
        </childnode>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489354" relation="include">
        </childnode>
        <childnode refid="489296" relation="include">
        </childnode>
      </node>
      <node id="489358">
        <label>AthContainers/tools/DVLNoBase.h</label>
        <link refid="d7/d92/DVLNoBase_8h"/>
      </node>
      <node id="489328">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="489472">
        <label>TProfile2D.h</label>
      </node>
      <node id="489380">
        <label>AthContainers/tools/DVLDataBucket.h</label>
        <link refid="d4/d16/DVLDataBucket_8h"/>
        <childnode refid="489381" relation="include">
        </childnode>
        <childnode refid="489359" relation="include">
        </childnode>
        <childnode refid="489303" relation="include">
        </childnode>
        <childnode refid="489382" relation="include">
        </childnode>
      </node>
      <node id="489268">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ZMassConstraint/Root/ConstraintFit.cxx</label>
        <link refid="ConstraintFit.cxx"/>
        <childnode refid="489269" relation="include">
        </childnode>
        <childnode refid="489280" relation="include">
        </childnode>
        <childnode refid="489400" relation="include">
        </childnode>
        <childnode refid="489440" relation="include">
        </childnode>
        <childnode refid="489441" relation="include">
        </childnode>
        <childnode refid="489459" relation="include">
        </childnode>
        <childnode refid="489469" relation="include">
        </childnode>
      </node>
      <node id="489345">
        <label>CxxUtils/unordered_map.h</label>
        <link refid="db/daa/unordered__map_8h"/>
        <childnode refid="489295" relation="include">
        </childnode>
        <childnode refid="489297" relation="include">
        </childnode>
        <childnode refid="489303" relation="include">
        </childnode>
        <childnode refid="489304" relation="include">
        </childnode>
      </node>
      <node id="489403">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489402" relation="include">
        </childnode>
        <childnode refid="489404" relation="include">
        </childnode>
        <childnode refid="489405" relation="include">
        </childnode>
      </node>
      <node id="489347">
        <label>AthContainersInterfaces/IAuxStore.h</label>
        <link refid="d6/d3e/IAuxStore_8h"/>
        <childnode refid="489312" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489348" relation="include">
        </childnode>
        <childnode refid="489313" relation="include">
        </childnode>
      </node>
      <node id="489346">
        <label>AthContainers/AuxTypeRegistry.icc</label>
        <link refid="d8/df3/AuxTypeRegistry_8icc"/>
      </node>
      <node id="489393">
        <label>EventPrimitives/EventPrimitives.h</label>
        <link refid="d1/d54/EventPrimitives_8h_source"/>
        <childnode refid="489275" relation="include">
        </childnode>
        <childnode refid="489394" relation="include">
        </childnode>
        <childnode refid="489395" relation="include">
        </childnode>
      </node>
      <node id="489302">
        <label>boost/type_traits/remove_const.hpp</label>
      </node>
      <node id="489304">
        <label>functional</label>
      </node>
      <node id="489463">
        <label>PATInterfaces/ISystematicsTool.h</label>
        <link refid="d6/db3/ISystematicsTool_8h_source"/>
        <childnode refid="489403" relation="include">
        </childnode>
        <childnode refid="489464" relation="include">
        </childnode>
        <childnode refid="489465" relation="include">
        </childnode>
        <childnode refid="489467" relation="include">
        </childnode>
      </node>
      <node id="489355">
        <label>boost/version.hpp</label>
      </node>
      <node id="489301">
        <label>limits</label>
      </node>
      <node id="489348">
        <label>SGTools/BaseInfo.h</label>
      </node>
      <node id="489326">
        <label>boost/thread/tss.hpp</label>
      </node>
      <node id="489405">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="489298">
        <label>iterator</label>
      </node>
      <node id="489469">
        <label>MuonMomentumCorrections/MuonCalibrationAndSmearingTool.h</label>
        <link refid="d8/d14/MuonCalibrationAndSmearingTool_8h_source"/>
        <childnode refid="489401" relation="include">
        </childnode>
        <childnode refid="489470" relation="include">
        </childnode>
        <childnode refid="489471" relation="include">
        </childnode>
        <childnode refid="489472" relation="include">
        </childnode>
        <childnode refid="489473" relation="include">
        </childnode>
        <childnode refid="489474" relation="include">
        </childnode>
        <childnode refid="489475" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489476" relation="include">
        </childnode>
        <childnode refid="489477" relation="include">
        </childnode>
      </node>
      <node id="489425">
        <label>xAODCaloEvent/versions/CaloClusterBadChannelData_v1.h</label>
        <link refid="d5/d3a/CaloClusterBadChannelData__v1_8h_source"/>
        <childnode refid="489422" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
      </node>
      <node id="489314">
        <label>AthContainersInterfaces/AuxDataOption.h</label>
        <link refid="d1/dc5/AuxDataOption_8h"/>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489315" relation="include">
        </childnode>
      </node>
      <node id="489427">
        <label>CaloEvent/CaloRecoStatus.h</label>
      </node>
      <node id="489439">
        <label>CxxUtils/final.h</label>
        <link refid="da/d9b/final_8h"/>
      </node>
      <node id="489379">
        <label>SGTools/ClassName.h</label>
      </node>
      <node id="489410">
        <label>xAODMuon/Muon.h</label>
        <link refid="d2/dfd/Muon_8h_source"/>
        <childnode refid="489411" relation="include">
        </childnode>
      </node>
      <node id="489385">
        <label>AthContainers/DataVector.icc</label>
        <link refid="da/de6/DataVector_8icc"/>
        <childnode refid="489386" relation="include">
        </childnode>
        <childnode refid="489353" relation="include">
        </childnode>
        <childnode refid="489301" relation="include">
        </childnode>
        <childnode refid="489304" relation="include">
        </childnode>
        <childnode refid="489387" relation="include">
        </childnode>
      </node>
      <node id="489292">
        <label>AthContainers/exceptions.h</label>
        <link refid="d4/d03/exceptions_8h"/>
        <childnode refid="489293" relation="include">
        </childnode>
        <childnode refid="489305" relation="include">
        </childnode>
        <childnode refid="489306" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
      </node>
      <node id="489316">
        <label>AthContainers/tools/AuxDataTraits.h</label>
        <link refid="d3/d5a/AuxDataTraits_8h"/>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
      </node>
      <node id="489283">
        <label>stdint.h</label>
      </node>
      <node id="489365">
        <label>AthContainers/tools/DVLCast.h</label>
        <link refid="df/d5c/DVLCast_8h"/>
        <childnode refid="489301" relation="include">
        </childnode>
        <childnode refid="489366" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
      </node>
      <node id="489333">
        <label>AthContainersInterfaces/IAuxTypeVectorFactory.h</label>
        <link refid="d4/d2c/IAuxTypeVectorFactory_8h"/>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
      </node>
      <node id="489309">
        <label>AthContainers/IndexTrackingPolicy.h</label>
        <link refid="d0/da5/IndexTrackingPolicy_8h"/>
      </node>
      <node id="489276">
        <label>Eigen/Geometry</label>
      </node>
      <node id="489288">
        <label>RVersion.h</label>
      </node>
      <node id="489461">
        <label>xAODEgamma/EgammaFwd.h</label>
        <link refid="dc/d0f/EgammaFwd_8h_source"/>
      </node>
      <node id="489294">
        <label>CxxUtils/unordered_set.h</label>
        <link refid="df/d26/unordered__set_8h"/>
        <childnode refid="489295" relation="include">
        </childnode>
        <childnode refid="489303" relation="include">
        </childnode>
        <childnode refid="489304" relation="include">
        </childnode>
      </node>
      <node id="489440">
        <label>ZMassConstraint/ConstraintFitInput.h</label>
        <link refid="da/d04/ConstraintFitInput_8h_source"/>
        <childnode refid="489393" relation="include">
        </childnode>
        <childnode refid="489389" relation="include">
        </childnode>
      </node>
      <node id="489428">
        <label>xAODCaloEvent/versions/CaloClusterContainer_v1.h</label>
        <link refid="d8/dda/CaloClusterContainer__v1_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489418" relation="include">
        </childnode>
        <childnode refid="489421" relation="include">
        </childnode>
      </node>
      <node id="489300">
        <label>cmath</label>
      </node>
      <node id="489352">
        <label>cassert</label>
      </node>
      <node id="489356">
        <label>boost/mpl/if.hpp</label>
      </node>
      <node id="489375">
        <label>boost/static_assert.hpp</label>
      </node>
      <node id="489430">
        <label>xAODMuon/MuonSegment.h</label>
        <link refid="de/d5b/MuonSegment_8h_source"/>
        <childnode refid="489431" relation="include">
        </childnode>
      </node>
      <node id="489306">
        <label>stdexcept</label>
      </node>
      <node id="489406">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489402" relation="include">
        </childnode>
        <childnode refid="489407" relation="include">
        </childnode>
      </node>
      <node id="489329">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="489394">
        <label>Eigen/Core</label>
      </node>
      <node id="489362">
        <label>boost/type_traits/is_pointer.hpp</label>
      </node>
      <node id="489396">
        <label>xAODTracking/VertexContainerFwd.h</label>
        <link refid="d0/dc4/VertexContainerFwd_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489271" relation="include">
        </childnode>
      </node>
      <node id="489417">
        <label>xAODTracking/TrackParticleContainerFwd.h</label>
        <link refid="de/dea/TrackParticleContainerFwd_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489418" relation="include">
        </childnode>
        <childnode refid="489272" relation="include">
        </childnode>
      </node>
      <node id="489370">
        <label>boost/iterator/iterator_adaptor.hpp</label>
      </node>
      <node id="489389">
        <label>TLorentzVector.h</label>
      </node>
      <node id="489270">
        <label>xAODEgamma/PhotonFwd.h</label>
        <link refid="dd/d2c/PhotonFwd_8h_source"/>
      </node>
      <node id="489402">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="489422">
        <label>CaloGeoHelpers/CaloSampling.h</label>
        <link refid="d7/d85/CaloSampling_8h_source"/>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489423" relation="include">
        </childnode>
      </node>
      <node id="489285">
        <label>string</label>
      </node>
      <node id="489311">
        <label>AthContainers/AuxVectorData.h</label>
        <link refid="d9/df2/AuxVectorData_8h"/>
        <childnode refid="489293" relation="include">
        </childnode>
        <childnode refid="489312" relation="include">
        </childnode>
        <childnode refid="489314" relation="include">
        </childnode>
        <childnode refid="489316" relation="include">
        </childnode>
        <childnode refid="489317" relation="include">
        </childnode>
        <childnode refid="489319" relation="include">
        </childnode>
        <childnode refid="489320" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489297" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
        <childnode refid="489322" relation="include">
        </childnode>
        <childnode refid="489323" relation="include">
        </childnode>
        <childnode refid="489324" relation="include">
        </childnode>
        <childnode refid="489330" relation="include">
        </childnode>
      </node>
      <node id="489332">
        <label>AthContainersInterfaces/IAuxTypeVector.h</label>
        <link refid="d8/d0e/IAuxTypeVector_8h"/>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
      </node>
      <node id="489281">
        <label>versions/TrackParticle_v1.h</label>
        <link refid="d2/d7f/TrackParticle__v1_8h_source"/>
        <childnode refid="489282" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489392" relation="include">
        </childnode>
        <childnode refid="489396" relation="include">
        </childnode>
        <childnode refid="489397" relation="include">
        </childnode>
        <childnode refid="489398" relation="include">
        </childnode>
      </node>
      <node id="489322">
        <label>AthContainers/tools/likely.h</label>
        <link refid="d6/dd6/likely_8h"/>
      </node>
      <node id="489434">
        <label>xAODMuon/versions/MuonSegmentContainer_v1.h</label>
        <link refid="dd/dcd/MuonSegmentContainer__v1_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489431" relation="include">
        </childnode>
      </node>
      <node id="489435">
        <label>xAODEgamma/Electron.h</label>
        <link refid="dc/db4/Electron_8h_source"/>
        <childnode refid="489436" relation="include">
        </childnode>
      </node>
      <node id="489367">
        <label>AthContainers/tools/DVLIterator.h</label>
        <link refid="d3/dc7/DVLIterator_8h_source"/>
        <childnode refid="489308" relation="include">
        </childnode>
        <childnode refid="489365" relation="include">
        </childnode>
        <childnode refid="489368" relation="include">
        </childnode>
        <childnode refid="489370" relation="include">
        </childnode>
        <childnode refid="489355" relation="include">
        </childnode>
        <childnode refid="489298" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
      </node>
      <node id="489381">
        <label>SGTools/DataBucket.h</label>
      </node>
      <node id="489476">
        <label>map</label>
      </node>
      <node id="489413">
        <label>xAODPrimitives/IsolationType.h</label>
        <link refid="d2/d36/IsolationType_8h_source"/>
      </node>
      <node id="489382">
        <label>AthContainers/tools/DVLDataBucket.icc</label>
        <link refid="d3/d21/DVLDataBucket_8icc"/>
        <childnode refid="489383" relation="include">
        </childnode>
      </node>
      <node id="489412">
        <label>xAODPrimitives/IsolationCorrection.h</label>
        <link refid="d3/de5/xAODPrimitives_2xAODPrimitives_2IsolationCorrection_8h_source"/>
        <childnode refid="489282" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
      </node>
      <node id="489383">
        <label>SGTools/IRegisterTransient.h</label>
      </node>
      <node id="489289">
        <label>RootMetaSelection.h</label>
      </node>
      <node id="489342">
        <label>AthContainers/tools/AuxTypeVector.icc</label>
        <link refid="d5/d84/AuxTypeVector_8icc"/>
      </node>
      <node id="489446">
        <label>VxVertex/VxTrackAtVertex.h</label>
      </node>
      <node id="489372">
        <label>AthContainers/tools/DVL_algorithms.h</label>
        <link refid="d0/d7a/DVL__algorithms_8h"/>
        <childnode refid="489367" relation="include">
        </childnode>
        <childnode refid="489298" relation="include">
        </childnode>
        <childnode refid="489296" relation="include">
        </childnode>
        <childnode refid="489373" relation="include">
        </childnode>
      </node>
      <node id="489475">
        <label>fstream</label>
      </node>
      <node id="489323">
        <label>AthContainers/tools/assume.h</label>
        <link refid="d2/d20/assume_8h"/>
      </node>
      <node id="489431">
        <label>versions/MuonSegment_v1.h</label>
        <link refid="df/d0d/MuonSegment__v1_8h_source"/>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489432" relation="include">
        </childnode>
        <childnode refid="489433" relation="include">
        </childnode>
      </node>
      <node id="489339">
        <label>AthContainers/PackedContainer.icc</label>
        <link refid="d1/d0c/PackedContainer_8icc"/>
      </node>
      <node id="489455">
        <label>xAODTracking/VertexContainer.h</label>
        <link refid="d6/dd8/VertexContainer_8h_source"/>
        <childnode refid="489444" relation="include">
        </childnode>
        <childnode refid="489456" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489442">
        <label>xAODEgamma/Photon.h</label>
        <link refid="d4/df7/Photon_8h_source"/>
        <childnode refid="489443" relation="include">
        </childnode>
      </node>
      <node id="489368">
        <label>AthContainers/tools/ElementProxy.h</label>
        <link refid="db/d26/ElementProxy_8h"/>
        <childnode refid="489308" relation="include">
        </childnode>
        <childnode refid="489287" relation="include">
        </childnode>
        <childnode refid="489303" relation="include">
        </childnode>
        <childnode refid="489369" relation="include">
        </childnode>
      </node>
      <node id="489407">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="489350">
        <label>AthContainersInterfaces/IAuxElement.h</label>
        <link refid="dd/d7a/IAuxElement_8h"/>
      </node>
      <node id="489287">
        <label>AthLinks/tools/selection_ns.h</label>
        <link refid="d3/dec/selection__ns_8h"/>
        <childnode refid="489288" relation="include">
        </childnode>
        <childnode refid="489289" relation="include">
        </childnode>
      </node>
      <node id="489320">
        <label>AthenaKernel/IThinningSvc.h</label>
      </node>
      <node id="489327">
        <label>boost/atomic.hpp</label>
      </node>
      <node id="489432">
        <label>MuonIdHelpers/MuonStationIndex.h</label>
        <link refid="d5/d3f/MuonStationIndex_8h_source"/>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
      </node>
      <node id="489272">
        <label>xAODTracking/TrackParticleFwd.h</label>
        <link refid="d1/dc4/TrackParticleFwd_8h_source"/>
      </node>
      <node id="489366">
        <label>limits.h</label>
      </node>
      <node id="489429">
        <label>xAODMuon/MuonSegmentContainer.h</label>
        <link refid="d5/d26/MuonSegmentContainer_8h_source"/>
        <childnode refid="489430" relation="include">
        </childnode>
        <childnode refid="489434" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489360">
        <label>AthContainers/tools/ClassID.h</label>
        <link refid="de/de2/ClassID_8h"/>
        <childnode refid="489361" relation="include">
        </childnode>
      </node>
      <node id="489411">
        <label>versions/Muon_v1.h</label>
        <link refid="da/dde/Muon__v1_8h_source"/>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489412" relation="include">
        </childnode>
        <childnode refid="489413" relation="include">
        </childnode>
        <childnode refid="489414" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489392" relation="include">
        </childnode>
        <childnode refid="489415" relation="include">
        </childnode>
        <childnode refid="489419" relation="include">
        </childnode>
        <childnode refid="489429" relation="include">
        </childnode>
        <childnode refid="489282" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
        <childnode refid="489291" relation="include">
        </childnode>
      </node>
      <node id="489456">
        <label>xAODTracking/versions/VertexContainer_v1.h</label>
        <link refid="d2/dda/VertexContainer__v1_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489445" relation="include">
        </childnode>
      </node>
      <node id="489337">
        <label>AthContainers/PackedParameters.h</label>
        <link refid="d4/d43/PackedParameters_8h"/>
        <childnode refid="489314" relation="include">
        </childnode>
        <childnode refid="489301" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489338" relation="include">
        </childnode>
      </node>
      <node id="489467">
        <label>PATInterfaces/SystematicSet.h</label>
        <link refid="d4/db8/SystematicSet_8h_source"/>
        <childnode refid="489466" relation="include">
        </childnode>
        <childnode refid="489278" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489304" relation="include">
        </childnode>
        <childnode refid="489464" relation="include">
        </childnode>
        <childnode refid="489465" relation="include">
        </childnode>
      </node>
      <node id="489458">
        <label>GaudiKernel/ToolHandle.h</label>
      </node>
      <node id="489293">
        <label>AthContainersInterfaces/AuxTypes.h</label>
        <link refid="d1/dea/AuxTypes_8h"/>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489294" relation="include">
        </childnode>
      </node>
      <node id="489286">
        <label>AthLinks/ElementLinkBase.h</label>
        <link refid="d0/d16/ElementLinkBase_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
      </node>
      <node id="489465">
        <label>PATInterfaces/SystematicVariation.h</label>
        <link refid="d1/def/SystematicVariation_8h_source"/>
        <childnode refid="489466" relation="include">
        </childnode>
        <childnode refid="489391" relation="include">
        </childnode>
        <childnode refid="489278" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
      </node>
      <node id="489395">
        <label>Eigen/Dense</label>
      </node>
      <node id="489295">
        <label>CxxUtils/hashtable.h</label>
        <link refid="dd/d16/hashtable_8h"/>
        <childnode refid="489296" relation="include">
        </childnode>
        <childnode refid="489297" relation="include">
        </childnode>
        <childnode refid="489298" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
        <childnode refid="489300" relation="include">
        </childnode>
        <childnode refid="489301" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489302" relation="include">
        </childnode>
      </node>
      <node id="489353">
        <label>AthContainers/tools/ATHCONTAINERS_ASSERT.h</label>
        <link refid="de/d6b/ATHCONTAINERS__ASSERT_8h"/>
        <childnode refid="489352" relation="include">
        </childnode>
      </node>
      <node id="489388">
        <label>xAODBase/IParticle.h</label>
        <link refid="d5/dac/IParticle_8h_source"/>
        <childnode refid="489389" relation="include">
        </childnode>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489390" relation="include">
        </childnode>
        <childnode refid="489348" relation="include">
        </childnode>
      </node>
      <node id="489390">
        <label>ObjectType.h</label>
        <link refid="d8/d04/ObjectType_8h_source"/>
        <childnode refid="489391" relation="include">
        </childnode>
      </node>
      <node id="489468">
        <label>PATCore/PATCoreEnums.h</label>
        <link refid="d0/dcb/PATCoreEnums_8h_source"/>
      </node>
      <node id="489421">
        <label>xAODCaloEvent/versions/CaloCluster_v1.h</label>
        <link refid="dc/d4b/CaloCluster__v1_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489282" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489422" relation="include">
        </childnode>
        <childnode refid="489424" relation="include">
        </childnode>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489426" relation="include">
        </childnode>
        <childnode refid="489427" relation="include">
        </childnode>
      </node>
      <node id="489462">
        <label>PATInterfaces/CorrectionCode.h</label>
        <link refid="d8/dab/CorrectionCode_8h_source"/>
      </node>
      <node id="489477">
        <label>MuonMomentumCorrections/IMuonCalibrationAndSmearingTool.h</label>
        <link refid="db/dc8/IMuonCalibrationAndSmearingTool_8h_source"/>
        <childnode refid="489403" relation="include">
        </childnode>
        <childnode refid="489410" relation="include">
        </childnode>
        <childnode refid="489462" relation="include">
        </childnode>
        <childnode refid="489463" relation="include">
        </childnode>
        <childnode refid="489464" relation="include">
        </childnode>
        <childnode refid="489478" relation="include">
        </childnode>
        <childnode refid="489467" relation="include">
        </childnode>
        <childnode refid="489465" relation="include">
        </childnode>
      </node>
      <node id="489369">
        <label>AthContainers/tools/ElementProxy.icc</label>
        <link refid="d6/d70/ElementProxy_8icc"/>
        <childnode refid="489365" relation="include">
        </childnode>
        <childnode refid="489353" relation="include">
        </childnode>
      </node>
      <node id="489436">
        <label>xAODEgamma/versions/Electron_v1.h</label>
        <link refid="df/d27/Electron__v1_8h_source"/>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489437" relation="include">
        </childnode>
        <childnode refid="489273" relation="include">
        </childnode>
        <childnode refid="489392" relation="include">
        </childnode>
        <childnode refid="489280" relation="include">
        </childnode>
        <childnode refid="489415" relation="include">
        </childnode>
        <childnode refid="489439" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
      </node>
      <node id="489307">
        <label>typeinfo</label>
      </node>
      <node id="489392">
        <label>xAODTracking/TrackingPrimitives.h</label>
        <link refid="d2/d4c/TrackingPrimitives_8h_source"/>
        <childnode refid="489393" relation="include">
        </childnode>
      </node>
      <node id="489351">
        <label>AthContainers/AuxElement.icc</label>
        <link refid="d2/d37/AuxElement_8icc"/>
        <childnode refid="489322" relation="include">
        </childnode>
        <childnode refid="489352" relation="include">
        </childnode>
      </node>
      <node id="489420">
        <label>xAODCaloEvent/CaloCluster.h</label>
        <link refid="db/d88/CaloCluster_8h_source"/>
        <childnode refid="489421" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489291">
        <label>AthContainers/DataVector.h</label>
        <link refid="d7/dd6/DataVector_8h"/>
        <childnode refid="489292" relation="include">
        </childnode>
        <childnode refid="489308" relation="include">
        </childnode>
        <childnode refid="489309" relation="include">
        </childnode>
        <childnode refid="489310" relation="include">
        </childnode>
        <childnode refid="489358" relation="include">
        </childnode>
        <childnode refid="489359" relation="include">
        </childnode>
        <childnode refid="489365" relation="include">
        </childnode>
        <childnode refid="489367" relation="include">
        </childnode>
        <childnode refid="489371" relation="include">
        </childnode>
        <childnode refid="489372" relation="include">
        </childnode>
        <childnode refid="489368" relation="include">
        </childnode>
        <childnode refid="489374" relation="include">
        </childnode>
        <childnode refid="489287" relation="include">
        </childnode>
        <childnode refid="489375" relation="include">
        </childnode>
        <childnode refid="489376" relation="include">
        </childnode>
        <childnode refid="489370" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489304" relation="include">
        </childnode>
        <childnode refid="489377" relation="include">
        </childnode>
        <childnode refid="489296" relation="include">
        </childnode>
        <childnode refid="489306" relation="include">
        </childnode>
        <childnode refid="489298" relation="include">
        </childnode>
        <childnode refid="489348" relation="include">
        </childnode>
        <childnode refid="489378" relation="include">
        </childnode>
        <childnode refid="489380" relation="include">
        </childnode>
        <childnode refid="489384" relation="include">
        </childnode>
        <childnode refid="489385" relation="include">
        </childnode>
      </node>
      <node id="489466">
        <label>PATInterfaces/Global.h</label>
        <link refid="dd/d0c/PATInterfaces_2PATInterfaces_2Global_8h_source"/>
      </node>
      <node id="489448">
        <label>xAODTracking/NeutralParticle.h</label>
        <link refid="d4/daa/NeutralParticle_8h_source"/>
        <childnode refid="489449" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489282">
        <label>bitset</label>
      </node>
      <node id="489338">
        <label>AthContainers/PackedParameters.icc</label>
        <link refid="db/d30/PackedParameters_8icc"/>
      </node>
      <node id="489290">
        <label>AthLinks/tools/TypeTools.h</label>
        <link refid="dd/db1/TypeTools_8h_source"/>
      </node>
      <node id="489319">
        <label>AthenaKernel/ILockable.h</label>
      </node>
      <node id="489318">
        <label>AthLinks/DataLinkBase.h</label>
        <link refid="db/da8/DataLinkBase_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
      </node>
      <node id="489445">
        <label>xAODTracking/versions/Vertex_v1.h</label>
        <link refid="d7/dcc/Vertex__v1_8h_source"/>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489393" relation="include">
        </childnode>
        <childnode refid="489274" relation="include">
        </childnode>
        <childnode refid="489446" relation="include">
        </childnode>
        <childnode refid="489392" relation="include">
        </childnode>
        <childnode refid="489417" relation="include">
        </childnode>
        <childnode refid="489447" relation="include">
        </childnode>
        <childnode refid="489390" relation="include">
        </childnode>
        <childnode refid="489454" relation="include">
        </childnode>
      </node>
      <node id="489315">
        <label>AthContainersInterfaces/AuxDataOption.icc</label>
        <link refid="db/d68/AuxDataOption_8icc"/>
      </node>
      <node id="489341">
        <label>boost/type_traits/is_arithmetic.hpp</label>
      </node>
      <node id="489474">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="489359">
        <label>AthContainers/tools/DVLInfo.h</label>
        <link refid="d3/d2e/DVLInfo_8h"/>
        <childnode refid="489360" relation="include">
        </childnode>
        <childnode refid="489310" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489302" relation="include">
        </childnode>
        <childnode refid="489362" relation="include">
        </childnode>
        <childnode refid="489340" relation="include">
        </childnode>
        <childnode refid="489363" relation="include">
        </childnode>
      </node>
      <node id="489313">
        <label>SGTools/CLASS_DEF.h</label>
      </node>
      <node id="489275">
        <label>unistd.h</label>
      </node>
      <node id="489378">
        <label>AthContainers/ClassName.h</label>
        <link refid="dd/d6b/AthContainers_2AthContainers_2ClassName_8h_source"/>
        <childnode refid="489379" relation="include">
        </childnode>
      </node>
      <node id="489331">
        <label>AthContainers/AuxTypeRegistry.h</label>
        <link refid="db/d7f/AuxTypeRegistry_8h"/>
        <childnode refid="489293" relation="include">
        </childnode>
        <childnode refid="489332" relation="include">
        </childnode>
        <childnode refid="489333" relation="include">
        </childnode>
        <childnode refid="489334" relation="include">
        </childnode>
        <childnode refid="489343" relation="include">
        </childnode>
        <childnode refid="489324" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489345" relation="include">
        </childnode>
        <childnode refid="489346" relation="include">
        </childnode>
      </node>
      <node id="489279">
        <label>vector</label>
      </node>
      <node id="489418">
        <label>xAODBase/IParticleContainer.h</label>
        <link refid="dd/d2d/IParticleContainer_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489313" relation="include">
        </childnode>
      </node>
      <node id="489386">
        <label>AthContainers/tools/CompareAndPrint.h</label>
        <link refid="d5/da8/CompareAndPrint_8h_source"/>
        <childnode refid="489296" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
      </node>
      <node id="489478">
        <label>PATInterfaces/SystematicRegistry.h</label>
        <link refid="de/d22/SystematicRegistry_8h_source"/>
        <childnode refid="489466" relation="include">
        </childnode>
        <childnode refid="489467" relation="include">
        </childnode>
      </node>
      <node id="489473">
        <label>TFile.h</label>
      </node>
      <node id="489444">
        <label>xAODTracking/Vertex.h</label>
        <link refid="d9/d2d/Vertex_8h_source"/>
        <childnode refid="489445" relation="include">
        </childnode>
      </node>
      <node id="489451">
        <label>xAODTracking/versions/NeutralParticleContainer_v1.h</label>
        <link refid="d6/d5f/NeutralParticleContainer__v1_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489449" relation="include">
        </childnode>
        <childnode refid="489452" relation="include">
        </childnode>
      </node>
      <node id="489443">
        <label>xAODEgamma/versions/Photon_v1.h</label>
        <link refid="d3/d5c/Photon__v1_8h_source"/>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489444" relation="include">
        </childnode>
        <childnode refid="489455" relation="include">
        </childnode>
        <childnode refid="489415" relation="include">
        </childnode>
        <childnode refid="489437" relation="include">
        </childnode>
        <childnode refid="489269" relation="include">
        </childnode>
        <childnode refid="489439" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
      </node>
      <node id="489387">
        <label>AthContainers/tools/DVLEltBaseInfo.icc</label>
        <link refid="dd/d5e/DVLEltBaseInfo_8icc"/>
      </node>
      <node id="489424">
        <label>xAODCaloEvent/CaloClusterBadChannelData.h</label>
        <link refid="d1/d93/CaloClusterBadChannelData_8h_source"/>
        <childnode refid="489425" relation="include">
        </childnode>
      </node>
      <node id="489297">
        <label>utility</label>
      </node>
      <node id="489384">
        <label>SGTools/DataBucketTraitFwd.h</label>
      </node>
      <node id="489321">
        <label>CxxUtils/override.h</label>
        <link refid="de/d0e/override_8h"/>
      </node>
      <node id="489437">
        <label>xAODEgamma/versions/Egamma_v1.h</label>
        <link refid="d9/d42/Egamma__v1_8h_source"/>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489438" relation="include">
        </childnode>
        <childnode refid="489273" relation="include">
        </childnode>
        <childnode refid="489420" relation="include">
        </childnode>
        <childnode refid="489419" relation="include">
        </childnode>
        <childnode refid="489412" relation="include">
        </childnode>
        <childnode refid="489413" relation="include">
        </childnode>
        <childnode refid="489414" relation="include">
        </childnode>
        <childnode refid="489393" relation="include">
        </childnode>
        <childnode refid="489439" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
      </node>
      <node id="489419">
        <label>xAODCaloEvent/CaloClusterContainer.h</label>
        <link refid="da/dc3/CaloClusterContainer_8h_source"/>
        <childnode refid="489420" relation="include">
        </childnode>
        <childnode refid="489428" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489274">
        <label>GeoPrimitives/GeoPrimitives.h</label>
        <link refid="d7/d87/GeoPrimitives_8h_source"/>
        <childnode refid="489275" relation="include">
        </childnode>
        <childnode refid="489276" relation="include">
        </childnode>
      </node>
      <node id="489441">
        <label>ZMassConstraint/ConstraintFitOutput.h</label>
        <link refid="de/d09/ConstraintFitOutput_8h_source"/>
        <childnode refid="489393" relation="include">
        </childnode>
        <childnode refid="489389" relation="include">
        </childnode>
      </node>
      <node id="489271">
        <label>xAODTracking/VertexFwd.h</label>
        <link refid="d9/ddd/VertexFwd_8h_source"/>
      </node>
      <node id="489357">
        <label>AthContainers/AuxVectorBase.icc</label>
        <link refid="d4/d50/AuxVectorBase_8icc"/>
      </node>
      <node id="489325">
        <label>boost/thread/shared_mutex.hpp</label>
      </node>
      <node id="489335">
        <label>AthContainersInterfaces/IAuxSetOption.h</label>
        <link refid="d7/d7e/IAuxSetOption_8h"/>
      </node>
      <node id="489324">
        <label>AthContainers/tools/threading.h</label>
        <link refid="d7/d22/threading_8h"/>
        <childnode refid="489325" relation="include">
        </childnode>
        <childnode refid="489326" relation="include">
        </childnode>
        <childnode refid="489327" relation="include">
        </childnode>
        <childnode refid="489328" relation="include">
        </childnode>
        <childnode refid="489329" relation="include">
        </childnode>
      </node>
      <node id="489423">
        <label>CaloGeoHelpers/CaloSampling.def</label>
      </node>
      <node id="489391">
        <label>iosfwd</label>
      </node>
      <node id="489299">
        <label>cstdlib</label>
      </node>
      <node id="489280">
        <label>xAODTracking/TrackParticle.h</label>
        <link refid="d2/d15/TrackParticle_8h_source"/>
        <childnode refid="489281" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489377">
        <label>iostream</label>
      </node>
      <node id="489305">
        <label>CxxUtils/noreturn.h</label>
        <link refid="de/d6f/noreturn_8h"/>
      </node>
      <node id="489457">
        <label>AsgTools/ToolHandle.h</label>
        <link refid="de/d2d/ToolHandle_8h_source"/>
        <childnode refid="489402" relation="include">
        </childnode>
        <childnode refid="489458" relation="include">
        </childnode>
      </node>
      <node id="489416">
        <label>xAODTracking/versions/TrackParticleContainer_v1.h</label>
        <link refid="d7/d3b/TrackParticleContainer__v1_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489281" relation="include">
        </childnode>
        <childnode refid="489417" relation="include">
        </childnode>
      </node>
      <node id="489312">
        <label>AthContainersInterfaces/IConstAuxStore.h</label>
        <link refid="d7/d3a/IConstAuxStore_8h"/>
        <childnode refid="489293" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489313" relation="include">
        </childnode>
      </node>
      <node id="489277">
        <label>cstddef</label>
      </node>
      <node id="489330">
        <label>AthContainers/AuxVectorData.icc</label>
        <link refid="da/de7/AuxVectorData_8icc"/>
        <childnode refid="489331" relation="include">
        </childnode>
        <childnode refid="489347" relation="include">
        </childnode>
        <childnode refid="489312" relation="include">
        </childnode>
        <childnode refid="489322" relation="include">
        </childnode>
        <childnode refid="489323" relation="include">
        </childnode>
      </node>
      <node id="489459">
        <label>ElectronPhotonFourMomentumCorrection/IEgammaCalibrationAndSmearingTool.h</label>
        <link refid="d8/df3/IEgammaCalibrationAndSmearingTool_8h_source"/>
        <childnode refid="489403" relation="include">
        </childnode>
        <childnode refid="489460" relation="include">
        </childnode>
        <childnode refid="489270" relation="include">
        </childnode>
        <childnode refid="489461" relation="include">
        </childnode>
        <childnode refid="489462" relation="include">
        </childnode>
        <childnode refid="489463" relation="include">
        </childnode>
        <childnode refid="489468" relation="include">
        </childnode>
      </node>
      <node id="489404">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="489454">
        <label>xAODCore/BaseInfo.h</label>
        <link refid="d3/d17/BaseInfo_8h_source"/>
        <childnode refid="489348" relation="include">
        </childnode>
      </node>
      <node id="489273">
        <label>xAODEgamma/EgammaEnums.h</label>
        <link refid="d4/d8f/EgammaEnums_8h_source"/>
      </node>
      <node id="489400">
        <label>ZMassConstraint/ConstraintFit.h</label>
        <link refid="d3/d8d/ConstraintFit_8h_source"/>
        <childnode refid="489401" relation="include">
        </childnode>
        <childnode refid="489409" relation="include">
        </childnode>
        <childnode refid="489393" relation="include">
        </childnode>
        <childnode refid="489442" relation="include">
        </childnode>
        <childnode refid="489457" relation="include">
        </childnode>
      </node>
      <node id="489450">
        <label>TrkNeutralParameters/NeutralParameters.h</label>
      </node>
      <node id="489363">
        <label>AthContainers/tools/DVLInfo.icc</label>
        <link refid="da/d83/DVLInfo_8icc"/>
        <childnode refid="489308" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489364" relation="include">
        </childnode>
        <childnode refid="489352" relation="include">
        </childnode>
        <childnode refid="489299" relation="include">
        </childnode>
        <childnode refid="489348" relation="include">
        </childnode>
      </node>
      <node id="489334">
        <label>AthContainers/tools/AuxTypeVector.h</label>
        <link refid="d6/dd2/AuxTypeVector_8h"/>
        <childnode refid="489332" relation="include">
        </childnode>
        <childnode refid="489335" relation="include">
        </childnode>
        <childnode refid="489316" relation="include">
        </childnode>
        <childnode refid="489336" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
        <childnode refid="489307" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489296" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489340" relation="include">
        </childnode>
        <childnode refid="489341" relation="include">
        </childnode>
        <childnode refid="489342" relation="include">
        </childnode>
      </node>
      <node id="489433">
        <label>TrkSegment/SegmentCollection.h</label>
      </node>
      <node id="489397">
        <label>TrkParameters/TrackParameters.h</label>
      </node>
      <node id="489438">
        <label>xAODEgamma/EgammaDefs.h</label>
        <link refid="dd/d34/EgammaDefs_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
      </node>
      <node id="489471">
        <label>TH3F.h</label>
      </node>
      <node id="489449">
        <label>versions/NeutralParticle_v1.h</label>
        <link refid="da/d85/NeutralParticle__v1_8h_source"/>
        <childnode refid="489284" relation="include">
        </childnode>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489392" relation="include">
        </childnode>
        <childnode refid="489396" relation="include">
        </childnode>
        <childnode refid="489282" relation="include">
        </childnode>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489450" relation="include">
        </childnode>
      </node>
      <node id="489453">
        <label>xAODTracking/NeutralParticleFwd.h</label>
        <link refid="d4/d90/NeutralParticleFwd_8h_source"/>
      </node>
      <node id="489409">
        <label>ZMassConstraint/IConstraintFit.h</label>
        <link refid="de/d3c/IConstraintFit_8h_source"/>
        <childnode refid="489403" relation="include">
        </childnode>
        <childnode refid="489388" relation="include">
        </childnode>
        <childnode refid="489410" relation="include">
        </childnode>
        <childnode refid="489435" relation="include">
        </childnode>
        <childnode refid="489440" relation="include">
        </childnode>
        <childnode refid="489441" relation="include">
        </childnode>
      </node>
      <node id="489460">
        <label>xAODEgamma/ElectronFwd.h</label>
        <link refid="db/d18/ElectronFwd_8h_source"/>
      </node>
      <node id="489269">
        <label>xAODEgamma/PhotonxAODHelpers.h</label>
        <link refid="d5/d20/PhotonxAODHelpers_8h_source"/>
        <childnode refid="489270" relation="include">
        </childnode>
        <childnode refid="489271" relation="include">
        </childnode>
        <childnode refid="489272" relation="include">
        </childnode>
        <childnode refid="489273" relation="include">
        </childnode>
        <childnode refid="489274" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489278" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
      </node>
      <node id="489340">
        <label>boost/type_traits/is_base_of.hpp</label>
      </node>
      <node id="489447">
        <label>xAODTracking/NeutralParticleContainer.h</label>
        <link refid="da/d7f/NeutralParticleContainer_8h_source"/>
        <childnode refid="489448" relation="include">
        </childnode>
        <childnode refid="489451" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489310">
        <label>AthContainers/AuxVectorBase.h</label>
        <link refid="d7/d18/AuxVectorBase_8h"/>
        <childnode refid="489311" relation="include">
        </childnode>
        <childnode refid="489308" relation="include">
        </childnode>
        <childnode refid="489309" relation="include">
        </childnode>
        <childnode refid="489349" relation="include">
        </childnode>
        <childnode refid="489331" relation="include">
        </childnode>
        <childnode refid="489292" relation="include">
        </childnode>
        <childnode refid="489353" relation="include">
        </childnode>
        <childnode refid="489347" relation="include">
        </childnode>
        <childnode refid="489354" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489357" relation="include">
        </childnode>
      </node>
      <node id="489414">
        <label>xAODPrimitives/IsolationFlavour.h</label>
        <link refid="da/d23/IsolationFlavour_8h_source"/>
      </node>
      <node id="489278">
        <label>set</label>
      </node>
      <node id="489399">
        <label>xAODCore/CLASS_DEF.h</label>
        <link refid="d6/d20/xAODCore_2xAODCore_2CLASS__DEF_8h"/>
        <childnode refid="489313" relation="include">
        </childnode>
      </node>
      <node id="489344">
        <label>AthContainers/tools/AuxTypeVectorFactory.icc</label>
        <link refid="dc/d02/AuxTypeVectorFactory_8icc"/>
      </node>
      <node id="489336">
        <label>AthContainers/PackedContainer.h</label>
        <link refid="d6/dda/PackedContainer_8h"/>
        <childnode refid="489335" relation="include">
        </childnode>
        <childnode refid="489337" relation="include">
        </childnode>
        <childnode refid="489321" relation="include">
        </childnode>
        <childnode refid="489279" relation="include">
        </childnode>
        <childnode refid="489339" relation="include">
        </childnode>
      </node>
      <node id="489296">
        <label>algorithm</label>
      </node>
      <node id="489426">
        <label>CaloEvent/CaloClusterCellLinkContainer.h</label>
      </node>
      <node id="489374">
        <label>AthContainers/tools/IsMostDerivedFlag.h</label>
        <link refid="d5/dfa/IsMostDerivedFlag_8h"/>
      </node>
      <node id="489398">
        <label>TrkTrack/TrackCollection.h</label>
      </node>
      <node id="489349">
        <label>AthContainers/AuxElement.h</label>
        <link refid="d1/d6f/AuxElement_8h"/>
        <childnode refid="489350" relation="include">
        </childnode>
        <childnode refid="489312" relation="include">
        </childnode>
        <childnode refid="489347" relation="include">
        </childnode>
        <childnode refid="489317" relation="include">
        </childnode>
        <childnode refid="489331" relation="include">
        </childnode>
        <childnode refid="489311" relation="include">
        </childnode>
        <childnode refid="489316" relation="include">
        </childnode>
        <childnode refid="489292" relation="include">
        </childnode>
        <childnode refid="489322" relation="include">
        </childnode>
        <childnode refid="489277" relation="include">
        </childnode>
        <childnode refid="489351" relation="include">
        </childnode>
      </node>
      <node id="489401">
        <label>AsgTools/AsgTool.h</label>
        <link refid="d4/d29/AsgTool_8h_source"/>
        <childnode refid="489402" relation="include">
        </childnode>
        <childnode refid="489403" relation="include">
        </childnode>
        <childnode refid="489406" relation="include">
        </childnode>
        <childnode refid="489408" relation="include">
        </childnode>
      </node>
      <node id="489317">
        <label>AthLinks/DataLink.h</label>
        <link refid="da/de8/DataLink_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489318" relation="include">
        </childnode>
        <childnode refid="489287" relation="include">
        </childnode>
      </node>
      <node id="489371">
        <label>AthContainers/tools/DVL_iter_swap.h</label>
        <link refid="d6/ddb/DVL__iter__swap_8h"/>
        <childnode refid="489367" relation="include">
        </childnode>
        <childnode refid="489353" relation="include">
        </childnode>
        <childnode refid="489298" relation="include">
        </childnode>
      </node>
      <node id="489308">
        <label>AthContainers/OwnershipPolicy.h</label>
        <link refid="d3/da4/OwnershipPolicy_8h_source"/>
      </node>
      <node id="489284">
        <label>AthLinks/ElementLink.h</label>
        <link refid="dc/d24/ElementLink_8h_source"/>
        <childnode refid="489283" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
        <childnode refid="489286" relation="include">
        </childnode>
        <childnode refid="489287" relation="include">
        </childnode>
        <childnode refid="489290" relation="include">
        </childnode>
      </node>
      <node id="489408">
        <label>AsgTools/SetProperty.h</label>
        <link refid="df/db0/SetProperty_8h_source"/>
      </node>
      <node id="489470">
        <label>TRandom3.h</label>
      </node>
      <node id="489415">
        <label>xAODTracking/TrackParticleContainer.h</label>
        <link refid="da/d31/TrackParticleContainer_8h_source"/>
        <childnode refid="489280" relation="include">
        </childnode>
        <childnode refid="489416" relation="include">
        </childnode>
        <childnode refid="489399" relation="include">
        </childnode>
      </node>
      <node id="489464">
        <label>PATInterfaces/SystematicCode.h</label>
        <link refid="df/df5/SystematicCode_8h_source"/>
      </node>
      <node id="489361">
        <label>GaudiKernel/ClassID.h</label>
      </node>
      <node id="489376">
        <label>boost/type_traits.hpp</label>
      </node>
      <node id="489303">
        <label>memory</label>
      </node>
      <node id="489452">
        <label>xAODTracking/NeutralParticleContainerFwd.h</label>
        <link refid="d2/db4/NeutralParticleContainerFwd_8h_source"/>
        <childnode refid="489291" relation="include">
        </childnode>
        <childnode refid="489418" relation="include">
        </childnode>
        <childnode refid="489453" relation="include">
        </childnode>
      </node>
      <node id="489343">
        <label>AthContainers/tools/AuxTypeVectorFactory.h</label>
        <link refid="dc/d69/AuxTypeVectorFactory_8h"/>
        <childnode refid="489333" relation="include">
        </childnode>
        <childnode refid="489334" relation="include">
        </childnode>
        <childnode refid="489344" relation="include">
        </childnode>
      </node>
      <node id="489354">
        <label>AthContainersInterfaces/AuxStore_traits.h</label>
        <link refid="dd/d70/AuxStore__traits_8h"/>
        <childnode refid="489350" relation="include">
        </childnode>
        <childnode refid="489347" relation="include">
        </childnode>
        <childnode refid="489312" relation="include">
        </childnode>
        <childnode refid="489340" relation="include">
        </childnode>
        <childnode refid="489355" relation="include">
        </childnode>
        <childnode refid="489356" relation="include">
        </childnode>
        <childnode refid="489285" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="dc/d3d/namespaceZMassConstraint">ZMassConstraint</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>A<sp/>C++<sp/>implementation<sp/>of<sp/>Mass<sp/>constraint<sp/>fitting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>23/09/2006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>K.<sp/>Nikolopoulos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---<sp/>*<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODEgamma/PhotonxAODHelpers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTracking/TrackParticle.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ZMassConstraint/ConstraintFit.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ZMassConstraint/ConstraintFitInput.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ZMassConstraint/ConstraintFitOutput.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ElectronPhotonFourMomentumCorrection/IEgammaCalibrationAndSmearingTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;MuonMomentumCorrections/MuonCalibrationAndSmearingTool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ZMassConstraint<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d3/dd6/classZMassConstraint_1_1ConstraintFit_1a921b66cff0679e18fe2a306f1306131d" kindref="member" tooltip="Create a proper constructor for Athena.">ConstraintFit::ConstraintFit</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>):</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asg::AsgTool(<sp/>name<sp/>),</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conHasWidth(true),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conMass(91187.6),</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conWidth(2495.2),</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resolution(0.01),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ignoreInputChecks(false),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parameters(3)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;Z_pdg_mass&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conMass);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;Z_pdg_width&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conWidth);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;hasWidth&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_conHasWidth);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;ignoreInputChecks&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ignoreInputChecks);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;EgammaCalibAndSmearingTool&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/>m_energyRescaler<sp/>=<sp/>ToolHandle&lt;CP::IEgammaCalibrationAndSmearingTool&gt;(</highlight><highlight class="stringliteral">&quot;CP::EgammaCalibrationAndSmearingTool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>declareProperty(<sp/></highlight><highlight class="stringliteral">&quot;MuonCalibrationAndSmearingTool&quot;</highlight><highlight class="normal">,<sp/>m_mu_resolSFTool<sp/>=<sp/>ToolHandle&lt;CP::IMuonCalibrationAndSmearingTool&gt;(</highlight><highlight class="stringliteral">&quot;CP::MuonCalibrationAndSmearingTool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::~ConstraintFit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCode<sp/>ConstraintFit::initialize()</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_INFO<sp/>(</highlight><highlight class="stringliteral">&quot;initialize:<sp/>retrieve<sp/>tools&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_energyRescaler.name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_mu_resolSFTool.name());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_energyRescaler.retrieve().isSuccess())<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR<sp/>(</highlight><highlight class="stringliteral">&quot;initialize:<sp/>unable<sp/>to<sp/>retrieve<sp/>EgammaCalibrationAndSmearingTool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_mu_resolSFTool.retrieve().isSuccess())<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR<sp/>(</highlight><highlight class="stringliteral">&quot;initialize:<sp/>unable<sp/>to<sp/>retrieve<sp/>MuonCalibrationAndSmearingTool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>StatusCode</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::doMassFit<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitInput&amp;<sp/>input,<sp/>ConstraintFitOutput&amp;<sp/>output)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>moment,<sp/>call<sp/>the<sp/>&apos;old&apos;<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(massFitInterface(input))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>add<sp/>in<sp/>input&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::FAILURE;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massFitRun(output);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>gracefully:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusCode::SUCCESS;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ConstraintFit::addParticle<sp/><sp/><sp/>(const<sp/>xAOD::IParticle<sp/>&amp;<sp/>part,<sp/><sp/><sp/><sp/>ConstraintFitInput&amp;<sp/>input)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if(part.type()<sp/>==<sp/>xAOD::Type::Electron)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>xAOD::Electron*<sp/>el<sp/>=<sp/>dynamic_cast&lt;const<sp/>xAOD::Electron*&gt;<sp/>(&amp;part);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>addParticle(*el,<sp/>input);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>if(part.type()==xAOD::Type::Muon)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>xAOD::Muon*<sp/>mu<sp/>=<sp/>dynamic_cast&lt;const<sp/>xAOD::Muon*&gt;<sp/>(&amp;part);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>addParticle(*mu,<sp/>input);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::addFSRParticle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">xAOD::IParticle</ref>&amp;<sp/><sp/>part,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLorentzVector&amp;<sp/><sp/><sp/>fsr4Vec,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstraintFitInput&amp;<sp/><sp/><sp/><sp/><sp/>input)<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;addFSRParticle:<sp/>***<sp/>4vecFsr:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsr4Vec.Pt()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsr4Vec.Eta()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fsr4Vec.Phi());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>energy<sp/>resolution<sp/>-<sp/>done<sp/>differently<sp/>for<sp/>photons<sp/>and<sp/>electrons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e_res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PATCore::ParticleType::Type<sp/>phType<sp/><sp/><sp/><sp/><sp/>=<sp/>PATCore::ParticleType::Electron;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cl_etaCalo<sp/>=<sp/>retrieve_eta_calo(part);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_energyRescaler.empty())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dd/dc8/namespacexAOD_1_1Type_1a96c48d2d85466ace623036af49f84434ab4340d8e5195d6c17d7f6147d8ce187f" kindref="member" tooltip="The object is a photon.">xAOD::Type::Photon</ref><sp/>==<sp/><sp/>part.<ref refid="d5/d4c/classxAOD_1_1IParticle_1a852e62cdcea85eb9f99461898c301e02" kindref="member" tooltip="The type of the object as a simple enumeration.">type</ref>())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>fsrPf<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;part);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phType<sp/>=<sp/>(xAOD::EgammaHelpers::isConvertedPhoton(fsrPf))<sp/>?</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PATCore::ParticleType::ConvertedPhoton<sp/>:<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PATCore::ParticleType::UnconvertedPhoton;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_res<sp/>=<sp/>m_energyRescaler-&gt;resolution(<sp/>fsr4Vec.E(),<sp/>fsr4Vec.Eta(),<sp/>cl_etaCalo,<sp/>phType)*fsr4Vec.E();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addFSRParticle:<sp/><sp/>-<sp/>cannot<sp/>find<sp/>EgammaCalibrationAndSmearingTool.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addFSRParticle:<sp/><sp/>-<sp/>please<sp/>set<sp/>property<sp/>&apos;EgammaCalibAndSmearingToolName&apos;<sp/>with<sp/>the<sp/>name<sp/>of<sp/>your<sp/>EgammaCalibrationAndSmearingTool<sp/>-<sp/>default<sp/>is<sp/>&apos;EgammaCalibrationAndSmearingTool&apos;.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>photonCovarianceMatrix;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix.setZero();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(d0,d0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(z0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(phi0,phi0)<sp/><sp/><sp/><sp/><sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(theta,theta)<sp/><sp/><sp/>=<sp/>0.000001;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(qOverP,qOverP)<sp/>=<sp/>e_res*e_res;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(d0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(d0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(d0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(d0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(z0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(z0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(z0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(phi0,theta)<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(phi0,qOverP)<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(theta,qOverP)<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(&quot;addFSRParticle:<sp/>FSR<sp/>calib<sp/>type,e,<sp/>e_res<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>phType<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>fsr4Vec.E()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>e_res);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>symmetrize<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>5;<sp/>ii++)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>ii<sp/>+<sp/>1;<sp/>jj<sp/>&lt;<sp/>5;<sp/>jj++)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>photonCovarianceMatrix(jj,<sp/>ii)<sp/>=<sp/>photonCovarianceMatrix(ii,<sp/>jj);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/>doSanityChecksOnCovariance(fsr4Vec,<sp/>photonCovarianceMatrix);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>covariance<sp/>in<sp/>cartesian<sp/>CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>covarXYZ;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covarXYZ.setZero();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovd0z0PhiThetaPToXYZ(fsr4Vec,<sp/>photonCovarianceMatrix,<sp/>covarXYZ);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.addConstituent_FourVector_d0z0PhiThetaP(fsr4Vec,<sp/>photonCovarianceMatrix,<sp/>covarXYZ,<sp/>isOK);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>&quot;addFSRParticle:<sp/><sp/>-<sp/>added<sp/>fsr&quot;);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::addParticle(const<sp/>xAOD::<ref refid="dd/d44/namespacexAOD_1ab0e1f14e75ada3ccf2b11331c803b97d" kindref="member" tooltip="Reference the current persistent version:.">Muon</ref>&amp;<sp/>mu,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstraintFitInput&amp;<sp/>input,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MassConstraintMuonType<sp/>muonType)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>muons,<sp/>we<sp/>allow<sp/>the<sp/>mass<sp/>constraint<sp/>to<sp/>be<sp/>done<sp/>in<sp/>one<sp/>of<sp/>three<sp/>ways:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>1)<sp/><sp/><sp/>standard<sp/>way<sp/>-<sp/>use<sp/>muon<sp/>momentum<sp/>and<sp/>primary<sp/>track<sp/>for<sp/>cov<sp/>matrix,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>2,3)<sp/>ID<sp/>or<sp/>MS<sp/><sp/><sp/><sp/><sp/>-<sp/>use<sp/>the<sp/>ID<sp/>or<sp/>MS<sp/>tracks<sp/>for<sp/>both<sp/>the<sp/>momentum<sp/>and<sp/>cov<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLorentzVector<sp/>mu4vec;<sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>filled<sp/>according<sp/>to<sp/>muon<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>accessors<sp/>for<sp/>muon<sp/>decorations<sp/>-<sp/>set<sp/>in<sp/>MuonCalibrationAndSmearingTool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;float&gt;</ref><sp/>muonSpectrometerPt<sp/>(</highlight><highlight class="stringliteral">&quot;MuonSpectrometerPt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="d8/d31/classSG_1_1AuxElement_1_1Accessor" kindref="compound">SG::AuxElement::Accessor&lt;float&gt;</ref><sp/>innerDetectorPt<sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;InnerDetectorPt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>momentum,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>track<sp/>particle<sp/>according<sp/>to<sp/>the<sp/>requested<sp/>muon<sp/>type<sp/>for<sp/>the<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>*<sp/>track<sp/>=<sp/>mu.primaryTrackParticle();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set4vec<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((isMS_MCMT<sp/>==<sp/>muonType)<sp/>||<sp/>(isID_MCMT<sp/>==<sp/>muonType))<sp/>&amp;&amp;<sp/>xAOD::Muon::Combined<sp/>==<sp/>mu.muonType())<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isMS_MCMT<sp/><sp/>==<sp/>muonType)<sp/>{<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track<sp/>=<sp/>mu.trackParticle(xAOD::Muon::MuonSpectrometerTrackParticle);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!muonSpectrometerPt.isAvailable(mu))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addParticle:<sp/><sp/>-<sp/>could<sp/>not<sp/>get<sp/>muonSpectrometerPt<sp/>from<sp/>muon.<sp/>Please<sp/>applyCorrection<sp/>with<sp/>the<sp/>MuonCalibAndSmearTool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!track)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addParticle:<sp/><sp/>-<sp/>Combined<sp/>muon<sp/>is<sp/>missing<sp/>MS<sp/>track<sp/>particle.<sp/>Using<sp/>combined<sp/>track<sp/>particle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track<sp/>=<sp/>mu.primaryTrackParticle();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu4vec.SetPtEtaPhiM(muonSpectrometerPt(mu),<sp/>track-&gt;<ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a116a10463c5865f3b6b2bf7449930991" kindref="member" tooltip="The pseudorapidity () of the particle.">eta</ref>(),<sp/>track-&gt;<ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a772eca8615366991d7b6686f31bba0ca" kindref="member" tooltip="The azimuthal angle () of the particle (has range  to .).">phi</ref>(),<sp/>mu.m());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set4vec<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;addParticle:<sp/>set<sp/>muon<sp/>track<sp/>to<sp/>MS<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>track<sp/>=<sp/>mu.trackParticle(xAOD::Muon::InnerDetectorTrackParticle);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!innerDetectorPt.isAvailable(mu))</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addParticle:<sp/><sp/>-<sp/>could<sp/>not<sp/>get<sp/>innerDetectorPt<sp/>from<sp/>muon.<sp/>Please<sp/>applyCorrection<sp/>with<sp/>the<sp/>MuonCalibAndSmearTool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu4vec.SetPtEtaPhiM(innerDetectorPt(mu),<sp/>track-&gt;<ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a116a10463c5865f3b6b2bf7449930991" kindref="member" tooltip="The pseudorapidity () of the particle.">eta</ref>(),<sp/>track-&gt;<ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a772eca8615366991d7b6686f31bba0ca" kindref="member" tooltip="The azimuthal angle () of the particle (has range  to .).">phi</ref>(),<sp/>mu.m());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set4vec<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;addParticle:<sp/>set<sp/>muon<sp/>track<sp/>to<sp/>ID<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!set4vec)<sp/>mu4vec.SetPtEtaPhiM(mu.pt(),<sp/>mu.eta(),<sp/>mu.phi(),<sp/>mu.m());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!track)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addParticle:<sp/><sp/>-<sp/>could<sp/>not<sp/>get<sp/>track<sp/>particle<sp/>for<sp/>muon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;addParticle:<sp/>***<sp/>4vecMu:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mu4vec.Pt()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mu4vec.Eta()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mu4vec.Phi());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>muSF<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>type<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comment<sp/>out<sp/>use<sp/>of<sp/>MuonCalibrationAndSmearingTool<sp/>until<sp/>the<sp/>SF<sp/>is<sp/>implemented<sp/>by<sp/>Giacomo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(m_mu_resolSFTool)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>scale<sp/>factor<sp/>for<sp/>the<sp/>muon<sp/>covariance<sp/>qoverp<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>For<sp/>muonType<sp/>==<sp/>isCombMCMT,<sp/>we<sp/>get<sp/>a<sp/>SF<sp/>differently<sp/>according<sp/>to<sp/>the<sp/>type<sp/>of<sp/>muon:<sp/>Comb/ST/CT/SA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>muonType<sp/>==<sp/>isID_MCMT,<sp/><sp/>we<sp/>use<sp/>the<sp/>type<sp/>2<sp/>for<sp/>ID<sp/>tracks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/>muonType<sp/>==<sp/>isMS_MCMT,<sp/><sp/>we<sp/>use<sp/>the<sp/>type<sp/>3<sp/>for<sp/>MS<sp/>tracks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(muonType<sp/>==<sp/>isCombMCMT)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(xAOD::Muon::Combined<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(xAOD::Muon::SegmentTagged<sp/><sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(xAOD::Muon::CaloTagged<sp/><sp/><sp/><sp/><sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(xAOD::Muon::MuonStandAlone<sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>ATH_MSG_ERROR(&quot;addParticle:<sp/>-<sp/>****<sp/>MUON<sp/>type<sp/>is<sp/>not<sp/>CB/ST/SA/Calo<sp/>****<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(muonType<sp/>==<sp/>isID_MCMT)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(xAOD::Muon::MuonStandAlone<sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(muonType<sp/>==<sp/>isMS_MCMT)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>3;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(xAOD::Muon::SegmentTagged<sp/><sp/>==<sp/>mu.muonType()<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xAOD::Muon::CaloTagged<sp/><sp/><sp/><sp/><sp/>==<sp/>mu.muonType())<sp/>type<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(muonType<sp/>&lt;<sp/>isCombMCMT)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/>&quot;addParticle:<sp/>-<sp/>Invalid<sp/>muon<sp/>type<sp/>requested,<sp/>please<sp/>use<sp/>.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>muSF<sp/>=<sp/>m_mu_resolSF-&gt;getResolutionScaleFactor(mu4vec,<sp/>type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(&quot;addParticle:<sp/>4v,type,errSF<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>mu4vec.Eta()<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>muSF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/>&quot;addParticle:<sp/>-<sp/>MuonResSFTool<sp/>is<sp/>NOT<sp/>set.<sp/>Please<sp/>call<sp/>setMuonResSFTool<sp/>with<sp/>MuonResolutionAndMomentumScaleFactors<sp/>tool.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>covmatrix;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix.setZero();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,d0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,d0);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,z0);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,phi0)<sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(phi0,phi0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(theta,theta)<sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(theta,theta);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(qOverP,qOverP)<sp/>=<sp/>track-&gt;definingParametersCovMatrix()(qOverP,qOverP)*muSF*muSF;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,z0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,phi0);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,theta);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,qOverP)*muSF;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,phi0);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,theta);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,qOverP)*muSF;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,theta)<sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(phi0,theta);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,qOverP)<sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(phi0,qOverP)*muSF;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(theta,qOverP)<sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(theta,qOverP)*muSF;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(&quot;addParticle:<sp/>type,errSF,mu<sp/>p,cov<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>type<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>muSF</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>mu4vec.E()</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>d0)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>z0)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(phi0,<sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(theta,<sp/>theta)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(qOverP,qOverP)*muSF*muSF</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>z0)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>theta)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,qOverP)*muSF</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>theta)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,qOverP)*muSF</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(phi0,<sp/><sp/>theta)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(phi0,qOverP)*muSF</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(theta,qOverP)*muSF);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>5;<sp/>ii++)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>ii+1;<sp/>jj<sp/>&lt;<sp/>5;<sp/>jj++)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(jj,ii)<sp/>=<sp/>covmatrix(ii,jj);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/>&quot;addParticle:<sp/>cov<sp/>matrix<sp/>\n&quot;<sp/>&lt;&lt;<sp/>covmatrix<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transform<sp/>cov<sp/>of<sp/>q/p<sp/>to<sp/>cov<sp/>p<sp/>in<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/dec/structP" kindref="compound">P</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>mu4vec.<ref refid="dc/dec/structP" kindref="compound">P</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>jacobian0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0.setZero();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0(0,0)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0(1,1)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0(2,2)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0(3,3)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian0(4,4)<sp/>=<sp/>-P*P;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>newmatrix<sp/>=<sp/>jacobian0.transpose()<sp/>*<sp/>covmatrix<sp/>*<sp/>jacobian0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>&quot;addParticle:<sp/>new<sp/>matrix<sp/>\n&quot;<sp/>&lt;&lt;<sp/>newmatrix<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/>doSanityChecksOnCovariance(mu4vec,<sp/>newmatrix);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>covariance<sp/>in<sp/>cartesian<sp/>CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>covarXYZ;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covarXYZ.setZero();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovd0z0PhiThetaPToXYZ(mu4vec,<sp/>newmatrix,<sp/>covarXYZ);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.addConstituent_FourVector_d0z0PhiThetaP(mu4vec,<sp/>newmatrix,<sp/>covarXYZ,<sp/>isOK);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/>&quot;addParticle:<sp/>-<sp/>added<sp/>muon&quot;);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::addParticle<sp/><sp/><sp/>(const<sp/>xAOD::<ref refid="dd/d44/namespacexAOD_1aead9678ad1735e66e6f9b879cfcc5261" kindref="member" tooltip="Definition of the current &amp;quot;egamma version&amp;quot;.">Electron</ref>&amp;<sp/>el,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elEnergyRes,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstraintFitInput&amp;<sp/><sp/><sp/>input)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>el_E_res<sp/>=<sp/>elEnergyRes;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(!m_energyRescaler.empty())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>el.e()<sp/>which<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>corrected<sp/>cluster<sp/>energy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>el_E_res<sp/>=<sp/>m_energyRescaler-&gt;resolution(el.caloCluster()-&gt;e(),<sp/>el.caloCluster()-&gt;eta())*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el.caloCluster()-&gt;e();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>ATH_MSG_ERROR(<sp/>&quot;addParticle:<sp/>-<sp/>energyRescaler<sp/>is<sp/>NOT<sp/>AVAILABLE.<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>*<sp/>track<sp/>=<sp/>el.trackParticle();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!track)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;addParticle:<sp/>-<sp/>ERROR<sp/>could<sp/>not<sp/>get<sp/>track<sp/>particle<sp/>for<sp/>electron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;addParticle:<sp/>***<sp/>4vecEl:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.pt()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.eta()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.phi());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>covmatrix;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix.setZero();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,d0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,d0);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,z0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,phi0)<sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(phi0,phi0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(theta,theta)<sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(theta,theta);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(qOverP,qOverP)<sp/>=<sp/>el_E_res*el_E_res;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,z0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,z0);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,phi0);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(d0,theta);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(d0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,phi0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,phi0);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,theta)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(z0,theta);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(z0,qOverP)<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,theta)<sp/><sp/><sp/><sp/>=<sp/>track-&gt;definingParametersCovMatrix()(phi0,theta);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(phi0,qOverP)<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(theta,qOverP)<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>&quot;addParticle:<sp/>el<sp/>p,cov&quot;<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>el_E_res<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>el.e()</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>d0)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>z0)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(phi0,<sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(theta,<sp/>theta)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>z0)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(d0,<sp/><sp/><sp/><sp/>theta)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>phi0)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(z0,<sp/><sp/><sp/><sp/>theta)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>track-&gt;definingParametersCovMatrix()(phi0,<sp/><sp/>theta));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=0;ii&lt;5;ii++)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=ii+1;jj&lt;5;jj++)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covmatrix(jj,ii)<sp/>=<sp/>covmatrix(ii,jj);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/>doSanityChecksOnCovariance(el.p4(),<sp/>covmatrix);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>covariance<sp/>in<sp/>cartesian<sp/>CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>covarXYZ;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covarXYZ.setZero();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovd0z0PhiThetaPToXYZ(el.p4(),<sp/>covmatrix,<sp/>covarXYZ);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>in<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.addConstituent_FourVector_d0z0PhiThetaP(el.p4(),<sp/>covmatrix,<sp/>covarXYZ,<sp/>isOK);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/>&quot;addParticle:<sp/>-<sp/>el<sp/>\n&quot;<sp/>&lt;&lt;<sp/>covmatrix);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/>&quot;addParticle:<sp/>-<sp/>el\n&quot;<sp/>&lt;&lt;<sp/>input.getCovarianceCartesian(input.getNConstituents()-1));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/>&quot;addParticle:<sp/>-<sp/>added<sp/>electron&quot;);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::massFitInterface(const<sp/>ZMassConstraint::ConstraintFitInput&amp;<sp/>theInput)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_objmass.clear();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_theInput<sp/>=<sp/>theInput;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>m_parameters<sp/>first<sp/>parameters<sp/>of<sp/>pin<sp/>are<sp/>the<sp/>fitted<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>one<sp/>is<sp/>the<sp/>mass<sp/>of<sp/>the<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theInput.getNConstituents()<sp/>&lt;2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;massFitInterface:<sp/>Found<sp/>number<sp/>of<sp/>input<sp/>particles<sp/>less<sp/>than<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(<sp/></highlight><highlight class="stringliteral">&quot;massFitInterface:<sp/>nparticles<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theInput.getNConstituents());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nobj<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>theInput.getNConstituents();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dimension<sp/><sp/><sp/><sp/>=<sp/>m_parameters<sp/>*<sp/>m_nobj;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit<sp/>=<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>(dimension,<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit.setZero();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceInit<sp/>=<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>(dimension,<sp/>dimension);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceInit.setZero();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal=<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>(dimension,<sp/>1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal.setZero();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceFinal=<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>(dimension,<sp/>dimension);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceFinal.setZero();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>m_nobj;<sp/>iobj++)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_objmass.push_back(theInput.getConstituentFourVector(iobj).M());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit(0<sp/>+<sp/>iobj*3,<sp/>0)<sp/>=<sp/>theInput.getConstituentFourVector(iobj).Px();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit(1<sp/>+<sp/>iobj*3,<sp/>0)<sp/>=<sp/>theInput.getConstituentFourVector(iobj).Py();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit(2<sp/>+<sp/>iobj*3,<sp/>0)<sp/>=<sp/>theInput.getConstituentFourVector(iobj).Pz();</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_parameters;<sp/>i++)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m_parameters;<sp/>j++)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceInit(i<sp/>+<sp/>3*iobj,<sp/>j<sp/>+<sp/>3*iobj)<sp/>=<sp/>(theInput.getCovarianceCartesian(iobj))(i<sp/>+<sp/>2,<sp/>j<sp/>+<sp/>2);<sp/></highlight><highlight class="comment">//keep<sp/>only<sp/>the<sp/>lower<sp/>right<sp/>3x3<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;dimension;i++)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal(i,0)<sp/>=<sp/>m_parametersInit(i,0);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;dimension;j++)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceFinal(i,j)<sp/>=<sp/>m_covarianceInit(i,j);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitInterface:<sp/>parameters<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_parametersInit<sp/>);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitInterface:<sp/>cov<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_covarianceInit<sp/>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::likelihoodMass(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MassResol)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=4;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns<sp/>=<sp/>m_nobj;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[rows]<sp/>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[columns];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;<sp/>iobj&lt;m_nobj;<sp/>iobj++)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>m_objmass[iobj]*m_objmass[iobj];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;3;i++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i][iobj]<sp/>=<sp/>m_parametersInit(i<sp/>+<sp/>3*iobj,<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>+=<sp/>p[i][iobj]*p[i][iobj];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>sqrt(p[3][iobj]);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Etot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xtot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ytot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ztot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;m_nobj;ij++)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etot<sp/>+=<sp/>p[3][ij];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xtot<sp/>+=<sp/>p[0][ij];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ytot<sp/>+=<sp/>p[1][ij];</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ztot<sp/>+=<sp/>p[2][ij];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p[i];</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initMass<sp/>=<sp/><sp/>Etot<sp/>*<sp/>Etot<sp/>-<sp/>Xtot<sp/>*<sp/>Xtot<sp/>-<sp/>Ytot<sp/>*<sp/>Ytot<sp/>-<sp/>Ztot<sp/>*<sp/>Ztot;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initMass<sp/>=<sp/>sqrt(initMass);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/>MassResol;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xLeft<sp/>=<sp/>initMass;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xRight<sp/>=<sp/>m_conMass;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_conMass<sp/>&lt;<sp/>initMass)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xLeft<sp/>=<sp/>m_conMass;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRight<sp/>=<sp/>initMass;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dLinitL<sp/>=<sp/>(initMass<sp/>-<sp/>xLeft)<sp/>/<sp/>sig<sp/>/<sp/>sig<sp/>-<sp/>2.*(xLeft<sp/>-<sp/>m_conMass)<sp/>/<sp/>((xLeft<sp/>-<sp/>m_conMass)<sp/>*<sp/>(xLeft<sp/>-<sp/>m_conMass)<sp/>+<sp/>m_conWidth<sp/>*<sp/>m_conWidth);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dLinitR<sp/>=<sp/>(initMass<sp/>-<sp/>xRight)<sp/>/<sp/>sig<sp/>/<sp/>sig<sp/>-<sp/>2.*(xRight<sp/>-<sp/>m_conMass)<sp/>/<sp/>((xRight<sp/>-<sp/>m_conMass)<sp/>*<sp/>(xRight<sp/>-<sp/>m_conMass)<sp/>+<sp/>m_conWidth<sp/>*<sp/>m_conWidth);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dLinitL<sp/>*<sp/>dLinitR<sp/>&lt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(xRight<sp/>-<sp/>xLeft<sp/>&gt;<sp/>1.)<sp/>{<sp/></highlight><highlight class="comment">//1<sp/>MeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xM<sp/>=<sp/>(xRight<sp/>+<sp/>xLeft)<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dL<sp/>=<sp/>(initMass<sp/>-<sp/>xM)<sp/>/<sp/>sig<sp/>/<sp/>sig<sp/>-<sp/>2.*(xM<sp/>-<sp/>m_conMass)<sp/>/<sp/>((xM<sp/>-<sp/>m_conMass)<sp/>*<sp/>(xM<sp/>-<sp/>m_conMass)<sp/>+<sp/>m_conWidth<sp/>*<sp/>m_conWidth);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dL<sp/>*<sp/>dLinitL<sp/>&lt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xRight<sp/>=<sp/>xM;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dLinitR<sp/>=<sp/>dL;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xLeft<sp/>=<sp/>xM;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dLinitL<sp/>=<sp/>dL;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xLeft<sp/>+<sp/>xRight)<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dLinitL<sp/>&gt;<sp/>dLinitR)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xLeft;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xRight;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::likelihoodMass2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>entering&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=4;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns<sp/>=<sp/>m_nobj;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[rows]<sp/>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[columns];</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;<sp/>iobj&lt;m_nobj;<sp/>iobj++)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>m_objmass[iobj]*m_objmass[iobj];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;3;i++)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i][iobj]<sp/>=<sp/>m_parametersInit(i<sp/>+<sp/>3*iobj,<sp/>0);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>+=<sp/>p[i][iobj]*p[i][iobj];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>sqrt(p[3][iobj]);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>etot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xtot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ytot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ztot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;m_nobj;ij++)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etot<sp/>+=<sp/>p[3][ij];</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtot<sp/>+=<sp/>p[0][ij];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ytot<sp/>+=<sp/>p[1][ij];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ztot<sp/>+=<sp/>p[2][ij];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initMass<sp/>=<sp/><sp/>etot<sp/>*<sp/>etot<sp/>-<sp/>xtot<sp/>*<sp/>xtot<sp/>-<sp/>ytot<sp/>*<sp/>ytot<sp/>-<sp/>ztot<sp/>*<sp/>ztot;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initMass<sp/>=<sp/>sqrt(initMass);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//what<sp/>is<sp/>the<sp/>uncertainty<sp/>on<sp/>initMass?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>jacobianMass(3*m_nobj,<sp/>1);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianMass.setZero();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=0;ii&lt;m_nobj;ii++)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianMass(3*ii<sp/>+<sp/>0,<sp/>0)<sp/>=<sp/>(2.*(etot)<sp/>*<sp/>p[0][ii]<sp/>/<sp/>p[3][ii]<sp/>-<sp/>2.*<sp/>xtot);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianMass(3*ii<sp/>+<sp/>1,<sp/>0)<sp/>=<sp/>(2.*(etot)<sp/>*<sp/>p[1][ii]<sp/>/<sp/>p[3][ii]<sp/>-<sp/>2.*<sp/>ytot);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianMass(3*ii<sp/>+<sp/>2,<sp/>0)<sp/>=<sp/>(2.*(etot)<sp/>*<sp/>p[2][ii]<sp/>/<sp/>p[3][ii]<sp/>-<sp/>2.*<sp/>ztot);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>the<sp/>jacobian<sp/>mass/matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>jacobianMass<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_covarianceInit<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>sigm<sp/>=<sp/>jacobianMass.transpose()<sp/>*<sp/>m_covarianceInit<sp/>*<sp/>jacobianMass;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>sigm<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sigm<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/>sigm(0,<sp/>0);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>=<sp/>sqrt(sig);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resolution<sp/>=<sp/>sig;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>/=<sp/>2<sp/>*<sp/>initMass;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MassResol<sp/>=<sp/>sig;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxmass<sp/>=<sp/>initMass;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>2<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>-(maxmass<sp/>-<sp/>initMass)<sp/>*<sp/>(maxmass<sp/>-<sp/>initMass)<sp/>/<sp/>2.<sp/>/<sp/>MassResol<sp/>/<sp/>MassResol<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>log((maxmass<sp/>*<sp/>maxmass<sp/>-<sp/>m_conMass<sp/>*<sp/>m_conMass)<sp/>*<sp/>(maxmass<sp/>*<sp/>maxmass<sp/>-<sp/>m_conMass<sp/>*<sp/>m_conMass)<sp/>+<sp/>m_conMass<sp/>*<sp/>m_conMass<sp/>*<sp/>m_conWidth<sp/>*<sp/>m_conWidth);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>401;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ytest<sp/>=<sp/>initMass<sp/>+<sp/>(m_conMass<sp/>-<sp/>initMass)<sp/>/<sp/>400<sp/>*<sp/>i;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>-(ytest<sp/>-<sp/>initMass)<sp/>*<sp/>(ytest<sp/>-<sp/>initMass)<sp/>/<sp/>2.<sp/>/<sp/>MassResol<sp/>/<sp/>MassResol<sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>log((ytest<sp/>*<sp/>ytest<sp/>-<sp/>m_conMass<sp/>*<sp/>m_conMass)<sp/>*<sp/>(ytest<sp/>*<sp/>ytest<sp/>-<sp/>m_conMass<sp/>*<sp/>m_conMass)<sp/>+<sp/>m_conMass<sp/>*<sp/>m_conMass<sp/>*<sp/>m_conWidth<sp/>*<sp/>m_conWidth);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxmass<sp/>=<sp/>ytest;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>3<sp/>&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p[i];</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;likelihoodMass2:<sp/>maxmass<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>maxmass<sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxmass;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::massFitRun(ConstraintFitOutput&amp;<sp/>output,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zresol)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>entering<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_ignoreInputChecks<sp/>&amp;&amp;<sp/>!m_theInput.isOK())<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ConstraintFit::massFitRun()<sp/>the<sp/>input<sp/>is<sp/>not<sp/>OK.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ConstraintFit::massFitRun()(cont)<sp/>Following<sp/>H-&gt;4l<sp/>group<sp/>decision<sp/>(Feb<sp/>1,<sp/>2013),<sp/>this<sp/>event<sp/>will<sp/>not<sp/>be<sp/>fit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ConstraintFit::massFitRun()(cont)<sp/>To<sp/>bypass<sp/>this<sp/>behaviour<sp/>set<sp/>the<sp/>ingore<sp/>flag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TLorentzVector&gt;<sp/>particleList;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;m_nobj;i++)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLorentzVector<sp/>particle;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle.SetXYZM(m_parametersInit(0<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit(1<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersInit(2<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_objmass[i]);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleList.push_back(particle);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>covOut(5*m_nobj,5*m_nobj);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut.setZero();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;iobj&lt;m_nobj;iobj++)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=0;ii&lt;5;ii++)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;jj&lt;5;jj++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(ii+5*iobj,jj+5*iobj)<sp/>=<sp/>m_theInput.getCovarianceCartesian(iobj)(ii,jj);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>cov<sp/>1<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>covariance<sp/>matrix<sp/>from<sp/>cartesian<sp/>to<sp/>d0z0PhiThetaP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>covard0z0PhiThetaP;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covard0z0PhiThetaP.setZero();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovXYZTod0z0PhiThetaP(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.setFitOutput(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_VERBOSE(<sp/>&quot;massFitRun:<sp/>cov<sp/>1<sp/>&quot;<sp/>&lt;&lt;<sp/>covOut);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>1<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>parametersFit<sp/>=<sp/>m_parametersInit;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass<sp/>=<sp/>-1.;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_conHasWidth)<sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>m_conMass;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(zresol&lt;0.)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>likelihoodMass2();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mass<sp/>=<sp/>likelihoodMass(zresol);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>resolution/mass<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_resolution<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mass);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>use<sp/>chi2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>chi2<sp/>=<sp/>massFit(&amp;m_parametersInit,<sp/>&amp;m_covarianceInit,<sp/>mass,<sp/>&amp;parametersFit,<sp/>&amp;m_covarianceFinal);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>massFit(m_parametersInit,<sp/>m_covarianceInit,<sp/>mass,<sp/>parametersFit,<sp/>m_covarianceFinal);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TLorentzVector&gt;<sp/>particleList;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;m_nobj;i++)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLorentzVector<sp/>particle;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particle.SetXYZM(m_parametersFinal(0<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal(1<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal(2<sp/>+<sp/>i*m_parameters,0),</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_objmass[i]);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particleList.push_back(particle);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>3<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>covOut(5*m_nobj,5*m_nobj);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut.setZero();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;iobj&lt;m_nobj;iobj++)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=0;ii&lt;2;ii++)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=0;jj&lt;2;jj++)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(ii+5*iobj,jj+5*iobj)<sp/>=<sp/>m_theInput.getCovarianceCartesian(iobj)(ii,jj);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;iobj&lt;m_nobj;iobj++)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=2;ii&lt;5;ii++)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=2;jj&lt;5;jj++)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(ii+5*iobj,jj+5*iobj)<sp/>=<sp/>m_covarianceFinal(ii-2+iobj*3,jj-2+iobj*3);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>4<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empirical<sp/>corrections<sp/>for<sp/>constraint<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!m_conHasWidth)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correlation<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj1=0;iobj1&lt;m_nobj;iobj1++)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj2=0;iobj2&lt;m_nobj;iobj2++)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iobj1<sp/>==<sp/>iobj2)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii=2;ii&lt;5;ii++)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj=2;jj&lt;5;jj++)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(ii<sp/>+<sp/>5*iobj1,<sp/>jj+5*iobj2)<sp/>=<sp/>m_covarianceFinal(ii-2+iobj1*3,jj-2+iobj2*3);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>cov<sp/>2<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>covariance<sp/>matrix<sp/>from<sp/>cartesian<sp/>to<sp/>d0z0PhiThetaP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>covard0z0PhiThetaP;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covard0z0PhiThetaP.setZero();</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovXYZTod0z0PhiThetaP(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.setFitOutput(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>cov<sp/>2<sp/>&quot;<sp/>&lt;&lt;<sp/>covOut);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>5<sp/>conHasWidth<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_conHasWidth);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>5.5<sp/>conHasWidth<sp/>&quot;<sp/>&lt;&lt;<sp/>m_conHasWidth);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_conHasWidth)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLorentzVector<sp/>aa;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>m_nobj;<sp/>iobj++)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aa<sp/>+=<sp/>m_theInput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>massInit<sp/>=<sp/>aa.M();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>5.6<sp/>massInit<sp/>&quot;<sp/>&lt;&lt;<sp/>massInit);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(massInit&lt;83.e3)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>6<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covOut);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>m_nobj;<sp/>iobj++)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>5;<sp/>ii++)<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>5;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(ii+5*iobj,<sp/>jj+5*iobj)<sp/>=<sp/>m_theInput.getCovarianceCartesian(iobj)(ii,<sp/>jj);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>6.1<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covOut);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>7<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>resolInit;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>resolFinal;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>resolFinalnew;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolInit.reserve(m_nobj);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolFinal.reserve(m_nobj);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolFinalnew.reserve(m_nobj);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumResolInit=0.;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constraintWidthSquare<sp/>=<sp/></highlight><highlight class="comment">/*m_resolution*m_resolution<sp/>+<sp/>*/</highlight><highlight class="normal">m_conWidth*m_conWidth/2.35/2.35;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>m_nobj;<sp/>iobj++)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>7<sp/>iobj<sp/>&quot;<sp/>&lt;&lt;<sp/>iobj<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>m_theInput.getNConstituents());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolInit.push_back((m_theInput.getConstituentCovariance(iobj))(4,4));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>7<sp/>1<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>tmpMtx;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpMtx.setZero();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.getConstituentCovarianced0z0PhiThetaP(iobj,<sp/>tmpMtx);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolFinal.push_back(tmpMtx(4,4));</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resolFinal.push_back((output.getConstituentCovarianced0z0PhiThetaP(iobj))(4,4));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>7<sp/>2<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumResolInit<sp/>+=<sp/>resolInit[iobj];</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>###<sp/>&quot;&lt;&lt;<sp/>iobj<sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;<sp/>resolInit[iobj]<sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;resolFinal[iobj]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/>&quot;massFitRun:<sp/>8<sp/>\n&quot;<sp/>&lt;&lt;<sp/>covOut);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;iobj&lt;m_nobj;iobj++)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolFinalnew.push_back(<sp/>resolFinal[iobj]<sp/>+<sp/>constraintWidthSquare<sp/>*<sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolInit[iobj]*resolInit[iobj]</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/sumResolInit/sumResolInit<sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(4+5*iobj,4+5*iobj)<sp/>=<sp/><sp/>covOut(4+5*iobj,4+5*iobj)*resolFinalnew[iobj]/resolFinal[iobj];</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(3+5*iobj,3+5*iobj)<sp/>=<sp/><sp/>covOut(3+5*iobj,3+5*iobj)*resolFinalnew[iobj]/resolFinal[iobj];</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covOut(2+5*iobj,2+5*iobj)<sp/>=<sp/><sp/>covOut(2+5*iobj,2+5*iobj)*resolFinalnew[iobj]/resolFinal[iobj];</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>###<sp/>&quot;&lt;&lt;<sp/>iobj<sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;<sp/>resolInit[iobj]<sp/>&lt;&lt;&quot;\t&quot;&lt;&lt;resolFinal[iobj]&lt;&lt;&quot;\t&quot;&lt;&lt;<sp/>resolFinalnew[iobj]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>8.1<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covOut);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>9<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATH_MSG_DEBUG(<sp/>&quot;massFitRun:<sp/>cov<sp/>3<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>covariance<sp/>matrix<sp/>from<sp/>cartesian<sp/>to<sp/>d0z0PhiThetaP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>covard0z0PhiThetaP;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convertCovXYZTod0z0PhiThetaP(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.setFitOutput(particleList,<sp/>covOut,<sp/>covard0z0PhiThetaP);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>cov<sp/>3<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covOut);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFitRun:<sp/>end<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::massFitCalculation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/>p0)</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=4;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columns<sp/>=<sp/>m_nobj;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[rows]<sp/>;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[columns];</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj=0;<sp/>iobj&lt;m_nobj;<sp/>iobj++)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>m_objmass[iobj]*m_objmass[iobj];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;3;i++)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[i][iobj]<sp/>=<sp/>p0(i+3*iobj,<sp/>0);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>+=<sp/>p[i][iobj]*p[i][iobj];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[3][iobj]<sp/>=<sp/>sqrt(p[3][iobj]);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Etot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xtot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ytot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ztot<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;m_nobj;ij++)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Etot<sp/>+=<sp/>p[3][ij];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xtot<sp/>+=<sp/>p[0][ij];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ytot<sp/>+=<sp/>p[1][ij];</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ztot<sp/>+=<sp/>p[2][ij];</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>XYZtot[3]<sp/>=<sp/>{Xtot,<sp/>Ytot,<sp/>Ztot};</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>constraintD;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;m_nobj;ij++)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ik=0;ik&lt;3;ik++)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintD.push_back((2.*(Etot)<sp/>*<sp/>p[ik][ij]<sp/>/<sp/>p[3][ij]<sp/>-<sp/>2.*<sp/>XYZtot[ik]));</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constraintd<sp/>=<sp/><sp/>Etot<sp/>*<sp/>Etot<sp/>-<sp/>Xtot<sp/>*<sp/>Xtot<sp/>-<sp/>Ytot<sp/>*<sp/>Ytot<sp/>-<sp/>Ztot<sp/>*<sp/>Ztot;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintd<sp/>=<sp/>constraintd<sp/>-<sp/>mass<sp/>*<sp/>mass;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;constraint<sp/>=<sp/>&quot;<sp/>&lt;&lt;constraintd<sp/>&lt;&lt;<sp/>&quot;<sp/>mass<sp/>value<sp/>&quot;<sp/>&lt;&lt;mass&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(1,3*m_nobj);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;3*m_nobj;ij++)</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>(0,<sp/>ij)<sp/>=<sp/>constraintD.at(ij);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(1,1)<sp/>d;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d(0,<sp/>0)<sp/>=<sp/>constraintd;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>DVD(<ref refid="d7/db3/structD" kindref="compound">D</ref><sp/>*<sp/>var<sp/>*<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>.transpose());</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>DVDinverse(1,1);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DVDinverse=DVD.inverse();</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>VD(DVDinverse);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>lambda(VD<sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>test(p0<sp/>-<sp/>var<sp/>*<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>.transpose()<sp/>*<sp/>lambda);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/>Vp(var<sp/>-<sp/>var<sp/>*<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref>.transpose()<sp/>*<sp/>VD<sp/>*<sp/><ref refid="d7/db3/structD" kindref="compound">D</ref><sp/>*<sp/>var);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ij=0;ij&lt;3*m_nobj;ij++)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p0(ij,<sp/>0)<sp/>=<sp/>test(ij,<sp/>0);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parametersFinal(ij,0)<sp/>=<sp/>p0(ij,0);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jk<sp/>=<sp/>0;<sp/>jk<sp/>&lt;<sp/>3<sp/>*<sp/>m_nobj;<sp/>jk++)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_covarianceFinal(ij,jk)<sp/>=<sp/>Vp(ij,jk);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constraintValue<sp/>=<sp/>d(0,<sp/>0);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>rows<sp/>;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p[i];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constraintValue;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::massFit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/></highlight><highlight class="comment">/*p0*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass,<sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/>pOut,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref>&amp;<sp/></highlight><highlight class="comment">/*varout*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>ivar<sp/>=<sp/>var.inverse();</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doIter<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>maxIterations<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>iIter<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>constraintValue<sp/>=<sp/>-1.e10;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFit:<sp/>transpose<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pOut.transpose()<sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iterations<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_parametersFinal</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cov<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_covarianceFinal</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iteration<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(doIter)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>p_old(pOut);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintValue<sp/>=<sp/>massFitCalculation(var,<sp/>mass,<sp/>pOut);<sp/></highlight><highlight class="comment">//call<sp/>the<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convergence<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>the<sp/>parameters<sp/>should<sp/>not<sp/>change<sp/>too<sp/>much<sp/>(&lt;1.e-6<sp/>relative<sp/>change)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>the<sp/>constraint<sp/>should<sp/>be<sp/>satisfied<sp/>very<sp/>well<sp/>(&lt;1.e-6<sp/>absolute)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxDiff<sp/>=<sp/>5.e15;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>diff<sp/>=<sp/>(pOut<sp/>-<sp/>p_old);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_parameters<sp/>*<sp/>m_nobj;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff(i,<sp/>0)<sp/>=<sp/>diff(i,<sp/>0)<sp/>/<sp/>p_old(i,<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maxDiff<sp/>&gt;<sp/>diff(i,<sp/>0))</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDiff<sp/>=<sp/>diff(i,<sp/>0);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((maxDiff<sp/>&lt;<sp/>1.e-4<sp/>&amp;&amp;<sp/>fabs(constraintValue)<sp/>&lt;<sp/>5.e-5)<sp/>||<sp/>maxIterations<sp/>&lt;=<sp/>iIter)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doIter<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFit:<sp/>transpose<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pOut.transpose()<sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iterations<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_parametersFinal</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cov<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_covarianceFinal</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\n<sp/>Iteration<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>doIter<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>doIter);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iIter++;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE(<sp/></highlight><highlight class="stringliteral">&quot;massFit:<sp/>transpose<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pOut.transpose()<sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iterations<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_parametersFinal</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cov<sp/>matrix<sp/>\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_covarianceFinal</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Iteration<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iIter);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>chi2<sp/>=<sp/>0.;//calculateChi2(p0,<sp/>var,<sp/>mass);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::getMassError<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitInput&amp;<sp/>firstInput,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitInput&amp;<sp/>secondInput)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartFirst<sp/><sp/>=<sp/>firstInput.getNConstituents();</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartSecond<sp/>=<sp/>secondInput.getNConstituents();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPart<sp/>=<sp/>nPartFirst<sp/>+<sp/>nPartSecond;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TLorentzVector&gt;<sp/>particles(nPart);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AmgMatrix(3,3)&gt;<sp/>covariances(nPart);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>firstInput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj].setZero();</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj]<sp/>=<sp/>firstInput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstInput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj]);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>secondInput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj<sp/>+<sp/>nPartFirst].setZero();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj<sp/>+<sp/>nPartFirst]<sp/>=<sp/>secondInput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondInput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj<sp/>+<sp/>nPartFirst]);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getMassError(<sp/>particles,<sp/>covariances<sp/>);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::getMassError<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitOutput&amp;<sp/>fitOutput,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitInput&amp;<sp/><sp/>extraInput)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartFirst<sp/><sp/>=<sp/>fitOutput.getNConstituents();</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartSecond<sp/>=<sp/>extraInput.getNConstituents();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPart<sp/>=<sp/>nPartFirst<sp/>+<sp/>nPartSecond;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TLorentzVector&gt;<sp/>particles(nPart);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AmgMatrix(3,3)&gt;<sp/>covariances(nPart);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>fitOutput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj].setZero();</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj]<sp/>=<sp/>fitOutput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitOutput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj]);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>extraInput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj<sp/>+<sp/>nPartFirst].setZero();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj<sp/>+<sp/>nPartFirst]<sp/>=<sp/>extraInput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extraInput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj<sp/>+<sp/>nPartFirst]);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getMassError(<sp/>particles,<sp/>covariances<sp/>);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::getMassError<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitOutput&amp;<sp/>fitOutput,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstraintFitOutput&amp;<sp/>secondFitOutput)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartFirst<sp/><sp/>=<sp/>fitOutput.getNConstituents();</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPartSecond<sp/>=<sp/>secondFitOutput.getNConstituents();</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPart<sp/>=<sp/>nPartFirst<sp/>+<sp/>nPartSecond;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TLorentzVector&gt;<sp/>particles(nPart);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AmgMatrix(3,3)&gt;<sp/>covariances(nPart);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>fitOutput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj].setZero();</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj]<sp/>=<sp/>fitOutput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitOutput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj]);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>0;<sp/>iobj<sp/>&lt;<sp/>secondFitOutput.getNConstituents();<sp/>++iobj)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covariances[iobj<sp/>+<sp/>nPartFirst].setZero();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>particles[iobj<sp/>+<sp/>nPartFirst]<sp/>=<sp/>secondFitOutput.getConstituentFourVector(iobj);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondFitOutput.getConstituentCovariancePhiThetaP(iobj,<sp/>covariances[iobj<sp/>+<sp/>nPartFirst]);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getMassError(<sp/>particles,<sp/>covariances<sp/>);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::getMassError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TLorentzVector&gt;&amp;<sp/>particles,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;AmgMatrix(3,3)&gt;&amp;<sp/>covariances)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>masserror=0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(particles.size()<sp/>!=<sp/>covariances.size())<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;getMassError:<sp/>Number<sp/>of<sp/>particles<sp/>is<sp/>not<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>covariance<sp/>matrices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1E11;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>1<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>particles.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covariances.size());</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//composite<sp/>lorentz<sp/>vector<sp/>and<sp/>its<sp/>invariant<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TLorentzVector<sp/>combv;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lv<sp/>:<sp/>particles<sp/>)<sp/>combv<sp/>+=<sp/>lv;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>invmass<sp/>=<sp/>combv.M();</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>1.1<sp/>invmass<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>invmass);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculation<sp/>of<sp/>1x4<sp/>jacobian<sp/>-<sp/>used<sp/>in<sp/>derivation<sp/>of<sp/>var(M)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>jacobianNPtoM(1,4);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianNPtoM.setZero();</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianNPtoM(0,0)<sp/>=<sp/>-1.*combv.Px()/invmass;<sp/><sp/></highlight><highlight class="comment">//<sp/>dM/dpxN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianNPtoM(0,1)<sp/>=<sp/>-1.*combv.Py()/invmass;<sp/><sp/></highlight><highlight class="comment">//<sp/>dM/dpyN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianNPtoM(0,2)<sp/>=<sp/>-1.*combv.Pz()/invmass;<sp/><sp/></highlight><highlight class="comment">//<sp/>dM/dpzN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobianNPtoM(0,3)<sp/>=<sp/><sp/><sp/><sp/><sp/>combv.E()/invmass;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dM/dEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>2\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>jacobianNPtoM);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iobj<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lv<sp/>:<sp/>particles<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++iobj;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>1.2<sp/>iobj<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iobj);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constituent<sp/>3*3<sp/>covariance<sp/>matrix<sp/>(Phi,<sp/>Theta,<sp/>P)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AmgMatrix(3,3)&amp;<sp/>covPhiThetaP<sp/>=<sp/>covariances[iobj];</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>1.3<sp/>covPhiThetaP\n<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covPhiThetaP);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>lv.Theta();</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/><sp/><sp/>=<sp/>lv.Phi();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/><sp/><sp/><sp/><sp/>=<sp/>lv.P();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/><sp/><sp/><sp/><sp/>=<sp/>lv.E();</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/><sp/><sp/><sp/><sp/>=<sp/>lv.M();<sp/></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>2.1<sp/>iobj<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iobj<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;covPhiThetaP\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covPhiThetaP);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>(Phi,<sp/>Theta,<sp/>P)<sp/>to<sp/>(Phi,<sp/>eta,<sp/>P),<sp/>as<sp/>covPhiEtaP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(3,3)<sp/>jacobian1;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian1.setZero();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian1(0,0)<sp/>=<sp/><sp/>1.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian1(1,1)<sp/>=<sp/>-1*(1./sin(theta));<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deta/dtheta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian1(2,2)<sp/>=<sp/><sp/>1.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(3,3)<sp/>covPhiEtaP<sp/>=<sp/>jacobian1<sp/>*<sp/>covPhiThetaP<sp/>*<sp/>jacobian1.transpose();</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(&quot;getMassError:<sp/>2.2<sp/>jacobian1\n&quot;<sp/>&lt;&lt;<sp/>jacobian1);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(&quot;getMassError:<sp/>2.4<sp/>covPhiEtaP\n&quot;<sp/>&lt;&lt;<sp/>covPhiEtaP);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rearrange<sp/>things<sp/>to<sp/>get<sp/>(E,<sp/>eta,<sp/>phi,<sp/>M),<sp/><sp/>as<sp/>covEEtaPhiM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(4,4)<sp/>covEEtaPhiM;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covEEtaPhiM.setZero();</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covEEtaPhiM(i,j)<sp/>=<sp/>covEEtaPhiM(j,i)<sp/>=<sp/>covPhiEtaP(2-i,2-j);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(</highlight><highlight class="stringliteral">&quot;getMassError:<sp/>3<sp/>covEEtaPhiM\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>covEEtaPhiM);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>(E,<sp/>eta,<sp/>phi,<sp/>M)<sp/>to<sp/>(px,py,pz,E)<sp/>representation,<sp/>as<sp/>covPxPyPzE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(4,4)<sp/>jacobian2;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2.setZero();</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(0,0)<sp/>=<sp/><sp/>e/p<sp/>*<sp/>sin(theta)*cos(phi);<sp/></highlight><highlight class="comment">//<sp/>dpx/dE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(1,0)<sp/>=<sp/><sp/>e/p<sp/>*<sp/>sin(theta)*sin(phi);<sp/></highlight><highlight class="comment">//<sp/>dpy/dE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(2,0)<sp/>=<sp/><sp/>e/p<sp/>*<sp/>cos(theta);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dpy/dE<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(3,0)<sp/>=<sp/><sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dE/dE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(0,1)<sp/>=<sp/><sp/>-p<sp/>*<sp/>cos(phi)<sp/>*<sp/>cos(theta)*sin(theta);<sp/></highlight><highlight class="comment">//<sp/>dpx/deta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(1,1)<sp/>=<sp/><sp/>-p<sp/>*<sp/>sin(phi)<sp/>*<sp/>cos(theta)*sin(theta);<sp/></highlight><highlight class="comment">//<sp/>dpy/deta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(2,1)<sp/>=<sp/><sp/><sp/>p<sp/>*<sp/>sin(theta)*sin(theta);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dpz/deta;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(0,2)<sp/>=<sp/><sp/>-p<sp/>*<sp/>sin(theta)<sp/>*<sp/>sin(phi);<sp/><sp/></highlight><highlight class="comment">//<sp/>dpx/dphi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(1,2)<sp/>=<sp/><sp/><sp/>p<sp/>*<sp/>sin(theta)<sp/>*<sp/>cos(phi);<sp/><sp/></highlight><highlight class="comment">//<sp/>dpy/dphi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(0,3)<sp/>=<sp/><sp/>-m/p<sp/>*<sp/>sin(theta)*cos(phi);<sp/></highlight><highlight class="comment">//<sp/>dpx/dM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(1,3)<sp/>=<sp/><sp/>-m/p<sp/>*<sp/>sin(theta)*sin(phi);<sp/></highlight><highlight class="comment">//<sp/>dpy/dM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian2(2,3)<sp/>=<sp/><sp/>-m/p<sp/>*<sp/>cos(theta);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dpz/dM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(4,4)<sp/>covPxPyPzE<sp/>=<sp/>jacobian2<sp/>*<sp/>covEEtaPhiM<sp/>*<sp/>jacobian2.transpose();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(&quot;getMassError:<sp/>4<sp/>jacobian2\n&quot;<sp/>&lt;&lt;<sp/>jacobian2);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(&quot;getMassError:<sp/>5<sp/>covPxPyPzE\n&quot;<sp/>&lt;&lt;<sp/>covPxPyPzE);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>mass<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Similarity<sp/>transform:<sp/>C<sp/>=<sp/>A*B*A^T<sp/>(from<sp/>egammaFourMomentumError/GeneralUtils.cxx))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX<sp/><sp/>em<sp/>=<sp/>jacobianNPtoM<sp/>*<sp/>covPxPyPzE<sp/>*<sp/>jacobianNPtoM.transpose();<sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masserror<sp/>+=<sp/>em(0,0);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_VERBOSE<sp/>(&quot;getMassError:<sp/>6<sp/>em\n&quot;<sp/>&lt;&lt;<sp/>em);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Return<sp/>square<sp/>root<sp/>of<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(masserror<sp/>&lt;<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;getMassError:<sp/>Mass<sp/>covariance<sp/>element<sp/>less<sp/>than<sp/>zero!<sp/>Returning<sp/>1E11<sp/>...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>masserror<sp/>=<sp/>1E11;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(masserror);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::doSanityChecksOnCovariance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLorentzVector&amp;<sp/>vector,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AmgMatrix(5,5)&amp;<sp/>covar)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1099"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOK<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sqrt(covar(qP,qP))/vector.P()&gt;1.0<sp/>)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOK<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ZMassConstraint::ConstraintFit::doSanityChecksOnCovariance::<sp/>Fractional<sp/>uncertainty<sp/>on<sp/>P<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sqrt(covar(qP,qP))/vector.P()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&gt;<sp/>1<sp/>...this<sp/>is<sp/>not<sp/>ok...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>covar(theta,theta)<sp/>&gt;<sp/>1.e-2)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOK<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ZMassConstraint::ConstraintFit::doSanityChecksOnCovariance::<sp/>Uncertainty<sp/>on<sp/>Theta<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>covar(theta,theta)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&gt;<sp/>10^-2<sp/>...this<sp/>is<sp/>not<sp/>ok&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>covar(phi0,phi0)<sp/>&gt;<sp/>1.e-2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOK<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;ZMassConstraint::ConstraintFit::doSanityChecksOnCovariance::<sp/>Uncertainty<sp/>on<sp/>Phi<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>covar(phi0,phi0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&gt;<sp/>10^-2<sp/>...this<sp/>is<sp/>not<sp/>ok&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;5;i++)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;j&lt;5;j++)<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==j)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(covar(i,j))/sqrt(covar(i,i))/sqrt(covar(j,j))<sp/>&gt;<sp/>1.)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(<sp/></highlight><highlight class="stringliteral">&quot;ZMassConstraint::ConstraintFit::doSanityChecksOnCovariance::<sp/>Off-diagonal<sp/>term<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&gt;<sp/>1<sp/>-<sp/>doesn&apos;t<sp/>look<sp/>ok&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isOK<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isOK;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::convertCovd0z0PhiThetaPToXYZ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TLorentzVector&amp;<sp/>fourVec,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AmgMatrix(5,5)&amp;<sp/>covard0z0PhiThetaP,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)&amp;<sp/>covarXYZ)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1137"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//going<sp/>from<sp/>d0,z0,phi,theta,P<sp/>--&gt;<sp/>d0,z0,px,py,pz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/><sp/><sp/>=<sp/>fourVec.Phi();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>fourVec.Theta();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/><sp/><sp/><sp/><sp/>=<sp/>fourVec.P();</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;:::::L<sp/>\t&quot;&lt;&lt;P&lt;&lt;&quot;\t&quot;&lt;&lt;<sp/>phi&lt;&lt;&quot;\t&quot;&lt;&lt;theta&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AmgMatrix(5,5)<sp/>jacobian;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian.setZero();</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(0,0)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(1,1)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(2,2)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(2,3)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(3,2)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(3,3)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(3,4)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(4,2)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(4,3)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jacobian(4,4)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Cos(theta);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covarXYZ<sp/>=<sp/>jacobian.transpose()<sp/>*<sp/>covard0z0PhiThetaP<sp/>*<sp/>jacobian;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;initial\n&quot;&lt;&lt;<sp/>covar<sp/>&lt;&lt;<sp/>&quot;final<sp/>\n&quot;<sp/>&lt;&lt;<sp/>newcovariance<sp/>&lt;&lt;<sp/>&quot;jac\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>jacobian<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::convertCovXYZTod0z0PhiThetaP(const<sp/>std::vector&lt;TLorentzVector&gt;&amp;<sp/>particleList,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Amg::MatrixX&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covarXYZ,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Amg::MatrixX&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covard0z0PhiThetaP)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1168"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matrixSize<sp/>=<sp/>5<sp/>*<sp/>particleList.size();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>Jacobian(matrixSize,<sp/>matrixSize);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian.setZero();</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>particleList.size();<sp/>ii++)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/><sp/><sp/>=<sp/>particleList.at(ii).Phi();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta<sp/>=<sp/>particleList.at(ii).Theta();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/><sp/><sp/><sp/><sp/>=<sp/>particleList.at(ii).P();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(<sp/><sp/><sp/><sp/>5*ii,<sp/><sp/><sp/><sp/><sp/>5*ii)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(1<sp/>+<sp/>5*ii,<sp/>1<sp/>+<sp/>5*ii)<sp/>=<sp/>1.;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(2<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(2<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/>P<sp/>*<sp/>TMath::Cos(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(3<sp/>+<sp/>5*ii,<sp/>4<sp/>+<sp/>5*ii)<sp/>=<sp/>-P<sp/>*<sp/>TMath::Sin(theta);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>2<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Cos(phi);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>3<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Sin(theta)<sp/>*<sp/>TMath::Sin(phi);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobian(4<sp/>+<sp/>5*ii,<sp/>4<sp/>+<sp/>5*ii)<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/>TMath::Cos(theta);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d8a/namespaceAmg_1ad6b7214916d067954ff8b37cd693f701" kindref="member">Amg::MatrixX</ref><sp/>Jacobianinverse(matrixSize,<sp/>matrixSize);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jacobianinverse=Jacobian.inverse();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>covard0z0PhiThetaP<sp/>=<sp/>Jacobianinverse.transpose()<sp/>*<sp/>covarXYZ<sp/>*<sp/>Jacobianinverse;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstraintFit::retrieve_eta_calo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d5/d4c/classxAOD_1_1IParticle" kindref="compound">xAOD::IParticle</ref>&amp;<sp/><sp/>part)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1197"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta_calo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound" tooltip="Class describing an e/gamma.">xAOD::Egamma</ref>*<sp/>eg<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="d4/d2b/classxAOD_1_1Egamma" kindref="compound" tooltip="Class describing an e/gamma.">xAOD::Egamma</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(&amp;part);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eg)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;retrieve_eta_calo<sp/>-<sp/>unable<sp/>to<sp/>cast<sp/>to<sp/>Egamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eta_calo;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>&amp;<sp/>cluster<sp/>=<sp/>*eg-&gt;caloCluster();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cluster.<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa5a145a111302a485124029ceedd0be6" kindref="member" tooltip="Retrieve individual moment.">retrieveMoment</ref>(<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa91f1b5a4ed623de012f0dff0b9df2d7a214c633e23b3d2614fff381449122d5f" kindref="member" tooltip="Eta in the calo frame (for egamma).">xAOD::CaloCluster::ETACALOFRAME</ref>,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_calo))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cluster.<ref refid="d5/d4c/classxAOD_1_1IParticle_1a73d35d149fce4bcc1ce55da0faf8e0d5" kindref="member">isAvailable</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;etaCalo&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_calo<sp/>=<sp/>cluster.<ref refid="d5/d4c/classxAOD_1_1IParticle_1a27c59a50a203be500dae35e8ab217c75" kindref="member">auxdata</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;etaCalo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;retrieve_eta_calo<sp/>-<sp/>etaCalo<sp/>not<sp/>available<sp/>as<sp/>auxilliary<sp/>variable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_WARNING(</highlight><highlight class="stringliteral">&quot;retrieve_eta_calo<sp/>-<sp/>using<sp/>eta<sp/>as<sp/>etaCalo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eta_calo<sp/>=<sp/>cluster.<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a1d8549783e3ea14d493d843256e4a925" kindref="member" tooltip="The pseudorapidity () of the particle.">eta</ref>();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eta_calo;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ZMassConstraint/Root/ConstraintFit.cxx"/>
  </compounddef>
</doxygen>
