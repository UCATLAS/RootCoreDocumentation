<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d23/list_8h" kind="file">
    <compoundname>list.h</compoundname>
    <includedby refid="d7/d3a/libcalg_8h" local="no">/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</includedby>
    <invincdepgraph>
      <node id="108181">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/libcalg.h</label>
        <link refid="d7/d3a/libcalg_8h_source"/>
      </node>
      <node id="108180">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h</label>
        <link refid="list.h"/>
        <childnode refid="108181" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="db/da8/struct__ListIterator" prot="public">_ListIterator</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="da/d23/list_8h_1a8010c3d97f1984c6a531eaaf3a1b6394" prot="public" static="no">
        <name>LIST_NULL</name>
        <initializer>((void *) 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> null <ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="94" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" prot="public" static="no">
        <type>struct _ListEntry</type>
        <definition>typedef struct _ListEntry ListEntry</definition>
        <argsstring></argsstring>
        <name>ListEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents an entry in a doubly-linked list. The empty list is represented by a NULL pointer. To initialise a new doubly linked list, simply create a variable of this type containing a pointer to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d23/list_8h_1ae483713181d296798d4cd8d72e6fea14" prot="public" static="no">
        <type>struct <ref refid="db/da8/struct__ListIterator" kindref="compound">_ListIterator</ref></type>
        <definition>typedef struct _ListIterator ListIterator</definition>
        <argsstring></argsstring>
        <name>ListIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Structure used to iterate over a list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="73" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* ListValue</definition>
        <argsstring></argsstring>
        <name>ListValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> value stored in a list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="79" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d23/list_8h_1aee173fa6254507a70763526d724df94d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ListCompareFunc)(ListValue value1, ListValue value2)</definition>
        <argsstring>)(ListValue value1, ListValue value2)</argsstring>
        <name>ListCompareFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used to compare values in a list when sorting.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first value to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second value to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> negative value if value1 should be sorted before value2, a positive value if value1 should be sorted after value2, zero if value1 and value2 are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="106" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* ListEqualFunc)(ListValue value1, ListValue value2)</definition>
        <argsstring>)(ListValue value1, ListValue value2)</argsstring>
        <name>ListEqualFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function used to determine of two values in a list are equal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first value to compare. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second value to compare. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> non-zero value if value1 and value2 are equal, zero if they are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="118" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d23/list_8h_1a5ddd883e33e0499a9b2680a798981229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_free</definition>
        <argsstring>(ListEntry *list)</argsstring>
        <name>list_free</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free an entire list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to free. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="126"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1adf619b8963293e2d1a99bb15e583e178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_prepend</definition>
        <argsstring>(ListEntry **list, ListValue data)</argsstring>
        <name>list_prepend</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepend a value to the start of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to prepend to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to prepend. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new entry in the list, or NULL if it was not possible to allocate the memory for the new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="137"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a3e2aa068b946c35b3a12b77351f759fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_append</definition>
        <argsstring>(ListEntry **list, ListValue data)</argsstring>
        <name>list_append</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a value to the end of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to append to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new entry in the list, or NULL if it was not possible to allocate the memory for the new entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="148"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1ac1c0b39d69c666c9795baf9afb62dfc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_prev</definition>
        <argsstring>(ListEntry *listentry)</argsstring>
        <name>list_prev</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>listentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the previous entry in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The previous entry in the list, or NULL if this was the first entry in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="158"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a6a1975bf5a5860151602bfc421f94ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_next</definition>
        <argsstring>(ListEntry *listentry)</argsstring>
        <name>list_next</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>listentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the next entry in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next entry in the list, or NULL if this was the last entry in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="168"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a0d79964ad836aafad9189e755f236e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
        <definition>ListValue list_data</definition>
        <argsstring>(ListEntry *listentry)</argsstring>
        <name>list_data</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>listentry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value at a list entry.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listentry</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value stored at the list entry. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="177"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a49de287e44ec1ebb465edf6088bb4c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_nth_entry</definition>
        <argsstring>(ListEntry *list, int n)</argsstring>
        <name>list_nth_entry</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the entry at a specified index in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the list . </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The entry at the specified index, or NULL if out of range. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="187"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a43ac27d881605dca802f9757f36c379f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
        <definition>ListValue list_nth_data</definition>
        <argsstring>(ListEntry *list, int n)</argsstring>
        <name>list_nth_data</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the value at a specified index in the list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The index into the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the specified index, or <ref refid="da/d23/list_8h_1a8010c3d97f1984c6a531eaaf3a1b6394" kindref="member">LIST_NULL</ref> if unsuccessful. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="198"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a53ad851af7ea509f2ed419418c0e04c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int list_length</definition>
        <argsstring>(ListEntry *list)</argsstring>
        <name>list_length</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the length of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of entries in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="207"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a74d9e33fcba685a4d3cd212d0c3313be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref> *</type>
        <definition>ListValue* list_to_array</definition>
        <argsstring>(ListEntry *list)</argsstring>
        <name>list_to_array</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="db/db2/structC" kindref="compound">C</ref> array containing the contents of a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> newly-allocated <ref refid="db/db2/structC" kindref="compound">C</ref> array containing all values in the list, or NULL if it was not possible to allocate the memory. The length of the array is equal to the length of the list (see <ref refid="da/d23/list_8h_1a53ad851af7ea509f2ed419418c0e04c8" kindref="member">list_length</ref>). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="219"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1aa7af2d58bcf10b500ef2af09731e6ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int list_remove_entry</definition>
        <argsstring>(ListEntry **list, ListEntry *entry)</argsstring>
        <name>list_remove_entry</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an entry from a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The list entry to remove . </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the entry is not found in the list, returns zero, else returns non-zero. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="230"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a078a0384f655923e89a5ab689afee2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int list_remove_data</definition>
        <argsstring>(ListEntry **list, ListEqualFunc callback, ListValue data)</argsstring>
        <name>list_remove_data</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" kindref="member">ListEqualFunc</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove all occurrences of a particular value from a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke to compare values in the list with the value to be removed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to remove from the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of entries removed from the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="242"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a4a05a25ec5cc4d516ea416b05afe6e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_sort</definition>
        <argsstring>(ListEntry **list, ListCompareFunc compare_func)</argsstring>
        <name>list_sort</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1aee173fa6254507a70763526d724df94d" kindref="member">ListCompareFunc</ref></type>
          <declname>compare_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the list to sort. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function used to compare values in the list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="251"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a41b902714baab2455a1666b92af121ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
        <definition>ListEntry* list_find_data</definition>
        <argsstring>(ListEntry *list, ListEqualFunc callback, ListValue data)</argsstring>
        <name>list_find_data</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" kindref="member">ListEqualFunc</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the entry for a particular value in a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to invoke to compare values in the list with the value to be searched for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The list entry of the item being searched for, or NULL if not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="266"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a2df879755af938cf60026c07f5d3f17d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_iterate</definition>
        <argsstring>(ListEntry **list, ListIterator *iter)</argsstring>
        <name>list_iterate</name>
        <param>
          <type><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> **</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref> *</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise a <ref refid="da/d23/list_8h_1ae483713181d296798d4cd8d72e6fea14" kindref="member">ListIterator</ref> structure to iterate over a list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pointer to the list to iterate over. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iter</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> pointer to an iterator structure to initialise. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="275"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a68037e2669a30903fbebc6e3fbdb6113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int list_iter_has_more</definition>
        <argsstring>(ListIterator *iterator)</argsstring>
        <name>list_iter_has_more</name>
        <param>
          <type><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if there are more values in the list to iterate over.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Zero if there are no more values in the list to iterate over, non-zero if there are more values to read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="286"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1af9dfd0543f2d9da359dec37acc196b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref></type>
        <definition>ListValue list_iter_next</definition>
        <argsstring>(ListIterator *iterator)</argsstring>
        <name>list_iter_next</name>
        <param>
          <type><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using a list iterator, retrieve the next value from the list.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next value from the list, or <ref refid="da/d23/list_8h_1a8010c3d97f1984c6a531eaaf3a1b6394" kindref="member">LIST_NULL</ref> if there are no more values in the list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="296"/>
      </memberdef>
      <memberdef kind="function" id="da/d23/list_8h_1a9b833e1575f5904b96e50fdc2bed7e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_iter_remove</definition>
        <argsstring>(ListIterator *iterator)</argsstring>
        <name>list_iter_remove</name>
        <param>
          <type><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref> *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete the current entry in the list (the value last returned from list_iter_next)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>The list iterator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h" line="305"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Doubly-linked list. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="d4/dc4/structA" kindref="compound">A</ref> doubly-linked list stores a collection of values. Each entry in the list (represented by a pointer a <ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> structure) contains a link to the next entry and the previous entry. It is therefore possible to iterate over entries in the list in either direction.</para><para>To create an empty list, create a new variable which is a pointer to a <ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref> structure, and initialise it to NULL. To destroy an entire list, use <ref refid="da/d23/list_8h_1a5ddd883e33e0499a9b2680a798981229" kindref="member">list_free</ref>.</para><para>To add a value to a list, use <ref refid="da/d23/list_8h_1a3e2aa068b946c35b3a12b77351f759fc" kindref="member">list_append</ref> or <ref refid="da/d23/list_8h_1adf619b8963293e2d1a99bb15e583e178" kindref="member">list_prepend</ref>.</para><para>To remove a value from a list, use <ref refid="da/d23/list_8h_1aa7af2d58bcf10b500ef2af09731e6ecb" kindref="member">list_remove_entry</ref> or <ref refid="da/d23/list_8h_1a078a0384f655923e89a5ab689afee2df" kindref="member">list_remove_data</ref>.</para><para>To iterate over entries in a list, use <ref refid="da/d23/list_8h_1a2df879755af938cf60026c07f5d3f17d" kindref="member">list_iterate</ref> to initialise a <ref refid="da/d23/list_8h_1ae483713181d296798d4cd8d72e6fea14" kindref="member">ListIterator</ref> structure, with <ref refid="da/d23/list_8h_1af9dfd0543f2d9da359dec37acc196b5b" kindref="member">list_iter_next</ref> and <ref refid="da/d23/list_8h_1a68037e2669a30903fbebc6e3fbdb6113" kindref="member">list_iter_has_more</ref> to retrieve each value in turn. <ref refid="da/d23/list_8h_1a9b833e1575f5904b96e50fdc2bed7e6d" kindref="member">list_iter_remove</ref> can be used to remove the current entry.</para><para>To access an entry in the list by index, use <ref refid="da/d23/list_8h_1a49de287e44ec1ebb465edf6088bb4c3e" kindref="member">list_nth_entry</ref> or <ref refid="da/d23/list_8h_1a43ac27d881605dca802f9757f36c379f" kindref="member">list_nth_data</ref>.</para><para>To sort a list, use <ref refid="da/d23/list_8h_1a4a05a25ec5cc4d516ea416b05afe6e00" kindref="member">list_sort</ref>. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2005-2008,<sp/>Simon<sp/>Howard</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">for<sp/>any<sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">that<sp/>the<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>all<sp/>copies.<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">WARRANTIES<sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES<sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment">CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor">#ifndef<sp/>ALGORITHM_LIST_H</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ALGORITHM_LIST_H</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="67" refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">_ListEntry<sp/><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="da/d23/list_8h_1ae483713181d296798d4cd8d72e6fea14" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/da8/struct__ListIterator" kindref="compound">_ListIterator</ref><sp/><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="da/d23/list_8h_1a5ea9bb4d3d61f142ac770602c68077de" kindref="member">ListValue</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="db/da8/struct__ListIterator" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/da8/struct__ListIterator" kindref="compound">_ListIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**prev_next;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*current;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="da/d23/list_8h_1a8010c3d97f1984c6a531eaaf3a1b6394" refkind="member"><highlight class="preprocessor">#define<sp/>LIST_NULL<sp/>((void<sp/>*)<sp/>0)</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="106" refid="da/d23/list_8h_1aee173fa6254507a70763526d724df94d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="da/d23/list_8h_1aee173fa6254507a70763526d724df94d" kindref="member">ListCompareFunc</ref>)(ListValue<sp/>value1,<sp/>ListValue<sp/>value2);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" kindref="member">ListEqualFunc</ref>)(ListValue<sp/>value1,<sp/>ListValue<sp/>value2);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a5ddd883e33e0499a9b2680a798981229" kindref="member">list_free</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1adf619b8963293e2d1a99bb15e583e178" kindref="member">list_prepend</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/>ListValue<sp/>data);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1a3e2aa068b946c35b3a12b77351f759fc" kindref="member">list_append</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/>ListValue<sp/>data);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1ac1c0b39d69c666c9795baf9afb62dfc7" kindref="member">list_prev</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*listentry);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1a6a1975bf5a5860151602bfc421f94ef4" kindref="member">list_next</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*listentry);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">ListValue<sp/><ref refid="da/d23/list_8h_1a0d79964ad836aafad9189e755f236e7e" kindref="member">list_data</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*listentry);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1a49de287e44ec1ebb465edf6088bb4c3e" kindref="member">list_nth_entry</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">ListValue<sp/><ref refid="da/d23/list_8h_1a43ac27d881605dca802f9757f36c379f" kindref="member">list_nth_data</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a53ad851af7ea509f2ed419418c0e04c8" kindref="member">list_length</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">ListValue<sp/>*<ref refid="da/d23/list_8h_1a74d9e33fcba685a4d3cd212d0c3313be" kindref="member">list_to_array</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1aa7af2d58bcf10b500ef2af09731e6ecb" kindref="member">list_remove_entry</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*entry);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a078a0384f655923e89a5ab689afee2df" kindref="member">list_remove_data</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/><ref refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" kindref="member">ListEqualFunc</ref><sp/>callback,<sp/>ListValue<sp/>data);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a4a05a25ec5cc4d516ea416b05afe6e00" kindref="member">list_sort</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/><ref refid="da/d23/list_8h_1aee173fa6254507a70763526d724df94d" kindref="member">ListCompareFunc</ref><sp/>compare_func);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*<ref refid="da/d23/list_8h_1a41b902714baab2455a1666b92af121ea" kindref="member">list_find_data</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>*list,<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/d23/list_8h_1a3cb2d4b1a4d8c783bef208e80d49097a" kindref="member">ListEqualFunc</ref><sp/>callback,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListValue<sp/>data);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a2df879755af938cf60026c07f5d3f17d" kindref="member">list_iterate</ref>(<ref refid="da/d23/list_8h_1a4a610d5dd47a320a536cbe7fdf79183c" kindref="member">ListEntry</ref><sp/>**list,<sp/><ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref><sp/>*iter);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a68037e2669a30903fbebc6e3fbdb6113" kindref="member">list_iter_has_more</ref>(<ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">ListValue<sp/><ref refid="da/d23/list_8h_1af9dfd0543f2d9da359dec37acc196b5b" kindref="member">list_iter_next</ref>(<ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="da/d23/list_8h_1a9b833e1575f5904b96e50fdc2bed7e6d" kindref="member">list_iter_remove</ref>(<ref refid="db/da8/struct__ListIterator" kindref="compound">ListIterator</ref><sp/>*iterator);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#ifndef<sp/>ALGORITHM_LIST_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/CxxUtils/libcalg/list.h"/>
  </compounddef>
</doxygen>
