<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d9f/namespaceEL" kind="namespace">
    <compoundname>EL</compoundname>
    <innerclass refid="de/ddb/classEL_1_1Algorithm" prot="public">EL::Algorithm</innerclass>
    <innerclass refid="df/d12/classEL_1_1BackgroundDriver" prot="public">EL::BackgroundDriver</innerclass>
    <innerclass refid="d1/d32/structEL_1_1BackgroundJob" prot="public">EL::BackgroundJob</innerclass>
    <innerclass refid="df/db5/classEL_1_1BackgroundSocket" prot="public">EL::BackgroundSocket</innerclass>
    <innerclass refid="d7/d4e/classEL_1_1BackgroundTSelector" prot="public">EL::BackgroundTSelector</innerclass>
    <innerclass refid="d9/de8/classEL_1_1BackgroundWorker" prot="public">EL::BackgroundWorker</innerclass>
    <innerclass refid="dc/d4d/classEL_1_1BatchDriver" prot="public">EL::BatchDriver</innerclass>
    <innerclass refid="dd/dda/structEL_1_1BatchJob" prot="public">EL::BatchJob</innerclass>
    <innerclass refid="d0/d1a/structEL_1_1BatchSample" prot="public">EL::BatchSample</innerclass>
    <innerclass refid="d2/d8b/structEL_1_1BatchSegment" prot="public">EL::BatchSegment</innerclass>
    <innerclass refid="df/d6a/classEL_1_1BatchWorker" prot="public">EL::BatchWorker</innerclass>
    <innerclass refid="dd/d04/classEL_1_1CondorDriver" prot="public">EL::CondorDriver</innerclass>
    <innerclass refid="d4/dfe/classEL_1_1DirectDriver" prot="public">EL::DirectDriver</innerclass>
    <innerclass refid="d0/dd1/classEL_1_1DirectWorker" prot="public">EL::DirectWorker</innerclass>
    <innerclass refid="de/d0a/classEL_1_1Driver" prot="public">EL::Driver</innerclass>
    <innerclass refid="d9/daf/classEL_1_1GEDriver" prot="public">EL::GEDriver</innerclass>
    <innerclass refid="da/dbb/classEL_1_1Job" prot="public">EL::Job</innerclass>
    <innerclass refid="d4/ddb/classEL_1_1LLDriver" prot="public">EL::LLDriver</innerclass>
    <innerclass refid="da/dfc/classEL_1_1LocalDriver" prot="public">EL::LocalDriver</innerclass>
    <innerclass refid="d2/d63/classEL_1_1LSFDriver" prot="public">EL::LSFDriver</innerclass>
    <innerclass refid="d6/d45/classEL_1_1MetricsSvc" prot="public">EL::MetricsSvc</innerclass>
    <innerclass refid="d5/dfe/classEL_1_1OutputStream" prot="public">EL::OutputStream</innerclass>
    <innerclass refid="d8/d7f/structEL_1_1ProofArgs" prot="public">EL::ProofArgs</innerclass>
    <innerclass refid="d4/d82/classEL_1_1ProofDriver" prot="public">EL::ProofDriver</innerclass>
    <innerclass refid="de/d92/classEL_1_1ProofTSelector" prot="public">EL::ProofTSelector</innerclass>
    <innerclass refid="dd/d99/classEL_1_1ProofWorker" prot="public">EL::ProofWorker</innerclass>
    <innerclass refid="db/d87/classEL_1_1SlurmDriver" prot="public">EL::SlurmDriver</innerclass>
    <innerclass refid="df/dfd/classEL_1_1SoGEDriver" prot="public">EL::SoGEDriver</innerclass>
    <innerclass refid="d9/daa/classEL_1_1StatusCode" prot="public">EL::StatusCode</innerclass>
    <innerclass refid="d4/d4f/classEL_1_1TorqueDriver" prot="public">EL::TorqueDriver</innerclass>
    <innerclass refid="d9/da1/structEL_1_1UnitTest" prot="public">EL::UnitTest</innerclass>
    <innerclass refid="da/df9/classEL_1_1UnitTestAlg" prot="public">EL::UnitTestAlg</innerclass>
    <innerclass refid="d5/da0/classEL_1_1UnitTestAlg1" prot="public">EL::UnitTestAlg1</innerclass>
    <innerclass refid="d5/d5f/structEL_1_1UnitTestConfig" prot="public">EL::UnitTestConfig</innerclass>
    <innerclass refid="d5/d59/classEL_1_1UnitTestFixture" prot="public">EL::UnitTestFixture</innerclass>
    <innerclass refid="dc/da6/classEL_1_1VomsProxySvc" prot="public">EL::VomsProxySvc</innerclass>
    <innerclass refid="da/d12/classEL_1_1Worker" prot="public">EL::Worker</innerclass>
    <innerclass refid="d9/dc4/classEL_1_1AlgSelect" prot="public">EL::AlgSelect</innerclass>
    <innerclass refid="dd/df8/classEL_1_1DuplicateChecker" prot="public">EL::DuplicateChecker</innerclass>
    <innerclass refid="d5/d4e/classEL_1_1NTupleSvc" prot="public">EL::NTupleSvc</innerclass>
    <innerclass refid="d8/df0/classEL_1_1UnitTestSkim" prot="public">EL::UnitTestSkim</innerclass>
    <innerclass refid="d5/dda/classEL_1_1WhiteBoardSvc" prot="public">EL::WhiteBoardSvc</innerclass>
    <innerclass refid="da/dcf/classEL_1_1GridDriver" prot="public">EL::GridDriver</innerclass>
    <innerclass refid="dd/d96/classEL_1_1GridJobLoader" prot="public">EL::GridJobLoader</innerclass>
    <innerclass refid="d3/d7a/classEL_1_1GridWorker" prot="public">EL::GridWorker</innerclass>
    <innerclass refid="de/d84/classEL_1_1PrunDriver" prot="public">EL::PrunDriver</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d9f/namespaceEL_1a553514baee2eca7f5c2759bc462020b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::processEmptyFiles</definition>
        <argsstring>(const std::string &amp;submitdir, const Job &amp;job)</argsstring>
        <name>processEmptyFiles</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>submitdir</declname>
        </param>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
<para>check the output of the given (completed) job, rerun all (empty) files that did not get a fileExecute() and merge in the outputs </para>        </briefdescription>
        <detaileddescription>
<para>This is primarily for the PROOF driver, which can&apos;t process empty files as part of the normal operation. <simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>i/o errors<linebreak/>
 job errors<linebreak/>
 events found in empty files </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/EmptyFileHandler.h" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/EmptyFileHandler.cxx" bodystart="185" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a93a00e079ee65057050040c24a1df35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::swap</definition>
        <argsstring>(Job &amp;a, Job &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard swap guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Job.h" line="30" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/Job.cxx" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a6a50b2b32350d1c5e32a3e48701cc77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(DirectDriverTest, UnitTestFixture,::testing::Values(MyUnitTestConfig()),)</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>DirectDriverTest</type>
        </param>
        <param>
          <type><ref refid="d5/d59/classEL_1_1UnitTestFixture" kindref="compound">UnitTestFixture</ref></type>
        </param>
        <param>
          <type>::testing::</type>
          <declname>Values</declname>
          <array>MyUnitTestConfig()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/test/gt_DirectDriver.cxx" line="46"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a6fa36854367135011922eb6af1d93630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(SLOW_LocalDriverTest, UnitTestFixture,::testing::Values(MyUnitTestConfig()),)</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>SLOW_LocalDriverTest</type>
        </param>
        <param>
          <type><ref refid="d5/d59/classEL_1_1UnitTestFixture" kindref="compound">UnitTestFixture</ref></type>
        </param>
        <param>
          <type>::testing::</type>
          <declname>Values</declname>
          <array>MyUnitTestConfig()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/test/gt_LocalDriver.cxx" line="48"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a08ce1d988959eef28023cdb9cf5f2a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(MANUAL_LSFDriverTest, UnitTestFixture,::testing::Values(MyUnitTestConfig()),)</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>MANUAL_LSFDriverTest</type>
        </param>
        <param>
          <type><ref refid="d5/d59/classEL_1_1UnitTestFixture" kindref="compound">UnitTestFixture</ref></type>
        </param>
        <param>
          <type>::testing::</type>
          <declname>Values</declname>
          <array>MyUnitTestConfig()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/test/gt_LSFDriver_EOS.cxx" line="72"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a2c4ce9586c0201cfb9f4f46c311e6c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(SLOW_ProofDriverTest, UnitTestFixture,::testing::Values(MyUnitTestConfig()),)</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>SLOW_ProofDriverTest</type>
        </param>
        <param>
          <type><ref refid="d5/d59/classEL_1_1UnitTestFixture" kindref="compound">UnitTestFixture</ref></type>
        </param>
        <param>
          <type>::testing::</type>
          <declname>Values</declname>
          <array>MyUnitTestConfig()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/test/gt_ProofDriver.cxx" line="46"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a27b2e56f68c99dd8d9a9f449cb4dd140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/d4e/classEL_1_1NTupleSvc" kindref="compound">NTupleSvc</ref> *</type>
        <definition>NTupleSvc* EL::getNTupleSvc</definition>
        <argsstring>(Worker *worker, const std::string &amp;outputStream, const std::string &amp;treeName=&quot;&quot;)</argsstring>
        <name>getNTupleSvc</name>
        <param>
          <type><ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref> *</type>
          <declname>worker</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputStream</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>treeName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: get the skimming algorithm for the given output for this worker guarantee: strong failures: formula service not configured requires: worker != 0 requires: !outputStream.empty() postcondition: result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/NTupleSvc.h" line="45"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a636c17f169b8db2eaa592ececc506508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d5/dda/classEL_1_1WhiteBoardSvc" kindref="compound">WhiteBoardSvc</ref> *</type>
        <definition>WhiteBoardSvc* EL::getWhiteBoardSvc</definition>
        <argsstring>(Worker *worker)</argsstring>
        <name>getWhiteBoardSvc</name>
        <param>
          <type><ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref> *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: get the whiteboard service for this worker guarantee: strong failures: formula service not configured requires: worker != 0 requires: !outputStream.empty() postcondition: result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopAlgs/EventLoopAlgs/WhiteBoardSvc.h" line="32"/>
      </memberdef>
      <memberdef kind="function" id="da/d9f/namespaceEL_1a2b2aeae997bae4c0acd9d7d97a585980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EL::getRootCoreConfig</definition>
        <argsstring>()</argsstring>
        <name>getRootCoreConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoopGrid/EventLoopGrid/GridDriver.h" line="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module defines the arguments passed from the BACKGROUND driver to the BACKGROUND worker. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver base class for running on batch systems. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines the arguments passed from the BATCH driver to the BATCH worker. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines the <ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref> class for <ref refid="dc/d4d/classEL_1_1BatchDriver" kindref="compound">BatchDriver</ref>. The interface provided in this module is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver class for running on condor batch systems. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver for running directly in the job. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines the <ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref> class for <ref refid="d4/dfe/classEL_1_1DirectDriver" kindref="compound">DirectDriver</ref>. The interface provided in this module is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a base class for classes that implement a driver for running on a particular architecture. While these classes are meant to be instantiated by the user, the interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver class for running on torque batch systems. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module provides a lot of global definitions, forward declarations and includes that are used by all modules. As such it doesn&apos;t fall into the user vs. expert classification.</para><para>This module defines a class that manages a complete job description. The interface provided in this module is intended for the general user. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver class for running on IBM LL batch systems. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver class for running the batch system driver locally (mostly for test purposes). The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a class that describes everything that needs to be known about an output dataset. The interface provided in this module is intended for the general user. The module is considered to be in the pre-alpha stage.</para><para>This module defines the arguments passed from the PROOF driver to the PROOF worker. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver for running using PROOF. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines the <ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref> class for <ref refid="d4/d82/classEL_1_1ProofDriver" kindref="compound">ProofDriver</ref>. The interface provided in this module is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a driver class for running on slurm batch systems. The interface provided in this class is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a class that describes the status of a function call. The interface provided in this module is intended for the general user. The module is considered to be in the pre-alpha stage.</para><para>This module defines functions for running unit test for different architectures. The interface provided in this module is intended for experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines an algorithm used for unit tests of the skimming algorithm. The interface provided in this module is intended for the experts only. The module is considered to be in the pre-alpha stage.</para><para>This module defines a base class for classes that implement an interface to a white board service. The interface provided in this module is intended for the general user. The module is considered to be in the pre-alpha stage. </para>    </detaileddescription>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Algorithm.h" line="29"/>
  </compounddef>
</doxygen>
