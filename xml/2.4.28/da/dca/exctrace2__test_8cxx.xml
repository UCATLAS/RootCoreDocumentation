<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/dca/exctrace2__test_8cxx" kind="file">
    <compoundname>exctrace2_test.cxx</compoundname>
    <includes local="no">string</includes>
    <includes local="yes">stdlib.h</includes>
    <incdepgraph>
      <node id="113667">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/exctrace2_test.cxx</label>
        <link refid="exctrace2_test.cxx"/>
        <childnode refid="113668" relation="include">
        </childnode>
        <childnode refid="113669" relation="include">
        </childnode>
      </node>
      <node id="113669">
        <label>stdlib.h</label>
      </node>
      <node id="113668">
        <label>string</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/dca/exctrace2__test_8cxx_1a51a0c03e82a49c8df1aee64a078f33e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/exctrace2_test.cxx" line="13" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/exctrace2_test.cxx" bodystart="12" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test trace backs for caught exceptions --- without the collector. </para>    </briefdescription>
    <detaileddescription>
<para>Test trace backs for caught exceptions --- using the collector.</para><para><simplesect kind="author"><para>scott snyder &lt;<ulink url="mailto:snyder@bnl.gov">snyder@bnl.gov</ulink>&gt; </para></simplesect>
<simplesect kind="date"><para>Oct, 2009 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*argc*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::string<sp/>cmd<sp/>=<sp/>argv[0];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::string::size_type<sp/>pos<sp/>=<sp/>cmd.rfind<sp/>(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.substr<sp/>(0,<sp/>pos+1);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>cmd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LD_PRELOAD=libexctrace_collector.so<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>cmd;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>cmd<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;exctrace1_test.exe&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>system<sp/>(cmd.c_str());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/exctrace2_test.cxx"/>
  </compounddef>
</doxygen>
