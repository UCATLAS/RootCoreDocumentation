<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="da/d45/RegularFormula_8cxx" kind="file">
    <compoundname>RegularFormula.cxx</compoundname>
    <includes refid="dc/d4a/RegularFormula_8h" local="yes">GoodRunsLists/RegularFormula.h</includes>
    <includes refid="db/db8/TMsgLogger_8h" local="yes">GoodRunsLists/TMsgLogger.h</includes>
    <includes local="yes">TString.h</includes>
    <includes local="yes">TObjArray.h</includes>
    <includes local="yes">TObjString.h</includes>
    <includes local="yes">TROOT.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="134956">
        <label>list</label>
      </node>
      <node id="134962">
        <label>TObjArray.h</label>
      </node>
      <node id="134952">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/RegularFormula.cxx</label>
        <link refid="RegularFormula.cxx"/>
        <childnode refid="134953" relation="include">
        </childnode>
        <childnode refid="134957" relation="include">
        </childnode>
        <childnode refid="134955" relation="include">
        </childnode>
        <childnode refid="134962" relation="include">
        </childnode>
        <childnode refid="134963" relation="include">
        </childnode>
        <childnode refid="134964" relation="include">
        </childnode>
        <childnode refid="134965" relation="include">
        </childnode>
        <childnode refid="134966" relation="include">
        </childnode>
        <childnode refid="134967" relation="include">
        </childnode>
      </node>
      <node id="134966">
        <label>stdlib.h</label>
      </node>
      <node id="134953">
        <label>GoodRunsLists/RegularFormula.h</label>
        <link refid="dc/d4a/RegularFormula_8h_source"/>
        <childnode refid="134954" relation="include">
        </childnode>
        <childnode refid="134955" relation="include">
        </childnode>
        <childnode refid="134956" relation="include">
        </childnode>
      </node>
      <node id="134958">
        <label>string</label>
      </node>
      <node id="134960">
        <label>map</label>
      </node>
      <node id="134963">
        <label>TObjString.h</label>
      </node>
      <node id="134957">
        <label>GoodRunsLists/TMsgLogger.h</label>
        <link refid="db/db8/TMsgLogger_8h_source"/>
        <childnode refid="134958" relation="include">
        </childnode>
        <childnode refid="134959" relation="include">
        </childnode>
        <childnode refid="134960" relation="include">
        </childnode>
        <childnode refid="134961" relation="include">
        </childnode>
        <childnode refid="134955" relation="include">
        </childnode>
      </node>
      <node id="134964">
        <label>TROOT.h</label>
      </node>
      <node id="134961">
        <label>TObject.h</label>
      </node>
      <node id="134959">
        <label>sstream</label>
      </node>
      <node id="134954">
        <label>TFormula.h</label>
      </node>
      <node id="134965">
        <label>iostream</label>
      </node>
      <node id="134955">
        <label>TString.h</label>
      </node>
      <node id="134967">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="da/d45/RegularFormula_8cxx_1a0f416219838e2370a40d9a337ac7235f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(Root::RegularFormula) Root</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d0/dcc/classRoot_1_1RegularFormula" kindref="compound">Root::RegularFormula</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/RegularFormula.cxx" line="19" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/RegularFormula.cxx" bodystart="14" bodyend="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/RegularFormula.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TMsgLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TObjArray.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TObjString.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">ClassImp(<ref refid="d0/dcc/classRoot_1_1RegularFormula" kindref="compound">Root::RegularFormula</ref>)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">Root::RegularFormula::RegularFormula()</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>:<sp/>TFormula()</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">Root::RegularFormula::RegularFormula(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expression)<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>:<sp/>TFormula(name,</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>(void)<sp/>setFormula(expression);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//m_expr<sp/>=<sp/>parseExpression(expression);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this-&gt;Compile(m_expr.Data());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">Root::RegularFormula::~RegularFormula()</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this-&gt;TFormula::~TFormula();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">Root::RegularFormula::RegularFormula(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dcc/classRoot_1_1RegularFormula" kindref="compound">Root::RegularFormula</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>:<sp/>TFormula(other)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>,<sp/>m_expr(other.m_expr)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>,<sp/>m_par(other.m_par)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="d0/dcc/classRoot_1_1RegularFormula" kindref="compound">Root::RegularFormula</ref>&amp;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">Root::RegularFormula::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/dcc/classRoot_1_1RegularFormula" kindref="compound">Root::RegularFormula</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;other==</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>TFormula::operator=(other)<sp/>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>m_expr<sp/>=<sp/>other.m_expr;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>m_par<sp/><sp/>=<sp/>other.m_par;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">Root::RegularFormula::parseExpression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expression,<sp/>TString&amp;<sp/>expr)<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>expr<sp/>=<sp/>expression;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>TString<sp/>parStr(expression);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsign(13);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sign<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+-*/%&amp;|=!&lt;&gt;()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;nsign;<sp/>++i)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>parStr<sp/>=<sp/>parStr.ReplaceAll(sign[i],</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>TMsgLogger<sp/>mylogger(<sp/></highlight><highlight class="stringliteral">&quot;RegularFormula&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Now<sp/>parsing<sp/>regular<sp/>expression<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expression<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>TFormula<sp/>analyzer(</highlight><highlight class="stringliteral">&quot;analyzer&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>TObjArray*<sp/>parArr<sp/>=<sp/>parStr.Tokenize(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(0),<sp/>i(0);<sp/>i&lt;parArr-&gt;GetEntries();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>myPar<sp/>=<sp/>((TObjString*)parArr-&gt;At(i))-&gt;GetString();<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>0==analyzer.Compile(myPar.Data())<sp/>||<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0==analyzer.Compile(Form(</highlight><highlight class="stringliteral">&quot;%s(1)&quot;</highlight><highlight class="normal">,myPar.Data()))<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::list&lt;TString&gt;::iterator<sp/>itrF<sp/>=<sp/>std::find(m_par.begin(),m_par.end(),myPar);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itrF==m_par.end())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>=<sp/>expr.ReplaceAll(myPar,Form(</highlight><highlight class="stringliteral">&quot;[%d]&quot;</highlight><highlight class="normal">,count));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_par.push_back(myPar);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>parArr;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>interpreted<sp/>input<sp/>parameters<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_par.size()<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>mylogger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parsed<sp/>regular<sp/>expression<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/>GEndl;<sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">Int_t<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal">Root::RegularFormula::setFormula(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expression)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>m_par.clear();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>this-&gt;parseExpression(expression,m_expr);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;Compile(m_expr.Data());</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/RegularFormula.cxx"/>
  </compounddef>
</doxygen>
