<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/db2/EgammaFactory_8cxx" kind="file">
    <compoundname>EgammaFactory.cxx</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifdef<sp/>XAOD_STANDALONE</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AthLinks/ElementLink.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODRootAccess/Init.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODRootAccess/TEvent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODRootAccess/TStore.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODCaloEvent/CaloCluster.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODCaloEvent/CaloClusterContainer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;xAODCaloEvent/CaloClusterAuxContainer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTracking/Vertex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTracking/VertexContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xAODTracking/VertexAuxContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;PathResolver/PathResolver.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ElectronPhotonFourMomentumCorrection/EgammaFactory.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgammaFactory::create_structure()</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>calo<sp/>cluster<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>m_clusters<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">xAOD::CaloClusterContainer</ref>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>m_clAux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d85/classxAOD_1_1CaloClusterAuxContainer__v2" kindref="compound">xAOD::CaloClusterAuxContainer</ref>();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>m_clusters-&gt;setStore(m_clAux);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_clusters,<sp/></highlight><highlight class="stringliteral">&quot;Clusters&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>cluster<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_clAux,<sp/></highlight><highlight class="stringliteral">&quot;ClustersAux.&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Canno<sp/>create<sp/>cluster<sp/>aux<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>vertex<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>m_vertexes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">xAOD::VertexContainer</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>m_vxAux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d95/classxAOD_1_1VertexAuxContainer__v1" kindref="compound">xAOD::VertexAuxContainer</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>m_vertexes-&gt;setStore(m_vxAux);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_vertexes,<sp/></highlight><highlight class="stringliteral">&quot;Vertexes&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>vertex<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_vxAux,<sp/></highlight><highlight class="stringliteral">&quot;VertexesAux.&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>vertex<sp/>aux<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>track<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>m_tracks<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">xAOD::TrackParticleContainer</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>m_tracksAux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="da/d17/classxAOD_1_1TrackParticleAuxContainer__v3" kindref="compound">xAOD::TrackParticleAuxContainer</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>m_tracks-&gt;setStore(m_tracksAux);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_tracks,<sp/></highlight><highlight class="stringliteral">&quot;Tracks&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>track<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_tracksAux,<sp/></highlight><highlight class="stringliteral">&quot;TracksAux.&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>track<sp/>aux<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>photon<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_photons<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">xAOD::PhotonContainer</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>m_photonsAux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/d1b/classxAOD_1_1PhotonAuxContainer__v3" kindref="compound">xAOD::PhotonAuxContainer</ref>();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_photons-&gt;setStore(m_photonsAux);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_photons,<sp/></highlight><highlight class="stringliteral">&quot;Photons&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>photon<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_photonsAux,<sp/></highlight><highlight class="stringliteral">&quot;PhotonsAux.&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>photon<sp/>aux<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>electron<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>m_electrons<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d0/d4d/classDataVector" kindref="compound" tooltip="Derived DataVector&amp;lt;T&amp;gt;.">xAOD::ElectronContainer</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>m_electronsAux<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d8/dde/classxAOD_1_1ElectronAuxContainer__v3" kindref="compound">xAOD::ElectronAuxContainer</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>m_electrons-&gt;setStore(m_electronsAux);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_electrons,<sp/></highlight><highlight class="stringliteral">&quot;Electrons&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>electron<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_store.record(m_electronsAux,<sp/></highlight><highlight class="stringliteral">&quot;ElectronsAux.&quot;</highlight><highlight class="normal">).isSuccess())<sp/>{<sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>electron<sp/>aux<sp/>collection&quot;</highlight><highlight class="normal">);<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">EgammaFactory::EgammaFactory()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">:<sp/>asg::AsgMessaging(</highlight><highlight class="stringliteral">&quot;EgammaFactory&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>create_structure();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;opening<sp/>average<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::string<sp/>fpath<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;$ROOTCOREBIN/data/ElectronPhotonFourMomentumCorrection/average_layers.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>TFile<sp/>*f<sp/>=<sp/>TFile::Open(fpath.c_str());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>f)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_ERROR(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fpath);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>m_fave.reset(f);<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>m_histos_electron<sp/>=<sp/>std::array&lt;TProfile2D*,<sp/>4&gt;<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TProfile2D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_electron_ratio_Es0_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_electron_ratio_Es1_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_electron_ratio_Es2_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_electron_ratio_Es3_true_E&quot;</highlight><highlight class="normal">))<sp/>};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>m_histos_conv<sp/>=<sp/>std::array&lt;TProfile2D*,<sp/>4&gt;<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TProfile2D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ratio_Es0_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ratio_Es1_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ratio_Es2_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ratio_Es3_true_E&quot;</highlight><highlight class="normal">))<sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>m_histos_unconv<sp/>=<sp/>std::array&lt;TProfile2D*,<sp/>4&gt;<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TProfile2D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_unconv_ratio_Es0_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_unconv_ratio_Es1_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_unconv_ratio_Es2_true_E&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>static_cast&lt;TProfile2D*&gt;(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_unconv_ratio_Es3_true_E&quot;</highlight><highlight class="normal">))<sp/>};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>m_histo_rconv<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TProfile2D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ph_Rconv&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>m_histo_zconv<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TProfile2D*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_fave-&gt;Get(</highlight><highlight class="stringliteral">&quot;histo_conv_ph_zconv&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">std::array&lt;double,<sp/>4&gt;<sp/>EgammaFactory::get_layers_fraction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;TProfile2D*,<sp/>4&gt;&amp;<sp/>prof,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::array&lt;double,<sp/>4&gt;<sp/>result;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>TProfile2D*<sp/>p<sp/>=<sp/>prof[i];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(p);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>p-&gt;GetBinContent(p-&gt;FindBin(pt,<sp/>std::abs(eta)));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgammaFactory::clear()</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>m_store.clear();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>create_structure();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">EgammaFactory::~EgammaFactory()</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>m_store.clear();</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="df/df8/classxAOD_1_1EventInfo__v1" kindref="compound">xAOD::EventInfo</ref>*<sp/>EgammaFactory::create_eventinfo(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simulation,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>runnumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventnumber)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="df/df8/classxAOD_1_1EventInfo__v1" kindref="compound">xAOD::EventInfo</ref>*<sp/>ei=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="df/df8/classxAOD_1_1EventInfo__v1" kindref="compound">xAOD::EventInfo</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ei-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ei-&gt;<ref refid="df/df8/classxAOD_1_1EventInfo__v1_1ab874b3038b62c313eb1313b9d350d0a8" kindref="member" tooltip="Set the current event&amp;#39;s run number.">setRunNumber</ref>(runnumber);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>ei-&gt;<ref refid="df/df8/classxAOD_1_1EventInfo__v1_1ae2bbc58ff900c0f81819e8604dc04e4a" kindref="member" tooltip="Set the current event&amp;#39;s event number.">setEventNumber</ref>(eventnumber);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>ei-&gt;<ref refid="df/df8/classxAOD_1_1EventInfo__v1_1a9371b6346d327997f09465ff0da3f549" kindref="member" tooltip="Set the event type bitmask.">setEventTypeBitmask</ref>(simulation);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ei;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>*<sp/>EgammaFactory::create_cluster(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>cluster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>*<sp/>cluster<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>cluster-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>cluster<sp/>properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>cluster<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>eta,<sp/>phi<sp/>for<sp/>all<sp/>the<sp/>layers<sp/>(barrel<sp/>/<sp/>endcap)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;CaloSampling::CaloSample&gt;<sp/>samplings<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CaloSampling::PreSamplerB,<sp/>CaloSampling::EMB1,<sp/>CaloSampling::EMB2,<sp/>CaloSampling::EMB3,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CaloSampling::PreSamplerE,<sp/>CaloSampling::EME1,<sp/>CaloSampling::EME2,<sp/>CaloSampling::EME3<sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sampling_pattern<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sample<sp/>:<sp/>samplings)<sp/>{<sp/>sampling_pattern<sp/>|=<sp/>0x1U<sp/>&lt;&lt;<sp/>sample;<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>sampling<sp/>pattern&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa0f40874eb2b5a898d446bc30c354929" kindref="member" tooltip="Set sampling pattern (one bit per sampling.">setSamplingPattern</ref>(sampling_pattern);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;nsamples<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cluster-&gt;nSamples());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sample<sp/>:<sp/>samplings)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>eta<sp/>sampling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a865682fe7ab86a266fb74f4c1b900e27" kindref="member" tooltip="Set  in a given sampling. Returns false if the sample isn&amp;#39;t part of the cluster...">setEta</ref>(sample,<sp/>eta);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a176e014a86939c7fe96b66362c729dcb" kindref="member" tooltip="Set  in a given sampling. Returns false if the sample isn&amp;#39;t part of the cluster...">setPhi</ref>(sample,<sp/>phi);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>energies<sp/>sampling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(eta)<sp/>&lt;<sp/>1.45)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::PreSamplerB,<sp/>e0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EMB1,<sp/>e1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EMB2,<sp/>e2);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EMB3,<sp/>e3);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::PreSamplerE,<sp/>e0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EME1,<sp/>e1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EME2,<sp/>e2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a9a3d76f77aa92beda29ff8d4df0196e5" kindref="member" tooltip="Set energy for a given sampling. Returns false if the sample isn&amp;#39;t part of the...">setEnergy</ref>(CaloSampling::EME3,<sp/>e3);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>energy<sp/>cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;setE(e<sp/>&gt;<sp/>0<sp/>?<sp/>e<sp/>:<sp/>e0<sp/>+<sp/>e1<sp/>+<sp/>e2<sp/>+e3);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>eta<sp/>cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a865682fe7ab86a266fb74f4c1b900e27" kindref="member" tooltip="Set  in a given sampling. Returns false if the sample isn&amp;#39;t part of the cluster...">setEta</ref>(eta);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;setting<sp/>phi<sp/>cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1a176e014a86939c7fe96b66362c729dcb" kindref="member" tooltip="Set  in a given sampling. Returns false if the sample isn&amp;#39;t part of the cluster...">setPhi</ref>(phi);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;decorate<sp/>cluster<sp/>for<sp/>etaCalo,<sp/>phiCalo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="d5/d4c/classxAOD_1_1IParticle_1a27c59a50a203be500dae35e8ab217c75" kindref="member">auxdata</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;etaCalo&quot;</highlight><highlight class="normal">)<sp/>=<sp/>eta;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;<ref refid="d5/d4c/classxAOD_1_1IParticle_1a27c59a50a203be500dae35e8ab217c75" kindref="member">auxdata</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;phiCalo&quot;</highlight><highlight class="normal">)<sp/>=<sp/>phi;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>insertMoment(<sp/>MomentType<sp/>type,<sp/>double<sp/>value<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;insertMoment(<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa91f1b5a4ed623de012f0dff0b9df2d7a214c633e23b3d2614fff381449122d5f" kindref="member" tooltip="Eta in the calo frame (for egamma).">xAOD::CaloCluster::ETACALOFRAME</ref>,<sp/>eta);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>cluster-&gt;insertMoment(<ref refid="dd/d91/classxAOD_1_1CaloCluster__v1_1aa91f1b5a4ed623de012f0dff0b9df2d7a7888f476a3ea337e8e37a4da622bf483" kindref="member" tooltip="Phi in the calo frame (for egamma).">xAOD::CaloCluster::PHICALOFRAME</ref>,<sp/>phi);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;pushing<sp/>cluster<sp/>collection&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>m_clusters-&gt;push_back(cluster);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cluster;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>EgammaFactory::create_unconverted_photon(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_photon(eta,<sp/>phi,<sp/>e,<sp/>0.,<sp/>0.);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>EgammaFactory::create_converted_photon(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>assert(m_histo_rconv);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>assert(m_histo_zconv);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>m_histo_rconv-&gt;FindBin(e<sp/>/<sp/>cosh(eta),<sp/>std::abs(eta));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_histo_rconv-&gt;IsBinOverflow(bin))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_photon(eta,<sp/>phi,<sp/>e,<sp/>0,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rconv<sp/>=<sp/>m_histo_rconv-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zconv<sp/>=<sp/>m_histo_zconv-&gt;GetBinContent(m_histo_zconv-&gt;FindBin(e<sp/>/<sp/>cosh(eta),<sp/>std::abs(eta)));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(rconv<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_photon(eta,<sp/>phi,<sp/>e,<sp/>rconv,<sp/>zconv);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>EgammaFactory::create_photon(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rconv,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zconv)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isconv<sp/>=<sp/>(rconv<sp/>&gt;<sp/>0<sp/>and<sp/>rconv<sp/>&lt;<sp/>800);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>get_layers_fraction(isconv<sp/>?<sp/>m_histos_conv<sp/>:<sp/>m_histos_unconv,<sp/>eta,<sp/>e<sp/>/<sp/>cosh(eta));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_photon(eta,<sp/>phi,<sp/>l[0]<sp/>*<sp/>e,<sp/>l[1]<sp/>*<sp/>e,<sp/>l[2]<sp/>*<sp/>e,<sp/>l[3]<sp/>*<sp/>e,<sp/>e,<sp/>rconv,<sp/>zconv);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound" tooltip="Class describing an electron.">xAOD::Electron</ref>*<sp/>EgammaFactory::create_electron(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>get_layers_fraction(m_histos_electron,<sp/>eta,<sp/>e<sp/>/<sp/>cosh(eta));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>create_electron(eta,<sp/>phi,<sp/>l[0]<sp/>*<sp/>e,<sp/>l[1]<sp/>*<sp/>e,<sp/>l[2]<sp/>*<sp/>e,<sp/>l[3]<sp/>*<sp/>e,<sp/>e);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>EgammaFactory::create_photon(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>rconv,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>zconv)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>*<sp/>cluster<sp/>=<sp/>create_cluster(eta,<sp/>phi,<sp/>e0,<sp/>e1,<sp/>e2,<sp/>e3,<sp/>e);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>Vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref>*<sp/>vertex<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rconv<sp/>&gt;<sp/>0<sp/>and<sp/>rconv<sp/>&lt;<sp/>800)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>vertex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="db/dd1/classxAOD_1_1Vertex__v1" kindref="compound">xAOD::Vertex</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="db/dd1/classxAOD_1_1Vertex__v1_1a620ff1477d4a82b698526b304df042d7" kindref="member" tooltip="Sets the z position.">setZ</ref>(zconv);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="db/dd1/classxAOD_1_1Vertex__v1_1a77481190c7c9679a38f2cdb8cf2d8783" kindref="member" tooltip="Sets the x position.">setX</ref>(rconv);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="db/dd1/classxAOD_1_1Vertex__v1_1a894753c70aebcd9bbb79d5b72b748a0b" kindref="member" tooltip="Sets the y position.">setY</ref>(0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decorate<sp/>with<sp/>pt1,<sp/>pt2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;pt1&quot;</highlight><highlight class="normal">)<sp/>=<sp/>e<sp/>/<sp/>cosh(eta)<sp/>*<sp/>0.7;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1ace84dc4cbb05aa996bc0bb12ea0580b0" kindref="member" tooltip="Fetch an aux data variable, as a non-const reference.">auxdata</ref>&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(</highlight><highlight class="stringliteral">&quot;pt2&quot;</highlight><highlight class="normal">)<sp/>=<sp/>e<sp/>/<sp/>cosh(eta)<sp/>*<sp/>0.3;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>m_vertexes-&gt;push_back(vertex);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>photon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>*<sp/>ph<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dc/d42/classxAOD_1_1Photon" kindref="compound" tooltip="Class describing an photon.">xAOD::Photon</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>ph-&gt;makePrivateStore();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>m_photons-&gt;push_back(ph);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;link<sp/>cluster<sp/>to<sp/>photon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>link<sp/>to<sp/>clusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>ElementLink&lt;<sp/>xAOD::CaloClusterContainer<sp/>&gt;<sp/>&gt;<sp/>links_clusters;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;push<sp/>back<sp/>cluster<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cluster);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>links_clusters.push_back(<ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt; xAOD::CaloClusterContainer &gt;</ref>(<sp/>cluster,<sp/>*m_clusters<sp/>));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;set<sp/>link&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>ph-&gt;setCaloClusterLinks(links_clusters);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>link<sp/>to<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;link<sp/>vertex<sp/>to<sp/>photon&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ElementLink&lt;xAOD::VertexContainer&gt;&gt;<sp/>links_vertexes;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>links_vertexes.push_back(<ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt;xAOD::VertexContainer&gt;</ref>(vertex,<sp/>*m_vertexes));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ph-&gt;setVertexLinks(links_vertexes);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;not<sp/>converted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>particle<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>ph-&gt;setEta(eta);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>ph-&gt;setPhi(phi);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>ph-&gt;setM(0);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>ph-&gt;setPt(e<sp/>/<sp/>cosh(eta));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ph;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound" tooltip="Class describing an electron.">xAOD::Electron</ref>*<sp/>EgammaFactory::create_electron(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>phi,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e3,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>cluster&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="dd/d91/classxAOD_1_1CaloCluster__v1" kindref="compound">xAOD::CaloCluster</ref>*<sp/>cluster<sp/>=<sp/>create_cluster(eta,<sp/>phi,<sp/>e0,<sp/>e1,<sp/>e2,<sp/>e3,<sp/>e);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>track&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>*<sp/>track<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1" kindref="compound">xAOD::TrackParticle</ref>();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>track-&gt;<ref refid="dc/db0/classSG_1_1AuxElement_1a197bf9fc579d49e25a850a4b3a5c14e8" kindref="member" tooltip="Create a new (empty) private store for this object.">makePrivateStore</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>track-&gt;<ref refid="d9/d1d/classxAOD_1_1TrackParticle__v1_1a9fd828cacc709790555bda3c2c7157c9" kindref="member" tooltip="Set the defining parameters.">setDefiningParameters</ref>(0.,<sp/>0.,<sp/>phi,<sp/>2<sp/>*<sp/>atan(exp(-eta)),<sp/>1.);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>m_tracks-&gt;push_back(track);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;creating<sp/>electron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound" tooltip="Class describing an electron.">xAOD::Electron</ref>*<sp/>el<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="dd/da6/classxAOD_1_1Electron" kindref="compound" tooltip="Class describing an electron.">xAOD::Electron</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>el-&gt;makePrivateStore();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>m_electrons-&gt;<ref refid="d0/d4d/classDataVector_1a486aeb4868e7c29331717adb06ea0df2" kindref="member" tooltip="Add an element to the end of the collection.">push_back</ref>(el);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;link<sp/>track<sp/>to<sp/>electron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>std::vector&lt;ElementLink&lt;xAOD::TrackParticleContainer&gt;&gt;<sp/>links_tracks;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>links_tracks.push_back(<ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt;xAOD::TrackParticleContainer&gt;</ref>(track,<sp/>*m_tracks));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>el-&gt;setTrackParticleLinks(links_tracks);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;link<sp/>cluster<sp/>to<sp/>electron&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>std::vector&lt;<sp/>ElementLink&lt;<sp/>xAOD::CaloClusterContainer<sp/>&gt;<sp/>&gt;<sp/>links_clusters;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;push<sp/>back<sp/>cluster<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cluster);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>links_clusters.push_back(<ref refid="d6/d6e/classElementLink" kindref="compound" tooltip="ElementLink implementation for ROOT usage.">ElementLink&lt; xAOD::CaloClusterContainer &gt;</ref>(<sp/>cluster,<sp/>*m_clusters<sp/>));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>ATH_MSG_DEBUG(</highlight><highlight class="stringliteral">&quot;set<sp/>link&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>el-&gt;setCaloClusterLinks(links_clusters);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>particle<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>el-&gt;setEta(eta);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>el-&gt;setPhi(phi);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>el-&gt;setM(0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>el-&gt;setPt(e<sp/>/<sp/>cosh(eta));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>el;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/ElectronPhotonFourMomentumCorrection/Root/EgammaFactory.cxx"/>
  </compounddef>
</doxygen>
