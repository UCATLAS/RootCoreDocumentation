<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/d68/classCP_1_1MakeSystematicsVector" kind="class" prot="public">
    <compoundname>CP::MakeSystematicsVector</compoundname>
    <includes refid="df/d13/MakeSystematicsVector_8h" local="no">MakeSystematicsVector.h</includes>
    <innerclass refid="dc/dec/structCP_1_1MakeSystematicsVector_1_1GroupConfig" prot="private">CP::MakeSystematicsVector::GroupConfig</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/d68/classCP_1_1MakeSystematicsVector_1afd6f6f8eb5d6cdeeda5a896bddbe99e8" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; <ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound">SystematicSet</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::string,std::vector&lt;SystematicSet&gt; &gt; CP::MakeSystematicsVector::m_result</definition>
        <argsstring></argsstring>
        <name>m_result</name>
        <briefdescription>
<para>the value of <ref refid="de/d68/classCP_1_1MakeSystematicsVector_1a516081c3029846893baf12d81716c2a0" kindref="member">result</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="205" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d68/classCP_1_1MakeSystematicsVector_1ae0bc0c9e217b830ce1bd09b10129f5f9" prot="private" static="no" mutable="no">
        <type>std::vector&lt; GroupConfig &gt;</type>
        <definition>std::vector&lt;GroupConfig&gt; CP::MakeSystematicsVector::m_config</definition>
        <argsstring></argsstring>
        <name>m_config</name>
        <briefdescription>
<para>the configuration on a per-group basis </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="232" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d68/classCP_1_1MakeSystematicsVector_1a8f0c188fdf1289a24ae7184e96348c3b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string CP::MakeSystematicsVector::m_useForNominal</definition>
        <argsstring></argsstring>
        <name>m_useForNominal</name>
        <briefdescription>
<para>the group for which <ref refid="de/d68/classCP_1_1MakeSystematicsVector_1a025c090df8fcdb3179ad3ae03c406993" kindref="member">useForNominal</ref> was set </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="237" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1ad20cad486672432425436f66ef122582" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="46" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a8f4306981c5f7dff7ab97fc720937cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CP::MakeSystematicsVector::MakeSystematicsVector</definition>
        <argsstring>()</argsstring>
        <name>MakeSystematicsVector</name>
        <briefdescription>
<para>standard default constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="53" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a516081c3029846893baf12d81716c2a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound">SystematicSet</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; SystematicSet &gt; &amp; CP::MakeSystematicsVector::result</definition>
        <argsstring>(const std::string &amp;label) const </argsstring>
        <name>result</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>the list of nuisance parameter points generated with the given label </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>unknown label </para></simplesect>
<simplesect kind="pre"><para>calculate() has been called </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="65" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="84" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1aedfa44fe5548334e1754d7144baa6ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::calc</definition>
        <argsstring>(const SystematicSet &amp;sysList)</argsstring>
        <name>calc</name>
        <param>
          <type>const <ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound">SystematicSet</ref> &amp;</type>
          <declname>sysList</declname>
        </param>
        <briefdescription>
<para>fill in <ref refid="de/d68/classCP_1_1MakeSystematicsVector_1a516081c3029846893baf12d81716c2a0" kindref="member">result</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sysList</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of systematics to use, usually the list of recommended systematics from your <ref refid="d2/d4c/namespaceCP" kindref="compound">CP</ref> tools, framework or the systematics registry </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 configuration errors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="78" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="97" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a2df561f02c4534ada178b2b6037ed5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::addGroup</definition>
        <argsstring>(const std::string &amp;val_label)</argsstring>
        <name>addGroup</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_label</declname>
        </param>
        <briefdescription>
<para>finish configuration for this group and add a new one </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val_label</parametername>
</parameternamelist>
<parameterdescription>
<para>the label for the new group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="88" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="186" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a1852c8c4af767746fa409d5afda9b557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::setPattern</definition>
        <argsstring>(const std::string &amp;val_pattern)</argsstring>
        <name>setPattern</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_pattern</declname>
        </param>
        <briefdescription>
<para>set the pattern for the current group </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="97" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a3f8b0876da36716a7ce69ccd8fcff81a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::setSigma</definition>
        <argsstring>(float val_sigma)</argsstring>
        <name>setSigma</name>
        <param>
          <type>float</type>
          <declname>val_sigma</declname>
        </param>
        <briefdescription>
<para>set the number of sigmas to vary this group by </para>        </briefdescription>
        <detaileddescription>
<para>Normally we are using just +/-1 sigma variations, but if the systematics are very small that can get lost in the statistical jitter. For those cases it is better to do a multi-sigma variation and then scale it back to +/-1 sigma thereby reducing the statistical jitter introduced into the systematic. <ref refid="d4/dc4/structA" kindref="compound">A</ref> traditional scaling factor for these cases is to scale by five sigma.</para><para>Please note that if you do this, you normally only want to do this for small systematics for which statistical jitter is an issue. For large systematics there is a legitimate concern that a 5 sigma variation won&apos;t be 5 times the size of a 1 sigma variation, introducing a different kind of bias. To that end, if you use this, you should normally put the small systematics into a separate group from your regular systematics (which then also makes it easier for you to know which one to scale down). <simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>val_sigma &gt; 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="123" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="206" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a73b9b2300349b599850237fa56413de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::setToys</definition>
        <argsstring>(unsigned val_toys)</argsstring>
        <name>setToys</name>
        <param>
          <type>unsigned</type>
          <declname>val_toys</declname>
        </param>
        <briefdescription>
<para>set the number of toys to run for this group </para>        </briefdescription>
        <detaileddescription>
<para>This is a specialized mechanism pioneered for the e/gamma and muon scale factors. Instead of evaluating a large number of systematics separately, it allows to vary all of them at the same time repeatedly, so that instead of hundreds of systematic variations you only have to perform maybe 10 or 20 &quot;toy&quot; variations. You then just take the spread of the variations as the overall systematic uncertainty from the toys. There are reports that compared to the &quot;old&quot; method this can yield a factor five reduction in systematic uncertainty without increasing the number of systematic variations to evaluate.</para><para>Please note that this approach requires a more expert handling than &quot;regular&quot; systematics. The main point here is that the &quot;toy&quot; variations need a different post-processing than regular variations, i.e. you need to look at the spread between the output histograms for the different &quot;toys&quot; and use that to construct the combined systematic. The e/gamma group currently (Oct 15) provides a tool for that. For Bayesian marginalization you may alternatively consider to integrate the &quot;toy&quot; variations directly into the integral over nuisance parameter space to extract more information than you could with a single systematic.</para><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> general concern for all methods that reduce the number of nuisance parameters (including the &quot;toy&quot; approach) is if you use profiling and are able to constrain the &quot;toy&quot; systematic, in which case we generally assume that such an approach is invalid. Similar precautions should be taken when used with Bayesian marginalization. This is typically of little practical concern as long as the systematic in question is small, but it is something that you should check for and that you should include in your supporting documentation.</para><para>The &quot;toy&quot; approach to systematics evaluation introduces an additional statistical jitter into your systematics, due to the sampling fluctuations of your &quot;toy&quot; variations. Naturally this uncertainty decreases if you use a larger number of &quot;toy&quot; variations. We currently (Oct 15) provide no recommendations for evaluating the size of that uncertainty or for determining whether your chosen number of &quot;toys&quot; is sufficient. Anecdotal evidence from the e/gamma group suggests that for evaluating their scale factor systematic as little as 10 or 20 &quot;toys&quot; may be sufficient. However, this will vary depending on your analysis and the systematics you use the &quot;toys&quot; for.</para><para>If you decide to go for a large number of &quot;toy&quot; variations it may be better to go for a &quot;traditional&quot; evaluation of your systematics instead, as that can cut down on the aforementioned statistical jitter by interpolating between the variations. The number of variations needed for the traditional approach to be better (or even feasible) will depend on the interpolation algorithm used and is likely to improve as we implement better interpolation algorithms. <simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="187" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1a025c090df8fcdb3179ad3ae03c406993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CP::MakeSystematicsVector::useForNominal</definition>
        <argsstring>()</argsstring>
        <name>useForNominal</name>
        <briefdescription>
<para>set this group as the default, i.e. the group containing the nominal variation </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="195" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="226" bodyend="230"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="de/d68/classCP_1_1MakeSystematicsVector_1acd76b0fbda9042d1fb014a5cfd49f02a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::map&lt; std::string, std::vector&lt; <ref refid="dd/d2d/classCP_1_1SystematicVariation" kindref="compound">SystematicVariation</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt; std::map&lt; std::string, std::vector&lt; SystematicVariation &gt; &gt; &gt; CP::MakeSystematicsVector::calcBaseSys</definition>
        <argsstring>(const SystematicSet &amp;sysList)</argsstring>
        <name>calcBaseSys</name>
        <param>
          <type>const <ref refid="d4/d52/classCP_1_1SystematicSet" kindref="compound">SystematicSet</ref> &amp;</type>
          <declname>sysList</declname>
        </param>
        <briefdescription>
<para>make the list of base systematics for <ref refid="de/d68/classCP_1_1MakeSystematicsVector_1aedfa44fe5548334e1754d7144baa6ccb" kindref="member">calc</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="247" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/Root/MakeSystematicsVector.cxx" bodystart="236" bodyend="297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class handles turning the list of systematics into the actual list of nuisance parameter points to evaluate. </para>    </briefdescription>
    <detaileddescription>
<para>This is meant as a placeholder for a generic tool to be developed by the statistics forum (or as a prototype for it).</para><para>For now I decided to keep it as a single class, but there are other options, e.g. the member MakeSystematicsVector::Config could be made a class that the user configures directly and then passes in. However, for now this approach seems better, as it hides some of the mechanics from the user and gives me more freedom on the backend side. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="13487">
        <label>CP::MakeSystematicsVector</label>
        <link refid="de/d68/classCP_1_1MakeSystematicsVector"/>
        <childnode refid="13488" relation="usage">
          <edgelabel>m_useForNominal</edgelabel>
        </childnode>
      </node>
      <node id="13488">
        <label>string</label>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/PATInterfaces/PATInterfaces/MakeSystematicsVector.h" bodystart="36" bodyend="248"/>
    <listofallmembers>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a2df561f02c4534ada178b2b6037ed5d3" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>addGroup</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1aedfa44fe5548334e1754d7144baa6ccb" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>calc</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1acd76b0fbda9042d1fb014a5cfd49f02a" prot="private" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>calcBaseSys</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1ae0bc0c9e217b830ce1bd09b10129f5f9" prot="private" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>m_config</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1afd6f6f8eb5d6cdeeda5a896bddbe99e8" prot="private" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>m_result</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a8f0c188fdf1289a24ae7184e96348c3b" prot="private" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>m_useForNominal</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a8f4306981c5f7dff7ab97fc720937cfa" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>MakeSystematicsVector</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a516081c3029846893baf12d81716c2a0" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>result</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a1852c8c4af767746fa409d5afda9b557" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>setPattern</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a3f8b0876da36716a7ce69ccd8fcff81a" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>setSigma</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a73b9b2300349b599850237fa56413de6" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>setToys</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1ad20cad486672432425436f66ef122582" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>testInvariant</name></member>
      <member refid="de/d68/classCP_1_1MakeSystematicsVector_1a025c090df8fcdb3179ad3ae03c406993" prot="public" virt="non-virtual"><scope>CP::MakeSystematicsVector</scope><name>useForNominal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
