<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/db4/copyif__test_8cxx" kind="file">
    <compoundname>copyif_test.cxx</compoundname>
    <includes refid="de/dfd/algorithms_8h" local="yes">CxxUtils/algorithms.h</includes>
    <includes local="no">cassert</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="113654">
        <label>cassert</label>
      </node>
      <node id="113652">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx</label>
        <link refid="copyif_test.cxx"/>
        <childnode refid="113653" relation="include">
        </childnode>
        <childnode refid="113654" relation="include">
        </childnode>
        <childnode refid="113655" relation="include">
        </childnode>
        <childnode refid="113656" relation="include">
        </childnode>
      </node>
      <node id="113655">
        <label>vector</label>
      </node>
      <node id="113653">
        <label>CxxUtils/algorithms.h</label>
        <link refid="de/dfd/algorithms_8h_source"/>
      </node>
      <node id="113656">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="d3/da1/structgreater__than" prot="public">greater_than</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="de/db4/copyif__test_8cxx_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" bodystart="34" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="de/db4/copyif__test_8cxx_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" line="57" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" bodystart="56" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="de/db4/copyif__test_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" line="77" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx" bodystart="76" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regression tests for copy_if. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sebastien Binet </para></simplesect>
<simplesect kind="date"><para>March 2009 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>$Id:<sp/>copyif_test.cxx,v<sp/>1.1<sp/>2009-03-11<sp/>11:06:46<sp/>binet<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CxxUtils/algorithms.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>IMAX<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25" refid="d3/da1/structgreater__than" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/da1/structgreater__than" kindref="compound">greater_than</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><ref refid="d1/def/classT" kindref="compound">T</ref><sp/>cut;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="d3/da1/structgreater__than" kindref="compound">greater_than</ref>(<ref refid="d1/def/classT" kindref="compound">T</ref><sp/>cut)<sp/>:<sp/>cut(cut)<sp/>{}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>operator()(<ref refid="d1/def/classT" kindref="compound">T</ref><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x&gt;cut;<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test1()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>in(IMAX);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i!=IMAX;<sp/>++i){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>in[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i!=IMAX;<sp/>++i){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(in[i]<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>out;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>CxxUtils::copy_if(in.begin(),<sp/>in.end(),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(out),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/da1/structgreater__than" kindref="compound">greater_than&lt;std::size_t&gt;</ref>(4));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert(out.size()==5);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>assert(out[0]==5);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>assert(out[1]==6);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>assert(out[2]==7);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>assert(out[3]==8);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>assert(out[4]==9);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test2()</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>in[IMAX]<sp/>=<sp/>{0,<sp/>1,2,3,4,5,6,7,8,9};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i!=IMAX;<sp/>++i){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(in[i]<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>out;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>CxxUtils::copy_if(in,<sp/>in+IMAX,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(out),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/da1/structgreater__than" kindref="compound">greater_than&lt;std::size_t&gt;</ref>(4));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert(out.size()==5);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>assert(out[0]==5);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>assert(out[1]==6);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>assert(out[2]==7);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(out[3]==8);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert(out[4]==9);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>test1();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>test2();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CxxUtils/test/copyif_test.cxx"/>
  </compounddef>
</doxygen>
