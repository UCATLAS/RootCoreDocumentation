<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/dde/CalibrationDataEigenVariations_8cxx" kind="file">
    <compoundname>CalibrationDataEigenVariations.cxx</compoundname>
    <includes refid="d2/d74/CalibrationDataContainer_8h" local="yes">CalibrationDataInterface/CalibrationDataContainer.h</includes>
    <includes refid="d1/d5f/CalibrationDataEigenVariations_8h" local="yes">CalibrationDataInterface/CalibrationDataEigenVariations.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes local="no">set</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="yes">TH1.h</includes>
    <includes local="yes">TVectorT.h</includes>
    <includes local="yes">TDecompSVD.h</includes>
    <includes local="yes">TMatrixDSymEigen.h</includes>
    <includes local="yes">TROOT.h</includes>
    <incdepgraph>
      <node id="96838">
        <label>TMap.h</label>
      </node>
      <node id="96845">
        <label>TMatrixDSym.h</label>
      </node>
      <node id="96844">
        <label>TMatrixD.h</label>
      </node>
      <node id="96839">
        <label>THashList.h</label>
      </node>
      <node id="96846">
        <label>iomanip</label>
      </node>
      <node id="96848">
        <label>limits</label>
      </node>
      <node id="96840">
        <label>CalibrationDataInterface/CalibrationDataVariables.h</label>
        <link refid="d6/d96/CalibrationDataVariables_8h_source"/>
        <childnode refid="96837" relation="include">
        </childnode>
        <childnode refid="96841" relation="include">
        </childnode>
      </node>
      <node id="96854">
        <label>TMatrixDSymEigen.h</label>
      </node>
      <node id="96833">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataEigenVariations.cxx</label>
        <link refid="CalibrationDataEigenVariations.cxx"/>
        <childnode refid="96834" relation="include">
        </childnode>
        <childnode refid="96842" relation="include">
        </childnode>
        <childnode refid="96846" relation="include">
        </childnode>
        <childnode refid="96847" relation="include">
        </childnode>
        <childnode refid="96848" relation="include">
        </childnode>
        <childnode refid="96843" relation="include">
        </childnode>
        <childnode refid="96849" relation="include">
        </childnode>
        <childnode refid="96850" relation="include">
        </childnode>
        <childnode refid="96851" relation="include">
        </childnode>
        <childnode refid="96852" relation="include">
        </childnode>
        <childnode refid="96853" relation="include">
        </childnode>
        <childnode refid="96854" relation="include">
        </childnode>
        <childnode refid="96855" relation="include">
        </childnode>
      </node>
      <node id="96850">
        <label>cmath</label>
      </node>
      <node id="96837">
        <label>string</label>
      </node>
      <node id="96836">
        <label>map</label>
      </node>
      <node id="96851">
        <label>TH1.h</label>
      </node>
      <node id="96855">
        <label>TROOT.h</label>
      </node>
      <node id="96835">
        <label>vector</label>
      </node>
      <node id="96841">
        <label>utility</label>
      </node>
      <node id="96834">
        <label>CalibrationDataInterface/CalibrationDataContainer.h</label>
        <link refid="d2/d74/CalibrationDataContainer_8h_source"/>
        <childnode refid="96835" relation="include">
        </childnode>
        <childnode refid="96836" relation="include">
        </childnode>
        <childnode refid="96837" relation="include">
        </childnode>
        <childnode refid="96838" relation="include">
        </childnode>
        <childnode refid="96839" relation="include">
        </childnode>
        <childnode refid="96840" relation="include">
        </childnode>
      </node>
      <node id="96847">
        <label>iostream</label>
      </node>
      <node id="96853">
        <label>TDecompSVD.h</label>
      </node>
      <node id="96852">
        <label>TVectorT.h</label>
      </node>
      <node id="96843">
        <label>set</label>
      </node>
      <node id="96842">
        <label>CalibrationDataInterface/CalibrationDataEigenVariations.h</label>
        <link refid="d1/d5f/CalibrationDataEigenVariations_8h_source"/>
        <childnode refid="96837" relation="include">
        </childnode>
        <childnode refid="96835" relation="include">
        </childnode>
        <childnode refid="96836" relation="include">
        </childnode>
        <childnode refid="96843" relation="include">
        </childnode>
        <childnode refid="96841" relation="include">
        </childnode>
        <childnode refid="96844" relation="include">
        </childnode>
        <childnode refid="96845" relation="include">
        </childnode>
      </node>
      <node id="96849">
        <label>algorithm</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="de/dde/CalibrationDataEigenVariations_8cxx_1ac663bf0860da8ba5030f2f28f5064f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(CalibrationDataEigenVariations) CalibrationDataEigenVariations</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataEigenVariations.cxx" line="194" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataEigenVariations.cxx" bodystart="188" bodyend="195"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="2"><highlight class="comment">//<sp/>CalibrationDataEigenVariations.cxx,<sp/>(c)<sp/>ATLAS<sp/>Detector<sp/>software</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataContainer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CalibrationDataInterface/CalibrationDataEigenVariations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TH1.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TVectorT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TDecompSVD.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TMatrixDSymEigen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TROOT.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">Analysis::CalibrationDataEigenVariations</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::setw;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::setprecision;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>covariance<sp/>matrices<sp/>constructed<sp/>by<sp/>the<sp/>following<sp/>two<sp/>functions<sp/>adhere<sp/>to<sp/>the<sp/>TH1<sp/>binning<sp/>conventions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>in<sp/>order<sp/>to<sp/>avoid<sp/>unnecessary<sp/>overhead,<sp/>the<sp/>actual<sp/>dimensionality<sp/>of<sp/>the<sp/>histograms<sp/>is<sp/>accounted<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>(diagonal)<sp/>covariance<sp/>matrix<sp/>for<sp/>the<sp/>statistical<sp/>uncertainties<sp/>on<sp/>the<sp/>&quot;ref&quot;<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>getStatCovarianceMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>hist)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nbinx<sp/>=<sp/>hist-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>hist-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>hist-&gt;GetNbinsZ()+2;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>rows<sp/>=<sp/>nbinx;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>&gt;<sp/>1)<sp/>rows<sp/>*=<sp/>nbiny;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hist-&gt;GetDimension()<sp/>&gt;<sp/>2)<sp/>rows<sp/>*=<sp/>nbinz;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>the<sp/>&quot;2&quot;<sp/>below<sp/>doesn&apos;t<sp/>actually<sp/>imply<sp/>that<sp/>two<sp/>bins<sp/>are<sp/>used...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>this<sp/>is<sp/>just<sp/>to<sp/>make<sp/>the<sp/>loops<sp/>below<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(ref-&gt;GetDimension()<sp/>&lt;=<sp/>1)<sp/>nbiny<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(ref-&gt;GetDimension()<sp/>&lt;=<sp/>2)<sp/>nbinz<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrixDSym<sp/>stat(rows);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hist-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>hist-&gt;GetBinError(bin);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stat(bin,<sp/>bin)<sp/>=<sp/>err*err;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>covariance<sp/>matrix<sp/>assuming<sp/>that<sp/>histogram<sp/>&quot;unc&quot;<sp/>contains<sp/>systematic<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pertaining<sp/>to<sp/>the<sp/>&quot;ref&quot;<sp/>results,<sp/>and<sp/>that<sp/>the<sp/>uncertainties<sp/>are<sp/>fully<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(unless<sp/>option<sp/>&quot;doCorrelated&quot;<sp/>is<sp/>false,<sp/>in<sp/>which<sp/>bins<sp/>are<sp/>assumed<sp/>uncorrelated).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>exception<sp/>is<sp/>made<sp/>for<sp/>the<sp/>uncorrelated<sp/>case:<sp/>if<sp/>we<sp/>are<sp/>dealing<sp/>with<sp/>a<sp/>&quot;continuous&quot;<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object,<sp/>then<sp/>a<sp/>full<sp/>correlation<sp/>is<sp/>still<sp/>assumed<sp/>between<sp/>different<sp/>tag<sp/>weight<sp/>bins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>getSystCovarianceMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>ref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TH1*<sp/>unc,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doCorrelated,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tagWeightAxis)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nbinx<sp/>=<sp/>ref-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>ref-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>ref-&gt;GetNbinsZ()+2;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>rows<sp/>=<sp/>nbinx;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref-&gt;GetDimension()<sp/>&gt;<sp/>1)<sp/>rows<sp/>*=<sp/>nbiny;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref-&gt;GetDimension()<sp/>&gt;<sp/>2)<sp/>rows<sp/>*=<sp/>nbinz;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>TMatrixDSym<sp/>cov(rows);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Carry<sp/>out<sp/>a<sp/>minimal<sp/>consistency<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unc-&gt;GetNbinsX()+2<sp/>!=<sp/>nbinx<sp/>||<sp/>unc-&gt;GetNbinsY()+2<sp/>!=<sp/>nbiny<sp/>||<sp/>unc-&gt;GetNbinsZ()+2<sp/>!=<sp/>nbinz</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>unc-&gt;GetDimension()<sp/>!=<sp/>ref-&gt;GetDimension())<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;getSystCovarianceMatrix:<sp/>inconsistency<sp/>found<sp/>in<sp/>histograms<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ref-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>unc-&gt;GetName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>the<sp/>&quot;2&quot;<sp/>below<sp/>doesn&apos;t<sp/>actually<sp/>imply<sp/>that<sp/>two<sp/>bins<sp/>are<sp/>used...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>this<sp/>is<sp/>just<sp/>to<sp/>make<sp/>the<sp/>loops<sp/>below<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(ref-&gt;GetDimension()<sp/>&lt;=<sp/>1)<sp/>nbiny<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(ref-&gt;GetDimension()<sp/>&lt;=<sp/>2)<sp/>nbinz<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>uncertainties<sp/>not<sp/>correlated<sp/>from<sp/>bin<sp/>to<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>exception<sp/>here<sp/>is<sp/>for<sp/>tag<sp/>weight<sp/>bins,<sp/>which<sp/>are<sp/>always<sp/>assumed<sp/>to<sp/>be<sp/>fully<sp/>correlated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>doCorrelated)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagWeightAxis<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>truly<sp/>uncorrelated<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>unc-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,bin)<sp/>=<sp/>err*err;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagWeightAxis<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continuous<sp/>histogram<sp/>with<sp/>tag<sp/>weight<sp/>X<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>unc-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx2<sp/>=<sp/>1;<sp/>binx2<sp/>&lt;<sp/>nbinx-1;<sp/>++binx2)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin2<sp/>=<sp/>ref-&gt;GetBin(binx2,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err2<sp/>=<sp/>unc-&gt;GetBinContent(bin2);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,bin2)<sp/>=<sp/>err*err2;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagWeightAxis<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continuous<sp/>histogram<sp/>with<sp/>tag<sp/>weight<sp/>Y<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>unc-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny2<sp/>=<sp/>1;<sp/>biny2<sp/>&lt;<sp/>nbiny-1;<sp/>++biny2)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin2<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny2,<sp/>binz);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err2<sp/>=<sp/>unc-&gt;GetBinContent(bin2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,bin2)<sp/>=<sp/>err*err2;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagWeightAxis<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continuous<sp/>histogram<sp/>with<sp/>tag<sp/>weight<sp/>Z<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>unc-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz2<sp/>=<sp/>1;<sp/>binz2<sp/>&lt;<sp/>nbinz-1;<sp/>++binz2)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin2<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz2);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err2<sp/>=<sp/>unc-&gt;GetBinContent(bin2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,bin2)<sp/>=<sp/>err*err2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>ref-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>unc-&gt;GetBinContent(bin);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx2<sp/>=<sp/>1;<sp/>binx2<sp/>&lt;<sp/>nbinx-1;<sp/>++binx2)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny2<sp/>=<sp/>1;<sp/>biny2<sp/>&lt;<sp/>nbiny-1;<sp/>++biny2)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz2<sp/>=<sp/>1;<sp/>binz2<sp/>&lt;<sp/>nbinz-1;<sp/>++binz2)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin2<sp/>=<sp/>ref-&gt;GetBin(binx2,<sp/>biny2,<sp/>binz2);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>err2<sp/>=<sp/>unc-&gt;GetBinContent(bin2);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(bin,<sp/>bin2)<sp/>=<sp/>err*err2;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataEigenVariations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>intended<sp/>to<sp/>provide<sp/>a<sp/>more<sp/>proper<sp/>way<sp/>to<sp/>deal<sp/>with<sp/>correlations<sp/>between<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calibration<sp/>bins<sp/>than<sp/>would<sp/>be<sp/>possible<sp/>using<sp/>directly<sp/>the<sp/>calibration<sp/>containers&apos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>(the<sp/>general<sp/>issue<sp/>is<sp/>with<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>interface<sp/>methods<sp/>are<sp/>intended<sp/>to<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>use<sp/>on<sp/>a<sp/>jet<sp/>by<sp/>jet<sp/>basis;<sp/>in<sp/>this<sp/>context<sp/>it<sp/>is<sp/>not<sp/>straightforward<sp/>to<sp/>account<sp/>for<sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>correlations).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CalibrationDataEigenVariations<sp/>object<sp/>is<sp/>associated<sp/>with<sp/>a<sp/>specific<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataHistogramContainer.<sp/>It<sp/>starts<sp/>by<sp/>constructing<sp/>the<sp/>covariance<sp/>matrix<sp/>from<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>information<sp/>provided<sp/>by<sp/>the<sp/>container.<sp/>Subsequently<sp/>it<sp/>diagonalises<sp/>this<sp/>covariance<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matrix<sp/>(this<sp/>is<sp/>a<sp/>standard<sp/>eigenvalue<sp/>problem,<sp/>hence<sp/>the<sp/>name<sp/>of<sp/>the<sp/>class),<sp/>and<sp/>stores<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>as<sp/>&apos;variation&apos;<sp/>histograms<sp/>(representing<sp/>the<sp/>eigenvectors<sp/>multiplied<sp/>by<sp/>the<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>square<sp/>root<sp/>of<sp/>the<sp/>corresponding<sp/>eigenvalues).<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>it<sp/>is<sp/>possible<sp/>for<sp/>systematic<sp/>uncertainty<sp/>contributions<sp/>to<sp/>be<sp/>correlated<sp/>with<sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>corresponding<sp/>uncertainties<sp/>in<sp/>physics<sp/>analyses,<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>exclude<sp/>such<sp/>sources<sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>uncertainty<sp/>from<sp/>being<sp/>used<sp/>in<sp/>the<sp/>construction<sp/>of<sp/>the<sp/>covariance<sp/>matrix<sp/>(this<sp/>is<sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>effects<sp/>from<sp/>the<sp/>original<sp/>sources<sp/>of<sp/>uncertainty<sp/>cannot<sp/>be<sp/>traced<sp/>anymore<sp/>after<sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>of<sp/>the<sp/>eigenvalue<sp/>decomposition).<sp/>It<sp/>is<sp/>still<sp/>possible<sp/>to<sp/>evaluate<sp/>correctly<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>uncertainties<sp/>in<sp/>the<sp/>form<sp/>of<sp/>so-called<sp/>&apos;named<sp/>variations&apos;<sp/>(see<sp/>class<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CalibrationDataInterfaceROOT);<sp/>however<sp/>this<sp/>will<sp/>always<sp/>treat<sp/>uncertainties<sp/>as<sp/>being<sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>fully<sp/>correlated<sp/>(or<sp/>anti-correlated)<sp/>between<sp/>calibration<sp/>bins,<sp/>so<sp/>it<sp/>is<sp/>recommended<sp/>not<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>exclude<sp/>uncertainties<sp/>that<sp/>are<sp/>not<sp/>correlated<sp/>between<sp/>bins<sp/>from<sp/>the<sp/>eigenvector<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decomposition.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CINT__</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="normal">ClassImp(<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">CalibrationDataEigenVariations::CalibrationDataEigenVariations(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CalibrationDataHistogramContainer*<sp/>cnt)<sp/>:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>m_cnt(cnt),<sp/>m_initialized(false),<sp/>m_namedExtrapolation(-1)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">CalibrationDataEigenVariations::~CalibrationDataEigenVariations()</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>all<sp/>variation<sp/>histograms<sp/>owned<sp/>by<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;pair&lt;TH1*,<sp/>TH1*&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_named.begin();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_named.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;eigenvariations<sp/>destructor:<sp/>removing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_eigen.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eigenvariations&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vector&lt;pair&lt;TH1*,<sp/>TH1*&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>m_eigen.begin();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_eigen.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2d4229db57eaab49b22c4413ededba2d" kindref="member">CalibrationDataEigenVariations::excludeNamedUncertainty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Exclude<sp/>the<sp/>source<sp/>of<sp/>uncertainty<sp/>identified<sp/>by<sp/>the<sp/>given<sp/>name<sp/>from<sp/>being<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>construction<sp/>of<sp/>the<sp/>covariance<sp/>matrix<sp/>to<sp/>be<sp/>diagonalised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Some<sp/>names<sp/>returned<sp/>by<sp/>CalibrationDataContainer::listUncertainties()<sp/>are<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>meaningful<sp/>in<sp/>this<sp/>context,<sp/>and<sp/>specifying<sp/>them<sp/>is<sp/>not<sp/>allowed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Once<sp/>the<sp/>eigenvector<sp/>diagonalisation<sp/>has<sp/>been<sp/>carried<sp/>out,<sp/>this<sp/>method<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>not<sp/>be<sp/>used<sp/>anymore.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_initialized)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataEigenVariations::excludeNamedUncertainty<sp/>error:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>initialization<sp/>already<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/><sp/><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;systematics&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal"><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal"><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal"><sp/>||<sp/>name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReducedSets&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataEigenVariations::excludeNamedUncertainty<sp/>error:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>name<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_cnt-&gt;GetValue(name.c_str()))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CalibrationDataEigenVariations::excludeNamedUncertainty<sp/>error:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>uncertainty<sp/>named<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>m_named.push_back(std::pair&lt;TH1*,<sp/>TH1*&gt;(0,<sp/>0));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_namedIndices[name]<sp/>=<sp/>m_named.size()-1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">TMatrixDSym</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aaf9f84b00b42b957f2e5e2003de7ea5a" kindref="member">CalibrationDataEigenVariations::getEigenCovarianceMatrix</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>covariance<sp/>matrix<sp/>that<sp/>is<sp/>to<sp/>be<sp/>diagonalised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>extrapolation<sp/>uncertainties<sp/>(identified<sp/>by<sp/>the<sp/>keyword<sp/>&quot;extrapolation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>pertain<sp/>mostly<sp/>to<sp/>the<sp/>extrapolation<sp/>to<sp/>high<sp/>jet<sp/>pt)<sp/>are<sp/>always<sp/>excluded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>by<sp/>definition<sp/>they<sp/>will<sp/>not<sp/>apply<sp/>to<sp/>the<sp/>normal<sp/>calibration<sp/>bins.<sp/>Instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>uncertainty<sp/>has<sp/>to<sp/>be<sp/>dealt<sp/>with<sp/>as<sp/>a<sp/>named<sp/>variation.<sp/>In<sp/>addition<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>items<sp/>(&quot;combined&quot;,<sp/>&quot;systematics&quot;)<sp/>that<sp/>will<sp/>not<sp/>be<sp/>dealt<sp/>with<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>either<sp/>and<sp/>hence<sp/>are<sp/>excluded<sp/>as<sp/>well).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>if<sp/>an<sp/>explicit<sp/>covariance<sp/>matrix<sp/>is<sp/>supplied<sp/>(at<sp/>present<sp/>this<sp/>may<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>case<sp/>only<sp/>for<sp/>statistical<sp/>uncertainties:<sp/>in<sp/>the<sp/>case<sp/>of<sp/>&quot;continuous<sp/>tagging&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multinomial<sp/>statistics<sp/>applies<sp/>so<sp/>bin-to-bin<sp/>correlations<sp/>exist)<sp/>this<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>instead<sp/>of<sp/>constructing<sp/>the<sp/>statistical<sp/>uncertainties&apos;<sp/>covariance<sp/>matrix<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>fly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>TH1*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>the<sp/>uncertainties<sp/>to<sp/>construct<sp/>the<sp/>covariance<sp/>matrix<sp/>for<sp/>all<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>addressed<sp/>using<sp/>the<sp/>eigenvector<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>treat<sp/>the<sp/>statistics<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Account<sp/>for<sp/>the<sp/>possibility<sp/>that<sp/>this<sp/>is<sp/>handled<sp/>as<sp/>a<sp/>(non-trivial)<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>TMatrixDSym*<sp/>sCov<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TMatrixDSym*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>cov<sp/>=<sp/>(sCov)<sp/>?<sp/>*sCov<sp/>:<sp/>getStatCovarianceMatrix(result);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>loop<sp/>through<sp/>the<sp/>list<sp/>of<sp/>(other)<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>uncs<sp/>=<sp/>m_cnt-&gt;listUncertainties();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>uncs.size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>entries<sp/>that<sp/>should<sp/>never<sp/>be<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;combined&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statistics&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;systematics&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;MChadronisation&quot;</highlight><highlight class="normal"><sp/>||<sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal"><sp/>||</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncs[t]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ReducedSets&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>entries<sp/>that<sp/>can<sp/>be<sp/>excluded<sp/>if<sp/>desired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_namedIndices.find(uncs[t])<sp/>!=<sp/>m_namedIndices.end())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>hunc<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(uncs[t].c_str()));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>cov<sp/>+=<sp/>getSystCovarianceMatrix(result,<sp/>hunc,<sp/>m_cnt-&gt;isBinCorrelated(uncs[t]),<sp/>m_cnt-&gt;getTagWeightAxis());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">TMatrixDSym</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a8b55938d10f87a653dadca9a31fbeca1" kindref="member">CalibrationDataEigenVariations::getEigenCovarianceMatrixFromVariations</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="294"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>(Eigen-variation<sp/>part<sp/>of<sp/>the)<sp/>covariance<sp/>matrix<sp/>from<sp/>the<sp/>individual<sp/>variations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>be<sp/>called<sp/>_after_<sp/>initialize()!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>TH1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>TMatrixD<sp/><sp/><sp/><sp/>jac<sp/>=<sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a08874260e4efddaf7ddc4543a54e0e87" kindref="member">getJacobianReductionMatrix</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbins<sp/>=<sp/>jac.GetNcols();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>cov(nbins);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::pair&lt;TH1*,<sp/>TH1*&gt;<sp/>&gt;::const_iterator<sp/>it<sp/>=<sp/>m_eigen.begin();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_eigen.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variation<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[nbins];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedUp<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)<sp/>nbins;<sp/>++u)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>variation[u]<sp/>=<sp/>resultVariedUp-&gt;GetBinContent(u)<sp/>-<sp/>result-&gt;GetBinContent(u);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>nbins;<sp/>++u)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>nbins;<sp/>++v)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov(u,<sp/>v)<sp/>+=<sp/>variation[u]*variation[v];</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>variation;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cov;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">TMatrixD</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a08874260e4efddaf7ddc4543a54e0e87" kindref="member">CalibrationDataEigenVariations::getJacobianReductionMatrix</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="322"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>matrix<sp/>that<sp/>removes<sp/>the<sp/>rows<sp/>and<sp/>columns<sp/>that<sp/>fail<sp/>to<sp/>influence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>eigen-variations.<sp/>To<sp/>reduce<sp/>the<sp/>covariance<sp/>matrix,<sp/>do<sp/>the<sp/>following:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TMatrixDSym<sp/>cov<sp/>=<sp/>getEigenCovarianceMatrix();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TMatrixDSym<sp/>jac<sp/>=<sp/>getJacobianReductionMatrix();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TMatrixDSym<sp/>redSystematicCovMatrix<sp/>=<sp/>cov.Similarity(jac);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>TH1*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>over<sp/>the<sp/>uncertainties<sp/>to<sp/>construct<sp/>the<sp/>covariance<sp/>matrix<sp/>for<sp/>all<sp/>uncertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>addressed<sp/>using<sp/>the<sp/>eigenvector<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>un-compressed<sp/>Eigenvector<sp/>variation<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(only<sp/>needed<sp/>to<sp/>check<sp/>for<sp/>unexpected<sp/>singularities)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>cov<sp/>=<sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aaf9f84b00b42b957f2e5e2003de7ea5a" kindref="member">getEigenCovarianceMatrix</ref>();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>original<sp/>number<sp/>of<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins<sp/>=<sp/>result-&gt;GetNbinsX()+2;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/><sp/>=<sp/>result-&gt;GetDimension();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>1)<sp/>nbins*=<sp/>(result-&gt;GetNbinsY()+2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>2)<sp/>nbins*=<sp/>(result-&gt;GetNbinsZ()+2);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>&quot;compressing&quot;<sp/>the<sp/>covariance<sp/>matrix<sp/>(removing<sp/>columns/rows<sp/>containing<sp/>zeros<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nZeros=0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>zeroComponents;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cov.GetNrows()<sp/>!=<sp/>nbins)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>error:<sp/>covariance<sp/>matrix<sp/>size<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cov.GetNrows()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>doesn&apos;t<sp/>match<sp/>histogram<sp/>size<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nbins<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TMatrixDSym();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>flag<sp/>all<sp/>the<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Directly<sp/>identify<sp/>the<sp/>under-<sp/>and<sp/>overflow<sp/>bins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>binx,<sp/>biny,<sp/>binz;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;GetBinXYZ(i,<sp/>binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((binx<sp/>==<sp/>0<sp/>||<sp/>binx<sp/>==<sp/>result-&gt;GetNbinsX()+1)<sp/>||</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ndim<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>(biny<sp/>==<sp/>0<sp/>||<sp/>biny<sp/>==<sp/>result-&gt;GetNbinsY()+1))<sp/>||</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ndim<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>(binz<sp/>==<sp/>0<sp/>||<sp/>binz<sp/>==<sp/>result-&gt;GetNbinsZ()+1)))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nZeros;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zeroComponents.push_back(i);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;flagging<sp/>bin<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>as<sp/>under-<sp/>or<sp/>overflow&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>a<sp/>first<sp/>(quick)<sp/>identification<sp/>of<sp/>rows/columns<sp/>of<sp/>zeros<sp/>by<sp/>the<sp/>first<sp/>element<sp/>in<sp/>each<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>&quot;successful&quot;,<sp/>check<sp/>the<sp/>whole<sp/>row<sp/>in<sp/>more<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cov(i,0))<sp/>&lt;<sp/>1e-10)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThereANonZero(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbins;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cov(i,j))<sp/>&gt;<sp/>1e-10)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isThereANonZero=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>isThereANonZero)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nZeros;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeroComponents.push_back(i);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>the<sp/>container<sp/>is<sp/>for<sp/>&quot;continuous&quot;<sp/>calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>important<sp/>since<sp/>the<sp/>number<sp/>of<sp/>independent<sp/>scale<sp/>factors<sp/>(for<sp/>each<sp/>pt<sp/>or<sp/>eta<sp/>bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>reduced<sp/>by<sp/>1<sp/>compared<sp/>to<sp/>the<sp/>number<sp/>of<sp/>tag<sp/>weight<sp/>bins<sp/>(related<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>fractions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>events<sp/>in<sp/>tag<sp/>weight<sp/>bins<sp/>have<sp/>to<sp/>sum<sp/>up<sp/>to<sp/>unity).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>axis<sp/>=<sp/>m_cnt-&gt;getTagWeightAxis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>doContinuous<sp/>=<sp/>false;<sp/><sp/>unsigned<sp/>int<sp/>weightAxis<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(axis<sp/>&gt;=<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>doContinuous<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>weightAxis<sp/>=<sp/>(unsigned<sp/>int)<sp/>axis;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>In<sp/>this<sp/>case,<sp/>verify<sp/>that<sp/>the<sp/>special<sp/>&quot;uncertainty&quot;<sp/>entry<sp/>that<sp/>is<sp/>in<sp/>fact<sp/>the<sp/>reference<sp/>MC<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>weight<sp/>fractions<sp/>is<sp/>present.<sp/>These<sp/>tag<sp/>weight<sp/>fractions<sp/>are<sp/>needed<sp/>in<sp/>order<sp/>to<sp/>carry<sp/>out<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>diagonalisation<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(!<sp/>dynamic_cast&lt;TH1*&gt;(m_cnt-&gt;GetValue(&quot;MCreference&quot;)))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;<sp/>Problem:<sp/>continuous<sp/>calibration<sp/>object<sp/>found<sp/>without<sp/>MC<sp/>reference<sp/>tag<sp/>weight<sp/>histogram<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>TMatrixDSym();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>relevant<sp/>for<sp/>continuous<sp/>calibration<sp/>containers,<sp/>but<sp/>in<sp/>order<sp/>to<sp/>void<sp/>re-computation<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>them<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Int_t<sp/>nbinx<sp/>=<sp/>result-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>result-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>result-&gt;GetNbinsZ()+2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>If<sp/>we<sp/>are<sp/>indeed<sp/>dealing<sp/>with<sp/>a<sp/>&quot;continuous&quot;<sp/>calibration<sp/>container,<sp/>ignore<sp/>one<sp/>tag<sp/>weight<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>int<sp/>skipTagWeightBin<sp/>=<sp/>1;<sp/>//<sp/>NB<sp/>this<sp/>follows<sp/>the<sp/>histogram&apos;s<sp/>bin<sp/>numbering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(doContinuous)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((weightAxis<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>binx<sp/>==<sp/>skipTagWeightBin)<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(weightAxis<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>biny<sp/>==<sp/>skipTagWeightBin)<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(weightAxis<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>binz<sp/>==<sp/>skipTagWeightBin))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>At<sp/>this<sp/>point<sp/>we<sp/>simply<sp/>add<sp/>these<sp/>to<sp/>the<sp/>&apos;null&apos;<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nZeros;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zeroComponents.push_back(result-&gt;GetBin(binx,<sp/>biny,<sp/>binz));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nZeros<sp/>&gt;=<sp/>nbins)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Problem.<sp/>Found<sp/>n.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nZeros<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>while<sp/>size<sp/>of<sp/>matrix<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nbins<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TMatrixDSym();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>nbins<sp/>-<sp/>nZeros;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>matrixVariationJacobian(size,nbins);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMissed=0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//full<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>missed=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>zeroComponents.size();<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(zeroComponents.at(s)<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(missed)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nMissed;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixVariationJacobian(i-nMissed,i)=1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrixVariationJacobian;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa4cc0703d86a192ecefa243081bbd329" kindref="member">CalibrationDataEigenVariations::initialize</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_variance)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>this<sp/>class&apos;s<sp/>most<sp/>important<sp/>method,<sp/>in<sp/>the<sp/>sense<sp/>that<sp/>it<sp/>does<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>math<sp/>and<sp/>constructs<sp/>all<sp/>&quot;variation&quot;<sp/>histograms<sp/>(for<sp/>both<sp/>eigenvector<sp/>and<sp/>named</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>named<sp/>variations).<sp/>This<sp/>constitutes<sp/>the<sp/>full<sp/>initialisation<sp/>of<sp/>the<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>is<sp/>meant<sp/>to<sp/>be<sp/>called<sp/>only<sp/>after<sp/>all<sp/>calls<sp/>(if<sp/>any)<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CalibrationDataEigenVariations::excludeNamedUncertainty()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>TH1*<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>step:<sp/>construct<sp/>the<sp/>original<sp/>covariance<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>TMatrixDSym<sp/>cov<sp/>=<sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aaf9f84b00b42b957f2e5e2003de7ea5a" kindref="member">getEigenCovarianceMatrix</ref>();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>step:<sp/>create<sp/>the<sp/>variations<sp/>for<sp/>the<sp/>named<sp/>sources<sp/>of<sp/>uncertainty<sp/>(easy...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;string,<sp/>unsigned<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>m_namedIndices.begin();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_namedIndices.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;TH1*,<sp/>TH1*&gt;&amp;<sp/>p<sp/>=<sp/>m_named[it-&gt;second];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>hunc<sp/>=<sp/>(TH1*)<sp/>m_cnt-&gt;GetValue(it-&gt;first.c_str());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>namedvar(</highlight><highlight class="stringliteral">&quot;namedVar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>namedvar<sp/>+=<sp/>it-&gt;first.c_str();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>namedvarUp(namedvar);<sp/><sp/><sp/>namedvarUp<sp/><sp/><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>namedvarDown(namedvar);<sp/>namedvarDown<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedUp<sp/><sp/><sp/>=<sp/>(TH1*)result-&gt;Clone(namedvarUp);<sp/><sp/><sp/>resultVariedUp-&gt;Add(hunc,<sp/>1.0);<sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedDown<sp/>=<sp/>(TH1*)result-&gt;Clone(namedvarDown);<sp/>resultVariedDown-&gt;Add(hunc,<sp/>-1.0);<sp/>resultVariedDown-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>p.first<sp/><sp/>=<sp/>resultVariedUp;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>p.second<sp/>=<sp/>resultVariedDown;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Refinement:<sp/>add<sp/>the<sp/>&quot;extrapolation&quot;<sp/>uncertainty<sp/>as<sp/>a<sp/>named<sp/>uncertainty,<sp/>if<sp/>the<sp/>histogram<sp/>is<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>bit<sp/>special,<sp/>since<sp/>the<sp/>extrapolation<sp/>uncertainty<sp/>histogram<sp/>has<sp/>a<sp/>different<sp/>size<sp/>than<sp/>other<sp/>histograms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TH1*<sp/>hunc<sp/>=<sp/>(TH1*)<sp/>m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedUp<sp/><sp/><sp/>=<sp/>(TH1*)<sp/>hunc-&gt;Clone(</highlight><highlight class="stringliteral">&quot;extrapolation_up&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/>resultVariedUp-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedDown<sp/>=<sp/>(TH1*)<sp/>hunc-&gt;Clone(</highlight><highlight class="stringliteral">&quot;extrapolation_down&quot;</highlight><highlight class="normal">);<sp/>resultVariedDown-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>nbinx<sp/>=<sp/>hunc-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>hunc-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>hunc-&gt;GetNbinsZ()+2;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>firstbinx<sp/>=<sp/>hunc-&gt;GetXaxis()-&gt;FindFixBin(result-&gt;GetXaxis()-&gt;GetBinCenter(1));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>firstbiny<sp/>=<sp/>result-&gt;GetDimension()<sp/>&gt;<sp/>1<sp/>?<sp/>hunc-&gt;GetYaxis()-&gt;FindFixBin(result-&gt;GetYaxis()-&gt;GetBinCenter(1))<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>firstbinz<sp/>=<sp/>result-&gt;GetDimension()<sp/>&gt;<sp/>2<sp/>?<sp/>hunc-&gt;GetZaxis()-&gt;FindFixBin(result-&gt;GetZaxis()-&gt;GetBinCenter(1))<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>binxResult<sp/>=<sp/>binx<sp/>-<sp/>firstbinx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binxResult<sp/>&lt;<sp/>1)<sp/>binxResult<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binxResult<sp/>&gt;<sp/>result-&gt;GetNbinsX())<sp/>binxResult<sp/>=<sp/>result-&gt;GetNbinsX();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>Int_t<sp/>binyResult<sp/>=<sp/>biny<sp/>-<sp/>firstbiny<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binyResult<sp/>&gt;<sp/>result-&gt;GetNbinsY())<sp/>binyResult<sp/>=<sp/>result-&gt;GetNbinsY();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>binzResult<sp/>=<sp/>binz<sp/>-<sp/>firstbinz<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binzResult<sp/>&gt;<sp/>result-&gt;GetNbinsZ())<sp/>binzResult<sp/>=<sp/>result-&gt;GetNbinsZ();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>hunc-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>contResult<sp/>=<sp/>result-&gt;GetBinContent(binxResult,<sp/>binyResult,<sp/>binzResult);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetBinContent(bin,<sp/>contResult<sp/>+<sp/>hunc-&gt;GetBinContent(bin));</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultVariedDown-&gt;SetBinContent(bin,<sp/>contResult<sp/>-<sp/>hunc-&gt;GetBinError(bin));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>m_named.push_back(std::make_pair(resultVariedUp,<sp/>resultVariedDown));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>m_namedExtrapolation<sp/>=<sp/>m_namedIndices[</highlight><highlight class="stringliteral">&quot;extrapolation&quot;</highlight><highlight class="normal">]<sp/>=<sp/>m_named.size()-1;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Third<sp/>step:<sp/>compute<sp/>the<sp/>eigenvector<sp/>variations<sp/>corresponding<sp/>to<sp/>the<sp/>remaining<sp/>sources<sp/>of<sp/>uncertainty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins<sp/>=<sp/>result-&gt;GetNbinsX()+2;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/><sp/>=<sp/>result-&gt;GetDimension();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>1)<sp/>nbins*=<sp/>(result-&gt;GetNbinsY()+2);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>2)<sp/>nbins*=<sp/>(result-&gt;GetNbinsZ()+2);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Determine<sp/>whether<sp/>the<sp/>container<sp/>is<sp/>for<sp/>&quot;continuous&quot;<sp/>calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>This<sp/>is<sp/>important<sp/>since<sp/>the<sp/>number<sp/>of<sp/>independent<sp/>scale<sp/>factors<sp/>(for<sp/>each<sp/>pt<sp/>or<sp/>eta<sp/>bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>is<sp/>reduced<sp/>by<sp/>1<sp/>compared<sp/>to<sp/>the<sp/>number<sp/>of<sp/>tag<sp/>weight<sp/>bins<sp/>(related<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>the<sp/>fractions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>of<sp/>events<sp/>in<sp/>tag<sp/>weight<sp/>bins<sp/>have<sp/>to<sp/>sum<sp/>up<sp/>to<sp/>unity).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis<sp/>=<sp/>m_cnt-&gt;getTagWeightAxis();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>doContinuous<sp/>=<sp/>false;<sp/>unsigned<sp/>int<sp/>weightAxis<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(axis<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>doContinuous<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>weightAxis<sp/>=<sp/>(unsigned<sp/>int)<sp/>axis;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>In<sp/>this<sp/>case,<sp/>verify<sp/>that<sp/>the<sp/>special<sp/>&quot;uncertainty&quot;<sp/>entry<sp/>that<sp/>is<sp/>in<sp/>fact<sp/>the<sp/>reference<sp/>MC<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>weight<sp/>fractions<sp/>is<sp/>present.<sp/>These<sp/>tag<sp/>weight<sp/>fractions<sp/>are<sp/>needed<sp/>in<sp/>order<sp/>to<sp/>carry<sp/>out<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>diagonalisation<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>dynamic_cast&lt;TH1*&gt;(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;MCreference&quot;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Problem:<sp/>continuous<sp/>calibration<sp/>object<sp/>found<sp/>without<sp/>MC<sp/>reference<sp/>tag<sp/>weight<sp/>histogram<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>relevant<sp/>for<sp/>continuous<sp/>calibration<sp/>containers,<sp/>but<sp/>in<sp/>order<sp/>to<sp/>void<sp/>re-computation<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>them<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Int_t<sp/>nbinx<sp/>=<sp/>result-&gt;GetNbinsX()+2,<sp/>nbiny<sp/>=<sp/>result-&gt;GetNbinsY()+2,<sp/>nbinz<sp/>=<sp/>result-&gt;GetNbinsZ()+2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>matrixVariationJacobian<sp/>=<sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a08874260e4efddaf7ddc4543a54e0e87" kindref="member">getJacobianReductionMatrix</ref>();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>matrixVariationJacobian.GetNrows();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>the<sp/>matrix<sp/>to<sp/>one<sp/>without<sp/>the<sp/>zeros,<sp/>using<sp/>a<sp/>&quot;similarity&quot;<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TMatrixDSym<sp/>matrixCovariance<sp/>=<sp/>cov.Similarity(matrixVariationJacobian);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Carry<sp/>out<sp/>the<sp/>Eigenvector<sp/>decomposition<sp/>on<sp/>this<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>TMatrixDSymEigen<sp/>eigenValueMaker<sp/>(matrixCovariance);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>TVectorT&lt;double&gt;<sp/>eigenValues<sp/><sp/><sp/>=<sp/>eigenValueMaker.GetEigenValues();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>eigenVectors<sp/><sp/>=<sp/>eigenValueMaker.GetEigenVectors();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>matrixVariations<sp/>(size,size);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TDecompSVD<sp/><sp/><sp/><sp/><sp/><sp/><sp/>covSVD<sp/>(matrixCovariance,<sp/>1.0E-3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TVectorD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sSVD<sp/>=<sp/>covSVD.GetSig();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>sSVD.GetNrows()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sSVD.GetNrows();<sp/>++i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>sSVD(i)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>go<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//first<sp/>index<sp/>is<sp/>the<sp/>variation<sp/>number,<sp/>second<sp/>corresponds<sp/>to<sp/>the<sp/>pT<sp/>bin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixVariations(i,r)<sp/>=<sp/>-1.0*eigenVectors[r][i]*sqrt(fabs(eigenValues[i]));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>TMatrixT&lt;double&gt;<sp/>matrixVariationsWithZeros<sp/>=<sp/>matrixVariations<sp/>*<sp/>matrixVariationJacobian;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//now<sp/>setup<sp/>the<sp/>real<sp/>ucertainties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;TObject*&gt;<sp/>eigenvectorsUncUpProvider;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;TObject*&gt;<sp/>eigenvectorsUncDownProvider;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;TObject*&gt;<sp/>eigenvectorsUncProvider;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TH1*<sp/>MC<sp/>=<sp/>(doContinuous)<sp/>?<sp/>dynamic_cast&lt;TH1*&gt;(m_cnt-&gt;GetValue(&quot;MCreference&quot;))<sp/>:<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>first<sp/>carry<sp/>out<sp/>basic<sp/>cross-checks:<sp/>data<sp/>and<sp/>MC<sp/>fractions<sp/>summed<sp/>over<sp/>tag<sp/>weight<sp/>bins<sp/>must<sp/>always<sp/>be<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(doContinuous)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(weightAxis<sp/>==<sp/>2)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effMC<sp/>=<sp/>0,<sp/>effData<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effData<sp/>+=<sp/>result-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effMC<sp/><sp/><sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\t(x,<sp/>y)<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binx<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>biny</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>summed<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effMC<sp/>&lt;&lt;<sp/>&quot;,<sp/>summed<sp/>data:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effData<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(weightAxis<sp/>==<sp/>1)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effMC<sp/>=<sp/>0,<sp/>effData<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effData<sp/>+=<sp/>result-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effMC<sp/><sp/><sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\tcnt<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binx<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>biny<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(10)<sp/>&lt;&lt;<sp/>MC-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;<sp/>SF:<sp/>(nom<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>result-&gt;GetBinContent(bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>up<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>resultVariedUp-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;),<sp/>up(cumulative):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effUp<sp/>&lt;&lt;<sp/>&quot;,<sp/>nom(cumulative):<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effNom<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\t(x,<sp/>z)<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binx<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>summed<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effMC<sp/>&lt;&lt;<sp/>&quot;,<sp/>summed<sp/>data:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effData<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effMC<sp/>=<sp/>0,<sp/>effData<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effData<sp/>+=<sp/>result-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effMC<sp/><sp/><sp/>+=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\t(y,<sp/>z)<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>biny<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>summed<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effMC<sp/>&lt;&lt;<sp/>&quot;,<sp/>summed<sp/>data:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(6)<sp/>&lt;&lt;<sp/>effData<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>initial<sp/>set<sp/>of<sp/>variations<sp/>from<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matrixVariationsWithZeros.GetNrows();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TString<sp/>superstring(result-&gt;GetName());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>superstring<sp/>+=<sp/>&quot;_eigenVar&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>superstring(</highlight><highlight class="stringliteral">&quot;eigenVar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>superstring+=i;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>nameUp(superstring);<sp/><sp/><sp/>nameUp<sp/><sp/><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_up&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>nameDown(superstring);<sp/>nameDown<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;_down&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TString<sp/>nameUnc(superstring);<sp/><sp/>nameUnc+=<sp/>&quot;_unc&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedUp<sp/><sp/><sp/>=<sp/>(TH1*)result-&gt;Clone(nameUp);<sp/><sp/><sp/>resultVariedUp-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1*<sp/>resultVariedDown<sp/>=<sp/>(TH1*)result-&gt;Clone(nameDown);<sp/>resultVariedDown-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>nbins;<sp/>++u)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetBinContent(u,result-&gt;GetBinContent(u)+</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixVariationsWithZeros(i,u));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resultVariedDown-&gt;SetBinContent(u,result-&gt;GetBinContent(u)-</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixVariationsWithZeros(i,u));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>The<sp/>&quot;continuous&quot;<sp/>case<sp/>is<sp/>special,<sp/>since<sp/>we<sp/>need<sp/>to<sp/>re-insert<sp/>the<sp/>variations<sp/>for<sp/>the<sp/>tag<sp/>weight<sp/>bins<sp/>that<sp/>were</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>removed<sp/>to<sp/>make<sp/>the<sp/>covariance<sp/>matrix<sp/>non-singular</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(doContinuous)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;assuming<sp/>a<sp/>continuous<sp/>calibration<sp/>object,<sp/>weight<sp/>axis<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>weightAxis<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Ugly<sp/>code<sp/>duplication<sp/>since<sp/>nfortunately<sp/>there<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>be<sp/>a<sp/>compact<sp/>way<sp/>to<sp/>go</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>through<sp/>the<sp/>following<sp/>manipulations<sp/>without<sp/>a<sp/>priori<sp/>knowledge<sp/>of<sp/>the<sp/>histogram<sp/>axes!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(weightAxis<sp/>==<sp/>2)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effUp<sp/>=<sp/>1,<sp/>effDown<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(binz<sp/>==<sp/>skipTagWeightBin)<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effUp<sp/><sp/><sp/>-=<sp/>resultVariedUp-&gt;GetBinContent(bin)<sp/><sp/><sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effDown<sp/>-=<sp/>resultVariedDown-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>What<sp/>remains<sp/>is<sp/>the<sp/>&quot;data&quot;<sp/>tag<sp/>weight<sp/>fraction<sp/>in<sp/>the<sp/>skipped<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Divide<sp/>it<sp/>by<sp/>its<sp/>corresponding<sp/>MC<sp/>tag<sp/>weight<sp/>fraction<sp/>to<sp/>obtain<sp/>the<sp/>varied<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>skipTagWeightBin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetBinContent(bin,<sp/><sp/>effUp/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedDown-&gt;SetBinContent(bin,effDown/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(weightAxis<sp/>==<sp/>1)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effUp<sp/>=<sp/>1,<sp/>effDown<sp/>=<sp/>1;<sp/>//,<sp/>effNom<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(biny<sp/>==<sp/>skipTagWeightBin)<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>effNom<sp/><sp/>-=<sp/>result-&gt;GetBinContent(bin)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effUp<sp/><sp/><sp/>-=<sp/>resultVariedUp-&gt;GetBinContent(bin)<sp/><sp/><sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effDown<sp/>-=<sp/>resultVariedDown-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\tcnt<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binx<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>biny<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(10)<sp/>&lt;&lt;<sp/>MC-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;<sp/>SF:<sp/>(nom<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>result-&gt;GetBinContent(bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>up<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>resultVariedUp-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;),<sp/>up(cumulative):<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effUp<sp/>&lt;&lt;<sp/>&quot;,<sp/>nom(cumulative):<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effNom<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>What<sp/>remains<sp/>is<sp/>the<sp/>&quot;data&quot;<sp/>tag<sp/>weight<sp/>fraction<sp/>in<sp/>the<sp/>skipped<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Divide<sp/>it<sp/>by<sp/>its<sp/>corresponding<sp/>MC<sp/>tag<sp/>weight<sp/>fraction<sp/>to<sp/>obtain<sp/>the<sp/>varied<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>skipTagWeightBin,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetBinContent(bin,<sp/><sp/>effUp/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedDown-&gt;SetBinContent(bin,effDown/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\tcnt<sp/>=<sp/>(&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binx<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>skipTagWeightBin<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>setw(3)<sp/>&lt;&lt;<sp/>binz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>MC:<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(10)<sp/>&lt;&lt;<sp/>MC-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;,<sp/>resulting<sp/>SF<sp/>(<sp/>nom<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effNom/MC-&gt;GetBinContent(bin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>check<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>result-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;,<sp/>up<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>setw(8)<sp/>&lt;&lt;<sp/>effUp/MC-&gt;GetBinContent(bin)<sp/>&lt;&lt;<sp/>&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(Int_t<sp/>biny<sp/>=<sp/>1;<sp/>biny<sp/>&lt;<sp/>nbiny-1;<sp/>++biny)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binz<sp/>=<sp/>1;<sp/>binz<sp/>&lt;<sp/>nbinz-1;<sp/>++binz)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>effUp<sp/>=<sp/>1,<sp/>effDown<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(Int_t<sp/>binx<sp/>=<sp/>1;<sp/>binx<sp/>&lt;<sp/>nbinx-1;<sp/>++binx)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(binx<sp/>==<sp/>skipTagWeightBin)<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(binx,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effUp<sp/><sp/><sp/>-=<sp/>resultVariedUp-&gt;GetBinContent(bin)<sp/><sp/><sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effDown<sp/>-=<sp/>resultVariedDown-&gt;GetBinContent(bin)<sp/>*<sp/>MC-&gt;GetBinContent(bin);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>What<sp/>remains<sp/>is<sp/>the<sp/>&quot;data&quot;<sp/>tag<sp/>weight<sp/>fraction<sp/>in<sp/>the<sp/>skipped<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Divide<sp/>it<sp/>by<sp/>its<sp/>corresponding<sp/>MC<sp/>tag<sp/>weight<sp/>fraction<sp/>to<sp/>obtain<sp/>the<sp/>varied<sp/>scale<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Int_t<sp/>bin<sp/>=<sp/>result-&gt;GetBin(skipTagWeightBin,<sp/>biny,<sp/>binz);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedUp-&gt;SetBinContent(bin,<sp/><sp/>effUp/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>resultVariedDown-&gt;SetBinContent(bin,effDown/MC-&gt;GetBinContent(bin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eigen.push_back(std::make_pair(resultVariedUp,<sp/>resultVariedDown));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//end<sp/>eigenvector<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>variations<sp/>that<sp/>are<sp/>below<sp/>the<sp/>given<sp/>tolerance<sp/>(effectively<sp/>meaning<sp/>that<sp/>they<sp/>don&apos;t<sp/>have<sp/>any<sp/>effect)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>IndexSet<sp/>final_set;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_set<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>m_eigen.size();<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_variation<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*up<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_eigen[index].first-&gt;Clone());<sp/>up-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>up-&gt;Add(result,<sp/>-1.0);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/>1;<sp/>bin<sp/>&lt;=<sp/>nbins;<sp/>++bin)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(up-&gt;GetBinContent(bin))<sp/>&gt;<sp/>min_variance)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>keep_variation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>up;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keep_variation)</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>final_set.insert(current_set);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>++current_set;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(final_set.size()<sp/>&gt;<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Removing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>final_set.size()</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eigenvector<sp/>variations<sp/>leading<sp/>to<sp/>sub-tolerance<sp/>effects,<sp/>retaining<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_eigen.size()-final_set.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>variations&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a43856b29b00f3e3eb64a1fc7725ea59e" kindref="member">removeVariations</ref>(final_set);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>m_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a43856b29b00f3e3eb64a1fc7725ea59e" kindref="member">CalibrationDataEigenVariations::removeVariations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexSet<sp/>&amp;</highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">set</highlight><highlight class="normal">.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;TH1*,<sp/>TH1*&gt;<sp/>&gt;<sp/>new_eigen;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>m_eigen.size();<sp/>++index)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">set</highlight><highlight class="normal">.count(index)<sp/>==<sp/>0)<sp/>new_eigen.push_back(m_eigen[index]);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>m_eigen<sp/>=<sp/>new_eigen;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a43856b29b00f3e3eb64a1fc7725ea59e" kindref="member">CalibrationDataEigenVariations::removeVariations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexSuperSet<sp/>&amp;</highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>IndexSet<sp/>simple_set;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSuperSet::iterator<sp/>set_it<sp/>=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.begin();</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_it<sp/>!=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.end();<sp/>++set_it)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSet::iterator<sp/>subset_it<sp/>=<sp/>set_it-&gt;begin();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>subset_it<sp/>!=<sp/>set_it-&gt;end();<sp/>++subset_it)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simple_set.insert(*subset_it);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a43856b29b00f3e3eb64a1fc7725ea59e" kindref="member">removeVariations</ref>(simple_set);</highlight></codeline>
<codeline lineno="762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a72e073c183734d308452c1e2bdb20812" kindref="member">CalibrationDataEigenVariations::mergeVariationsFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>index)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>all<sp/>systematic<sp/>variation<sp/>starting<sp/>from<sp/>the<sp/>given<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>resulting<sp/>merged<sp/>variation<sp/>replaces<sp/>the<sp/>first<sp/>entry<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(i.e.,<sp/>the<sp/>entry<sp/>specified<sp/>by<sp/>the<sp/>index).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>IndexSet<sp/>simple_set;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>index;<sp/>it<sp/>&lt;<sp/>m_eigen.size();<sp/>++it)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>simple_set.insert(it);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1ae4527eb7970a6573a19393401179ec7c" kindref="member">mergeVariations</ref>(simple_set);</highlight></codeline>
<codeline lineno="776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1ae4527eb7970a6573a19393401179ec7c" kindref="member">CalibrationDataEigenVariations::mergeVariations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexSet<sp/>&amp;</highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>IndexSuperSet<sp/>sset;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>sset.insert(</highlight><highlight class="keyword">set</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1ae4527eb7970a6573a19393401179ec7c" kindref="member">mergeVariations</ref>(sset);</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1ae4527eb7970a6573a19393401179ec7c" kindref="member">CalibrationDataEigenVariations::mergeVariations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexSuperSet<sp/>&amp;</highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>IndexSet<sp/>checker;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSuperSet::iterator<sp/>set_it<sp/>=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.begin();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_it<sp/>!=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.end();<sp/>++set_it)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSet::iterator<sp/>subset_it<sp/>=<sp/>set_it-&gt;begin();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>subset_it<sp/>!=<sp/>set_it-&gt;end();<sp/>++subset_it){</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checker.count(*subset_it)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>*subset_it<sp/>&lt;=<sp/>m_eigen.size())</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checker.insert(*subset_it);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>CalibrationDataEigenVariations::mergeVariations:<sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexSets<sp/>must<sp/>not<sp/>overlap<sp/>and<sp/>must<sp/>lie<sp/>between<sp/>1<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_eigen.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Aborting!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>the<sp/>central<sp/>calibration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>TH1<sp/>*result<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_cnt-&gt;GetValue(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>IndexSet<sp/>toDelete;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbins<sp/>=<sp/>result-&gt;GetNbinsX()+2;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/><sp/>=<sp/>result-&gt;GetDimension();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>1)<sp/>nbins<sp/>*=<sp/>(result-&gt;GetNbinsY()+2);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ndim<sp/>&gt;<sp/>2)<sp/>nbins<sp/>*=<sp/>(result-&gt;GetNbinsZ()+2);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TH1<sp/>*var_up_final<sp/>=<sp/>static_cast&lt;TH1*&gt;(result-&gt;Clone()),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>*var_down_final<sp/>=<sp/>static_cast&lt;TH1*&gt;(result-&gt;Clone());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>var_up_final-&gt;Reset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>var_down_final-&gt;Reset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>complex<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSuperSet::iterator<sp/>set_it<sp/>=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.begin();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_it<sp/>!=<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">.end();<sp/>++set_it)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(set_it-&gt;empty())<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_H_up<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_H_down<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lowest_index<sp/>=<sp/>*set_it-&gt;lower_bound(0);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>TH1<sp/>*total_var_up<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_eigen[lowest_index].first-&gt;Clone()),</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*total_var_down<sp/>=<sp/>static_cast&lt;TH1*&gt;(m_eigen[lowest_index].second-&gt;Clone());</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_up-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_down-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_up-&gt;Reset();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_down-&gt;Reset();</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sum<sp/>all<sp/>other<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IndexSet::iterator<sp/>subset_it<sp/>=<sp/>set_it-&gt;begin();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>subset_it<sp/>!=<sp/>set_it-&gt;end();<sp/>++subset_it)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>actual_index<sp/>=<sp/>*subset_it;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_index<sp/>!=<sp/>lowest_index)<sp/>toDelete.insert(*subset_it);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TH1<sp/>*partial_var_up<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TH1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_eigen[actual_index].first-&gt;Clone()),</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>*partial_var_down<sp/>=<sp/>static_cast&lt;TH1*&gt;(m_eigen[actual_index].second-&gt;Clone());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partial_var_up-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partial_var_down-&gt;SetDirectory(0);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partial_var_up-&gt;Add(result,<sp/>-1.0);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>partial_var_down-&gt;Add(result,<sp/>-1.0);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partial_var_down-&gt;SetBinContent(i,<sp/>-1.0*partial_var_down-&gt;GetBinContent(i));</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>nbins;<sp/>++u)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_up<sp/>=<sp/>total_var_up-&gt;GetBinContent(u),</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_down<sp/>=<sp/>total_var_down-&gt;GetBinContent(u);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>nbins;<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_up<sp/>+=<sp/>partial_var_up-&gt;GetBinContent(u)*partial_var_up-&gt;GetBinContent(v);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_H_up<sp/>+=<sp/>partial_var_up-&gt;GetBinContent(u)*partial_var_up-&gt;GetBinContent(v);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_down<sp/>+=<sp/>partial_var_down-&gt;GetBinContent(u)*partial_var_down-&gt;GetBinContent(v);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_H_down<sp/>+=<sp/>partial_var_down-&gt;GetBinContent(u)*partial_var_down-&gt;GetBinContent(v);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_up-&gt;SetBinContent(u,<sp/>sum_up);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_down-&gt;SetBinContent(u,<sp/>sum_down);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>partial_var_up;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>partial_var_down;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>part<sp/>of<sp/>complex<sp/>summing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbins;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum_H_up<sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_up-&gt;SetBinContent(i,<sp/>total_var_up-&gt;GetBinContent(i)/sqrt(sum_H_up));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_up-&gt;SetBinContent(i,<sp/>0.0);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum_H_down<sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_down-&gt;SetBinContent(i,<sp/>-1.0*total_var_down-&gt;GetBinContent(i)/sqrt(sum_H_down));</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_var_down-&gt;SetBinContent(i,<sp/>0.0);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_up-&gt;Add(result);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>total_var_down-&gt;Add(result);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eigen[lowest_index].first<sp/>=<sp/>total_var_up;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eigen[lowest_index].second<sp/>=<sp/>total_var_down;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a43856b29b00f3e3eb64a1fc7725ea59e" kindref="member">removeVariations</ref>(toDelete);</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a6f803f49682617c5080aa1c4bac1b4c6" kindref="member">CalibrationDataEigenVariations::getNumberOfNamedVariations</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="897"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>named<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_namedIndices.size();</highlight></codeline>
<codeline lineno="901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">vector&lt;string&gt;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa90160739463b564b4be60279b3b17c6" kindref="member">CalibrationDataEigenVariations::listNamedVariations</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="906"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>the<sp/>list<sp/>of<sp/>named<sp/>variations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>names;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_namedIndices.begin();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>m_namedIndices.end();<sp/>++it)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>names.push_back(it-&gt;first);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2b5582e07ecfdd70a4f37bbef51e0079" kindref="member">CalibrationDataEigenVariations::getNumberOfEigenVariations</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="919"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialized)<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa4cc0703d86a192ecefa243081bbd329" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_eigen.size();</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a31536647df599cd88199e053eb6994e4" kindref="member">CalibrationDataEigenVariations::getEigenvectorVariation</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variation,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1*&amp;<sp/>up,<sp/>TH1*&amp;<sp/>down)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="928"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointers<sp/>to<sp/>the<sp/>up-<sp/>and<sp/>downward<sp/>variation<sp/>histogram<sp/>for<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvector<sp/>variation.<sp/>In<sp/>case<sp/>of<sp/>an<sp/>invalid<sp/>variation<sp/>number,<sp/>null<sp/>pointers<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>returned<sp/>and<sp/>the<sp/>return<sp/>value<sp/>will<sp/>be<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>variation:<sp/><sp/><sp/>eigenvector<sp/>variation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>up:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>upward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>down:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>downward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialized)<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa4cc0703d86a192ecefa243081bbd329" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variation<sp/>&lt;<sp/>m_eigen.size())<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>up<sp/><sp/><sp/>=<sp/>m_eigen[variation].first;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>down<sp/>=<sp/>m_eigen[variation].second;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>up<sp/>=<sp/>down<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a656102f186485b43406b1e40c4d00b86" kindref="member">CalibrationDataEigenVariations::getNamedVariation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>name,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1*&amp;<sp/>up,<sp/>TH1*&amp;<sp/>down)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="952"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointers<sp/>to<sp/>the<sp/>up-<sp/>and<sp/>downward<sp/>variation<sp/>histogram<sp/>for<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>named<sp/>variation.<sp/>In<sp/>case<sp/>of<sp/>an<sp/>invalid<sp/>named<sp/>variation,<sp/>null<sp/>pointers<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>returned<sp/>and<sp/>the<sp/>return<sp/>value<sp/>will<sp/>be<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>named<sp/>variation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>up:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>upward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>down:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>downward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_namedIndices.find(name);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>m_namedIndices.end())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a656102f186485b43406b1e40c4d00b86" kindref="member">getNamedVariation</ref>(it-&gt;second,<sp/>up,<sp/>down);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>up<sp/>=<sp/>down<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a656102f186485b43406b1e40c4d00b86" kindref="member">CalibrationDataEigenVariations::getNamedVariation</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameIndex,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TH1*&amp;<sp/>up,<sp/>TH1*&amp;<sp/>down)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="972"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>pointers<sp/>to<sp/>the<sp/>up-<sp/>and<sp/>downward<sp/>variation<sp/>histogram<sp/>for<sp/>the<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>named<sp/>variation.<sp/>In<sp/>case<sp/>of<sp/>an<sp/>invalid<sp/>named<sp/>variation<sp/>number,<sp/>null<sp/>pointers<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>returned<sp/>and<sp/>the<sp/>return<sp/>value<sp/>will<sp/>be<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>nameIndex:<sp/><sp/><sp/>named<sp/>variation<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>up:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>upward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>down:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reference<sp/>to)<sp/>pointer<sp/>to<sp/>downward<sp/>variation<sp/>histogram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>m_initialized)<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations" kindref="compound">CalibrationDataEigenVariations</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;<ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1aa4cc0703d86a192ecefa243081bbd329" kindref="member">initialize</ref>();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nameIndex<sp/>&lt;<sp/>m_named.size())<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>up<sp/><sp/><sp/>=<sp/>m_named[nameIndex].first;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>down<sp/>=<sp/>m_named[nameIndex].second;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>up<sp/>=<sp/>down<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a457f87f18fd4c788d16738787009c8bc" kindref="member">CalibrationDataEigenVariations::getNamedVariationIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="996"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>integer<sp/>index<sp/>corresponding<sp/>to<sp/>the<sp/>named<sp/>variation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>no<sp/>checks<sp/>are<sp/>made<sp/>on<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>name<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>m_namedIndices.find(name);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//________________________________________________________________________________</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><ref refid="d0/d41/classAnalysis_1_1CalibrationDataEigenVariations_1a2be867ccf265171004a526aae71286bb" kindref="member">CalibrationDataEigenVariations::isExtrapolationVariation</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nameIndex)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1007"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>whether<sp/>the<sp/>given<sp/>named<sp/>variation<sp/>index<sp/>corresponds<sp/>to<sp/>the<sp/>extrapolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uncertainty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_namedExtrapolation<sp/>==<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(nameIndex));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/CalibrationDataInterface/Root/CalibrationDataEigenVariations.cxx"/>
  </compounddef>
</doxygen>
