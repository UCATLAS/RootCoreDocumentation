<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/dad/BackgroundTSelector_8cxx" kind="file">
    <compoundname>BackgroundTSelector.cxx</compoundname>
    <includes refid="d8/d40/BackgroundTSelector_8h" local="no">EventLoop/BackgroundTSelector.h</includes>
    <includes refid="d3/d77/BackgroundJob_8h" local="no">EventLoop/BackgroundJob.h</includes>
    <includes refid="df/db2/BackgroundSocket_8h" local="no">EventLoop/BackgroundSocket.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="d9/d8a/ProofArgs_8h" local="no">EventLoop/ProofArgs.h</includes>
    <includes refid="d2/de4/ProofDriver_8h" local="no">EventLoop/ProofDriver.h</includes>
    <includes refid="d3/dac/Assert_8h" local="no">RootCoreUtils/Assert.h</includes>
    <includes refid="d7/d58/ShellExec_8h" local="no">RootCoreUtils/ShellExec.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="db/d77/DiskWriter_8h" local="no">SampleHandler/DiskWriter.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TProofOutputFile.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="127844">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127838" relation="include">
        </childnode>
        <childnode refid="127828" relation="include">
        </childnode>
      </node>
      <node id="127839">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="127829" relation="include">
        </childnode>
        <childnode refid="127826" relation="include">
        </childnode>
        <childnode refid="127840" relation="include">
        </childnode>
        <childnode refid="127841" relation="include">
        </childnode>
        <childnode refid="127837" relation="include">
        </childnode>
        <childnode refid="127838" relation="include">
        </childnode>
      </node>
      <node id="127853">
        <label>stdlib.h</label>
      </node>
      <node id="127827">
        <label>EventLoop/BackgroundJob.h</label>
        <link refid="d3/d77/BackgroundJob_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127828" relation="include">
        </childnode>
      </node>
      <node id="127832">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
      </node>
      <node id="127833">
        <label>string</label>
      </node>
      <node id="127842">
        <label>EventLoop/ProofArgs.h</label>
        <link refid="d9/d8a/ProofArgs_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127837" relation="include">
        </childnode>
        <childnode refid="127838" relation="include">
        </childnode>
        <childnode refid="127828" relation="include">
        </childnode>
      </node>
      <node id="127841">
        <label>map</label>
      </node>
      <node id="127849">
        <label>SampleHandler/DiskWriter.h</label>
        <link refid="db/d77/DiskWriter_8h_source"/>
        <childnode refid="127829" relation="include">
        </childnode>
        <childnode refid="127833" relation="include">
        </childnode>
      </node>
      <node id="127845">
        <label>RootCoreUtils/ShellExec.h</label>
        <link refid="d7/d58/ShellExec_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
        <childnode refid="127833" relation="include">
        </childnode>
      </node>
      <node id="127828">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="127829" relation="include">
        </childnode>
        <childnode refid="127830" relation="include">
        </childnode>
        <childnode refid="127832" relation="include">
        </childnode>
        <childnode refid="127833" relation="include">
        </childnode>
        <childnode refid="127834" relation="include">
        </childnode>
      </node>
      <node id="127824">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="127838">
        <label>TObject.h</label>
      </node>
      <node id="127822">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundTSelector.cxx</label>
        <link refid="BackgroundTSelector.cxx"/>
        <childnode refid="127823" relation="include">
        </childnode>
        <childnode refid="127827" relation="include">
        </childnode>
        <childnode refid="127835" relation="include">
        </childnode>
        <childnode refid="127836" relation="include">
        </childnode>
        <childnode refid="127842" relation="include">
        </childnode>
        <childnode refid="127843" relation="include">
        </childnode>
        <childnode refid="127830" relation="include">
        </childnode>
        <childnode refid="127845" relation="include">
        </childnode>
        <childnode refid="127846" relation="include">
        </childnode>
        <childnode refid="127849" relation="include">
        </childnode>
        <childnode refid="127850" relation="include">
        </childnode>
        <childnode refid="127851" relation="include">
        </childnode>
        <childnode refid="127852" relation="include">
        </childnode>
        <childnode refid="127853" relation="include">
        </childnode>
        <childnode refid="127854" relation="include">
        </childnode>
      </node>
      <node id="127854">
        <label>unistd.h</label>
      </node>
      <node id="127837">
        <label>vector</label>
      </node>
      <node id="127850">
        <label>TFile.h</label>
      </node>
      <node id="127825">
        <label>TSelector.h</label>
      </node>
      <node id="127831">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="127848">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
      </node>
      <node id="127843">
        <label>EventLoop/ProofDriver.h</label>
        <link refid="d2/de4/ProofDriver_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127844" relation="include">
        </childnode>
      </node>
      <node id="127840">
        <label>iosfwd</label>
      </node>
      <node id="127835">
        <label>EventLoop/BackgroundSocket.h</label>
        <link refid="df/db2/BackgroundSocket_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127826" relation="include">
        </childnode>
        <childnode refid="127833" relation="include">
        </childnode>
      </node>
      <node id="127847">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
        <childnode refid="127833" relation="include">
        </childnode>
        <childnode refid="127848" relation="include">
        </childnode>
      </node>
      <node id="127852">
        <label>TTree.h</label>
      </node>
      <node id="127846">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
        <childnode refid="127847" relation="include">
        </childnode>
      </node>
      <node id="127830">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="127831" relation="include">
        </childnode>
      </node>
      <node id="127829">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="127826">
        <label>memory</label>
      </node>
      <node id="127823">
        <label>EventLoop/BackgroundTSelector.h</label>
        <link refid="d8/d40/BackgroundTSelector_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127825" relation="include">
        </childnode>
        <childnode refid="127826" relation="include">
        </childnode>
      </node>
      <node id="127851">
        <label>TProofOutputFile.h</label>
      </node>
      <node id="127836">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="127824" relation="include">
        </childnode>
        <childnode refid="127837" relation="include">
        </childnode>
        <childnode refid="127838" relation="include">
        </childnode>
        <childnode refid="127828" relation="include">
        </childnode>
        <childnode refid="127839" relation="include">
        </childnode>
      </node>
      <node id="127834">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="de/dad/BackgroundTSelector_8cxx_1a85bdb5bdd1c9b6d4dc3ad2c2f360aa9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::BackgroundTSelector) namespace EL</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="d7/d4e/classEL_1_1BackgroundTSelector" kindref="compound">EL::BackgroundTSelector</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>description: this is a custom writer for the old-school drivers that don&apos;t use an actual writer </para>        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundTSelector.cxx" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundTSelector.cxx" bodystart="35" bodyend="296"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2011.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundTSelector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundJob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundSocket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/ProofArgs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/ProofDriver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/Assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ShellExec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/DiskWriter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TProofOutputFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ClassImp<sp/>(<ref refid="d7/d4e/classEL_1_1BackgroundTSelector" kindref="compound" tooltip="a TSelector running the worker in a background process">EL::BackgroundTSelector</ref>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">namespace<sp/>EL</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyWriter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SH::DiskWriter</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>*m_file;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MyWriter<sp/>(TFile<sp/>*val_file)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_file<sp/>(val_file)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>~MyWriter<sp/>()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_file<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getPath<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TFile<sp/>*getFile<sp/>()</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE2_SOFT<sp/>(m_file<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_file;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>doClose<sp/>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE2_SOFT<sp/>(m_file<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m_file-&gt;Write<sp/>();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>m_file<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>testInvariant<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1a2633adfce3afeb6c5b79fa8609eedd61" kindref="member">BackgroundTSelector ::</ref></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1a2633adfce3afeb6c5b79fa8609eedd61" kindref="member">  BackgroundTSelector</ref><sp/>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_args<sp/>(0),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_tree<sp/>(0),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_currentInput<sp/>(false)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1a1300b996e84860d8c856ef67c21b96b5" kindref="member">BackgroundTSelector ::</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1a1300b996e84860d8c856ef67c21b96b5" kindref="member">  ~BackgroundTSelector</ref><sp/>()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_DESTROY_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1ae1b1c4f0b608b008a3a598d7a28204b7" kindref="member" tooltip="description: the interface inherited from TSelector">BackgroundTSelector ::</ref></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="d7/d4e/classEL_1_1BackgroundTSelector_1ae1b1c4f0b608b008a3a598d7a28204b7" kindref="member" tooltip="description: the interface inherited from TSelector">  SlaveBegin</ref><sp/>(TTree<sp/>*tree)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(m_args<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TIter<sp/>iter<sp/>(fInput);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>iter.Next())<sp/>&amp;&amp;<sp/>!m_args)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>m_args<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">ProofArgs*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_ASSERT<sp/>(m_args<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>BackgroundJob<sp/>job;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Algorithm*&gt;::const_iterator<sp/>alg<sp/>=<sp/>m_args-&gt;algs.begin(),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_args-&gt;algs.end();<sp/>alg<sp/>!=<sp/>end;<sp/>++<sp/>alg)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.algs.push_back<sp/>(*alg);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;OutputStream&gt;::const_iterator<sp/>out<sp/>=<sp/>m_args-&gt;output.begin(),</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>m_args-&gt;output.end();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_ASSERT0_NOIMP<sp/>(</highlight><highlight class="stringliteral">&quot;don&apos;t<sp/>have<sp/>output<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TProofOutputFile<sp/>*output<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_args-&gt;driver-&gt;returnFiles)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TProofOutputFile</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str(),<sp/>TProofOutputFile::kDataset,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TProofOutputFile::kRegister<sp/>|<sp/>TProofOutputFile::kVerify);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;SetOutputFileName<sp/>((out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TProofOutputFile</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">).c_str(),<sp/>TProofOutputFile::kMerge,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TProofOutputFile::kRemote);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>name<sp/>=<sp/><ref refid="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" kindref="member">Driver::mergedOutputName</ref></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(m_args-&gt;output_dir,<sp/>*out,<sp/>m_args-&gt;sample_name);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>output-&gt;SetOutputFileName<sp/>(name.c_str());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_outputFiles.push_back<sp/>(output);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OutputStream<sp/>stream<sp/>(out-&gt;label());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream.output<sp/>(new<sp/>MyWriter<sp/>(output-&gt;OpenFile<sp/>(&quot;RECREATE&quot;)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>job.output.push_back<sp/>(stream);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output-&gt;Print<sp/>(&quot;all&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_worker-&gt;addOutputWriter<sp/>(out-&gt;label(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output-&gt;Print<sp/>(&quot;all&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>job.meta<sp/>=<sp/>m_args-&gt;sample_meta;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>m_socket<sp/>=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a2303b1afd2926401a2bbda6a16856b16" kindref="member" tooltip="start a background worker connected by socket">BackgroundSocket::startWorker</ref><sp/>(job);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>m_worker<sp/>=<sp/>new<sp/>ProofWorker<sp/>(&amp;m_args-&gt;sample_meta,<sp/>fOutput,<sp/>this);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>Init<sp/>(TTree*<sp/>tree)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(m_socket.get()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tree<sp/>=<sp/>tree;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>Bool_t<sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>Notify()</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(m_socket.get()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>m_currentInput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>Bool_t<sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>Process<sp/>(Long64_t<sp/>entry)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(m_socket.get()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a4eb08a852ff6f06e40503492ced29151" kindref="member" tooltip="set the tree entry">BackgroundSocket::T_SET_ENTRY</ref>,<sp/>std::string<sp/>(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;entry),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(Long64_t)));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_currentInput)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>m_socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5aa141ba2ecfe3d0033478d1302badffd4" kindref="member" tooltip="set the next input file">BackgroundSocket::T_SET_INPUT_FILE</ref>,<sp/>m_tree-&gt;GetCurrentFile()-&gt;GetName());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a668fc6c16674c0effdfc52caaad32168" kindref="member" tooltip="execute the event">BackgroundSocket::T_EXECUTE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member" tooltip="the type of message we send around">BackgroundSocket::Type</ref><sp/>type;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>payload;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>m_socket-&gt;read<sp/>(type,<sp/>payload);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5adb41863807b5f43cd9c2b1da63fdb4d8" kindref="member" tooltip="confirm a T_EXECUTE">BackgroundSocket::T_EXECUTE_CONFIRM</ref>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>confirmation<sp/>of<sp/>execution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::string&amp;<sp/>e)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>((</highlight><highlight class="stringliteral">&quot;caught<sp/>exception<sp/>in<sp/>process:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>e).c_str());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>((std::string<sp/>(</highlight><highlight class="stringliteral">&quot;caught<sp/>exception<sp/>in<sp/>process:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>e.what()).c_str());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>(</highlight><highlight class="stringliteral">&quot;caught<sp/>unknown<sp/>exception<sp/>in<sp/>process&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>SlaveTerminate<sp/>()</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_REQUIRE<sp/>(m_socket.get()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmpdir<sp/>[30]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/tmp/el_bg_output_XXXXXX&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mkdtemp<sp/>(tmpdir))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>temporary<sp/>directory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>histLocation<sp/>=<sp/>std::string<sp/>(tmpdir)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/hist.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a078788c6fdb1e04547cb42e80f758ad2" kindref="member" tooltip="end the job">BackgroundSocket::T_END_JOB</ref>,<sp/>histLocation);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member" tooltip="the type of message we send around">BackgroundSocket::Type</ref><sp/>type;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>payload;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>m_socket-&gt;read<sp/>(type,<sp/>payload);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a7cdc34f223ccab4a54b0558d28233144" kindref="member" tooltip="confirm a T_END_JOB">BackgroundSocket::T_END_JOB_CONFIRM</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>confirmation<sp/>of<sp/>end<sp/>job&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TFile&gt;<sp/>file<sp/>(TFile::Open<sp/>(histLocation.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TList&gt;<sp/>list;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.get())</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.reset<sp/>(dynamic_cast&lt;TList*&gt;(file-&gt;Get<sp/>(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.get())</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TIter<sp/>iter<sp/>(list.get());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TObject<sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>iter.Next()))</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fOutput-&gt;Add<sp/>(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list-&gt;Clear<sp/>(</highlight><highlight class="stringliteral">&quot;nodelete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;TProofOutputFile*&gt;::const_iterator</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>m_outputFiles.begin(),<sp/>end<sp/>=<sp/>m_outputFiles.end();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>(*out)-&gt;Print<sp/>(</highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>fOutput-&gt;Add<sp/>(*out);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU::Shell::exec<sp/>(std::string<sp/>(</highlight><highlight class="stringliteral">&quot;rm<sp/>-rf<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>tmpdir);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::string&amp;<sp/>e)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>((</highlight><highlight class="stringliteral">&quot;caught<sp/>exception<sp/>in<sp/>terminate:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>e).c_str());</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>((std::string<sp/>(</highlight><highlight class="stringliteral">&quot;caught<sp/>exception<sp/>in<sp/>terminate:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>e.what()).c_str());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Abort<sp/>(</highlight><highlight class="stringliteral">&quot;caught<sp/>unknown<sp/>exception<sp/>in<sp/>terminate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BackgroundTSelector<sp/>::</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>Version<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="292"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_CHANGE_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundTSelector.cxx"/>
  </compounddef>
</doxygen>
