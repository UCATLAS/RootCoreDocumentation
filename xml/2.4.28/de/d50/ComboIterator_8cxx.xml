<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/d50/ComboIterator_8cxx" kind="file">
    <compoundname>ComboIterator.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes refid="d7/d71/TriggerElement_8h" local="yes">TrigNavStructure/TriggerElement.h</includes>
    <includes refid="d2/db8/TrigNavStructure_8h" local="yes">TrigNavStructure/TrigNavStructure.h</includes>
    <includes refid="da/da2/ComboIterator_8h" local="yes">TrigNavStructure/ComboIterator.h</includes>
    <incdepgraph>
      <node id="328336">
        <label>TrigNavStructure/TrigNavStructure.h</label>
        <link refid="d2/db8/TrigNavStructure_8h_source"/>
        <childnode refid="328331" relation="include">
        </childnode>
        <childnode refid="328329" relation="include">
        </childnode>
        <childnode refid="328337" relation="include">
        </childnode>
        <childnode refid="328338" relation="include">
        </childnode>
        <childnode refid="328339" relation="include">
        </childnode>
      </node>
      <node id="328347">
        <label>AsgTools/IAsgTool.h</label>
        <link refid="df/dd4/IAsgTool_8h_source"/>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328342" relation="include">
        </childnode>
        <childnode refid="328348" relation="include">
        </childnode>
        <childnode refid="328349" relation="include">
        </childnode>
      </node>
      <node id="328349">
        <label>GaudiKernel/IAlgTool.h</label>
      </node>
      <node id="328338">
        <label>TrigNavStructure/BaseHolder.h</label>
        <link refid="df/d37/BaseHolder_8h_source"/>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328331" relation="include">
        </childnode>
        <childnode refid="328334" relation="include">
        </childnode>
      </node>
      <node id="328333">
        <label>stdint.h</label>
      </node>
      <node id="328352">
        <label>AthenaBaseComps/AthMsgStreamMacros.h</label>
      </node>
      <node id="328345">
        <label>AsgTools/MsgLevel.h</label>
        <link refid="de/d80/MsgLevel_8h"/>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328342" relation="include">
        </childnode>
        <childnode refid="328346" relation="include">
        </childnode>
      </node>
      <node id="328342">
        <label>AsgTools/AsgToolsConf.h</label>
        <link refid="df/db7/AsgToolsConf_8h_source"/>
      </node>
      <node id="328337">
        <label>TrigNavStructure/TriggerElementFactory.h</label>
        <link refid="d1/dc0/TriggerElementFactory_8h_source"/>
        <childnode refid="328331" relation="include">
        </childnode>
        <childnode refid="328334" relation="include">
        </childnode>
        <childnode refid="328329" relation="include">
        </childnode>
      </node>
      <node id="328332">
        <label>string</label>
      </node>
      <node id="328330">
        <label>map</label>
      </node>
      <node id="328335">
        <label>boost/variant.hpp</label>
      </node>
      <node id="328346">
        <label>GaudiKernel/IMessageSvc.h</label>
      </node>
      <node id="328334">
        <label>TrigNavStructure/Types.h</label>
        <link refid="d5/d81/TrigNavStructure_2Types_8h_source"/>
        <childnode refid="328333" relation="include">
        </childnode>
        <childnode refid="328335" relation="include">
        </childnode>
      </node>
      <node id="328339">
        <label>TrigNavStructure/TrigHolderStructure.h</label>
        <link refid="df/ded/TrigHolderStructure_8h_source"/>
        <childnode refid="328340" relation="include">
        </childnode>
        <childnode refid="328330" relation="include">
        </childnode>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328335" relation="include">
        </childnode>
        <childnode refid="328341" relation="include">
        </childnode>
        <childnode refid="328334" relation="include">
        </childnode>
        <childnode refid="328338" relation="include">
        </childnode>
        <childnode refid="328329" relation="include">
        </childnode>
      </node>
      <node id="328329">
        <label>TrigNavStructure/TriggerElement.h</label>
        <link refid="d7/d71/TriggerElement_8h_source"/>
        <childnode refid="328330" relation="include">
        </childnode>
        <childnode refid="328331" relation="include">
        </childnode>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328333" relation="include">
        </childnode>
        <childnode refid="328327" relation="include">
        </childnode>
        <childnode refid="328334" relation="include">
        </childnode>
      </node>
      <node id="328351">
        <label>AsgTools/MsgStreamMacros.h</label>
        <link refid="d3/ded/AsgTools_2AsgTools_2MsgStreamMacros_8h_source"/>
        <childnode refid="328342" relation="include">
        </childnode>
        <childnode refid="328345" relation="include">
        </childnode>
        <childnode refid="328352" relation="include">
        </childnode>
      </node>
      <node id="328353">
        <label>TrigNavStructure/ComboIterator.h</label>
        <link refid="da/da2/ComboIterator_8h_source"/>
        <childnode refid="328331" relation="include">
        </childnode>
        <childnode refid="328354" relation="include">
        </childnode>
        <childnode refid="328334" relation="include">
        </childnode>
      </node>
      <node id="328331">
        <label>vector</label>
      </node>
      <node id="328344">
        <label>sstream</label>
      </node>
      <node id="328326">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/ComboIterator.cxx</label>
        <link refid="ComboIterator.cxx"/>
        <childnode refid="328327" relation="include">
        </childnode>
        <childnode refid="328328" relation="include">
        </childnode>
        <childnode refid="328329" relation="include">
        </childnode>
        <childnode refid="328336" relation="include">
        </childnode>
        <childnode refid="328353" relation="include">
        </childnode>
      </node>
      <node id="328327">
        <label>iostream</label>
      </node>
      <node id="328350">
        <label>GaudiKernel/MsgStream.h</label>
      </node>
      <node id="328343">
        <label>AsgTools/MsgStream.h</label>
        <link refid="d3/d95/AsgTools_2AsgTools_2MsgStream_8h_source"/>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328344" relation="include">
        </childnode>
        <childnode refid="328342" relation="include">
        </childnode>
        <childnode refid="328345" relation="include">
        </childnode>
        <childnode refid="328347" relation="include">
        </childnode>
        <childnode refid="328350" relation="include">
        </childnode>
      </node>
      <node id="328348">
        <label>AsgTools/AsgToolMacros.h</label>
        <link refid="d1/d68/AsgToolMacros_8h_source"/>
      </node>
      <node id="328341">
        <label>AsgTools/AsgMessaging.h</label>
        <link refid="d3/d61/AsgMessaging_8h_source"/>
        <childnode refid="328332" relation="include">
        </childnode>
        <childnode refid="328342" relation="include">
        </childnode>
        <childnode refid="328343" relation="include">
        </childnode>
        <childnode refid="328351" relation="include">
        </childnode>
      </node>
      <node id="328354">
        <label>set</label>
      </node>
      <node id="328328">
        <label>algorithm</label>
      </node>
      <node id="328340">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/TriggerElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/TrigNavStructure.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/ComboIterator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="d2/dda/classHLT_1_1ComboIterator_1a591c41d2ef2abdf62d256e12c0530d0d" kindref="member" tooltip="Constructor; gets a vector of TE vectors and a pointer to Navigation as arguments...">HLT::ComboIterator::ComboIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TEVec&gt;&amp;<sp/>tes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure" kindref="compound">HLT::TrigNavStructure</ref>*<sp/>nav)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>:<sp/>m_valid(true),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>m_nav(nav)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tes.size();<sp/>i++)<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tes.push_back(tes[i]);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>rewind();</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a976b57f9bbd8b8beef38cdd79302a07f" kindref="member" tooltip="Rewind method, resetting the iterator to the first element.">HLT::ComboIterator::rewind</ref>()</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>.clear();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref>.clear();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Construct&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a053975c028b54ba313342d86f983c25e" kindref="member" tooltip="Vector of vectors of TEs to be combined.">m_tes</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/dda/classHLT_1_1ComboIterator_1a053975c028b54ba313342d86f983c25e" kindref="member" tooltip="Vector of vectors of TEs to be combined.">m_tes</ref>[i].size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a34e6771e79433cabb5d59e839e81050e" kindref="member" tooltip="Method used to invalidate the current combination.">invalidate</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>.push_back(0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref>.push_back(-1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d2/dda/classHLT_1_1ComboIterator_1a4711ff7d9a43328a6127ecea214f21b9" kindref="member" tooltip="Private reset method.">reset</ref>(i)<sp/>||<sp/>!<ref refid="d2/dda/classHLT_1_1ComboIterator_1aff78336b9be49a70d8f101bcb28d1dbf" kindref="member" tooltip="Private increment method.">increment</ref>(i))<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a34e6771e79433cabb5d59e839e81050e" kindref="member" tooltip="Method used to invalidate the current combination.">invalidate</ref>();<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;After<sp/>setup:<sp/>&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>print();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a3c04bcd05974e826201233ce7363b82d" kindref="member" tooltip="Validity check for the iterator.">isValid</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="d2/dda/classHLT_1_1ComboIterator" kindref="compound" tooltip="Iterator used to loop over multi-particle combinations.">HLT::ComboIterator</ref>&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aae309bb41ead2c8fa6a6345dbbc39d07" kindref="member" tooltip="Pre increment operator.">HLT::ComboIterator::operator++</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!increment((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)m_comb.size()<sp/>-<sp/>1))<sp/>invalidate();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>print();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aff78336b9be49a70d8f101bcb28d1dbf" kindref="member" tooltip="Private increment method.">HLT::ComboIterator::increment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d2/dda/classHLT_1_1ComboIterator_1a3c04bcd05974e826201233ce7363b82d" kindref="member" tooltip="Validity check for the iterator.">isValid</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ok)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d2/dda/classHLT_1_1ComboIterator_1a51ebb8ab86f9d5c757a2442f665c1f36" kindref="member" tooltip="Private increment method.">incrementByOne</ref>(pos,<sp/>ok))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ok;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a51ebb8ab86f9d5c757a2442f665c1f36" kindref="member" tooltip="Private increment method.">HLT::ComboIterator::incrementByOne</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>ok)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;increment1<sp/>&quot;<sp/>&lt;&lt;<sp/>pos<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)m_comb.size()<sp/>||<sp/>pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we&apos;re<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector<sp/>for<sp/>this<sp/>element,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_idx[pos]<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)m_tes[pos].size()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>if<sp/>it&apos;s<sp/>the<sp/>first<sp/>(innermost-loop)<sp/>one,<sp/>we&apos;re<sp/>done...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>otherwise<sp/>increment<sp/>the<sp/>previous<sp/>element<sp/>by<sp/>one...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!increment(pos<sp/>-<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>reset<sp/>this<sp/>one...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reset(pos))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>and<sp/>increment<sp/>it<sp/>(from<sp/>reset<sp/>to<sp/>valid).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!increment(pos))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>it&apos;s<sp/>just<sp/>the<sp/>normal<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m_idx<sp/>[pos]++;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>m_comb[pos]<sp/>=<sp/><sp/>m_tes[pos][m_idx[pos]];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>!overlaps(m_comb[pos],<sp/>m_comb,<sp/>pos);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;after<sp/>increment<sp/>(pos=&quot;<sp/>&lt;&lt;<sp/>pos<sp/>&lt;&lt;<sp/>&quot;,<sp/>ok=&quot;<sp/>&lt;&lt;<sp/>ok<sp/>&lt;&lt;<sp/>&quot;)&quot;<sp/>&lt;&lt;<sp/>endl;<sp/>print();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a4711ff7d9a43328a6127ecea214f21b9" kindref="member" tooltip="Private reset method.">HLT::ComboIterator::reset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Reset<sp/>:<sp/>&quot;<sp/>&lt;&lt;<sp/>pos<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>.size()<sp/>||<sp/>pos<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>[pos]<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref><sp/>[pos]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>previous<sp/>element<sp/>of<sp/>the<sp/>same<sp/>type<sp/>(if<sp/>any),<sp/>and<sp/>get<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>vector<sp/>of<sp/>TEs<sp/>of<sp/>this<sp/>type...<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>pos;<sp/>j<sp/>&gt;<sp/>0;<sp/>j--)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>[j<sp/>-<sp/>1])<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>TE<sp/>of<sp/>the<sp/>same<sp/>type<sp/>with<sp/>the<sp/>highest<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>[j<sp/>-<sp/>1]-&gt;getId()<sp/>==<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a053975c028b54ba313342d86f983c25e" kindref="member" tooltip="Vector of vectors of TEs to be combined.">m_tes</ref>[pos][0]-&gt;getId())<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref>[pos]<sp/>=<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9efcd90bb2540bdc9eb8bd70d947f4e0" kindref="member" tooltip="Vector of indexes keeping track of the loop over combinations.">m_idx</ref>[j<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;reset<sp/>to<sp/>index<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>m_idx[pos]<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa2f3778cbbba906894755a8069550808" kindref="member" tooltip="Method used to test overlaps between two TEs.">HLT::ComboIterator::overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TriggerElement*<sp/>te1,<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TEVec&amp;<sp/>teVec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)<sp/>idx<sp/>=<sp/>teVec.size();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>idx;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!teVec[i])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overlaps(te1,<sp/>teVec[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa2f3778cbbba906894755a8069550808" kindref="member" tooltip="Method used to test overlaps between two TEs.">HLT::ComboIterator::overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TriggerElement*<sp/>te1,<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TriggerElement*<sp/>te2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(te1<sp/>==<sp/>te2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d2/dda/classHLT_1_1ComboIterator_1a25954d8f882f37ac7a1e7b87fbe25a14" kindref="member" tooltip="Pointer to the navigation service.">m_nav</ref><sp/>&amp;&amp;<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a25954d8f882f37ac7a1e7b87fbe25a14" kindref="member" tooltip="Pointer to the navigation service.">m_nav</ref>-&gt;haveCommonRoI(te1,<sp/>te2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa6a13afc691e7a6dd429271834cec122" kindref="member" tooltip="Debug dump to std::cout.">HLT::ComboIterator::print</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TEs:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_tes.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>m_tes[i].size();<sp/>j++)<sp/>cout<sp/>&lt;&lt;<sp/>m_tes[i][j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Comb<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_comb.size();<sp/>i++)<sp/><sp/>cout<sp/>&lt;&lt;<sp/>m_comb[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Idxs<sp/>=<sp/>[<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_idx.size();<sp/>i++)<sp/><sp/>cout<sp/>&lt;&lt;<sp/>m_idx[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>(isValid()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Valid&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a34e6771e79433cabb5d59e839e81050e" kindref="member" tooltip="Method used to invalidate the current combination.">HLT::ComboIterator::invalidate</ref>()<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;-------------------------------&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Invalidate!&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;-------------------------------&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a51abe5a618e777730467111df583aaca" kindref="member" tooltip="Validity status variable.">m_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1a9c8396341e7d44e25404ae5dbbfcae82" kindref="member" tooltip="Current combination of TEs.">m_comb</ref>.clear();<sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">HLT::ComboIteratorTopo::ComboIteratorTopo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TEVec&gt;&amp;<sp/>tes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TrigNavStructure*<sp/>nav,<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HLT::te_id_type<sp/>topoSpan)<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>:<sp/>ComboIterator(tes,<sp/>nav),</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>m_spanId(topoSpan)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>rewind();</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HLT::ComboIteratorTopo::traverseUntilSeedsTopo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">HLT::TriggerElement</ref>*<sp/>start,<sp/>std::set&lt;const<sp/>TriggerElement*&gt;&amp;<sp/>topos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>successors<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ade5ea71e8ff725583e5797398b514b33" kindref="member" tooltip="returns list of direct predecessors (nodes I seed)">HLT::TrigNavStructure::getDirectSuccessors</ref>(start);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>successor<sp/>:<sp/>successors<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>successor-&gt;getActiveState()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>and<sp/>successor-&gt;getId()<sp/>==<sp/>m_spanId<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>topos.insert(successor);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>topos.empty()<sp/>)<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>digg<sp/>deeper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>predecessors<sp/>=<sp/><ref refid="d9/d08/classHLT_1_1TrigNavStructure_1ad9ef66b52d6a11e57887bf4b3525b61e" kindref="member" tooltip="returns list of direct predecessors (nodes seeding me)">HLT::TrigNavStructure::getDirectPredecessors</ref>(start);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>predecessor<sp/>:<sp/>predecessors<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>next<sp/>line<sp/>is<sp/>disabled<sp/>because<sp/>the<sp/>predecessors<sp/>of<sp/>the<sp/>L1Topo<sp/>simulation<sp/>output<sp/>TE<sp/>are<sp/>exactly<sp/>of<sp/>type<sp/>RoI-node<sp/>(after<sp/>discussion<sp/>with<sp/>Tomasz)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(<sp/>HLT::TrigNavStructure::isRoINode(predecessor)<sp/>)<sp/>continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>traverseUntilSeedsTopo(predecessor,<sp/>topos);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>topos.empty()<sp/>)<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/d6b/classHLT_1_1ComboIteratorTopo_1ad7054ae4ce4615822f08ed16099c7611" kindref="member" tooltip="Method used to test overlaps between two TEs.">HLT::ComboIteratorTopo::overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TriggerElement*<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TriggerElement*<sp/>t2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="d2/dda/classHLT_1_1ComboIterator_1aa2f3778cbbba906894755a8069550808" kindref="member" tooltip="Method used to test overlaps between two TEs.">HLT::ComboIterator::overlaps</ref>(t1,<sp/>t2)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>above<sp/>returned<sp/>true<sp/>it<sp/>means<sp/>TEs<sp/>are<sp/>from<sp/>the<sp/>same<sp/>RoI,<sp/>combiation<sp/>is<sp/>uninteresting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>false<sp/>it<sp/>may<sp/>still<sp/>be<sp/>uninteresting<sp/>because<sp/>it<sp/>is<sp/>joined<sp/>by<sp/>topo<sp/>TE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>std::set&lt;const<sp/>TriggerElement*&gt;<sp/>te1span;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>traverseUntilSeedsTopo(t1,<sp/>te1span);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te1span.empty()<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>set<sp/>can<sp/>not<sp/>be<sp/>from<sp/>the<sp/>same<sp/>combination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>std::set&lt;const<sp/>TriggerElement*&gt;<sp/>te2span;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>traverseUntilSeedsTopo(t2,<sp/>te2span);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te2span.empty()<sp/>)<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/>for<sp/>(<sp/>auto<sp/>te<sp/>:<sp/>te1span<sp/>)</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;<sp/>t1<sp/>span<sp/>TES<sp/>&quot;<sp/>&lt;&lt;<sp/>te<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>te-&gt;getId()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>for<sp/>(<sp/>auto<sp/>te<sp/>:<sp/>te2span<sp/>)</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;<sp/>t2<sp/>span<sp/>TES<sp/>&quot;<sp/>&lt;&lt;<sp/>te<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>te-&gt;getId()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::vector&lt;const<sp/>TriggerElement*&gt;<sp/>intersection;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="d4/d13/set_8h_1ac813c3c4902394a2c521a641bdb34d53" kindref="member">std::set_intersection</ref>(te1span.begin(),<sp/>te1span.end(),<sp/><sp/>te2span.begin(),<sp/>te2span.end(),</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(intersection));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>not<sp/>intersection.empty()<sp/>)<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>genuine<sp/>topo<sp/>join,<sp/>the<sp/>pair<sp/>is<sp/>interesting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/ComboIterator.cxx"/>
  </compounddef>
</doxygen>
