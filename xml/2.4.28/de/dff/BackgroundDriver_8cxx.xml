<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/dff/BackgroundDriver_8cxx" kind="file">
    <compoundname>BackgroundDriver.cxx</compoundname>
    <includes refid="d9/d40/BackgroundDriver_8h" local="no">EventLoop/BackgroundDriver.h</includes>
    <includes refid="d3/d77/BackgroundJob_8h" local="no">EventLoop/BackgroundJob.h</includes>
    <includes refid="df/db2/BackgroundSocket_8h" local="no">EventLoop/BackgroundSocket.h</includes>
    <includes refid="d5/d80/Job_8h" local="no">EventLoop/Job.h</includes>
    <includes refid="da/d9f/OutputStream_8h" local="no">EventLoop/OutputStream.h</includes>
    <includes refid="dd/db7/ThrowMsg_8h" local="no">RootCoreUtils/ThrowMsg.h</includes>
    <includes refid="db/da3/DiskOutputLocal_8h" local="no">SampleHandler/DiskOutputLocal.h</includes>
    <includes refid="d2/d7b/MetaFields_8h" local="no">SampleHandler/MetaFields.h</includes>
    <includes refid="df/d9d/Sample_8h" local="no">SampleHandler/Sample.h</includes>
    <includes local="no">TFile.h</includes>
    <includes local="no">TTree.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sys/wait.h</includes>
    <incdepgraph>
      <node id="127755">
        <label>EventLoop/Driver.h</label>
        <link refid="dd/d3c/Driver_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127756" relation="include">
        </childnode>
        <childnode refid="127757" relation="include">
        </childnode>
      </node>
      <node id="127769">
        <label>SampleHandler/SampleHandler.h</label>
        <link refid="d2/da1/SampleHandler_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127766" relation="include">
        </childnode>
        <childnode refid="127770" relation="include">
        </childnode>
        <childnode refid="127771" relation="include">
        </childnode>
        <childnode refid="127768" relation="include">
        </childnode>
        <childnode refid="127756" relation="include">
        </childnode>
      </node>
      <node id="127767">
        <label>EventLoop/Job.h</label>
        <link refid="d5/d80/Job_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127768" relation="include">
        </childnode>
        <childnode refid="127769" relation="include">
        </childnode>
        <childnode refid="127757" relation="include">
        </childnode>
      </node>
      <node id="127764">
        <label>EventLoop/BackgroundJob.h</label>
        <link refid="d3/d77/BackgroundJob_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127757" relation="include">
        </childnode>
      </node>
      <node id="127761">
        <label>RootCoreUtils/Deprecated.h</label>
        <link refid="d1/d0f/RootCoreUtils_2RootCoreUtils_2Deprecated_8h_source"/>
        <childnode refid="127760" relation="include">
        </childnode>
      </node>
      <node id="127762">
        <label>string</label>
      </node>
      <node id="127771">
        <label>map</label>
      </node>
      <node id="127757">
        <label>SampleHandler/MetaObject.h</label>
        <link refid="d7/d50/MetaObject_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127759" relation="include">
        </childnode>
        <childnode refid="127761" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
        <childnode refid="127763" relation="include">
        </childnode>
      </node>
      <node id="127752">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundDriver.cxx</label>
        <link refid="BackgroundDriver.cxx"/>
        <childnode refid="127753" relation="include">
        </childnode>
        <childnode refid="127764" relation="include">
        </childnode>
        <childnode refid="127765" relation="include">
        </childnode>
        <childnode refid="127767" relation="include">
        </childnode>
        <childnode refid="127772" relation="include">
        </childnode>
        <childnode refid="127773" relation="include">
        </childnode>
        <childnode refid="127776" relation="include">
        </childnode>
        <childnode refid="127778" relation="include">
        </childnode>
        <childnode refid="127779" relation="include">
        </childnode>
        <childnode refid="127782" relation="include">
        </childnode>
        <childnode refid="127783" relation="include">
        </childnode>
        <childnode refid="127784" relation="include">
        </childnode>
        <childnode refid="127785" relation="include">
        </childnode>
      </node>
      <node id="127779">
        <label>SampleHandler/Sample.h</label>
        <link refid="df/d9d/Sample_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
        <childnode refid="127768" relation="include">
        </childnode>
        <childnode refid="127756" relation="include">
        </childnode>
        <childnode refid="127761" relation="include">
        </childnode>
        <childnode refid="127780" relation="include">
        </childnode>
      </node>
      <node id="127754">
        <label>EventLoop/Global.h</label>
        <link refid="d1/daf/EventLoop_2EventLoop_2Global_8h_source"/>
      </node>
      <node id="127778">
        <label>SampleHandler/MetaFields.h</label>
        <link refid="d2/d7b/MetaFields_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
      </node>
      <node id="127756">
        <label>TObject.h</label>
      </node>
      <node id="127768">
        <label>vector</label>
      </node>
      <node id="127782">
        <label>TFile.h</label>
      </node>
      <node id="127760">
        <label>RootCoreUtils/Global.h</label>
        <link refid="d6/d7f/RootCoreUtils_2RootCoreUtils_2Global_8h_source"/>
      </node>
      <node id="127775">
        <label>RootCoreUtils/MessageType.h</label>
        <link refid="dd/d02/MessageType_8h_source"/>
        <childnode refid="127760" relation="include">
        </childnode>
      </node>
      <node id="127776">
        <label>SampleHandler/DiskOutputLocal.h</label>
        <link refid="db/da3/DiskOutputLocal_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127777" relation="include">
        </childnode>
      </node>
      <node id="127785">
        <label>sys/wait.h</label>
      </node>
      <node id="127770">
        <label>iosfwd</label>
      </node>
      <node id="127784">
        <label>iostream</label>
      </node>
      <node id="127765">
        <label>EventLoop/BackgroundSocket.h</label>
        <link refid="df/db2/BackgroundSocket_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127766" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
      </node>
      <node id="127780">
        <label>SampleHandler/TagList.h</label>
        <link refid="d2/de6/TagList_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127781" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
      </node>
      <node id="127753">
        <label>EventLoop/BackgroundDriver.h</label>
        <link refid="d9/d40/BackgroundDriver_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127755" relation="include">
        </childnode>
      </node>
      <node id="127774">
        <label>RootCoreUtils/PrintMsg.h</label>
        <link refid="d2/d5f/PrintMsg_8h_source"/>
        <childnode refid="127760" relation="include">
        </childnode>
        <childnode refid="127762" relation="include">
        </childnode>
        <childnode refid="127775" relation="include">
        </childnode>
      </node>
      <node id="127783">
        <label>TTree.h</label>
      </node>
      <node id="127773">
        <label>RootCoreUtils/ThrowMsg.h</label>
        <link refid="dd/db7/ThrowMsg_8h_source"/>
        <childnode refid="127760" relation="include">
        </childnode>
        <childnode refid="127774" relation="include">
        </childnode>
      </node>
      <node id="127781">
        <label>set</label>
      </node>
      <node id="127777">
        <label>SampleHandler/DiskOutput.h</label>
        <link refid="d8/da4/DiskOutput_8h_source"/>
        <childnode refid="127758" relation="include">
        </childnode>
        <childnode refid="127756" relation="include">
        </childnode>
      </node>
      <node id="127759">
        <label>RootCoreUtils/Assert.h</label>
        <link refid="d3/dac/Assert_8h_source"/>
        <childnode refid="127760" relation="include">
        </childnode>
      </node>
      <node id="127758">
        <label>SampleHandler/Global.h</label>
        <link refid="d3/df9/SampleHandler_2SampleHandler_2Global_8h_source"/>
      </node>
      <node id="127766">
        <label>memory</label>
      </node>
      <node id="127772">
        <label>EventLoop/OutputStream.h</label>
        <link refid="da/d9f/OutputStream_8h_source"/>
        <childnode refid="127754" relation="include">
        </childnode>
        <childnode refid="127768" relation="include">
        </childnode>
        <childnode refid="127756" relation="include">
        </childnode>
        <childnode refid="127757" relation="include">
        </childnode>
        <childnode refid="127769" relation="include">
        </childnode>
      </node>
      <node id="127763">
        <label>TCollection.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="de/dff/BackgroundDriver_8cxx_1adafbac14b151fc6e67862259c7eb5378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(EL::BackgroundDriver) namespace EL</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="df/d12/classEL_1_1BackgroundDriver" kindref="compound">EL::BackgroundDriver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundDriver.cxx" line="36" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundDriver.cxx" bodystart="33" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Nils<sp/>Krumnack<sp/>2011.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>feel<sp/>free<sp/>to<sp/>contact<sp/>me<sp/>(krumnack@iastate.edu)<sp/>for<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reports,<sp/>feature<sp/>suggestions,<sp/>praise<sp/>and<sp/>complaints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundDriver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundJob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/BackgroundSocket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/Job.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;EventLoop/OutputStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;RootCoreUtils/ThrowMsg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/DiskOutputLocal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/MetaFields.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;SampleHandler/Sample.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TFile.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TTree.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">ClassImp(<ref refid="df/d12/classEL_1_1BackgroundDriver" kindref="compound" tooltip="a test driver for the background worker">EL::BackgroundDriver</ref>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">namespace<sp/>EL</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundDriver<sp/>::</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>testInvariant<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="39"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="df/d12/classEL_1_1BackgroundDriver_1af79361bd70f37f60be598a3845ba6a55" kindref="member" tooltip="standard default constructor">BackgroundDriver ::</ref></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="df/d12/classEL_1_1BackgroundDriver_1af79361bd70f37f60be598a3845ba6a55" kindref="member" tooltip="standard default constructor">  BackgroundDriver</ref><sp/>()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_NEW_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundDriver<sp/>::</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>doUpdateJob<sp/>(Job&amp;<sp/>job,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="da/dbb/classEL_1_1Job_1a6b7da0153a514987c8fc5691cc7fd9a2" kindref="member">Job::outputMIter</ref><sp/>out<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>out<sp/>!=<sp/>end;<sp/>++<sp/>out)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out-&gt;output()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;output<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="d5/d89/classSH_1_1DiskOutputLocal" kindref="compound" tooltip="an implementation of DiskOutput for local disks">SH::DiskOutputLocal</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data-&quot;</highlight><highlight class="normal"><sp/>+<sp/>out-&gt;label()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BackgroundDriver<sp/>::</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>doSubmit<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Job&amp;<sp/>job,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>location)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="73"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_READ_INVARIANT<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="d1/d56/classSH_1_1SampleHandler_1a88354b0d73fb29ae1dd766a733baab0e" kindref="member" tooltip="the iterator to use">SH::SampleHandler::iterator</ref><sp/>sample<sp/>=<sp/>job.sampleHandler().begin(),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.sampleHandler().end();<sp/>sample<sp/>!=<sp/>end;<sp/>++<sp/>sample)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>sample:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*sample)-&gt;name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound" tooltip="A class that manages meta-data to be associated with an object.">SH::MetaObject</ref><sp/>meta<sp/>(*(*sample)-&gt;meta());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>meta.fetchDefaults<sp/>(*job.options());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>meta.fetchDefaults<sp/>(*<ref refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" kindref="member">options</ref>());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::auto_ptr&lt;BackgroundSocket&gt;<sp/>socket;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>BackgroundJob<sp/>myjob;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="da/dbb/classEL_1_1Job_1ad7079dc212a4da1a5e6bf43940e91bba" kindref="member">Job::algsIter</ref><sp/>iter<sp/>=<sp/>job.algsBegin(),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.algsEnd();<sp/>iter<sp/>!=<sp/>end;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myjob.algs.push_back<sp/>(*iter);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Job::outputIter<sp/>iter<sp/>=<sp/>job.outputBegin(),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>job.outputEnd();<sp/>iter<sp/>!=<sp/>end;<sp/>++<sp/>iter)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>myjob.output.push_back<sp/>(*iter);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>myjob.meta<sp/>=<sp/>meta;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>socket<sp/>=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a2303b1afd2926401a2bbda6a16856b16" kindref="member" tooltip="start a background worker connected by socket">BackgroundSocket::startWorker</ref><sp/>(myjob);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Long64_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Long64_t<sp/>maxEvents</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>meta.castDouble<sp/>(<ref refid="da/dbb/classEL_1_1Job_1a2d1dde35c522bbf7d35027f0dfdccc97" kindref="member">Job::optMaxEvents</ref>,<sp/>-1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Long64_t<sp/>skipEvents</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>meta.castDouble<sp/>(<ref refid="da/dbb/classEL_1_1Job_1ab08d4d8fb8f7f639b1bf755399687d77" kindref="member">Job::optSkipEvents</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>files<sp/>=<sp/>(*sample)-&gt;makeFileList();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::string&gt;::const_iterator<sp/>fileName<sp/>=<sp/>files.begin(),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>files.end();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileName<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>count<sp/>!=<sp/>maxEvents;<sp/>++<sp/>fileName)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TFile&gt;<sp/>inFile<sp/>(TFile::Open<sp/>(fileName-&gt;c_str()));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inFile.get()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>*fileName);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>Long64_t<sp/>inTreeEntries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>treeName</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>meta.castString<sp/>(<ref refid="d7/d06/structSH_1_1MetaFields_1a8acba4e022e9e86a5731cca0e5f2ce9f" kindref="member" tooltip="the name of the tree in the sample">SH::MetaFields::treeName</ref>,<sp/><ref refid="d7/d06/structSH_1_1MetaFields_1a32fe1989e6d87036a09bd1dca7e7efed" kindref="member" tooltip="the default value of treeName">SH::MetaFields::treeName_default</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TTree<sp/>*inputTree<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal">TTree*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inFile-&gt;Get(treeName.c_str()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputTree)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inTreeEntries<sp/>=<sp/>inputTree-&gt;GetEntries();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(skipEvents<sp/>&gt;<sp/>inTreeEntries)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>skipEvents<sp/>-=<sp/>inTreeEntries;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Long64_t<sp/>entry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a4eb08a852ff6f06e40503492ced29151" kindref="member" tooltip="set the tree entry">BackgroundSocket::T_SET_ENTRY</ref>,<sp/>std::string<sp/>(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;entry),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(Long64_t)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5aa141ba2ecfe3d0033478d1302badffd4" kindref="member" tooltip="set the next input file">BackgroundSocket::T_SET_INPUT_FILE</ref>,<sp/>*fileName);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Long64_t<sp/>entry<sp/>=<sp/>skipEvents,<sp/>num<sp/>=<sp/>inTreeEntries;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entry<sp/>!=<sp/>num<sp/>&amp;&amp;<sp/>count<sp/>!=<sp/>maxEvents;<sp/>++<sp/>entry)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a4eb08a852ff6f06e40503492ced29151" kindref="member" tooltip="set the tree entry">BackgroundSocket::T_SET_ENTRY</ref>,<sp/>std::string<sp/>(reinterpret_cast&lt;const<sp/>char*&gt;(&amp;entry),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(Long64_t)));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a668fc6c16674c0effdfc52caaad32168" kindref="member" tooltip="execute the event">BackgroundSocket::T_EXECUTE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member" tooltip="the type of message we send around">BackgroundSocket::Type</ref><sp/>type;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>payload;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socket-&gt;read<sp/>(type,<sp/>payload);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5adb41863807b5f43cd9c2b1da63fdb4d8" kindref="member" tooltip="confirm a T_EXECUTE">BackgroundSocket::T_EXECUTE_CONFIRM</ref>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>confirmation<sp/>of<sp/>execution&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++<sp/>count<sp/>%<sp/>10000<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>events&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>skipEvents<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>histLocation</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>=<sp/>location<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/fetch-&quot;</highlight><highlight class="normal"><sp/>+<sp/>((*sample)-&gt;name())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.root&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>socket-&gt;write<sp/>(<ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a078788c6fdb1e04547cb42e80f758ad2" kindref="member" tooltip="end the job">BackgroundSocket::T_END_JOB</ref>,<sp/>histLocation);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5" kindref="member" tooltip="the type of message we send around">BackgroundSocket::Type</ref><sp/>type;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>payload;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>socket-&gt;read<sp/>(type,<sp/>payload);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/><ref refid="df/db5/classEL_1_1BackgroundSocket_1a7fa002ed9305506f7b4b4f3d9dfe47e5a7cdc34f223ccab4a54b0558d28233144" kindref="member" tooltip="confirm a T_END_JOB">BackgroundSocket::T_END_JOB_CONFIRM</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;no<sp/>confirmation<sp/>of<sp/>end<sp/>job&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TFile&gt;<sp/>file<sp/>(TFile::Open<sp/>(histLocation.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;READ&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::auto_ptr&lt;TList&gt;<sp/>list;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.get())</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>list.reset<sp/>(dynamic_cast&lt;TList*&gt;(file-&gt;Get<sp/>(</highlight><highlight class="stringliteral">&quot;hist&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list.get())</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" kindref="member">Driver::saveOutput</ref><sp/>(location,<sp/>(*sample)-&gt;name(),<sp/>*list);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::<ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">wait</ref><sp/>(&amp;status)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;process<sp/>wait<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(WIFSIGNALED<sp/>(status)<sp/>||<sp/>WEXITSTATUS<sp/>(status)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>RCU_THROW_MSG<sp/>(</highlight><highlight class="stringliteral">&quot;subprocess<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" kindref="member">diskOutputSave</ref><sp/>(location,<sp/>job);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/Root/BackgroundDriver.cxx"/>
  </compounddef>
</doxygen>
