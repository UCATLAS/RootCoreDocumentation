<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/d0a/classEL_1_1Driver" kind="class" prot="public">
    <compoundname>EL::Driver</compoundname>
    <derivedcompoundref refid="df/d12/classEL_1_1BackgroundDriver" prot="public" virt="non-virtual">EL::BackgroundDriver</derivedcompoundref>
    <derivedcompoundref refid="dc/d4d/classEL_1_1BatchDriver" prot="public" virt="non-virtual">EL::BatchDriver</derivedcompoundref>
    <derivedcompoundref refid="d4/dfe/classEL_1_1DirectDriver" prot="public" virt="non-virtual">EL::DirectDriver</derivedcompoundref>
    <derivedcompoundref refid="da/dcf/classEL_1_1GridDriver" prot="public" virt="non-virtual">EL::GridDriver</derivedcompoundref>
    <derivedcompoundref refid="d4/d82/classEL_1_1ProofDriver" prot="public" virt="non-virtual">EL::ProofDriver</derivedcompoundref>
    <derivedcompoundref refid="de/d84/classEL_1_1PrunDriver" prot="public" virt="non-virtual">EL::PrunDriver</derivedcompoundref>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool EL::Driver::abortRetrieve</definition>
        <argsstring></argsstring>
        <name>abortRetrieve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: this flag is set to true when the <ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">wait()</ref> function is running and a SIGINT is caught, meaning that control should be returned to the user as soon as possible. drivers can use it to abort long running operations in doRetrieve before completion </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="195" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/d0a/classEL_1_1Driver_1a87afa5575d2f84527070e927c950cb53" prot="private" static="no" mutable="no">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref></type>
        <definition>SH::MetaObject EL::Driver::m_options</definition>
        <argsstring></argsstring>
        <name>m_options</name>
        <briefdescription>
<para>description: members directly corresponding to accessors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="247" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a5bfb09e4419ad988b27e2fccff5e64f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Driver::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <reimplementedby refid="de/d84/classEL_1_1PrunDriver_1a68c1cbb6a54b57cb2a626a535a041416">testInvariant</reimplementedby>
        <reimplementedby refid="da/dcf/classEL_1_1GridDriver_1ad35bf4000a6564f578a55fd0bc68edd6">testInvariant</reimplementedby>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1a7f42a3cea32e8e992d5461514b0fc573">testInvariant</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1a714a841f3d361ab431c845b60a970755">testInvariant</reimplementedby>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1af16a68cc87667d082b10f025df9b9720">testInvariant</reimplementedby>
        <reimplementedby refid="d4/d82/classEL_1_1ProofDriver_1a1bfb33b3ab5894f540c3ce6478622b97">testInvariant</reimplementedby>
        <reimplementedby refid="d2/d63/classEL_1_1LSFDriver_1a552f1f08a3f88addf63a296f7a82d62d">testInvariant</reimplementedby>
        <reimplementedby refid="da/dfc/classEL_1_1LocalDriver_1ad9b92f599767cb3411a93f7f7ae1027a">testInvariant</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1a168450c7c2e380999cf47ee880e33576">testInvariant</reimplementedby>
        <reimplementedby refid="d9/daf/classEL_1_1GEDriver_1a502b95453e6f1a2537dea71ab40c8818">testInvariant</reimplementedby>
        <reimplementedby refid="d4/dfe/classEL_1_1DirectDriver_1abd082928e72c1363ed8b6ece510d1198">testInvariant</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1a980bba41123af25dbf2bbb5531de3dbc">testInvariant</reimplementedby>
        <reimplementedby refid="dc/d4d/classEL_1_1BatchDriver_1a18003d9f3d634c3b51948840e550537f">testInvariant</reimplementedby>
        <reimplementedby refid="df/d12/classEL_1_1BackgroundDriver_1ae8f812079d8354bfc764d9ca11b0c2b1">testInvariant</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: test the invariant of this object guarantee: no-fail </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="37"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1afe0fa388e65ba76c794790deba236c95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::Driver::Driver</definition>
        <argsstring>()</argsstring>
        <name>Driver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: standard default constructor guarantee: strong failures: low level errors I </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="44"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> *</type>
        <definition>SH::MetaObject* EL::Driver::options</definition>
        <argsstring>()</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>description: the list of options to jobs with this driver guarantee: no-fail postcondition: result != 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="51"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a3543365646e9cfc5fdff27019b62b68c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="db/d3a/classSH_1_1MetaObject" kindref="compound">SH::MetaObject</ref> *</type>
        <definition>const SH::MetaObject* EL::Driver::options</definition>
        <argsstring>() const </argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="52"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Driver::submit</definition>
        <argsstring>(const Job &amp;job, const std::string &amp;location) const </argsstring>
        <name>submit</name>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: submit the given job with the given output location and wait for it to finish guarantee: basic, may partially submit failures: out of memory II failures: can&apos;t create directory at location failures: submission errors rationale: this is mostly for small jobs and backward compatibility. for longer jobs use the mechanism below. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="64"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EL::Driver::submitOnly</definition>
        <argsstring>(const Job &amp;job, const std::string &amp;location) const </argsstring>
        <name>submitOnly</name>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: submit the given job with the given output location and return immediately guarantee: basic, may partially submit failures: out of memory II failures: can&apos;t create directory at location failures: submission errors rationale: this method allows you to submit jobs to your local batch system, log out and at a later point log back in again. warning: not all drivers support this. some will do all their work in the submit function. warning: you normally need to call <ref refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" kindref="member">wait()</ref> or <ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">retrieve()</ref> before you can use the output. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EL::Driver::retrieve</definition>
        <argsstring>(const std::string &amp;location)</argsstring>
        <name>retrieve</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: retrieve all the output for the job in the given location returns: whether the job completed successfully guarantee: basic, may partially retrieve failures: out of memory III failures: job failures failures: job can&apos;t be read failures: job was made with different driver rationale: while job failures will cause this method to fail you can typically retry it multiple times if you can use partial results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="95"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool EL::Driver::wait</definition>
        <argsstring>(const std::string &amp;location, unsigned time=60)</argsstring>
        <name>wait</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>time</declname>
          <defval>60</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: retrieve all the output for the job in the given location and wait until it is finished completely. poll the output every time seconds. guarantee: basic, may partially retrieve failures: out of memory III failures: job failures failures: job can&apos;t be read failures: job was made with different driver rationale: while job failures will cause this method to fail you can typically retry it multiple times if you can use partial results. rationale: typically sleeping for 60 seconds is an appropriate interval, but if it doesn&apos;t work for you, you can change it here. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="113"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a6fed39cd8394451ad9cb68505f7c4f42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EL::Driver::updateLocation</definition>
        <argsstring>(const std::string &amp;location)</argsstring>
        <name>updateLocation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: update the internal location of files, after moving the submission directory guarantee: basic, may update partially failures: out of memory II warning: only move the submission directory after all your jobs are finished, or the results will be unpredictable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EL::Driver::saveOutput</definition>
        <argsstring>(const std::string &amp;location, const std::string &amp;name, TList &amp;output)</argsstring>
        <name>saveOutput</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>TList &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: write the list of output objects to disk and clear it guarantee: basic failures: i/o errors rationale: this is made static and public, because depending on the implementation it may be called either from the <ref refid="de/d0a/classEL_1_1Driver" kindref="compound">Driver</ref> or the <ref refid="da/d12/classEL_1_1Worker" kindref="compound">Worker</ref>. however, normal users would have no interest in calling it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="141"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string EL::Driver::mergedOutputName</definition>
        <argsstring>(const std::string &amp;location, const OutputStream &amp;output, const std::string &amp;sample)</argsstring>
        <name>mergedOutputName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="d5/dfe/classEL_1_1OutputStream" kindref="compound">OutputStream</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: make the name of the merged output data file guarantee: strong failures: out of memory II rationale: this is optional, but it is convenient for drivers to put these files into the same location. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="152"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EL::Driver::mergedOutputMkdir</definition>
        <argsstring>(const std::string &amp;location, const Job &amp;job)</argsstring>
        <name>mergedOutputMkdir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create all the output directories for merged outputs guarantee: basic failures: out of memory II failures: i/o errors rationale: this is optional, but it is convenient for drivers that want to keep their outputs locally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="163"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EL::Driver::mergedOutputSave</definition>
        <argsstring>(const std::string &amp;location, const Job &amp;job)</argsstring>
        <name>mergedOutputSave</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: create and save a sample handler assuming we created all the merged files at the requested locations guarantee: basic failures: out of memory II failures: i/o errors rationale: this is optional, but it is convenient for drivers that want to keep their outputs locally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="175"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EL::Driver::diskOutputSave</definition>
        <argsstring>(const std::string &amp;location, const Job &amp;job)</argsstring>
        <name>diskOutputSave</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: make the output sample handler for the given job or stream from the information stored in the histogram files. guarantee: basic failures: out of memory II failures: i/o errors rationale: this is optional, but it is convenient for drivers that use (conventional) writers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a43e4ecaf3c9a63e33d988e965b196b1b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::Driver::doUpdateJob</definition>
        <argsstring>(Job &amp;job, const std::string &amp;location) const </argsstring>
        <name>doUpdateJob</name>
        <reimplementedby refid="d4/dfe/classEL_1_1DirectDriver_1a6db147de99fecfde7115b8cc3d0c4e01">doUpdateJob</reimplementedby>
        <reimplementedby refid="dc/d4d/classEL_1_1BatchDriver_1aa93c35ccd9c59af8785fbb63547f3dd6">doUpdateJob</reimplementedby>
        <reimplementedby refid="df/d12/classEL_1_1BackgroundDriver_1ad3a14dd6eca987bdc90324b4ea895f4e">doUpdateJob</reimplementedby>
        <param>
          <type><ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: update the job before it is submitted guarantee: basic failures: out of memory II failures: job specifications unfulfillable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="208"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1ab98809894f7678d1bfed2502e3d1654a" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void EL::Driver::doSubmit</definition>
        <argsstring>(const Job &amp;job, const std::string &amp;location) const </argsstring>
        <name>doSubmit</name>
        <reimplementedby refid="de/d84/classEL_1_1PrunDriver_1a22d42c7db92111ef0a2a1f88f3f90f21">doSubmit</reimplementedby>
        <reimplementedby refid="da/dcf/classEL_1_1GridDriver_1a4575042cd73c31a9e50b786bf6bf36a4">doSubmit</reimplementedby>
        <reimplementedby refid="d4/d82/classEL_1_1ProofDriver_1a4662880157ed7d2d67fce1131371ede4">doSubmit</reimplementedby>
        <reimplementedby refid="d4/dfe/classEL_1_1DirectDriver_1ae547bf526a7be909b6cce3188998f6a5">doSubmit</reimplementedby>
        <reimplementedby refid="dc/d4d/classEL_1_1BatchDriver_1a487b717b837ae20026efbca8472cbbc4">doSubmit</reimplementedby>
        <reimplementedby refid="df/d12/classEL_1_1BackgroundDriver_1a521bea60fb15642948eb11cbf4b1ea6e">doSubmit</reimplementedby>
        <param>
          <type>const <ref refid="da/dbb/classEL_1_1Job" kindref="compound">Job</ref> &amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: submit the given job with the given output location and wait for it to finish guarantee: basic, may partially submit failures: out of memory II failures: can&apos;t create directory at location failures: submission errors rationale: the virtual part of <ref refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" kindref="member">EL::Driver::submitOnly</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="220"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a22eb11aaa4b30fa62bbeeaad61518caf" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool EL::Driver::doRetrieve</definition>
        <argsstring>(const std::string &amp;location) const </argsstring>
        <name>doRetrieve</name>
        <reimplementedby refid="de/d84/classEL_1_1PrunDriver_1ac5cb84f7e40a813f3412b95e7b6b9a71">doRetrieve</reimplementedby>
        <reimplementedby refid="da/dcf/classEL_1_1GridDriver_1a9b83a8257395062a860d4a2f2059beff">doRetrieve</reimplementedby>
        <reimplementedby refid="dc/d4d/classEL_1_1BatchDriver_1ab4c1d7d24bd9634e48c1c7a798218bc7">doRetrieve</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>effects: retrieve all the output for the job in the given location returns: whether the job completed successfully guarantee: basic, may partially retrieve failures: out of memory III failures: job failures failures: job can&apos;t be read failures: job was made with different driver rationale: while job failures will cause this method to fail you can typically retry it multiple times if you can use partial results. rationale: the virtual part of <ref refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" kindref="member">EL::Driver::retrieve</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="237"/>
      </memberdef>
      <memberdef kind="function" id="de/d0a/classEL_1_1Driver_1a539687d1302f4d2e5d363c7956de760a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EL::Driver::ClassDef</definition>
        <argsstring>(Driver, 1)</argsstring>
        <name>ClassDef</name>
        <reimplementedby refid="de/d84/classEL_1_1PrunDriver_1a2a0cc3cd7aaed2f759efc8a1ea4dd0a1">ClassDef</reimplementedby>
        <reimplementedby refid="da/dcf/classEL_1_1GridDriver_1a3b0812a9eba41d2b7215cc89376d0ba5">ClassDef</reimplementedby>
        <reimplementedby refid="d4/d4f/classEL_1_1TorqueDriver_1a3692de2bc63108f0d6c3a5572633ace1">ClassDef</reimplementedby>
        <reimplementedby refid="df/dfd/classEL_1_1SoGEDriver_1a6bfe08bc0f73f97a88db2d22231c9d73">ClassDef</reimplementedby>
        <reimplementedby refid="db/d87/classEL_1_1SlurmDriver_1ab96804e466c480b1e8553ea6ebd4357a">ClassDef</reimplementedby>
        <reimplementedby refid="d4/d82/classEL_1_1ProofDriver_1affd21ebbdbaf64c7666b3bdd3df11587">ClassDef</reimplementedby>
        <reimplementedby refid="d2/d63/classEL_1_1LSFDriver_1aa06b92d8f176f16fdde1b47cc99f62b1">ClassDef</reimplementedby>
        <reimplementedby refid="da/dfc/classEL_1_1LocalDriver_1aeead1aea4584f55c034d3eaec2920bae">ClassDef</reimplementedby>
        <reimplementedby refid="d4/ddb/classEL_1_1LLDriver_1af5c7dec34d0e2345b4a1829c9da07e65">ClassDef</reimplementedby>
        <reimplementedby refid="d9/daf/classEL_1_1GEDriver_1a5efe50361fb2ba4fe61ace2ad16c7d85">ClassDef</reimplementedby>
        <reimplementedby refid="d4/dfe/classEL_1_1DirectDriver_1a791418db2632b8b8b41a7fafa258efe1">ClassDef</reimplementedby>
        <reimplementedby refid="dd/d04/classEL_1_1CondorDriver_1af49745f21c207ee70db0be43fc9d6ef8">ClassDef</reimplementedby>
        <reimplementedby refid="dc/d4d/classEL_1_1BatchDriver_1aa1ddbb58774849576dfa0f22f95b2322">ClassDef</reimplementedby>
        <reimplementedby refid="df/d12/classEL_1_1BackgroundDriver_1a5543aa15bb41fb879dc9b085bcd73b14">ClassDef</reimplementedby>
        <param>
          <type><ref refid="de/d0a/classEL_1_1Driver" kindref="compound">Driver</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5268">
        <label>EL::DirectDriver</label>
        <link refid="d4/dfe/classEL_1_1DirectDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5262">
        <label>EL::LLDriver</label>
        <link refid="d4/ddb/classEL_1_1LLDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5257">
        <label>EL::Driver</label>
        <link refid="de/d0a/classEL_1_1Driver"/>
      </node>
      <node id="5270">
        <label>EL::ProofDriver</label>
        <link refid="d4/d82/classEL_1_1ProofDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5271">
        <label>EL::PrunDriver</label>
        <link refid="de/d84/classEL_1_1PrunDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5259">
        <label>EL::BatchDriver</label>
        <link refid="dc/d4d/classEL_1_1BatchDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5265">
        <label>EL::SlurmDriver</label>
        <link refid="db/d87/classEL_1_1SlurmDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5260">
        <label>EL::CondorDriver</label>
        <link refid="dd/d04/classEL_1_1CondorDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5258">
        <label>EL::BackgroundDriver</label>
        <link refid="df/d12/classEL_1_1BackgroundDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5264">
        <label>EL::LSFDriver</label>
        <link refid="d2/d63/classEL_1_1LSFDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5267">
        <label>EL::TorqueDriver</label>
        <link refid="d4/d4f/classEL_1_1TorqueDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5261">
        <label>EL::GEDriver</label>
        <link refid="d9/daf/classEL_1_1GEDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5263">
        <label>EL::LocalDriver</label>
        <link refid="da/dfc/classEL_1_1LocalDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5269">
        <label>EL::GridDriver</label>
        <link refid="da/dcf/classEL_1_1GridDriver"/>
        <childnode refid="5257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5266">
        <label>EL::SoGEDriver</label>
        <link refid="df/dfd/classEL_1_1SoGEDriver"/>
        <childnode refid="5259" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5272">
        <label>EL::Driver</label>
        <link refid="de/d0a/classEL_1_1Driver"/>
        <childnode refid="5273" relation="usage">
          <edgelabel>m_options</edgelabel>
        </childnode>
      </node>
      <node id="5273">
        <label>SH::MetaObject</label>
        <link refid="db/d3a/classSH_1_1MetaObject"/>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" line="29" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/EventLoop/EventLoop/Driver.h" bodystart="28" bodyend="250"/>
    <listofallmembers>
      <member refid="de/d0a/classEL_1_1Driver_1a9a91e0c4461b079768e1b44d714953ec" prot="protected" virt="non-virtual"><scope>EL::Driver</scope><name>abortRetrieve</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a539687d1302f4d2e5d363c7956de760a" prot="private" virt="non-virtual"><scope>EL::Driver</scope><name>ClassDef</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a084db209102bff4ee596f55b6b22d99a" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>diskOutputSave</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a22eb11aaa4b30fa62bbeeaad61518caf" prot="private" virt="virtual"><scope>EL::Driver</scope><name>doRetrieve</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1ab98809894f7678d1bfed2502e3d1654a" prot="private" virt="virtual"><scope>EL::Driver</scope><name>doSubmit</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a43e4ecaf3c9a63e33d988e965b196b1b" prot="private" virt="virtual"><scope>EL::Driver</scope><name>doUpdateJob</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1afe0fa388e65ba76c794790deba236c95" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>Driver</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a87afa5575d2f84527070e927c950cb53" prot="private" virt="non-virtual"><scope>EL::Driver</scope><name>m_options</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1ad9f49c9d43666a58627f5541febde5a0" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>mergedOutputMkdir</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a103f943f669046458b81e8366ee50099" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>mergedOutputName</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a3e4f617fe33da86dfb3bca48e024c47a" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>mergedOutputSave</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a44cc2bdc9221bb5c0409c2485f8e2798" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>options</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a3543365646e9cfc5fdff27019b62b68c" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>options</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a371672ae7553e7149578d9f286cd3eda" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>retrieve</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1ad8cf828665ed2ac6882369e79ef8c359" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>saveOutput</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a2229e4d8b95b2ecf65249448d596d87b" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>submit</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1aa805265de24fb8b2cd4ab9e2ee664bf9" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>submitOnly</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a5bfb09e4419ad988b27e2fccff5e64f0" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>testInvariant</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a6fed39cd8394451ad9cb68505f7c4f42" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>updateLocation</name></member>
      <member refid="de/d0a/classEL_1_1Driver_1a2290992d35e07904847fb90cb781e05a" prot="public" virt="non-virtual"><scope>EL::Driver</scope><name>wait</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
