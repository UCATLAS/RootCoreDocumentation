<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/d0e/Enums_8cxx" kind="file">
    <compoundname>Enums.cxx</compoundname>
    <includes refid="d5/d69/TrigSteeringEvent_2TrigSteeringEvent_2Enums_8h" local="yes">TrigSteeringEvent/Enums.h</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="329992">
        <label>stdint.h</label>
      </node>
      <node id="329991">
        <label>string</label>
      </node>
      <node id="329990">
        <label>vector</label>
      </node>
      <node id="329988">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx</label>
        <link refid="Enums.cxx"/>
        <childnode refid="329989" relation="include">
        </childnode>
        <childnode refid="329991" relation="include">
        </childnode>
        <childnode refid="329993" relation="include">
        </childnode>
        <childnode refid="329994" relation="include">
        </childnode>
      </node>
      <node id="329993">
        <label>sstream</label>
      </node>
      <node id="329994">
        <label>iostream</label>
      </node>
      <node id="329989">
        <label>TrigSteeringEvent/Enums.h</label>
        <link refid="d5/d69/TrigSteeringEvent_2TrigSteeringEvent_2Enums_8h_source"/>
        <childnode refid="329990" relation="include">
        </childnode>
        <childnode refid="329991" relation="include">
        </childnode>
        <childnode refid="329992" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="d9/d11/namespaceHLTEnums">HLTEnums</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="de/d0e/Enums_8cxx_1a5f580f75d5cec5b1661c887970a5e20c" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string ActionNames[4]</definition>
        <argsstring>[4]</argsstring>
        <name>ActionNames</name>
        <initializer> {&quot;CONTINUE&quot;, &quot;ABORT_CHAIN&quot;, &quot;ABORT_EVENT&quot;, &quot;ABORT_JOB&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="7" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1a9803558b500c368295e724983690b07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; strAction</definition>
        <argsstring>(const Action::Code code)</argsstring>
        <name>strAction</name>
        <param>
          <type>const <ref refid="d6/dbd/structHLT_1_1Action_1a3c85669c4757573813fe559385d8be55" kindref="member">Action::Code</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="9" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="9" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1a4ac8e43cc3c67ceb4e6ea9359fef42b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/dbd/structHLT_1_1Action_1a3c85669c4757573813fe559385d8be55" kindref="member">Action::Code</ref></type>
        <definition>Action::Code getActionFromString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>getActionFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="13" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1a931368722d1e07fc1e30af3df9eb6f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string strReason</definition>
        <argsstring>(const Reason::Code code)</argsstring>
        <name>strReason</name>
        <param>
          <type>const <ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="33" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1a09ee416ee532621241dc2ca4cdaa3792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref></type>
        <definition>Reason::Code getReasonFromString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>getReasonFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="37" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="37" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1ab9791cc055e6f1545d0b971e376823d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref></type>
        <definition>SteeringInternalReason::Code getSteeringInternalReasonFromString</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>getSteeringInternalReasonFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="67" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="67" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="de/d0e/Enums_8cxx_1aabe8c2d9e9a4cb3fb28b6e36ea237784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string strSteeringInternalReason</definition>
        <argsstring>(const SteeringInternalReason::Code code)</argsstring>
        <name>strSteeringInternalReason</name>
        <param>
          <type>const <ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" line="85" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx" bodystart="85" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TrigSteeringEvent/Enums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">HLT;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ActionNames<sp/>[4]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;CONTINUE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABORT_CHAIN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABORT_EVENT&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ABORT_JOB&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dbd/structHLT_1_1Action_1a3c85669c4757573813fe559385d8be55" kindref="member">Action::Code</ref><sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ActionNames[code<sp/>&amp;<sp/>0x3];</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="d6/dbd/structHLT_1_1Action_1a3c85669c4757573813fe559385d8be55" kindref="member">Action::Code</ref><sp/>getActionFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CONTINUE&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Action::CONTINUE;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ABORT_CHAIN&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Action::ABORT_CHAIN;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ABORT_EVENT&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Action::ABORT_EVENT;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ABORT_JOB&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Action::ABORT_JOB;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Action::UNSPECIFIED_;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">HLTEnums<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ReasonNames<sp/>[16]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;UNKNOWN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;MISSING_FEATURE&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;GAUDI_EXCEPTION&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;EFORMAT_EXCEPTION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;STD_EXCEPTION&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN_EXCEPTION&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NAV_ERROR&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MISSING_ROD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;CORRUPTED_ROD&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TIMEOUT&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BAD_JOB_SETUP&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;USERDEF_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;USERDEF_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;USERDEF_3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;USERDEF_4&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LAST_&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>strReason(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref><sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HLTEnums::ReasonNames[code<sp/>&amp;<sp/>0xf];</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref><sp/>getReasonFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fda39a4ba20c11d3589734acd7df9d4dd89" kindref="member" tooltip="and can&amp;#39;t be higher because of serialization in the chain">HLT::Reason::LAST_</ref>;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>HLTEnums::ReasonNames[i])<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>found<sp/>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reason::UNSPECIFIED_;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref>(i);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">HLTEnums<sp/>{<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>SteeringInternalReasonNames<sp/>[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NO_LVL1_ITEMS&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NO_LVL2_CHAINS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NO_LVL1_RESULT&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WRONG_HLT_RESULT&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NO_HLT_RESULT&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ALGO_ERROR&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TIMEOUT&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BUSY&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BAD_JOB_SETUP&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LAST_&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref><sp/>getSteeringInternalReasonFromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174ae6279935346bd78b8082a46d83140c94" kindref="member" tooltip="there is basically no restriction on size since these errors are not saved per chain...">HLT::SteeringInternalReason::LAST_</ref>;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>HLTEnums::SteeringInternalReasonNames[i])<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>found<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SteeringInternalReason::UNSPECIFIED_;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref>(i);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>strSteeringInternalReason<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref><sp/>code<sp/>){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">(code)<sp/>&lt;<sp/><sp/>HLT::SteeringInternalReason::LAST_<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>HLTEnums::SteeringInternalReasonNames[code];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UNSPECIFIED_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">std::string<sp/>HLT::strErrorCode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/classHLT_1_1ErrorCode" kindref="compound" tooltip="The definition of error codes in HLT. This is a class (note; before was simple enum)...">ErrorCode</ref><sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">+strAction(code.action())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strSteeringInternalReason(code.steeringInternalReason())</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strReason(code.reason())<sp/>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HLT::getErrorCodePosFromStr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ec)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>ss(ec);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::string<sp/>actionStr;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>std::string<sp/>reasonStr;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>std::string<sp/>steeringStr;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>ss<sp/>&gt;&gt;<sp/>actionStr<sp/><sp/>&gt;&gt;<sp/>steeringStr<sp/>&gt;&gt;<sp/>reasonStr;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="d6/dbd/structHLT_1_1Action_1a3c85669c4757573813fe559385d8be55" kindref="member">Action::Code</ref><sp/>actionCode<sp/>=<sp/>getActionFromString(actionStr);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>actionCode<sp/>==<sp/>Action::UNSPECIFIED_<sp/>)<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="d0/d42/structHLT_1_1Reason_1afbf7a4f3108a8969b8d6910ed241d1fd" kindref="member">Reason::Code</ref><sp/>reasonCode<sp/>=<sp/>getReasonFromString(reasonStr);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>reasonCode<sp/>==<sp/>Reason::UNSPECIFIED_<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="d8/d34/structHLT_1_1SteeringInternalReason_1a0a2aeec202ceb7701db37948a7eea174" kindref="member">SteeringInternalReason::Code</ref><sp/>steeringCode<sp/>=<sp/>getSteeringInternalReasonFromString(steeringStr);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>steeringCode<sp/>==<sp/>SteeringInternalReason::UNSPECIFIED_<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d0/d9e/classHLT_1_1ErrorCode" kindref="compound" tooltip="The definition of error codes in HLT. This is a class (note; before was simple enum)...">ErrorCode</ref>(actionCode,<sp/>reasonCode,<sp/>steeringCode<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">std::string<sp/>HLT::ErrorCode::str()<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strErrorCode(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/Root/Enums.cxx"/>
  </compounddef>
</doxygen>
