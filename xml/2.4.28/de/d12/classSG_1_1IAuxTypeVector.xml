<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="de/d12/classSG_1_1IAuxTypeVector" kind="class" prot="public">
    <compoundname>SG::IAuxTypeVector</compoundname>
    <derivedcompoundref refid="d5/d68/classSG_1_1AuxTypeVector" prot="public" virt="non-virtual">SG::AuxTypeVector&lt; T, CONT &gt;</derivedcompoundref>
    <derivedcompoundref refid="d8/d93/classxAOD_1_1AuxPersInfo" prot="public" virt="non-virtual">xAOD::AuxPersInfo&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="d2/d4b/classxAOD_1_1AuxPersVector" prot="public" virt="non-virtual">xAOD::AuxPersVector&lt; T, VEC &gt;</derivedcompoundref>
    <derivedcompoundref refid="de/dbd/classxAOD_1_1TAuxVector" prot="public" virt="non-virtual">xAOD::TAuxVector</derivedcompoundref>
    <includes refid="d8/d0e/IAuxTypeVector_8h" local="no">IAuxTypeVector.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1ac39506959d2b852f78e8aeda22e6651e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual SG::IAuxTypeVector::~IAuxTypeVector</definition>
        <argsstring>()</argsstring>
        <name>~IAuxTypeVector</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="38" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1aaacc3e3c1dcc1e46f4ec8148c901d065" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref> *</type>
        <definition>virtual IAuxTypeVector* SG::IAuxTypeVector::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1a2a6ea9fe204ef2c767e12be4366404c0">clone</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1aa8264a2729e7199f39c7a57d0a34b5aa">clone</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1ae096938d397256bf0e8f34cd12211376">clone</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a44002ff6152aafdb5d7123a8ac547905">clone</reimplementedby>
        <briefdescription>
<para>Make a copy of this vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="44"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* SG::IAuxTypeVector::toPtr</definition>
        <argsstring>()=0</argsstring>
        <name>toPtr</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1ad328fc99168d196e293ba12781f073d5">toPtr</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1a5c71ee696ca3563054687c13b207a560">toPtr</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1a88f1c8d52a0469c9946cea8fa01732a6">toPtr</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1ae698ad8a6f555184a8fcb68b942218ae">toPtr</reimplementedby>
        <briefdescription>
<para>Return a pointer to the start of the vector&apos;s data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="50"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1afed4af45990e7670d930c265d779b80c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* SG::IAuxTypeVector::toVector</definition>
        <argsstring>()=0</argsstring>
        <name>toVector</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1a2c7564f5ff0983f87e95d669527d0758">toVector</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1a962efd2dabcaae8921ba529f1aa5ac58">toVector</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1ae24bd2484e54cd68258cb98f048047be">toVector</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1aa6d797c3945ce8ec97ae65439f551fdf">toVector</reimplementedby>
        <briefdescription>
<para>Return a pointer to the STL vector itself. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="56"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a62b69917936ea8302fa3a4689c4fa636" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t SG::IAuxTypeVector::size</definition>
        <argsstring>() const =0</argsstring>
        <name>size</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1a83e1b31b096a98f3680ca51fd1bbfa1c">size</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1a1408bc4f8724bb46806e1698966b6581">size</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1a92a8abdc720283b578b6c700e1bbf104">size</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a193eb3a855d6964bb7eca18b6cf65b7e">size</reimplementedby>
        <briefdescription>
<para>Return the size of the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="62"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1ab193d7841a46c020e54cd83eeefaa6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVector::resize</definition>
        <argsstring>(size_t sz)=0</argsstring>
        <name>resize</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1a96da473708322553e0cbedb64d451c7d">resize</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1a82b77f4af0750646dcbdc1fe25f6e080">resize</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1a705c0d66b92e7ef609608374e9f9a781">resize</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1ac1934e4f62d5eabb36b3074a06ee5306">resize</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the size of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector size. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="69"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1afa8e2ee061b050019960c326f28b343e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVector::reserve</definition>
        <argsstring>(size_t sz)=0</argsstring>
        <name>reserve</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1af55db9f8a7d766fe53d94be8364a690c">reserve</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1af24583055a9c5fc545fd7e840f7801ab">reserve</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1a6dac7744f58d3b9c1d614c4445880308">reserve</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1add8a225a8b7d80dc53dd134ca92e8f19">reserve</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Change the capacity of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sz</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="76"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a056c9481088c3c4155d4802db7e8a69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void SG::IAuxTypeVector::shift</definition>
        <argsstring>(size_t pos, ptrdiff_t offs)=0</argsstring>
        <name>shift</name>
        <reimplementedby refid="de/dbd/classxAOD_1_1TAuxVector_1a4843f4d138fea6a57a83b5f19fa38776">shift</reimplementedby>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1aa02dd1f293456852c38c600ac4ac90c2">shift</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1ab3730051c640f018e336a68e5a3008cd">shift</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a027a64382b5238f0e3a8ebaf1bff1751">shift</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ptrdiff_t</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
<para>Shift the elements of the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The starting index for the shift. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offs</parametername>
</parameternamelist>
<parameterdescription>
<para>The (signed) amount of the shift.</para></parameterdescription>
</parameteritem>
</parameterlist>
This operation shifts the elements in the vectors for all aux data items, to implement an insertion or deletion. <computeroutput>offs</computeroutput> may be either positive or negative.</para><para>If <computeroutput>offs</computeroutput> is positive, then the container is growing. The container size should be increased by <computeroutput>offs</computeroutput>, the element at <computeroutput>pos</computeroutput> moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The elements between <computeroutput>pos</computeroutput> and <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput> should be default-initialized.</para><para>If <computeroutput>offs</computeroutput> is negative, then the container is shrinking. The element at <computeroutput>pos</computeroutput> should be moved to <computeroutput>pos</computeroutput> + <computeroutput>offs</computeroutput>, and similarly for following elements. The container should then be shrunk by <computeroutput>-offs</computeroutput> elements (running destructors as appropriate). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="101"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a480e9245717e14b86cf326f8be4d2dad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool SG::IAuxTypeVector::setOption</definition>
        <argsstring>(const AuxDataOption &amp;)</argsstring>
        <name>setOption</name>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1aa195d433ea003661032b8ac4a0a15272">setOption</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a86fc0c679974769134d9492538c960bc">setOption</reimplementedby>
        <param>
          <type>const <ref refid="d7/d31/classSG_1_1AuxDataOption" kindref="compound">AuxDataOption</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Set an option for this variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>The option to set.</para></parameterdescription>
</parameteritem>
</parameterlist>
The interpretation of the option depends on the particular representation of the variable provided by the concrete class.</para><para>Returns true if the option setting was successful; false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="114" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" bodystart="113" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a3226c7c2e703aeb2b8c7736ae3663a52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="de/d12/classSG_1_1IAuxTypeVector" kindref="compound">IAuxTypeVector</ref> *</type>
        <definition>virtual IAuxTypeVector* SG::IAuxTypeVector::toPacked</definition>
        <argsstring>()</argsstring>
        <name>toPacked</name>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a08f3079c22a019b08377a9287563af5b">toPacked</reimplementedby>
        <briefdescription>
<para>Make a packed version of the variable. </para>        </briefdescription>
        <detaileddescription>
<para>If possible, return a new vector object that stores the data in a <computeroutput><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound">PackedContainer</ref></computeroutput>. The data itself should be _moved_ to the new container (so that this vector becomes empty). This ensures that pointers to the data are preserved.</para><para>If successful, a newly-allocated object is returned. <ref refid="d4/dc4/structA" kindref="compound">A</ref> null pointer is returned on failure (operation not supported, type can&apos;t be packed, type is already packed). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="129" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="de/d12/classSG_1_1IAuxTypeVector_1a2b585440095feb65b1b3512f16e6490f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::type_info *</type>
        <definition>virtual const std::type_info* SG::IAuxTypeVector::objType</definition>
        <argsstring>() const </argsstring>
        <name>objType</name>
        <reimplementedby refid="d2/d4b/classxAOD_1_1AuxPersVector_1ae5c8d1b2955efeb32e9d51720b50362e">objType</reimplementedby>
        <reimplementedby refid="d8/d93/classxAOD_1_1AuxPersInfo_1a095688f41807e4df8a4d84e7b24bd026">objType</reimplementedby>
        <reimplementedby refid="d5/d68/classSG_1_1AuxTypeVector_1a7ab8821d92e915a777bdc45dc2c88299">objType</reimplementedby>
        <briefdescription>
<para>Return the type of the complete object to be saved. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if the object is a <computeroutput>std::vector</computeroutput>, then we return the <computeroutput>type_info</computeroutput> of the vector. But if we&apos;re holding a <computeroutput><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound">PackedContainer</ref></computeroutput>, then we return the <computeroutput>type_info</computeroutput> of the <computeroutput><ref refid="dd/d01/classSG_1_1PackedContainer" kindref="compound">PackedContainer</ref></computeroutput>.</para><para>Can return null if the operation is not supported. In that case, I/O will use the type found from the variable registry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="143" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" bodystart="143" bodyend="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract interface for manipulating vectors of arbitrary types. </para>    </briefdescription>
    <detaileddescription>
<para>The auxiliary data for a container are stored in a set of STL vectors, one for each data item. However, we want to allow storing arbitrary types in these vectors. Thus, we define this abstract interface to operate on the vectors. The concrete version of this will own one vector. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="9204">
        <label>xAOD::TAuxVector</label>
        <link refid="de/dbd/classxAOD_1_1TAuxVector"/>
        <childnode refid="9200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9201">
        <label>SG::AuxTypeVector&lt; T, CONT &gt;</label>
        <link refid="d5/d68/classSG_1_1AuxTypeVector"/>
        <childnode refid="9200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9200">
        <label>SG::IAuxTypeVector</label>
        <link refid="de/d12/classSG_1_1IAuxTypeVector"/>
      </node>
      <node id="9203">
        <label>xAOD::AuxPersVector&lt; T, VEC &gt;</label>
        <link refid="d2/d4b/classxAOD_1_1AuxPersVector"/>
        <childnode refid="9200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9202">
        <label>xAOD::AuxPersInfo&lt; T &gt;</label>
        <link refid="d8/d93/classxAOD_1_1AuxPersInfo"/>
        <childnode refid="9200" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" line="35" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AthContainersInterfaces/AthContainersInterfaces/IAuxTypeVector.h" bodystart="34" bodyend="144"/>
    <listofallmembers>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1aaacc3e3c1dcc1e46f4ec8148c901d065" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>clone</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a2b585440095feb65b1b3512f16e6490f" prot="public" virt="virtual"><scope>SG::IAuxTypeVector</scope><name>objType</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1afa8e2ee061b050019960c326f28b343e" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>reserve</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1ab193d7841a46c020e54cd83eeefaa6fb" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>resize</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a480e9245717e14b86cf326f8be4d2dad" prot="public" virt="virtual"><scope>SG::IAuxTypeVector</scope><name>setOption</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a056c9481088c3c4155d4802db7e8a69e" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>shift</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a62b69917936ea8302fa3a4689c4fa636" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>size</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a3226c7c2e703aeb2b8c7736ae3663a52" prot="public" virt="virtual"><scope>SG::IAuxTypeVector</scope><name>toPacked</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1a31a1ff0ce19ebaf7af7a183d7a3209ff" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>toPtr</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1afed4af45990e7670d930c265d779b80c" prot="public" virt="pure-virtual"><scope>SG::IAuxTypeVector</scope><name>toVector</name></member>
      <member refid="de/d12/classSG_1_1IAuxTypeVector_1ac39506959d2b852f78e8aeda22e6651e" prot="public" virt="virtual"><scope>SG::IAuxTypeVector</scope><name>~IAuxTypeVector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
