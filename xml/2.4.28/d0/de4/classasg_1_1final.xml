<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/de4/classasg_1_1final" kind="class" prot="public">
    <compoundname>asg::final</compoundname>
    <includes refid="de/dc4/AnaToolHandle_8h" local="no">AnaToolHandle.h</includes>
    <templateparamlist>
      <param>
        <type>class <ref refid="d1/def/classT" kindref="compound">T</ref></type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a4e0635a06b723d8db2048e7c754a34d3" prot="private" static="no" mutable="no">
        <type><ref refid="da/d8e/classasg_1_1detail_1_1AnaToolCleanup" kindref="compound">detail::AnaToolCleanup</ref></type>
        <definition>detail::AnaToolCleanup asg::final&lt; T &gt;::m_cleanup</definition>
        <argsstring></argsstring>
        <name>m_cleanup</name>
        <briefdescription>
<para>any stuff we need to release as part of cleanup </para>        </briefdescription>
        <detaileddescription>
<para>This is protected by m_isInitialized and should not be accessed until m_isInitialized is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="878" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a0bd4f578c55b0bec8bab9ac6263df040" prot="private" static="no" mutable="no">
        <type><ref refid="de/dcb/classasg_1_1detail_1_1AnaToolConfig" kindref="compound">detail::AnaToolConfig</ref></type>
        <definition>detail::AnaToolConfig asg::final&lt; T &gt;::m_config</definition>
        <argsstring></argsstring>
        <name>m_config</name>
        <briefdescription>
<para>the configuration for this tool </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="882" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a2839eb9b56d7765ef13e21af0fb69cbb" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string asg::final&lt; T &gt;::m_name</definition>
        <argsstring></argsstring>
        <name>m_name</name>
        <briefdescription>
<para>the value of <ref refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="886" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a81665674dbd384c61f24dc7fe070445d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string asg::final&lt; T &gt;::m_parentName</definition>
        <argsstring></argsstring>
        <name>m_parentName</name>
        <briefdescription>
<para>the name of the parent </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="890" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="890" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1af56d175d2a57a7e936cca5aa242d9654" prot="private" static="no" mutable="no">
        <type>parentType_t *</type>
        <definition>parentType_t* asg::final&lt; T &gt;::m_parentPtr</definition>
        <argsstring></argsstring>
        <name>m_parentPtr</name>
        <initializer> nullptr</initializer>
        <briefdescription>
<para>the pointer to the parent </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="894" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a4c66dfcf9a83bf8ec7527596db648522" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; ToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;ToolHandle&lt;T&gt; &gt; asg::final&lt; T &gt;::m_handleUser</definition>
        <argsstring></argsstring>
        <name>m_handleUser</name>
        <briefdescription>
<para>the ToolHandle exposed to the user </para>        </briefdescription>
        <detaileddescription>
<para>This primarily serves to allow the user to set this like a regular ToolHandle property. During initialize it is then updated to refer to the actually used tool.</para><para>This is done as a shared pointer, so that the include dependency is only pulled in for the source file that actually uses the AnaToolHandle. That in turn reduces the number of public dependencies an <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> package has to expose. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="908" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a72d7a5ef9e1bcb2d4d51066afa41e478" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string asg::final&lt; T &gt;::m_originalTypeAndName</definition>
        <argsstring></argsstring>
        <name>m_originalTypeAndName</name>
        <briefdescription>
<para>the typeAndName at time of creation </para>        </briefdescription>
        <detaileddescription>
<para>This is used to determine whether the user has been overriding the ToolHandle during configuration time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="915" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a5332492b4a4d753be0005afdf9f39007" prot="private" static="no" mutable="no">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* asg::final&lt; T &gt;::m_toolPtr</definition>
        <argsstring></argsstring>
        <name>m_toolPtr</name>
        <initializer> nullptr</initializer>
        <briefdescription>
<para>the value of <ref refid="d0/de4/classasg_1_1final_1a3be68efa32bcb3dbce0939a5fba75f0b" kindref="member">isInitialized</ref> </para>        </briefdescription>
        <detaileddescription>
<para>the pointer to the tool we use This is used for actually accessing the tool, independent of who created it or how. Mostly this is a performance optimization to avoid going back to the ToolHandle every single time.</para><para>This is protected by m_isInitialized and should not be accessed until m_isInitialized is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="931" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a90b35e014709fab6dfedbfea72185f25" prot="private" static="no" mutable="no">
        <type>detail::AnaToolHandleMode</type>
        <definition>detail::AnaToolHandleMode asg::final&lt; T &gt;::m_mode</definition>
        <argsstring></argsstring>
        <name>m_mode</name>
        <initializer> detail::AnaToolHandleMode::EMPTY</initializer>
        <briefdescription>
<para>the value of getMode cached when we initialize the tool </para>        </briefdescription>
        <detaileddescription>
<para>This is protected by m_isInitialized and should not be accessed until m_isInitialized is true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="939" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1a786fd649e325f1575e2feac0c0aace04" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::m_allowEmpty</definition>
        <argsstring></argsstring>
        <name>m_allowEmpty</name>
        <initializer> false</initializer>
        <briefdescription>
<para>the value of <ref refid="d0/de4/classasg_1_1final_1a45330e516990db371d083950554b1ac7" kindref="member">allowEmpty</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="965" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d0/de4/classasg_1_1final_1acbd6d5adc31fd2854ac7bdd69e4b3c06" prot="private" static="no" mutable="no">
        <type>std::recursive_mutex</type>
        <definition>std::recursive_mutex asg::final&lt; T &gt;::m_initializeMutex</definition>
        <argsstring></argsstring>
        <name>m_initializeMutex</name>
        <briefdescription>
<para>a mutex to ensure that we don&apos;t call initialize twice concurrently </para>        </briefdescription>
        <detaileddescription>
<para>This is a recursive mutex so that we can lock both in <ref refid="d0/de4/classasg_1_1final_1a3bcf51336bed923d4dd630748f9c9585" kindref="member">initialize</ref> and <ref refid="d0/de4/classasg_1_1final_1a3f878f8370da9aa12c9f79c5f00596ce" kindref="member">get</ref> without conflict. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="984" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a3c2a2a20c02ce261c3ae6b98ae597309" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
<para>test the invariant of this object </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="461"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1abd115b58ab0443447c834eee5b47f0b4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>asg::final&lt; T &gt;::AnaToolHandle</definition>
        <argsstring>(const std::string &amp;val_name=&quot;&quot;, parentType_t *val_parent=nullptr)</argsstring>
        <name>AnaToolHandle</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>parentType_t *</type>
          <declname>val_parent</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>create a tool handle with the given name and parent </para>        </briefdescription>
        <detaileddescription>
<para>The name can either be just a regular name or of the form type/name, in which case type indicates the type of the tool to be created. If you don&apos;t explicitly call make (or pass no type into it), you have to rely on this form. <simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="476"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a01e32f6c3245f802884497260360d121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>asg::final&lt; T &gt;::AnaToolHandle</definition>
        <argsstring>(AnaToolHandle&lt; T &gt; &amp;&amp;that)</argsstring>
        <name>AnaToolHandle</name>
        <param>
          <type>AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;&amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="483"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a452b5bda6eec84e57ba0dae8e2518326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>asg::final&lt; T &gt;::AnaToolHandle</definition>
        <argsstring>(const AnaToolHandle&lt; T &gt; &amp;that)</argsstring>
        <name>AnaToolHandle</name>
        <param>
          <type>const AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
<para>This will copy the configuration if the argument has not been initialized yet, and it will create a shared tool handle if it has.</para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="497"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1afce09289af13ebbc6e176b30781335d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>asg::final&lt; T &gt;::~AnaToolHandle</definition>
        <argsstring>() noexcept</argsstring>
        <name>~AnaToolHandle</name>
        <briefdescription>
<para>standard destructor </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="504"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a7d005ba8445d6b574e2b962658c26d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AnaToolHandle &amp;</type>
        <definition>AnaToolHandle&amp; asg::final&lt; T &gt;::operator=</definition>
        <argsstring>(const AnaToolHandle&lt; T &gt; &amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>const AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>assignment operator </para>        </briefdescription>
        <detaileddescription>
<para>This will copy the configuration if the argument has not been initialized yet, and it will create a shared tool handle if it has.</para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="518"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a9aa81696d14793696a60796ad9b9d6c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
        <definition>AnaToolHandle&lt;T&gt;&amp; asg::final&lt; T &gt;::operator=</definition>
        <argsstring>(AnaToolHandle&lt; T &gt; &amp;&amp;that)</argsstring>
        <name>operator=</name>
        <param>
          <type>AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;&amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard move assignment operator </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="525"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a708d8338a5cf8d75c9c1f9fbeffed61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::swap</definition>
        <argsstring>(AnaToolHandle&lt; T &gt; &amp;that) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type>AnaToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>that</declname>
        </param>
        <briefdescription>
<para>standard swap </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="532"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a48e487c7c448e10d287d32006cc21085" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
<para>whether this ToolHandle is completely empty, i.e. it has been default constructed and was never assigned any content by the user </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="544"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a9fd03ac010f919790e7f89d843e1976d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::isPublic</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isPublic</name>
        <briefdescription>
<para>whether this is a public tool (or tool handle) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="550"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a3be68efa32bcb3dbce0939a5fba75f0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::isInitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isInitialized</name>
        <briefdescription>
<para>whether initialize has been called successfully, i.e. whether the tool is ready to be used </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="557"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a645db078ffad3cf4eb84f3b19b340728" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::declarePropertyFor</definition>
        <argsstring>(T2 *tool, const std::string &amp;name, const std::string &amp;description=&quot;&quot;)</argsstring>
        <name>declarePropertyFor</name>
        <param>
          <type>T2 *</type>
          <declname>tool</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>declare as property on the given tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II<linebreak/>
 property declaration failures<linebreak/>
 tool already made </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="570"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a4a517de27657324a89ced84a54e3de83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const ToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
        <definition>const ToolHandle&lt;T&gt;&amp; asg::final&lt; T &gt;::getHandle</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getHandle</name>
        <briefdescription>
<para>the tool handle we wrap </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="576"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a7c468e080bf1e5614dc67439c4829509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T2</type>
          </param>
        </templateparamlist>
        <type>StatusCode</type>
        <definition>StatusCode asg::final&lt; T &gt;::setProperty</definition>
        <argsstring>(const std::string &amp;property, const T2 &amp;value)</argsstring>
        <name>setProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set the given property of the tool. </para>        </briefdescription>
        <detaileddescription>
<para>this will make the tool is not already created.</para><para>if the tool is shared and has already been created, this call will be ignored.</para><para>this can also be used to set tool handle properties by passing in either a regular ToolHandle or an <ref refid="d0/de4/classasg_1_1final_1abd115b58ab0443447c834eee5b47f0b4" kindref="member">AnaToolHandle</ref> object.</para><para><simplesect kind="par"><title>Guarantee</title><para>basic </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>property setting failures </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="597"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; asg::final&lt; T &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>the type configured for this AnaToolHandle </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="604"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a730c6f716dfa8afac08f564978df87ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::setType</definition>
        <argsstring>(std::string val_type) noexcept</argsstring>
        <name>setType</name>
        <param>
          <type>std::string</type>
          <declname>val_type</declname>
        </param>
        <briefdescription>
<para>set the value of <ref refid="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" kindref="member">type</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="611"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; asg::final&lt; T &gt;::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <briefdescription>
<para>the name configured for this AnaToolHandle </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="636"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1ae1562ad4119ac5557df7fc9154fd7423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::setName</definition>
        <argsstring>(std::string val_name) noexcept</argsstring>
        <name>setName</name>
        <param>
          <type>std::string</type>
          <declname>val_name</declname>
        </param>
        <briefdescription>
<para>set the value of <ref refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="643"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1aac1c3bec6cfd75fc6f98407882fd1dff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string asg::final&lt; T &gt;::fullName</definition>
        <argsstring>() const </argsstring>
        <name>fullName</name>
        <briefdescription>
<para>the full name of the tool to be used during tool initialization </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="652"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a38183c0ed232f68cdc163919fbf85646" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string asg::final&lt; T &gt;::typeAndName</definition>
        <argsstring>() const </argsstring>
        <name>typeAndName</name>
        <briefdescription>
<para>the value of <ref refid="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" kindref="member">type</ref> and <ref refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="661"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a83d329de595e2d7a0f38a368fa78126d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::setTypeAndName</definition>
        <argsstring>(const std::string &amp;val_typeAndName)</argsstring>
        <name>setTypeAndName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>val_typeAndName</declname>
        </param>
        <briefdescription>
<para>set the value of <ref refid="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" kindref="member">type</ref> and <ref refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="670"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a9ff0ea472d4224cce401f4b3806da11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::setTypeAndName</definition>
        <argsstring>(std::string val_type, std::string val_name) noexcept</argsstring>
        <name>setTypeAndName</name>
        <param>
          <type>std::string</type>
          <declname>val_type</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>val_name</declname>
        </param>
        <briefdescription>
<para>set the value of <ref refid="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" kindref="member">type</ref> and <ref refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" kindref="member">name</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="677"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a3bcf51336bed923d4dd630748f9c9585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode asg::final&lt; T &gt;::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>initialize the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool initialization failures </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="687"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a2c3de5b5b7a68f971a64f8403766f881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode asg::final&lt; T &gt;::retrieve</definition>
        <argsstring>()</argsstring>
        <name>retrieve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="initialize"><para>initialize the tool </para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool initialization failures </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="691"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1affa5062588170e6e92328996da316daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* asg::final&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
<simplesect kind="post"><para>result != nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="701"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1aa0cd614af4c820f7d7e564a7e8ba1c58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>const T* asg::final&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
<simplesect kind="post"><para>result != nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="710"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a214da92b342e749857923ab44137901e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
        <definition>T&amp; asg::final&lt; T &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="718"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a9e55f6f1f4509a093f23217fede6d2fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> &amp;</type>
        <definition>const T&amp; asg::final&lt; T &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="726"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a3f878f8370da9aa12c9f79c5f00596ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>T* asg::final&lt; T &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
<simplesect kind="post"><para>result != nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="735"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1ad84fb30c2d7d22e515851ef124ab8e13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="d1/def/classT" kindref="compound">T</ref> *</type>
        <definition>const T* asg::final&lt; T &gt;::get</definition>
        <argsstring>() const </argsstring>
        <name>get</name>
        <briefdescription>
<para>access the tool </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
<simplesect kind="post"><para>result != nullptr </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="744"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a53d9fe76e139f84660c80b26308121b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::isUserConfigured</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isUserConfigured</name>
        <briefdescription>
<para>whether this tool handle has been configured by the user </para>        </briefdescription>
        <detaileddescription>
<para>i.e. somebody called declareProperty with our handle member, and then that got configured either from the job options file in <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> or via setProperty in RootCore <simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="756"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a539c724beda713cc643012597b00533c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>detail::AnaToolHandleMode</type>
        <definition>detail::AnaToolHandleMode asg::final&lt; T &gt;::mode</definition>
        <argsstring>() const </argsstring>
        <name>mode</name>
        <briefdescription>
<para>the detail::AnaToolHandleMode for this handle </para>        </briefdescription>
        <detaileddescription>
<para>This is mostly meant for internal use by the setProperty method, not for use by the end-user</para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="769"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1ae71b94971409bb00ea0dd14fdc988885" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="de/dcb/classasg_1_1detail_1_1AnaToolConfig" kindref="compound">detail::AnaToolConfig</ref> &amp;</type>
        <definition>const detail::AnaToolConfig&amp; asg::final&lt; T &gt;::config</definition>
        <argsstring>() const </argsstring>
        <name>config</name>
        <briefdescription>
<para>the <ref refid="de/dcb/classasg_1_1detail_1_1AnaToolConfig" kindref="compound">detail::AnaToolConfig</ref> for this handle </para>        </briefdescription>
        <detaileddescription>
<para>This is mostly meant for internal use by the setProperty method, not for use by the end-user</para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="782"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a45330e516990db371d083950554b1ac7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::allowEmpty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>allowEmpty</name>
        <briefdescription>
<para>whether the user is allowed to configure this with an empty tool handle </para>        </briefdescription>
        <detaileddescription>
<para>This normally defaults to whether the developer initialized this to a valid ToolHandle to begin with, but depending on the situation it can be overridden.</para><para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="795"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1aeac1daf105556564fc75b327b47b27e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void asg::final&lt; T &gt;::setAllowEmpty</definition>
        <argsstring>(bool val_allowEmpty=true) noexcept</argsstring>
        <name>setAllowEmpty</name>
        <param>
          <type>bool</type>
          <declname>val_allowEmpty</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>set the value of <ref refid="d0/de4/classasg_1_1final_1a45330e516990db371d083950554b1ac7" kindref="member">allowEmpty</ref> </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>no-fail </para></simplesect>
<simplesect kind="pre"><para>!isInitialized() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="804"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1ab29a695aeb63e8479f4a5c0af2de1b0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::isConfigurable</definition>
        <argsstring>() const </argsstring>
        <name>isConfigurable</name>
        <briefdescription>
<para>whether the tool can be configured by us, i.e. whether properties set via <ref refid="d0/de4/classasg_1_1final_1a7c468e080bf1e5614dc67439c4829509" kindref="member">setProperty</ref> will be used for something </para>        </briefdescription>
        <detaileddescription>
<para>For the most part this is the reverse of <ref refid="d0/de4/classasg_1_1final_1a53d9fe76e139f84660c80b26308121b2" kindref="member">isUserConfigured</ref> except some shared tools may register as not user configured and not configurable either. if the properties set are used to generate debugging output even a user configured tool may register as configurable.</para><para><simplesect kind="par"><title>Guarantee</title><para>no-fail  this may go away at some point as we may be using the properties for more and more things (e.g. info printouts) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="826"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1ae9562f8842d589057cd4363ba41cdd21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::inPremakeState</definition>
        <argsstring>() const noexcept</argsstring>
        <name>inPremakeState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="830" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="830" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a58e74c4e2542e89face588f88cf35d8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool asg::final&lt; T &gt;::inBrokenState</definition>
        <argsstring>() const noexcept</argsstring>
        <name>inBrokenState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="835" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="835" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1aa1d71f8393b96a468c317842add28b11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode asg::final&lt; T &gt;::make</definition>
        <argsstring>()</argsstring>
        <name>make</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="840" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="840" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a125c7e264dc0db32ef94928d4abe511c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>asg::final&lt; T &gt;::ASG_DEPRECATED</definition>
        <argsstring>(&quot;please use setType() or setTypeAndName() instead&quot;) StatusCode make(std</argsstring>
        <name>ASG_DEPRECATED</name>
        <param>
          <type>&quot;please use setType() or setTypeAndName() instead&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="845" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="844" bodyend="851"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a6bbf340b41217c1254034aadc7fa5e12" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>detail::AnaToolHandleMode</type>
        <definition>detail::AnaToolHandleMode asg::final&lt; T &gt;::getMode</definition>
        <argsstring>(std::shared_ptr&lt; detail::AnaToolShare &gt; &amp;sharedTool) const </argsstring>
        <name>getMode</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="df/dff/classasg_1_1detail_1_1AnaToolShare" kindref="compound">detail::AnaToolShare</ref> &gt; &amp;</type>
          <declname>sharedTool</declname>
        </param>
        <briefdescription>
<para>get the mode with which this ToolHandle will be initialized </para>        </briefdescription>
        <detaileddescription>
<para>This exists in two modes, one passing back a shared tool pointer and one without it. as a rule of thumb, the version passing back the shared tool should be used by initialize, whereas all the places just wanting to check that will happen can/should call the version without.</para><para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>out of memory II </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="955"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1afc8e29a783983cbb511e7194160cbe78" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>detail::AnaToolHandleMode</type>
        <definition>detail::AnaToolHandleMode asg::final&lt; T &gt;::getMode</definition>
        <argsstring>() const </argsstring>
        <name>getMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><copydoc link="getMode"></copydoc>
 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="960"/>
      </memberdef>
      <memberdef kind="function" id="d0/de4/classasg_1_1final_1a56f5ddf145ddd1db38235aa6d82fa09b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>StatusCode</type>
        <definition>StatusCode asg::final&lt; T &gt;::makeToolRetrieve</definition>
        <argsstring>(T *&amp;toolPtr, ToolHandle&lt; T &gt; &amp;toolHandle) const </argsstring>
        <name>makeToolRetrieve</name>
        <param>
          <type><ref refid="d1/def/classT" kindref="compound">T</ref> *&amp;</type>
          <declname>toolPtr</declname>
        </param>
        <param>
          <type>ToolHandle&lt; <ref refid="d1/def/classT" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>toolHandle</declname>
        </param>
        <briefdescription>
<para>make a tool by retrieving the ToolHandle </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Guarantee</title><para>strong </para></simplesect>
<simplesect kind="par"><title>Failures</title><para>tool creation failures </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="975"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a modified tool handle that allows its owner to configure new tools from the C++ side </para>    </briefdescription>
    <detaileddescription>
<para>One of the main differences between RootCore and <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> is that RootCore lacks a configuration manager. This means that in RootCore we have to create and configure all tools on the spot, which is not (easily) possible in <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref>. This particular tool handle provides a dual-use way of doing so, while introducing a number of important safety pre-cautions that are lacking on the RootCore side.</para><para>The primary (or at least original) purpose of this tool handle was to support dual-use analysis frameworks. For these the actual configuration of the <ref refid="d2/d4c/namespaceCP" kindref="compound">CP</ref> tools is a critical component, and having to configure them separately in RootCore and <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> is a potential source of rather difficult to track down bugs. An unfortunate side-effect of this is that we can&apos;t use the <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> configuration mechanism. Once we have a dual-use configuration manager it will hopefully provide a more attractive option.</para><para><ref refid="d4/dc4/structA" kindref="compound">A</ref> secondary benefit is that this allows to create and configure tools on the <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> side without having to write configuration files. This is particularly beneficial when writing unit tests where you have to create a lot of rather short-lived tools and where separate configuration files would be impractical. It may also be beneficial for new users who can (at first) be turned off by the complexity of <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> configuration.</para><para>The basic interface is a mix between the ToolHandle interface for accessing the tool, and the <ref refid="d5/dbb/classasg_1_1AsgTool" kindref="compound">AsgTool</ref> interface for configuring/initializing the tools. In addition it allows to set this ToolHandle as a property on another configurable, to allow configuring it via the standard configuration mechanisms.</para><para>If a parent tool is specified, the tool is private (and this tool handle is modeled after unique_ptr). If no parent tool is specified, the tool is public/shared (and this tool handle is modeled after shared_ptr). In public/shared mode, if you create and initialize one tool it is then available for use by other tool handles registered with the same name and type. The subsequent tool handles with that name will then automatically pick up the tool in the configuration set by the first tool handle. The user still has to call <ref refid="d0/de4/classasg_1_1final_1a3bcf51336bed923d4dd630748f9c9585" kindref="member">initialize()</ref> on the tool handle before using the tool. While it is allowed to call the setProperty method on those tool handles these calls will be effectively ignored. The net effect of that is that as a user of a handle for a shared tool you don&apos;t have to worry about whether you are the one creating the tool or just using it, you just initialize the tool handle in the same way.</para><para>The tool handle can also be declared as a property on the parent tool by using the ToolHandle provided via its handle member function. This allows the user to override the configuration done in the parent tool via the job options file in <ref refid="d5/dc5/namespaceAthena" kindref="compound">Athena</ref> or via setProperty in RootCore. Like for shared tools, initialize still has to be called and the calls to setProperty get ignored. This is so that inside the parent tool you don&apos;t have to write any special detection code to see whether the user configured the AnaToolHandle or if you need to do so yourself. Instead, you can just write your code as if the user didn&apos;t configure your tool handle and if the user does, the tool handle will automatically switch over.</para><para>There are a number of ways of how a tool can be created/accessed through an AnaToolHandle (in *increasing* order of precedence):<itemizedlist>
<listitem><para>normally an AnaToolHandle will create its tool based on the configured type and properties under the configured name.</para></listitem><listitem><para>if an AnaToolHandle has been created without a parent (i.e. as a public tool) and another AnaToolHandle already has created a public tool with the same name it will use and share that already configured tool.</para></listitem><listitem><para>each AnaToolHandle can be declared as a property on the parent tool, allowing to configure the AnaToolHandle that way. if the user configures the AnaToolHandle that way, it will take precedence over any properties set on the AnaToolHandle.</para></listitem><listitem><para>for the future it is foreseen to provide a second property on the parent tool to allow the user picking a particular creation or access pattern, overriding the auto-detected default </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="6878">
        <label>string</label>
      </node>
      <node id="6876">
        <label>asg::detail::AnaToolCleanup</label>
        <link refid="da/d8e/classasg_1_1detail_1_1AnaToolCleanup"/>
      </node>
      <node id="6875">
        <label>asg::final&lt; T &gt;</label>
        <link refid="d0/de4/classasg_1_1final"/>
        <childnode refid="6876" relation="usage">
          <edgelabel>m_cleanup</edgelabel>
        </childnode>
        <childnode refid="6877" relation="usage">
          <edgelabel>m_config</edgelabel>
        </childnode>
        <childnode refid="6878" relation="usage">
          <edgelabel>m_originalTypeAndName</edgelabel>
          <edgelabel>m_parentName</edgelabel>
          <edgelabel>m_name</edgelabel>
        </childnode>
      </node>
      <node id="6877">
        <label>asg::detail::AnaToolConfig</label>
        <link refid="de/dcb/classasg_1_1detail_1_1AnaToolConfig"/>
        <childnode refid="6878" relation="usage">
          <edgelabel>m_type</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" line="452" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/AsgTools/AsgTools/AnaToolHandle.h" bodystart="451" bodyend="985"/>
    <listofallmembers>
      <member refid="d0/de4/classasg_1_1final_1a45330e516990db371d083950554b1ac7" prot="public" virt="non-virtual"><scope>asg::final</scope><name>allowEmpty</name></member>
      <member refid="d0/de4/classasg_1_1final_1abd115b58ab0443447c834eee5b47f0b4" prot="public" virt="non-virtual"><scope>asg::final</scope><name>AnaToolHandle</name></member>
      <member refid="d0/de4/classasg_1_1final_1a01e32f6c3245f802884497260360d121" prot="public" virt="non-virtual"><scope>asg::final</scope><name>AnaToolHandle</name></member>
      <member refid="d0/de4/classasg_1_1final_1a452b5bda6eec84e57ba0dae8e2518326" prot="public" virt="non-virtual"><scope>asg::final</scope><name>AnaToolHandle</name></member>
      <member refid="d0/de4/classasg_1_1final_1a125c7e264dc0db32ef94928d4abe511c" prot="public" virt="non-virtual"><scope>asg::final</scope><name>ASG_DEPRECATED</name></member>
      <member refid="d0/de4/classasg_1_1final_1ae71b94971409bb00ea0dd14fdc988885" prot="public" virt="non-virtual"><scope>asg::final</scope><name>config</name></member>
      <member refid="d0/de4/classasg_1_1final_1a645db078ffad3cf4eb84f3b19b340728" prot="public" virt="non-virtual"><scope>asg::final</scope><name>declarePropertyFor</name></member>
      <member refid="d0/de4/classasg_1_1final_1a48e487c7c448e10d287d32006cc21085" prot="public" virt="non-virtual"><scope>asg::final</scope><name>empty</name></member>
      <member refid="d0/de4/classasg_1_1final_1aac1c3bec6cfd75fc6f98407882fd1dff" prot="public" virt="non-virtual"><scope>asg::final</scope><name>fullName</name></member>
      <member refid="d0/de4/classasg_1_1final_1a3f878f8370da9aa12c9f79c5f00596ce" prot="public" virt="non-virtual"><scope>asg::final</scope><name>get</name></member>
      <member refid="d0/de4/classasg_1_1final_1ad84fb30c2d7d22e515851ef124ab8e13" prot="public" virt="non-virtual"><scope>asg::final</scope><name>get</name></member>
      <member refid="d0/de4/classasg_1_1final_1a4a517de27657324a89ced84a54e3de83" prot="public" virt="non-virtual"><scope>asg::final</scope><name>getHandle</name></member>
      <member refid="d0/de4/classasg_1_1final_1a6bbf340b41217c1254034aadc7fa5e12" prot="private" virt="non-virtual"><scope>asg::final</scope><name>getMode</name></member>
      <member refid="d0/de4/classasg_1_1final_1afc8e29a783983cbb511e7194160cbe78" prot="private" virt="non-virtual"><scope>asg::final</scope><name>getMode</name></member>
      <member refid="d0/de4/classasg_1_1final_1a58e74c4e2542e89face588f88cf35d8a" prot="public" virt="non-virtual"><scope>asg::final</scope><name>inBrokenState</name></member>
      <member refid="d0/de4/classasg_1_1final_1a3bcf51336bed923d4dd630748f9c9585" prot="public" virt="non-virtual"><scope>asg::final</scope><name>initialize</name></member>
      <member refid="d0/de4/classasg_1_1final_1ae9562f8842d589057cd4363ba41cdd21" prot="public" virt="non-virtual"><scope>asg::final</scope><name>inPremakeState</name></member>
      <member refid="d0/de4/classasg_1_1final_1ab29a695aeb63e8479f4a5c0af2de1b0f" prot="public" virt="non-virtual"><scope>asg::final</scope><name>isConfigurable</name></member>
      <member refid="d0/de4/classasg_1_1final_1a3be68efa32bcb3dbce0939a5fba75f0b" prot="public" virt="non-virtual"><scope>asg::final</scope><name>isInitialized</name></member>
      <member refid="d0/de4/classasg_1_1final_1a9fd03ac010f919790e7f89d843e1976d" prot="public" virt="non-virtual"><scope>asg::final</scope><name>isPublic</name></member>
      <member refid="d0/de4/classasg_1_1final_1a53d9fe76e139f84660c80b26308121b2" prot="public" virt="non-virtual"><scope>asg::final</scope><name>isUserConfigured</name></member>
      <member refid="d0/de4/classasg_1_1final_1a786fd649e325f1575e2feac0c0aace04" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_allowEmpty</name></member>
      <member refid="d0/de4/classasg_1_1final_1a4e0635a06b723d8db2048e7c754a34d3" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_cleanup</name></member>
      <member refid="d0/de4/classasg_1_1final_1a0bd4f578c55b0bec8bab9ac6263df040" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_config</name></member>
      <member refid="d0/de4/classasg_1_1final_1a4c66dfcf9a83bf8ec7527596db648522" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_handleUser</name></member>
      <member refid="d0/de4/classasg_1_1final_1acbd6d5adc31fd2854ac7bdd69e4b3c06" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_initializeMutex</name></member>
      <member refid="d0/de4/classasg_1_1final_1a90b35e014709fab6dfedbfea72185f25" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_mode</name></member>
      <member refid="d0/de4/classasg_1_1final_1a2839eb9b56d7765ef13e21af0fb69cbb" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_name</name></member>
      <member refid="d0/de4/classasg_1_1final_1a72d7a5ef9e1bcb2d4d51066afa41e478" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_originalTypeAndName</name></member>
      <member refid="d0/de4/classasg_1_1final_1a81665674dbd384c61f24dc7fe070445d" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_parentName</name></member>
      <member refid="d0/de4/classasg_1_1final_1af56d175d2a57a7e936cca5aa242d9654" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_parentPtr</name></member>
      <member refid="d0/de4/classasg_1_1final_1a5332492b4a4d753be0005afdf9f39007" prot="private" virt="non-virtual"><scope>asg::final</scope><name>m_toolPtr</name></member>
      <member refid="d0/de4/classasg_1_1final_1aa1d71f8393b96a468c317842add28b11" prot="public" virt="non-virtual"><scope>asg::final</scope><name>make</name></member>
      <member refid="d0/de4/classasg_1_1final_1a56f5ddf145ddd1db38235aa6d82fa09b" prot="private" virt="non-virtual"><scope>asg::final</scope><name>makeToolRetrieve</name></member>
      <member refid="d0/de4/classasg_1_1final_1a539c724beda713cc643012597b00533c" prot="public" virt="non-virtual"><scope>asg::final</scope><name>mode</name></member>
      <member refid="d0/de4/classasg_1_1final_1aabc085ce0a6930e1ef36272a4d9803de" prot="public" virt="non-virtual"><scope>asg::final</scope><name>name</name></member>
      <member refid="d0/de4/classasg_1_1final_1a214da92b342e749857923ab44137901e" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator*</name></member>
      <member refid="d0/de4/classasg_1_1final_1a9e55f6f1f4509a093f23217fede6d2fe" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator*</name></member>
      <member refid="d0/de4/classasg_1_1final_1affa5062588170e6e92328996da316daa" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator-&gt;</name></member>
      <member refid="d0/de4/classasg_1_1final_1aa0cd614af4c820f7d7e564a7e8ba1c58" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator-&gt;</name></member>
      <member refid="d0/de4/classasg_1_1final_1a7d005ba8445d6b574e2b962658c26d46" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator=</name></member>
      <member refid="d0/de4/classasg_1_1final_1a9aa81696d14793696a60796ad9b9d6c1" prot="public" virt="non-virtual"><scope>asg::final</scope><name>operator=</name></member>
      <member refid="d0/de4/classasg_1_1final_1a2c3de5b5b7a68f971a64f8403766f881" prot="public" virt="non-virtual"><scope>asg::final</scope><name>retrieve</name></member>
      <member refid="d0/de4/classasg_1_1final_1aeac1daf105556564fc75b327b47b27e3" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setAllowEmpty</name></member>
      <member refid="d0/de4/classasg_1_1final_1ae1562ad4119ac5557df7fc9154fd7423" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setName</name></member>
      <member refid="d0/de4/classasg_1_1final_1a7c468e080bf1e5614dc67439c4829509" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setProperty</name></member>
      <member refid="d0/de4/classasg_1_1final_1a730c6f716dfa8afac08f564978df87ee" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setType</name></member>
      <member refid="d0/de4/classasg_1_1final_1a83d329de595e2d7a0f38a368fa78126d" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setTypeAndName</name></member>
      <member refid="d0/de4/classasg_1_1final_1a9ff0ea472d4224cce401f4b3806da11b" prot="public" virt="non-virtual"><scope>asg::final</scope><name>setTypeAndName</name></member>
      <member refid="d0/de4/classasg_1_1final_1a708d8338a5cf8d75c9c1f9fbeffed61f" prot="public" virt="non-virtual"><scope>asg::final</scope><name>swap</name></member>
      <member refid="d0/de4/classasg_1_1final_1a3c2a2a20c02ce261c3ae6b98ae597309" prot="public" virt="non-virtual"><scope>asg::final</scope><name>testInvariant</name></member>
      <member refid="d0/de4/classasg_1_1final_1a02bcde81819a2799d2d5f136bec558fd" prot="public" virt="non-virtual"><scope>asg::final</scope><name>type</name></member>
      <member refid="d0/de4/classasg_1_1final_1a38183c0ed232f68cdc163919fbf85646" prot="public" virt="non-virtual"><scope>asg::final</scope><name>typeAndName</name></member>
      <member refid="d0/de4/classasg_1_1final_1afce09289af13ebbc6e176b30781335d7" prot="public" virt="non-virtual"><scope>asg::final</scope><name>~AnaToolHandle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
