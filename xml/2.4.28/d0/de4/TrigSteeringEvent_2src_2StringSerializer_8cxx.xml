<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/de4/TrigSteeringEvent_2src_2StringSerializer_8cxx" kind="file">
    <compoundname>StringSerializer.cxx</compoundname>
    <includes local="no">cstring</includes>
    <includes refid="da/d4a/TrigSteeringEvent_2TrigSteeringEvent_2StringSerializer_8h" local="yes">TrigSteeringEvent/StringSerializer.h</includes>
    <incdepgraph>
      <node id="328402">
        <label>iterator</label>
      </node>
      <node id="328403">
        <label>stdint.h</label>
      </node>
      <node id="328397">
        <label>TrigSteeringEvent/StringSerializer.h</label>
        <link refid="da/d4a/TrigSteeringEvent_2TrigSteeringEvent_2StringSerializer_8h_source"/>
        <childnode refid="328398" relation="include">
        </childnode>
        <childnode refid="328399" relation="include">
        </childnode>
        <childnode refid="328400" relation="include">
        </childnode>
        <childnode refid="328401" relation="include">
        </childnode>
        <childnode refid="328402" relation="include">
        </childnode>
        <childnode refid="328403" relation="include">
        </childnode>
      </node>
      <node id="328400">
        <label>vector</label>
      </node>
      <node id="328399">
        <label>sstream</label>
      </node>
      <node id="328401">
        <label>cstdlib</label>
      </node>
      <node id="328398">
        <label>iostream</label>
      </node>
      <node id="328395">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/src/StringSerializer.cxx</label>
        <link refid="TrigSteeringEvent/src/StringSerializer.cxx"/>
        <childnode refid="328396" relation="include">
        </childnode>
        <childnode refid="328397" relation="include">
        </childnode>
      </node>
      <node id="328396">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innernamespace refid="d0/d1c/namespaceTrigSteeringEvent">TrigSteeringEvent</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigSteeringEvent/StringSerializer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TrigSteeringEvent<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>StringSerializer::s_delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1a401d3809248a4ad4c8c9e53d5b6adef6" kindref="member">StringSerializer::serialize</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>strings,<sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>storage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>m_ostream.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>ostream<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>strings<sp/>into<sp/>m_ostream<sp/>with<sp/>delimiter<sp/>after<sp/>each<sp/>element<sp/>(even<sp/>after<sp/>last<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>copy(strings.begin(),<sp/>strings.end(),<sp/>std::ostream_iterator&lt;std::string&gt;(m_ostream,<sp/>s_delimiter));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>strings.size()<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;ser:<sp/>&quot;<sp/>&lt;&lt;<sp/>strings[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>sizeToReserve<sp/>=<sp/>m_ostream.str().size();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pad<sp/>with<sp/>&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeToPad<sp/>=<sp/>getPadding(sizeToReserve);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sizeToPad<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>sizeToReserve<sp/>+=<sp/>sizeToPad;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>sizeToPad;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_ostream<sp/>&lt;&lt;<sp/>s_delimiter;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>m_ostream.flush();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>carray<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[sizeToReserve];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>strncpy(carray,<sp/>m_ostream.str().c_str(),<sp/>sizeToReserve);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*<sp/>uarray<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*)<sp/>carray;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>storage.push_back(strings.size());<sp/></highlight><highlight class="comment">//<sp/>put<sp/>number<sp/>of<sp/>strings<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>storage.insert(storage.end(),<sp/>&amp;uarray[0],<sp/>&amp;uarray[sizeToReserve/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)]);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;reserved<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>sizeToReserve<sp/>&lt;&lt;<sp/>&quot;,<sp/>pad<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>sizeToPad</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>storage<sp/>size<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>storage.size()<sp/>&lt;&lt;<sp/>&quot;,<sp/>serialized:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/>for<sp/>(<sp/>unsigned<sp/>int<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>sizeToReserve;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>(int)carray[i]<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;(&quot;<sp/>&lt;&lt;<sp/>(char)carray[i]<sp/>&lt;&lt;<sp/>&quot;)&quot;;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>carray;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1a401d3809248a4ad4c8c9e53d5b6adef6" kindref="member">StringSerializer::serialize</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>storage<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tmp(1,<sp/>str);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1a401d3809248a4ad4c8c9e53d5b6adef6" kindref="member">serialize</ref>(tmp,<sp/>storage);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">std::size_t<sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1acebca33171c561c98baa5bdbdfadd6b7" kindref="member">StringSerializer::deserialize</ref><sp/>(std::vector&lt;uint32_t&gt;::const_iterator<sp/>first,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;::const_iterator<sp/>last,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;&amp;<sp/>strings)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::size_t<sp/>storageSize<sp/>=<sp/>std::distance(first,<sp/>last);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>storageSize<sp/>&lt;=<sp/>1<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storageSize;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numOfStrings<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>storage<sp/>into<sp/>array<sp/>of<sp/>uint32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>uint32_t<sp/>*<sp/>uarray<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>uint32_t[storageSize-1];</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;::const_iterator<sp/>itBegin<sp/>=<sp/>first;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>advance(itBegin,<sp/>1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>copy(itBegin,<sp/>last,<sp/>&amp;uarray[0]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;deserialized:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(<sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>storage.size()-1;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>uarray[i]<sp/>;</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>carray<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)uarray;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::string<sp/>whole(carray,<sp/>(storageSize-1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>m_istream.clear();<sp/><sp/></highlight><highlight class="comment">//<sp/>istream<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>m_istream.str(whole);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::string<sp/>one;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readInStrings=0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>std::size_t<sp/>nChars=0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>m_istream.good()<sp/>&amp;&amp;<sp/>readInStrings<sp/>&lt;<sp/>numOfStrings<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(m_istream,<sp/>one,<sp/>s_delimiter[0]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>strings.push_back(one);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>readInStrings++;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>nChars<sp/>+=<sp/>one.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>uarray;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>(nChars+getPadding(nChars))/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>uint32_t<sp/>words<sp/>(incl.<sp/>header)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">std::size_t<sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1acebca33171c561c98baa5bdbdfadd6b7" kindref="member">StringSerializer::deserialize</ref><sp/>(std::vector&lt;uint32_t&gt;::const_iterator<sp/>first,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;::const_iterator<sp/>last,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::size_t<sp/>nWords<sp/>=<sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1acebca33171c561c98baa5bdbdfadd6b7" kindref="member">deserialize</ref>(first,<sp/>last,<sp/>tmp);<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp.size()<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/>tmp[0];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nWords;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/dec/classTrigSteeringEvent_1_1StringSerializer_1aed289487b224d8e62c9eb68451161f5e" kindref="member">StringSerializer::inquireSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>storage)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>storage.size()<sp/>&lt;=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage[0];</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>TrigSteeringEvent</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigSteeringEvent/src/StringSerializer.cxx"/>
  </compounddef>
</doxygen>
