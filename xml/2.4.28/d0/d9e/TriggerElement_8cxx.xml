<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d9e/TriggerElement_8cxx" kind="file">
    <compoundname>TriggerElement.cxx</compoundname>
    <includes local="no">stdexcept</includes>
    <includes local="no">iterator</includes>
    <includes local="no">functional</includes>
    <includes local="no">sstream</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes refid="d5/d81/TrigNavStructure_2Types_8h" local="yes">TrigNavStructure/Types.h</includes>
    <includes refid="d7/d71/TriggerElement_8h" local="yes">TrigNavStructure/TriggerElement.h</includes>
    <incdepgraph>
      <node id="328408">
        <label>functional</label>
      </node>
      <node id="328407">
        <label>iterator</label>
      </node>
      <node id="328410">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="328405">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx</label>
        <link refid="TriggerElement.cxx"/>
        <childnode refid="328406" relation="include">
        </childnode>
        <childnode refid="328407" relation="include">
        </childnode>
        <childnode refid="328408" relation="include">
        </childnode>
        <childnode refid="328409" relation="include">
        </childnode>
        <childnode refid="328410" relation="include">
        </childnode>
        <childnode refid="328411" relation="include">
        </childnode>
        <childnode refid="328414" relation="include">
        </childnode>
      </node>
      <node id="328412">
        <label>stdint.h</label>
      </node>
      <node id="328406">
        <label>stdexcept</label>
      </node>
      <node id="328417">
        <label>string</label>
      </node>
      <node id="328415">
        <label>map</label>
      </node>
      <node id="328413">
        <label>boost/variant.hpp</label>
      </node>
      <node id="328411">
        <label>TrigNavStructure/Types.h</label>
        <link refid="d5/d81/TrigNavStructure_2Types_8h_source"/>
        <childnode refid="328412" relation="include">
        </childnode>
        <childnode refid="328413" relation="include">
        </childnode>
      </node>
      <node id="328414">
        <label>TrigNavStructure/TriggerElement.h</label>
        <link refid="d7/d71/TriggerElement_8h_source"/>
        <childnode refid="328415" relation="include">
        </childnode>
        <childnode refid="328416" relation="include">
        </childnode>
        <childnode refid="328417" relation="include">
        </childnode>
        <childnode refid="328412" relation="include">
        </childnode>
        <childnode refid="328418" relation="include">
        </childnode>
        <childnode refid="328411" relation="include">
        </childnode>
      </node>
      <node id="328416">
        <label>vector</label>
      </node>
      <node id="328409">
        <label>sstream</label>
      </node>
      <node id="328418">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d9e/TriggerElement_8cxx_1a14a40dfc95f86107725bc1c3c13c6508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insertUint16ToUint32Vector</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;v, uint16_t val, unsigned count)</argsstring>
        <name>insertUint16ToUint32Vector</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx" line="112" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d0/d9e/TriggerElement_8cxx_1a2fba13a15142a8119a5f4a5103c2477b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void extractUint16FromUint32Vector</definition>
        <argsstring>(std::vector&lt; uint32_t &gt;::const_iterator &amp;it, uint16_t &amp;val, unsigned count)</argsstring>
        <name>extractUint16FromUint32Vector</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;::const_iterator &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>uint16_t &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx" line="122" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx" bodystart="122" bodyend="129"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/Types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TrigNavStructure/TriggerElement.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">HLT;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">TriggerElement::TriggerElement()</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_state(activeState),<sp/>m_id(0),<sp/>m_transient(0)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">TriggerElement::TriggerElement(te_id_type<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ghost,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nofwd)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_state(activeState),<sp/>m_id(id),<sp/>m_transient(0)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ghost<sp/>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>m_state<sp/>|=<sp/>ghostState;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nofwd<sp/>)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_state<sp/>|=<sp/>nofwdState;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">TriggerElement::~TriggerElement()<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>void<sp/>TriggerElement::reset()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>//</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>m_uses.clear();</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>m_prev.clear();</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>m_relations.clear();<sp/>//&lt;<sp/>do<sp/>not<sp/>worry!<sp/>map<sp/>is<sp/>clearing<sp/>recursivelly<sp/>lists<sp/>also</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ab8133c4624015a6be64e059174fb512f" kindref="member" tooltip="add helper for new feature">TriggerElement::addFeature</ref>(<sp/>class_id_type<sp/>clid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ObjectIndex&amp;<sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>forget)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ab8133c4624015a6be64e059174fb512f" kindref="member" tooltip="add helper for new feature">addFeature</ref>(FeatureAccessHelper(clid,<sp/>index,<sp/>forget));</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ab8133c4624015a6be64e059174fb512f" kindref="member" tooltip="add helper for new feature">TriggerElement::addFeature</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FeatureAccessHelper&amp;<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_features_per_te<sp/>=<sp/>0xfff;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_uses.size()<sp/>==<sp/>max_features_per_te-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/><sp/>count<sp/>of<sp/>features<sp/>per<sp/>TE<sp/>exceeds<sp/>the<sp/>limitation,<sp/>further<sp/>attach<sp/>operations<sp/>are<sp/>ignored&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_uses.size()<sp/>==<sp/>max_features_per_te<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(<sp/>m_uses.size()<sp/>&gt;<sp/>100<sp/>)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;INFO<sp/>-<sp/>many<sp/>features<sp/>per<sp/>TE<sp/>&quot;<sp/>&lt;&lt;<sp/>f.getCLID()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>m_uses.push_back(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>m_prev.push_back(<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ae84fe374e160f8cce3b51738c070ff4d" kindref="member" tooltip="set state of the TriggerElement">TriggerElement::setActiveState</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_state<sp/>&amp;<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5a10c397508b560d26c492456a755813aa" kindref="member" tooltip="this TE is of type which stops fwd deactivation">nofwdState</ref><sp/>)<sp/></highlight><highlight class="comment">//<sp/>this<sp/>TE<sp/>is<sp/>immune<sp/>to<sp/>state<sp/>changes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>?<sp/>m_state<sp/>|=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5a771867259b5f17cabc6b0c47eff95009" kindref="member" tooltip="this bit is keeping active/inactive state of TE">activeState</ref><sp/>:<sp/><sp/>m_state<sp/>&amp;=<sp/>~<ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5a771867259b5f17cabc6b0c47eff95009" kindref="member" tooltip="this bit is keeping active/inactive state of TE">activeState</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Deactivating<sp/>&quot;<sp/>&lt;&lt;<sp/>m_id<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>propagate<sp/>forward<sp/>the<sp/>state<sp/>of<sp/>this<sp/>TE<sp/>if<sp/>deactivated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>activated<sp/>then<sp/>that<sp/>attempt<sp/>is<sp/>illogical,<sp/>theredore<sp/>not<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>state<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>node<sp/>is<sp/>terminal<sp/>or<sp/>it<sp/>is<sp/>special<sp/>TE<sp/>type<sp/>which<sp/>is<sp/>holding<sp/>fwd<sp/>deactivation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">seedsRelation</ref>).empty()<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Propagating<sp/>deactivation<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">seedsRelation</ref>).begin();<sp/>it<sp/>!=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ad1d65676cb6e3f810caaa517f20a6a06" kindref="member" tooltip="returns reference to the likns to other TriggerElements related by relation r">getRelated</ref>(<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">seedsRelation</ref>).end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>(*it)-&gt;setActiveState(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerElement::setErrorState(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>?<sp/>m_state<sp/>|=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5ac98e7b0a66bb8fff220137fd6dc84a1c" kindref="member" tooltip="somewhere in the algorithms dealing with this TE there was an error">errorState</ref><sp/>:<sp/>m_state<sp/>&amp;=<sp/>~<ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5ac98e7b0a66bb8fff220137fd6dc84a1c" kindref="member" tooltip="somewhere in the algorithms dealing with this TE there was an error">errorState</ref>;<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerElement::setGhostState(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>state<sp/>?<sp/>m_state<sp/>|=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5a22f74740b332da89da07e76705cbf6ca" kindref="member" tooltip="this TE is of type ghost/evaporating/one can&amp;#39;t attach features to this TE">ghostState</ref><sp/>:<sp/>m_state<sp/>&amp;=<sp/>~<ref refid="dd/db8/classHLT_1_1TriggerElement_1a29e0e5b10cbde6062b279390e9d52cf5a22f74740b332da89da07e76705cbf6ca" kindref="member" tooltip="this TE is of type ghost/evaporating/one can&amp;#39;t attach features to this TE">ghostState</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">TriggerElement::relate</ref>(<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te,<sp/>Relation<sp/>r<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>secure<sp/>form<sp/>multiple<sp/>relations<sp/>of<sp/>the<sp/>same<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>silently<sp/>ignoring<sp/>if<sp/>already<sp/>related</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>his<sp/>helps<sp/>if<sp/>one<sp/>wants<sp/>the<sp/>Topo<sp/>TE<sp/>to<sp/>merge<sp/>several<sp/>RoIs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>find(<ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[r].begin(),<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[r].end(),<sp/>te)<sp/>==<sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[r].end()<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[r].push_back(te);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">TriggerElement::relate</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;TriggerElement*&gt;<sp/>tes,<sp/>Relation<sp/>r<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>secure<sp/>form<sp/>multiple<sp/>relations<sp/>of<sp/>the<sp/>same<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>it;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>=<sp/>tes.begin();<sp/>it<sp/>!=<sp/>tes.end();<sp/>++it<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref>(*it,<sp/>r);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>SERIALIZATION</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TriggerElement::enquireId(<sp/>std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>inputIt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unsigned(*inputIt);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insertUint16ToUint32Vector(std::vector&lt;uint32_t&gt;&amp;<sp/>v,<sp/>uint16_t<sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>s=0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>%<sp/>2<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>(uint32_t(val)<sp/>&lt;&lt;<sp/>16)<sp/>&amp;<sp/>0xffff0000;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>v.push_back(s);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>v.back()<sp/>|=<sp/>uint32_t(val<sp/>&amp;<sp/>0xffff);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>extractUint16FromUint32Vector(<sp/>std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>it,<sp/>uint16_t&amp;<sp/>val,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>count<sp/>%<sp/>2<sp/>==<sp/>0<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>do<sp/>need<sp/>to<sp/>increment<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>((*it)<sp/>&gt;&gt;<sp/>16<sp/>)<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(*it)<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4b408f1dd8cdd0b86c777492fa73cc9f" kindref="member" tooltip="serializes TE">TriggerElement::serialize</ref>(<sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;TriggerElement*,<sp/>uint16_t&gt;&amp;<sp/>keys,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/></highlight><highlight class="comment">/*previous*/</highlight><highlight class="normal"><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(m_id);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>record<sp/>the<sp/>TE<sp/>id<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>summaryIndex<sp/>=<sp/>output.size();<sp/><sp/></highlight><highlight class="comment">//<sp/>reserve<sp/>space<sp/>for<sp/>vaious<sp/>caounters<sp/>and<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TriggerElement*&gt;::const_iterator<sp/>teIt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>relationsCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>go<sp/>over<sp/>all<sp/>TE<sp/>which<sp/>seed<sp/>me<sp/>and<sp/>record<sp/>link<sp/>to<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>teIt<sp/>=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">seededByRelation</ref>].begin();<sp/>teIt<sp/>!=<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">seededByRelation</ref>].end();<sp/>++teIt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;TriggerElement*,<sp/>uint16_t&gt;::const_iterator<sp/>key<sp/>=<sp/>keys.find(*teIt);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>key<sp/>!=<sp/>keys.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insertUint16ToUint32Vector(output,<sp/>key-&gt;second,<sp/>relationsCount);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relationsCount++;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>are<sp/>forgotten<sp/>silently<sp/>....<sp/>joke,<sp/>there<sp/>will<sp/>be<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>fact<sp/>that<sp/>the<sp/>to<sp/>create<sp/>TE<sp/>one<sp/>needs<sp/>to<sp/>know<sp/>all<sp/>the<sp/>TEs<sp/>seeding<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>they<sp/>are<sp/>before<sp/>on<sp/>the<sp/>list<sp/>and<sp/>in<sp/>the<sp/>&quot;keys&quot;<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>one<sp/>should<sp/>put<sp/>only<sp/>this<sp/>features<sp/>which<sp/>are<sp/>not<sp/>to<sp/>to<sp/>be<sp/>forget<sp/>(we<sp/>do<sp/>not<sp/>use<sp/>this<sp/>now)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>FeatureAccessHelper<sp/>&gt;::const_iterator<sp/>featuresIt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>featuresCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>featuresIt<sp/>=<sp/>m_uses.begin();<sp/>featuresIt<sp/>!=<sp/>m_uses.end();<sp/>++featuresIt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>featuresIt-&gt;forget()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back<sp/>(<sp/>featuresIt-&gt;getCLID()<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>featuresIt-&gt;getIndex().serialize(output);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>featuresCount++;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>seedingUsesStateWord<sp/>=<sp/>((<ref refid="dd/db8/classHLT_1_1TriggerElement_1afc486c48b05cba5f0ce1bbd8feb692a4" kindref="member" tooltip="relations holder (features outside)">m_relations</ref>[<ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">seededByRelation</ref>].size()<sp/>&lt;&lt;<sp/>20))<sp/>|<sp/>(featuresCount<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(m_state<sp/>&amp;<sp/>0xf);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>output[summaryIndex]<sp/>=<sp/>seedingUsesStateWord;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Serialized<sp/>TE<sp/>id:<sp/>&quot;<sp/>&lt;&lt;<sp/>m_id<sp/>&lt;&lt;<sp/>&quot;<sp/>fea:<sp/>&quot;<sp/>&lt;&lt;<sp/>featuresCount<sp/></highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/>&quot;<sp/>forg:<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>m_uses.size()<sp/>-<sp/>featuresCount</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>rel:<sp/>&quot;&lt;&lt;<sp/>m_relations[seededByRelation].size()<sp/>&lt;&lt;<sp/>&quot;<sp/>raw:<sp/>&quot;<sp/>&lt;&lt;<sp/>seedingUsesStateWord&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ae25428628c8cc1cecee804fb1ac0c95c" kindref="member" tooltip="deserialization">TriggerElement::deserialize</ref>(<sp/>std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>inputIt,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;uint16_t,<sp/>TriggerElement*&gt;&amp;<sp/>keys,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/></highlight><highlight class="comment">/*previous*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>m_id<sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>seedingUsesStateWord<sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>m_state<sp/>=<sp/>seedingUsesStateWord<sp/>&amp;<sp/>0xf;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>(seedingUsesStateWord<sp/>&amp;<sp/>0xfff00000)<sp/>&gt;&gt;<sp/>20;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>featuresAttached<sp/>=<sp/>(seedingUsesStateWord<sp/>&amp;<sp/>0x000fff00)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Try<sp/>DeSerialize<sp/>TE<sp/>id:<sp/>&quot;<sp/>&lt;&lt;<sp/>m_id<sp/>&lt;&lt;<sp/>&quot;<sp/>fea:<sp/>&quot;<sp/>&lt;&lt;<sp/>featuresAttached<sp/>&lt;&lt;<sp/>&quot;<sp/>rel:<sp/>&quot;&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/>&quot;<sp/>raw<sp/>&quot;<sp/>&lt;&lt;<sp/>seedingUsesStateWord<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;uint16_t,<sp/>TriggerElement*&gt;::const_iterator<sp/>id;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>relationsCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>key;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>extractUint16FromUint32Vector(inputIt,<sp/>key,<sp/>relationsCount);<sp/></highlight><highlight class="comment">//<sp/>extract<sp/>the<sp/>key<sp/>from<sp/>the<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>++relationsCount;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>that<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>keys.find(key);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/>keys.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement" kindref="compound" tooltip="TriggerElement is the basic ingreedient of the interface between HLT algorithms and...">TriggerElement</ref>*<sp/>te<sp/>=<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">-&gt;second;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>relate<sp/>(<sp/>te,<sp/>seededByRelation<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>te-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref><sp/>(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1ca26d3d30c92eb68abbdbeaeb762642900" kindref="member" tooltip="what TEs I am seeding">seedsRelation</ref><sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="dd/db8/classHLT_1_1TriggerElement_1a66f9824dff31aafc9cfac3178f015fb8" kindref="member" tooltip="reates given TE to other TE">relate</ref><sp/>(<sp/>te,<sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4ebcb5339eb85e200a31158e9aadce1cabd2d108894f55ce280a742f1dda89408" kindref="member" tooltip="what TEs are seeding me">seededByRelation</ref><sp/>);<sp/></highlight><highlight class="comment">//<sp/>seededBy<sp/>and<sp/>seeds<sp/>are<sp/>reflexive<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prev.reserve(m_prev.size()<sp/>+<sp/>te-&gt;getPreviousFeatures().size());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prev.insert(m_prev.end(),<sp/>te-&gt;getPreviousFeatures().begin(),<sp/>te-&gt;getPreviousFeatures().end()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>rebuild<sp/>previous<sp/>features<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>relationsCount<sp/>%2<sp/>==<sp/>1<sp/>)<sp/><sp/>inputIt++;<sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>do<sp/>this<sp/>because<sp/>if<sp/>number<sp/>of<sp/>features<sp/>is<sp/>odd<sp/>the<sp/>payload<sp/>iterator<sp/>is<sp/>not<sp/>incremented<sp/>by<sp/>extract...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unpack<sp/>features<sp/>holders<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>m_uses.reserve(m_uses.size()<sp/>+<sp/>featuresAttached);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>m_prev.reserve(m_prev.size()<sp/>+<sp/>featuresAttached);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>featuresAttached;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clid<sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>ObjectIndex<sp/>coordinate;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinate.deserialize(inputIt);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1ab8133c4624015a6be64e059174fb512f" kindref="member" tooltip="add helper for new feature">addFeature</ref>(clid,<sp/>coordinate);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>void<sp/>TriggerElement::appendFeaturesKeyPrint(const<sp/>std::vector&lt;FeatureAccessHelper&gt;&amp;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>m_keyPrint.insert(m_keyPrint.end(),<sp/>k.begin(),<sp/>k.end());</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Object<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">TriggerElement::ObjectIndex::ObjectIndex()<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>:<sp/>m_subTypeIndex(invalid_sub_index),<sp/>m_objIndexBegin(invalid_index),<sp/>m_objIndexEnd(invalid_index)<sp/>{}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">TriggerElement::ObjectIndex::ObjectIndex(sub_index_type<sp/>subType,<sp/>index_type<sp/>begin,<sp/>index_type<sp/>end)<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>:<sp/>m_subTypeIndex(subType),<sp/>m_objIndexBegin(begin),<sp/>m_objIndexEnd(end)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(subType<sp/>&gt;=<sp/>invalid_sub_index)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;To<sp/>many<sp/>collections<sp/>of<sp/>one<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>boost::lexical_cast&lt;std::string&gt;(subType)+</highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>0xffff&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">uint16_t<sp/>TriggerElement::ObjectIndex::subTypeIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_subTypeIndex;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="243"><highlight class="comment">uint32_t<sp/>TriggerElement::ObjectIndex::objectIndex()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/>return<sp/>m_objIndexBegin;</highlight></codeline>
<codeline lineno="245"><highlight class="comment">}</highlight></codeline>
<codeline lineno="246"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">uint32_t<sp/><ref refid="dc/d50/classHLT_1_1TriggerElement_1_1ObjectIndex_1afe37ffc5b542b5aeac68c53ad9efbdd0" kindref="member" tooltip="to get object number in th ecollection">TriggerElement::ObjectIndex::objectsBegin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_objIndexBegin;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">uint32_t<sp/>TriggerElement::ObjectIndex::objectsEnd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_objIndexEnd;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerElement::ObjectIndex::updateBeginAndEnd(<sp/>index_type<sp/>begin,<sp/>index_type<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>m_objIndexBegin<sp/>=<sp/>begin;<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>m_objIndexEnd<sp/><sp/><sp/>=<sp/>end;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/d43/DataList_8h_1a331f1405e2b4323d37655e725a8f5b63" kindref="member" tooltip="List ordering relation.">TriggerElement::ObjectIndex::operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ObjectIndex&amp;<sp/>obj)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_subTypeIndex<sp/>!=<sp/>obj.m_subTypeIndex<sp/>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_subTypeIndex<sp/>&lt;<sp/>obj.m_subTypeIndex;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_objIndexBegin<sp/>!=<sp/>obj.m_objIndexBegin<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_objIndexBegin<sp/>&lt;<sp/>obj.m_objIndexBegin;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_objIndexEnd<sp/>&lt;<sp/>obj.m_objIndexEnd;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/db8/classHLT_1_1TriggerElement_1a4b408f1dd8cdd0b86c777492fa73cc9f" kindref="member" tooltip="serializes TE">TriggerElement::ObjectIndex::serialize</ref>(std::vector&lt;uint32_t&gt;&amp;<sp/>output)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>comec<sp/>the<sp/>compression<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>can<sp/>fit<sp/>into<sp/>one<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ie.<sp/>subtypeIndex<sp/>fits<sp/>into<sp/>the<sp/>4<sp/>bits<sp/>(0-8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>begin<sp/><sp/>indexes<sp/>fit<sp/>into<sp/>the<sp/>13<sp/>bits<sp/>(0-8192<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>end<sp/><sp/><sp/><sp/>indexes<sp/>fit<sp/>into<sp/>the<sp/>14<sp/>bits<sp/>(0-16383<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(0<sp/>==<sp/>(m_subTypeIndex<sp/>&amp;<sp/>~0xf))<sp/>&amp;&amp;<sp/>(0<sp/>==<sp/>(objectsBegin()<sp/>&amp;<sp/>~0x1fff))<sp/>&amp;&amp;<sp/>(<sp/>0<sp/>==<sp/>(objectsEnd()<sp/>&amp;<sp/>~0x3fff))<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(0x80000000<sp/>|<sp/>m_subTypeIndex<sp/>|<sp/>objectsEnd()&lt;&lt;<sp/>4<sp/>|<sp/>objectsBegin()<sp/>&lt;&lt;<sp/>18);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;feature<sp/>idx<sp/>ser:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>output.back()<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(0<sp/>==<sp/>(objectsBegin()<sp/>&amp;<sp/>~0xffff))<sp/>&amp;&amp;<sp/>(0<sp/>==<sp/>(objectsEnd()<sp/>&amp;<sp/>~0xffff))<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>can<sp/>fit<sp/>into<sp/>two<sp/>ints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ie.<sp/>subtypeIndex<sp/>fits<sp/>into<sp/>the<sp/>16<sp/>bits<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>begin<sp/><sp/>indexes<sp/>fit<sp/>into<sp/>the<sp/>16<sp/>bits<sp/>(0-65536<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>end<sp/><sp/><sp/><sp/>indexes<sp/>fit<sp/>into<sp/>the<sp/>16<sp/>bits<sp/>(0-65536)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;feature<sp/>idx2:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>m_subTypeIndex<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>m_objIndex<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(m_subTypeIndex);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back((objectsBegin()<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/><sp/>(objectsEnd())<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>use<sp/>3<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(m_subTypeIndex<sp/>|<sp/>0x40000000);<sp/></highlight><highlight class="comment">//<sp/>second<sp/>most<sp/>significant<sp/>bit<sp/>marks<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(objectsBegin());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(objectsEnd());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TriggerElement::ObjectIndex::deserialize(<sp/>std::vector&lt;uint32_t&gt;::const_iterator&amp;<sp/>inputIt)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>compressed<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w<sp/>=<sp/>*inputIt++;<sp/></highlight><highlight class="comment">//<sp/>pickup<sp/>and<sp/>advance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>w<sp/>&amp;<sp/>0x80000000<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>small<sp/>numbers<sp/>(compressed<sp/>to<sp/>one<sp/>word)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subTypeIndex<sp/><sp/>=<sp/>w<sp/>&amp;<sp/>0xf;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objIndexBegin<sp/>=<sp/><sp/>(<sp/>(w&gt;&gt;18)<sp/>&amp;<sp/><sp/>0x1fff<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objIndexEnd<sp/><sp/><sp/>=<sp/><sp/>(w&gt;&gt;4)<sp/>&amp;<sp/>0x3fff;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;feature<sp/>idx<sp/>deser:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>w<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(w<sp/>&amp;<sp/>0x40000000)<sp/>==<sp/>0<sp/>)<sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>medium<sp/>numbers<sp/>(compressed<sp/>to<sp/>2<sp/>words)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>m_subTypeIndex<sp/><sp/>=<sp/>w<sp/>&amp;<sp/>0xffff;<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w2<sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objIndexBegin<sp/>=<sp/>w2<sp/>&gt;&gt;<sp/>16;<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>m_objIndexEnd<sp/><sp/><sp/>=<sp/>w2<sp/>&amp;<sp/>0xffff;<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;feature<sp/>idx2:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>m_subTypeIndex<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>m_objIndex<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>huge<sp/>numbers<sp/>(3<sp/>word<sp/>involved)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_subTypeIndex<sp/><sp/>=<sp/>w<sp/>&amp;<sp/>0xffff;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_objIndexBegin<sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_objIndexEnd<sp/><sp/><sp/>=<sp/>*inputIt++;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>end<sp/>the<sp/>inputIt<sp/>is<sp/>pointing<sp/>outside<sp/>the<sp/>ObjectIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d50/classHLT_1_1TriggerElement_1_1ObjectIndex_1ae4b953d15dc63d4feed9d8c79a3b024c" kindref="member" tooltip="check if idx is the same as this or is within this index">TriggerElement::ObjectIndex::isSameOrWithin</ref><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ObjectIndex*<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;subTypeIndex()<sp/>!=<sp/>idx-&gt;subTypeIndex()<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;objectsBegin()<sp/>&gt;<sp/>idx-&gt;objectsBegin()<sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>this-&gt;objectsEnd()<sp/>&lt;<sp/>idx-&gt;objectsEnd()<sp/>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TriggerElement::ObjectIndex::valid()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_subTypeIndex<sp/>==<sp/>invalid_sub_index<sp/>&amp;&amp;<sp/>m_objIndexBegin<sp/>==<sp/>invalid_index<sp/>&amp;&amp;<sp/>m_objIndexEnd<sp/>==<sp/>invalid_index<sp/>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="341"><highlight class="comment">MsgStream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>MsgStream&amp;<sp/>m,<sp/>const<sp/>HLT::TriggerElement::ObjectIndex&amp;<sp/>i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>m<sp/>&lt;&lt;<sp/>&quot;SubTypeIdx:<sp/>&quot;<sp/>&lt;&lt;<sp/>i.subTypeIndex()<sp/>&lt;&lt;<sp/>&quot;<sp/>begin:<sp/>&quot;<sp/>&lt;&lt;<sp/>i.objectsBegin()<sp/>&lt;&lt;<sp/>&quot;<sp/>end:<sp/>&quot;<sp/>&lt;&lt;<sp/>i.objectsEnd();</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>return<sp/>m;</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="comment">}</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">MsgStream&amp;<sp/>operator&lt;&lt;<sp/>(<sp/>MsgStream&amp;<sp/>m,<sp/>const<sp/>HLT::TriggerElement&amp;<sp/>te<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>m<sp/>&lt;&lt;<sp/>&quot;TE<sp/>id:<sp/>&quot;<sp/>&lt;&lt;<sp/>te.getId()<sp/>&lt;&lt;<sp/>&quot;<sp/>ac:<sp/>&quot;<sp/>&lt;&lt;<sp/>te.getActiveState()<sp/>&lt;&lt;<sp/>&quot;<sp/>err:<sp/>&quot;<sp/>&lt;&lt;<sp/>te.getErrorState();</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>return<sp/>m;</highlight></codeline>
<codeline lineno="350"><highlight class="comment">}</highlight></codeline>
<codeline lineno="351"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/TrigNavStructure/Root/TriggerElement.cxx"/>
  </compounddef>
</doxygen>
