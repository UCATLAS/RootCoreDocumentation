<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="d0/d59/TGoodRunsList_8cxx" kind="file">
    <compoundname>TGoodRunsList.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="d0/db2/TGoodRunsList_8h" local="yes">GoodRunsLists/TGoodRunsList.h</includes>
    <includes refid="db/db8/TMsgLogger_8h" local="yes">GoodRunsLists/TMsgLogger.h</includes>
    <incdepgraph>
      <node id="134996">
        <label>string</label>
      </node>
      <node id="134995">
        <label>map</label>
      </node>
      <node id="134988">
        <label>GoodRunsLists/TGoodRunsList.h</label>
        <link refid="d0/db2/TGoodRunsList_8h_source"/>
        <childnode refid="134989" relation="include">
        </childnode>
        <childnode refid="134993" relation="include">
        </childnode>
        <childnode refid="134994" relation="include">
        </childnode>
        <childnode refid="134995" relation="include">
        </childnode>
        <childnode refid="134992" relation="include">
        </childnode>
        <childnode refid="134996" relation="include">
        </childnode>
      </node>
      <node id="134997">
        <label>GoodRunsLists/TMsgLogger.h</label>
        <link refid="db/db8/TMsgLogger_8h_source"/>
        <childnode refid="134996" relation="include">
        </childnode>
        <childnode refid="134998" relation="include">
        </childnode>
        <childnode refid="134995" relation="include">
        </childnode>
        <childnode refid="134991" relation="include">
        </childnode>
        <childnode refid="134994" relation="include">
        </childnode>
      </node>
      <node id="134989">
        <label>GoodRunsLists/TGoodRun.h</label>
        <link refid="df/d5b/TGoodRun_8h_source"/>
        <childnode refid="134990" relation="include">
        </childnode>
        <childnode refid="134991" relation="include">
        </childnode>
        <childnode refid="134992" relation="include">
        </childnode>
      </node>
      <node id="134990">
        <label>GoodRunsLists/TLumiBlockRange.h</label>
        <link refid="d9/df8/TLumiBlockRange_8h_source"/>
        <childnode refid="134991" relation="include">
        </childnode>
        <childnode refid="134992" relation="include">
        </childnode>
      </node>
      <node id="134991">
        <label>TObject.h</label>
      </node>
      <node id="134992">
        <label>vector</label>
      </node>
      <node id="134998">
        <label>sstream</label>
      </node>
      <node id="134987">
        <label>iostream</label>
      </node>
      <node id="134993">
        <label>TNamed.h</label>
      </node>
      <node id="134994">
        <label>TString.h</label>
      </node>
      <node id="134986">
        <label>/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsList.cxx</label>
        <link refid="TGoodRunsList.cxx"/>
        <childnode refid="134987" relation="include">
        </childnode>
        <childnode refid="134988" relation="include">
        </childnode>
        <childnode refid="134997" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d0/d59/TGoodRunsList_8cxx_1a24770aa18cfee086c6a31d3e33cbbaa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ClassImp</definition>
        <argsstring>(Root::TGoodRunsList) Root</argsstring>
        <name>ClassImp</name>
        <param>
          <type><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsList.cxx" line="18" bodyfile="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsList.cxx" bodystart="7" bodyend="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TGoodRunsList.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GoodRunsLists/TMsgLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">ClassImp(<ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">Root::TGoodRunsList::TGoodRunsList()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>:<sp/>std::map&lt;Int_t,TGoodRun&gt;()</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>,<sp/>TNamed(&quot;noname&quot;,&quot;notitle&quot;)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>,<sp/>m_checkGRLInfo(kFALSE)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>,<sp/>m_hasRun(kFALSE)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>,<sp/>m_hasLB(kFALSE)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>,<sp/>m_prevRun(-10)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>,<sp/>m_prevLB(-10)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">Root::TGoodRunsList::TGoodRunsList(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>:<sp/>std::map&lt;Int_t,TGoodRun&gt;()</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>,<sp/>TNamed(name,</highlight><highlight class="stringliteral">&quot;notitle&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>,<sp/>m_checkGRLInfo(kFALSE)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>,<sp/>m_hasRun(kFALSE)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>,<sp/>m_hasLB(kFALSE)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>,<sp/>m_prevRun(-10)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>,<sp/>m_prevLB(-10)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">Root::TGoodRunsList::~TGoodRunsList()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">Root::TGoodRunsList::TGoodRunsList(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>:<sp/>std::map&lt;Int_t,TGoodRun&gt;(other)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>,<sp/>TNamed(other)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>,<sp/>m_version(other.m_version)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>,<sp/>m_metadata(other.m_metadata)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>,<sp/>m_checkGRLInfo(other.m_checkGRLInfo)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>,<sp/>m_hasRun(other.m_hasRun)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>,<sp/>m_hasLB(other.m_hasLB)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>,<sp/>m_prevRun(other.m_prevRun)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>,<sp/>m_prevLB(other.m_prevLB)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">Root::TGoodRunsList::operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;other==</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,TGoodRun&gt;::operator=(other);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>TNamed::operator=(other);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>m_version<sp/>=<sp/>other.m_version;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>m_metadata<sp/>=<sp/>other.m_metadata;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>m_checkGRLInfo<sp/>=<sp/>other.m_checkGRLInfo;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>m_hasRun<sp/>=<sp/>other.m_hasRun;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>m_hasLB<sp/>=<sp/>other.m_hasLB;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>m_prevRun<sp/>=<sp/>other.m_prevRun;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>m_prevLB<sp/>=<sp/>other.m_prevLB;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*this<sp/>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">Root::TGoodRunsList::AddGRL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>version<sp/>and<sp/>metadata<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>Bool_t<sp/>same<sp/>=<sp/>this-&gt;HasSameGRLInfo(other);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_checkGRLInfo<sp/>||<sp/>other.GetCheckGRLInfo())<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>NamedLumiRanges:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Summary(kFALSE);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.Summary(kFALSE);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>adding<sp/>GoodRunsList.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>diffgrl<sp/>=<sp/>this-&gt;GetPartOnlyIn(other);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>diffgrl<sp/>goodrunslist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>diffgrl.begin();<sp/>itr!=diffgrl.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;find(itr-&gt;first)!=this-&gt;end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>overlapping<sp/>runnumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>grun<sp/>=<sp/>itr-&gt;second.GetSumWith(<sp/>this-&gt;find(itr-&gt;first)-&gt;second<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!grun.IsEmpty())<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[itr-&gt;first]<sp/>=<sp/>grun;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itr-&gt;second.IsEmpty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>store<sp/>rest<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*this)[itr-&gt;first]<sp/>=<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">Root::TGoodRunsList::GetOverlapWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="106"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>overlapgrl;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>overlapgrl.SetName(</highlight><highlight class="stringliteral">&quot;Overlap<sp/>of<sp/>GRLs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>version<sp/>and<sp/>metadata<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>Bool_t<sp/>same<sp/>=<sp/>this-&gt;HasSameGRLInfo(other);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_checkGRLInfo<sp/>||<sp/>other.GetCheckGRLInfo())<sp/>{<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>NamedLumiRanges:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Summary(kFALSE);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.Summary(kFALSE);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Returning<sp/>empty<sp/>GoodRunsList.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overlapgrl;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(same)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetName(this-&gt;GetName());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetVersion(this-&gt;GetVersion());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>overlapgrl.SetMetaData(this-&gt;GetMetaData());</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>goodruns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=this-&gt;end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.find(itr-&gt;first)!=other.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>runnumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>grun<sp/>=<sp/>itr-&gt;second.GetOverlapWith(<sp/>other.find(itr-&gt;first)-&gt;second<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!grun.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grun.Sort();<sp/></highlight><highlight class="comment">//<sp/>sort<sp/>lumiblock<sp/>ranges<sp/>before<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overlapgrl[itr-&gt;first]<sp/>=<sp/>grun;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>overlapgrl;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref></highlight></codeline>
<codeline lineno="145"><highlight class="normal">Root::TGoodRunsList::GetSumWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="146"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>sumgrl;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>sumgrl.SetName(</highlight><highlight class="stringliteral">&quot;Sum<sp/>of<sp/>GRLs&quot;</highlight><highlight class="comment">/*this-&gt;GetName()*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>version<sp/>and<sp/>metadata<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>Bool_t<sp/>same<sp/>=<sp/>this-&gt;HasSameGRLInfo(other);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_checkGRLInfo<sp/>||<sp/>other.GetCheckGRLInfo())<sp/>{<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>NamedLumiRanges:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Summary(kFALSE);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.Summary(kFALSE);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Returning<sp/>empty<sp/>GoodRunsList.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sumgrl;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(same)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>sumgrl.SetName(this-&gt;GetName());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>sumgrl.SetVersion(this-&gt;GetVersion());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>sumgrl.SetMetaData(this-&gt;GetMetaData());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>this<sp/>goodruns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>this-&gt;begin();<sp/>itr!=this-&gt;end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.find(itr-&gt;first)!=other.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>runnumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>grun<sp/>=<sp/>itr-&gt;second.GetSumWith(<sp/>other.find(itr-&gt;first)-&gt;second<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!grun.IsEmpty())<sp/>sumgrl[itr-&gt;first]<sp/>=<sp/>grun;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itr-&gt;second.IsEmpty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>store<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumgrl[itr-&gt;first]<sp/>=<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>remaining<sp/>other<sp/>goodruns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>other.begin();<sp/>itr!=other.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sumgrl.find(itr-&gt;first)==sumgrl.end()<sp/>&amp;&amp;<sp/>!itr-&gt;second.IsEmpty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>remaining<sp/>runnumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sumgrl[itr-&gt;first]<sp/>=<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sumgrl;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref></highlight></codeline>
<codeline lineno="190"><highlight class="normal">Root::TGoodRunsList::GetPartOnlyIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="191"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other.GetPartNotIn(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref></highlight></codeline>
<codeline lineno="197"><highlight class="normal">Root::TGoodRunsList::GetPartNotIn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="198"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>notinother;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>notinother.SetName(</highlight><highlight class="stringliteral">&quot;Difference<sp/>of<sp/>GRLs&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>version<sp/>and<sp/>metadata<sp/>are<sp/>identical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>Bool_t<sp/>same<sp/>=<sp/>this-&gt;HasSameGRLInfo(other);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_checkGRLInfo<sp/>||<sp/>other.GetCheckGRLInfo())<sp/>{<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>NamedLumiRanges:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;Summary(kFALSE);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other.Summary(kFALSE);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kWARNING<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Returning<sp/>empty<sp/>GoodRunsList.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notinother;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(same)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>notinother.SetName(this-&gt;GetName());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>notinother.SetVersion(this-&gt;GetVersion());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>notinother.SetMetaData(this-&gt;GetMetaData());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>to<sp/>store<sp/>this<sp/>goodrun<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>this-&gt;begin();<sp/>itr!=this-&gt;end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.find(itr-&gt;first)!=other.end())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>check<sp/>runnumbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>notinrun<sp/>=<sp/>itr-&gt;second.GetPartNotIn(<sp/>other.find(itr-&gt;first)-&gt;second<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!notinrun.IsEmpty())<sp/>notinother[itr-&gt;first]<sp/>=<sp/>notinrun;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itr-&gt;second.IsEmpty())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>store<sp/>difference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>notinother[itr-&gt;first]<sp/>=<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>notinother;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal">Root::TGoodRunsList::HasRun(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>runnr<sp/>)</highlight><highlight class="keyword"><sp/><sp/>const</highlight></codeline>
<codeline lineno="237"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>searched<sp/>same<sp/>as<sp/>previous<sp/>run?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>runnr==m_prevRun<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasRun;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rationale:<sp/>I<sp/>need<sp/>to<sp/>reset<sp/>the<sp/>previous<sp/>lumiblock<sp/>here<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>to<sp/>ensure<sp/>that<sp/>the<sp/>first<sp/>lumiblock<sp/>on<sp/>each<sp/>run<sp/>gets<sp/>tested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>m_prevRun=runnr;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>m_prevLB<sp/>=<sp/>-10;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>m_hasRun<sp/>=<sp/>(<sp/>this-&gt;find(runnr)!=this-&gt;end()<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasRun;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="254"><highlight class="normal">Root::TGoodRunsList::HasRunLumiBlock(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>runnr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>lumiblocknr<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="255"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>Bool_t<sp/>pass<sp/>=<sp/>kFALSE;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;HasRun(runnr))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rationale:<sp/>this<sp/>uses<sp/>the<sp/>cached<sp/>result<sp/>of<sp/>the<sp/>last<sp/>lumi-block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>query.<sp/><sp/>if<sp/>we<sp/>switched<sp/>runs,<sp/>m_prevLB<sp/>will<sp/>have<sp/>been<sp/>set<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>an<sp/>invalid<sp/>value<sp/>in<sp/>HasRun<sp/>to<sp/>force<sp/>a<sp/>re-read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lumiblocknr==m_prevLB)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasLB;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>m_prevLB<sp/>=<sp/>lumiblocknr;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>m_hasLB<sp/><sp/>=<sp/>(this-&gt;find(runnr))-&gt;second.HasLB(<sp/>lumiblocknr<sp/>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>pass<sp/>=<sp/>m_hasLB;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pass;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal">Root::TGoodRunsList::HasTriggerInfo()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="277"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>itr<sp/>=<sp/>m_metadata.begin();<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=m_metadata.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>triggername<sp/>=<sp/>itr-&gt;first;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>triggername.ToLower();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triggername.BeginsWith(</highlight><highlight class="stringliteral">&quot;trigger&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>itr-&gt;second.Length()&gt;0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">Bool_t<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal">Root::TGoodRunsList::HasOverlapWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verb)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="290"><highlight class="keyword"></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d0c/classRoot_1_1TGoodRunsList" kindref="compound">Root::TGoodRunsList</ref><sp/>overlapgrl<sp/>=<sp/>this-&gt;GetOverlapWith(other);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmpty<sp/>=<sp/>overlapgrl.IsEmpty();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isEmpty<sp/>&amp;&amp;<sp/>verb)<sp/>overlapgrl.Summary(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!isEmpty;<sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">Root::TGoodRunsList::Summary(Bool_t<sp/>verbose<sp/></highlight><highlight class="comment">/*=<sp/>kFALSE*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TNamed<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>Print();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Versioning<sp/>and<sp/>metadata<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Version:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_version<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>titr<sp/>=<sp/>m_metadata.begin();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(titr<sp/>=<sp/>m_metadata.begin();<sp/>titr!=m_metadata.end();<sp/>++titr)<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Metadata:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(titr-&gt;first)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(titr-&gt;second)<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kINFO<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>runs:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;size()<sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Info<sp/>about<sp/>runs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>itr-&gt;second.Summary();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">Root::TGoodRunsList::GetRunlist()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="325"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>runlist;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>runlist.push_back(itr-&gt;first);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>runlist;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Root::TGoodRun&gt;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">Root::TGoodRunsList::GetGoodRuns()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="338"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>std::vector&lt;Root::TGoodRun&gt;<sp/>runlist;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>std::map&lt;Int_t,Root::TGoodRun&gt;::const_iterator<sp/>end<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=end;<sp/>++itr)<sp/>runlist.push_back(itr-&gt;second);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>runlist;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">Root::TGoodRunsList::GetTriggerList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="351"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>triggerchains;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>itr<sp/>=<sp/>m_metadata.begin();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=m_metadata.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>triggername<sp/>=<sp/>itr-&gt;first;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>triggername.ToLower();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(triggername.BeginsWith(</highlight><highlight class="stringliteral">&quot;trigger&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>itr-&gt;second.Length()&gt;0)<sp/>triggerchains.push_back(itr-&gt;second.Data());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>triggerchains;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">Root::TGoodRunsList::GetStreamList()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="366"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>streamlist;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>itr<sp/>=<sp/>m_metadata.begin();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=m_metadata.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>TString<sp/>streamname<sp/>=<sp/>itr-&gt;first;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>streamname.ToLower();<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(streamname.BeginsWith(</highlight><highlight class="stringliteral">&quot;stream&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>itr-&gt;second.Length()&gt;0)<sp/>streamlist.push_back(itr-&gt;second.Data());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>streamlist;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="df/d0c/classRoot_1_1TGoodRunsList_1ad57ffc3186e8782b8e44184b4daecdc3" kindref="member">Root::TGoodRunsList::HasSameGRLInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TGoodRunsList&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="381"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>TMsgLogger<sp/>m_logger(</highlight><highlight class="stringliteral">&quot;TGoodRunsList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>Bool_t<sp/>same(kTRUE);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>same<sp/>=<sp/>same<sp/>&amp;&amp;<sp/>(TString(this-&gt;GetName())==TString(other.GetName()))<sp/>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kDEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>names:<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>other.GetName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>same<sp/>=<sp/>same<sp/>&amp;&amp;<sp/>(this-&gt;GetVersion()==other.GetVersion())<sp/>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kDEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>versions:<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;GetVersion()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>other.GetVersion()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kFALSE;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>mitr<sp/>=<sp/>this-&gt;GetMetaData().find(</highlight><highlight class="stringliteral">&quot;RQTSVNVersion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>oitr<sp/>=<sp/>other.GetMetaData().find(</highlight><highlight class="stringliteral">&quot;RQTSVNVersion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mitr==this-&gt;GetMetaData().end()<sp/>&amp;&amp;<sp/>oitr==other.GetMetaData().end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>RQ<sp/>version<sp/>missing<sp/>from<sp/>both<sp/>grls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mitr!=this-&gt;GetMetaData().end()<sp/>&amp;&amp;<sp/>oitr!=other.GetMetaData().end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>same<sp/>=<sp/>same<sp/>&amp;&amp;<sp/>(<sp/>mitr-&gt;second==oitr-&gt;second<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{<sp/>m_logger<sp/>&lt;&lt;<sp/>kDEBUG<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>run<sp/>query<sp/>versions:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mitr-&gt;first</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mitr-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>oitr-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GEndl;<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>same=kFALSE;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>version<sp/>is<sp/>missing<sp/>from<sp/>one<sp/>grl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>same<sp/>=<sp/>same<sp/>&amp;&amp;<sp/>(this-&gt;GetMetaData().size()==other.GetMetaData().size())<sp/>;</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>if<sp/>(!same)<sp/>{<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/>m_logger<sp/>&lt;&lt;<sp/>kDEBUG<sp/>&lt;&lt;<sp/>&quot;Incompatible<sp/>metadata<sp/>sizes:<sp/>&lt;&quot;<sp/>&lt;&lt;<sp/>this-&gt;GetMetaData().size()<sp/>&lt;&lt;<sp/>&quot;&gt;<sp/>&lt;&quot;<sp/>&lt;&lt;<sp/>other.GetMetaData().size()<sp/>&lt;&lt;<sp/>&quot;&gt;&quot;<sp/>&lt;&lt;<sp/>GEndl;<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>kFALSE;</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>std::map&lt;TString,TString&gt;::const_iterator<sp/>mitr<sp/>=<sp/>this-&gt;GetMetaData().begin();</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>for(;<sp/>mitr!=this-&gt;GetMetaData().end()<sp/>&amp;&amp;<sp/>same;<sp/>++mitr)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(other.GetMetaData().find(mitr-&gt;first)!=other.GetMetaData().end())<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>=<sp/>same<sp/>&amp;&amp;<sp/>(<sp/>mitr-&gt;second==(other.GetMetaData().find(mitr-&gt;first))-&gt;second<sp/>);</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!same)<sp/>{<sp/>m_logger<sp/>&lt;&lt;<sp/>kDEBUG<sp/>&lt;&lt;<sp/>&quot;Incompatible<sp/>metadata:<sp/>&quot;<sp/>&lt;&lt;<sp/>mitr-&gt;first<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>:<sp/>&lt;&quot;<sp/>&lt;&lt;<sp/>mitr-&gt;second<sp/>&lt;&lt;<sp/>&quot;&gt;<sp/>&lt;&quot;<sp/>&lt;&lt;<sp/>(other.GetMetaData().find(mitr-&gt;first))-&gt;second<sp/>&lt;&lt;<sp/>&quot;&gt;&quot;<sp/>&lt;&lt;<sp/>GEndl;<sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>same=kFALSE;<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>same;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">Bool_t</highlight></codeline>
<codeline lineno="431"><highlight class="normal">Root::TGoodRunsList::IsEmpty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="432"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kTRUE;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>Bool_t<sp/>isEmpty(kTRUE);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>Int_t,<sp/>TGoodRun<sp/>&gt;::const_iterator<sp/>litr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>litr!=this-&gt;end()<sp/>&amp;&amp;<sp/>isEmpty;<sp/>++litr)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>isEmpty<sp/>=<sp/>isEmpty<sp/>&amp;&amp;<sp/>litr-&gt;second.IsEmpty();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isEmpty;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TString</highlight></codeline>
<codeline lineno="445"><highlight class="normal">Root::TGoodRunsList::GetSuggestedName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="446"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;IsEmpty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;grl_empty&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>Int_t<sp/>beginrun(-1),<sp/>endrun(-1),<sp/>beginlb(-1),<sp/>endlb(-1);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>begingr<sp/>=<sp/>this-&gt;begin()-&gt;second;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref><sp/>endgr<sp/><sp/><sp/>=<sp/>this-&gt;rbegin()-&gt;second;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!begingr.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>beginrun<sp/>=<sp/>begingr.GetRunNumber();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>beginlb<sp/>=<sp/>begingr.begin()-&gt;Begin();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!endgr.IsEmpty())<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>endrun<sp/>=<sp/>endgr.GetRunNumber();</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>endlb<sp/>=<sp/>endgr.rbegin()-&gt;End();<sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Form(</highlight><highlight class="stringliteral">&quot;grl_%d.%d-%d.%d&quot;</highlight><highlight class="normal">,beginrun,beginlb,endrun,endlb);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal">Root::TGoodRunsList::AddRunLumiBlock(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>runnr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int_t&amp;<sp/>lumiblocknr<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runnr&lt;0<sp/>||<sp/>lumiblocknr&lt;0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;HasRunLumiBlock(runnr,lumiblocknr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>Int_t,<sp/>TGoodRun<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>this-&gt;find(runnr);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itr==this-&gt;end())<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;insert(<sp/>std::pair&lt;<sp/>Int_t,<sp/>TGoodRun<sp/>&gt;(runnr,<ref refid="d9/dad/classRoot_1_1TGoodRun" kindref="compound">Root::TGoodRun</ref>(runnr))<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>this-&gt;find(runnr);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>itr-&gt;second.AddLB(lumiblocknr);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal">Root::TGoodRunsList::Compress()</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>std::map&lt;<sp/>Int_t,<sp/>TGoodRun<sp/>&gt;::iterator<sp/>itr<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr!=this-&gt;end();<sp/>++itr)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>itr-&gt;second.Compress();</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/cvmfs/atlas.cern.ch/repo/sw/ASG/AnalysisBase/2.4.28/GoodRunsLists/Root/TGoodRunsList.cxx"/>
  </compounddef>
</doxygen>
